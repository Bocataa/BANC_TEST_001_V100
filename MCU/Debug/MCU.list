
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  0800be18  0800be18  0000ce18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb50  0800cb50  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cb50  0800cb50  0000db50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb58  0800cb58  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb58  0800cb58  0000db58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb5c  0800cb5c  0000db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cb60  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f38  200001d8  0800cd38  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002110  0800cd38  0000f110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb71  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409a  00000000  00000000  0002ad72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001459  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2ae  00000000  00000000  00031bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fac5  00000000  00000000  0004de87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f280  00000000  00000000  0006d94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cbcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d0  00000000  00000000  0010cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00114ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be00 	.word	0x0800be00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800be00 	.word	0x0800be00

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__gesf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpsf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__lesf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpsf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b56:	d011      	beq.n	8000b7c <__cmpsf2+0x40>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5e:	bf18      	it	ne
 8000b60:	ea90 0f01 	teqne	r0, r1
 8000b64:	bf58      	it	pl
 8000b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6a:	bf88      	it	hi
 8000b6c:	17c8      	asrhi	r0, r1, #31
 8000b6e:	bf38      	it	cc
 8000b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b74:	bf18      	it	ne
 8000b76:	f040 0001 	orrne.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	d102      	bne.n	8000b88 <__cmpsf2+0x4c>
 8000b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b86:	d105      	bne.n	8000b94 <__cmpsf2+0x58>
 8000b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b8c:	d1e4      	bne.n	8000b58 <__cmpsf2+0x1c>
 8000b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b92:	d0e1      	beq.n	8000b58 <__cmpsf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cfrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	e7ff      	b.n	8000ba4 <__aeabi_cfcmpeq>

08000ba4 <__aeabi_cfcmpeq>:
 8000ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba6:	f7ff ffc9 	bl	8000b3c <__cmpsf2>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	bf48      	it	mi
 8000bae:	f110 0f00 	cmnmi.w	r0, #0
 8000bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb4 <__aeabi_fcmpeq>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff fff4 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2001      	moveq	r0, #1
 8000bc0:	2000      	movne	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_fcmplt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffea 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmple>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffe0 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000be4:	bf94      	ite	ls
 8000be6:	2001      	movls	r0, #1
 8000be8:	2000      	movhi	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fcmpge>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffd2 	bl	8000b9c <__aeabi_cfrcmple>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmpgt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffc8 	bl	8000b9c <__aeabi_cfrcmple>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff fed5 	bl	80009d0 <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fc4b 	bl	80004ec <__aeabi_dmul>
 8000c56:	f7ff fef9 	bl	8000a4c <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fbcc 	bl	80003f8 <__aeabi_ui2d>
 8000c60:	2200      	movs	r2, #0
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c64:	f7ff fc42 	bl	80004ec <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fa84 	bl	800017c <__aeabi_dsub>
 8000c74:	f7ff feea 	bl	8000a4c <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <StateMachineTask>:

//---------------------------------------------------------------- Prototypes fonctions
void parse_data_STS(char *buffer, TrameDataSTS *data);

void StateMachineTask(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0c6      	sub	sp, #280	@ 0x118
 8000c88:	af00      	add	r7, sp, #0
    static bool action_done = 0;
    static bool bp_pressed = 0;

    //--------------------------- TRANSITIONS
    switch (state)
 8000c8a:	4bb2      	ldr	r3, [pc, #712]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b0b      	cmp	r3, #11
 8000c90:	f200 8288 	bhi.w	80011a4 <StateMachineTask+0x520>
 8000c94:	a201      	add	r2, pc, #4	@ (adr r2, 8000c9c <StateMachineTask+0x18>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000ccd 	.word	0x08000ccd
 8000ca0:	08000d2d 	.word	0x08000d2d
 8000ca4:	08000d83 	.word	0x08000d83
 8000ca8:	08000e5f 	.word	0x08000e5f
 8000cac:	08000f19 	.word	0x08000f19
 8000cb0:	08001035 	.word	0x08001035
 8000cb4:	080010db 	.word	0x080010db
 8000cb8:	08000ccd 	.word	0x08000ccd
 8000cbc:	08000ccd 	.word	0x08000ccd
 8000cc0:	08000ccd 	.word	0x08000ccd
 8000cc4:	08000ccd 	.word	0x08000ccd
 8000cc8:	08000ccd 	.word	0x08000ccd
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin))
 8000ccc:	2120      	movs	r1, #32
 8000cce:	48a2      	ldr	r0, [pc, #648]	@ (8000f58 <StateMachineTask+0x2d4>)
 8000cd0:	f002 faec 	bl	80032ac <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d111      	bne.n	8000cfe <StateMachineTask+0x7a>
        {
        	if(state < 10){
 8000cda:	4b9e      	ldr	r3, [pc, #632]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d806      	bhi.n	8000cf0 <StateMachineTask+0x6c>
        		state++;
 8000ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b9a      	ldr	r3, [pc, #616]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e002      	b.n	8000cf6 <StateMachineTask+0x72>
        	}
        	else{
        		state = 0;
 8000cf0:	4b98      	ldr	r3, [pc, #608]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
        	}

            action_done = 0;
 8000cf6:	4b99      	ldr	r3, [pc, #612]	@ (8000f5c <StateMachineTask+0x2d8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
        else if (!HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) && state > 0)
        {
            state--;
            action_done = 0;
        }
        break;
 8000cfc:	e245      	b.n	800118a <StateMachineTask+0x506>
        else if (!HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) && state > 0)
 8000cfe:	2140      	movs	r1, #64	@ 0x40
 8000d00:	4895      	ldr	r0, [pc, #596]	@ (8000f58 <StateMachineTask+0x2d4>)
 8000d02:	f002 fad3 	bl	80032ac <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f040 823e 	bne.w	800118a <StateMachineTask+0x506>
 8000d0e:	4b91      	ldr	r3, [pc, #580]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8239 	beq.w	800118a <StateMachineTask+0x506>
            state--;
 8000d18:	4b8e      	ldr	r3, [pc, #568]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b8c      	ldr	r3, [pc, #560]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000d22:	701a      	strb	r2, [r3, #0]
            action_done = 0;
 8000d24:	4b8d      	ldr	r3, [pc, #564]	@ (8000f5c <StateMachineTask+0x2d8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
        break;
 8000d2a:	e22e      	b.n	800118a <StateMachineTask+0x506>
    case 1:
        Check_UART1_Timeout(); // Permer de vérifier si on a fini de recevoir le message et retoure message_complete1
 8000d2c:	f001 fd0c 	bl	8002748 <Check_UART1_Timeout>

        if (message_complete1)
 8000d30:	4b8b      	ldr	r3, [pc, #556]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 822a 	beq.w	800118e <StateMachineTask+0x50a>
        {
            message_complete1 = 0;
 8000d3a:	4b89      	ldr	r3, [pc, #548]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

            char expected[20];
            sprintf(expected, "PER = %s", per_value);
 8000d40:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000d44:	4a87      	ldr	r2, [pc, #540]	@ (8000f64 <StateMachineTask+0x2e0>)
 8000d46:	4988      	ldr	r1, [pc, #544]	@ (8000f68 <StateMachineTask+0x2e4>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 fbd9 	bl	8008500 <siprintf>

            if (strstr((char *)rx_buffer1, expected) != NULL)
 8000d4e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4885      	ldr	r0, [pc, #532]	@ (8000f6c <StateMachineTask+0x2e8>)
 8000d56:	f007 fcfd 	bl	8008754 <strstr>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00c      	beq.n	8000d7a <StateMachineTask+0xf6>
            {
                send_UART3("PER VALIDE --> Étape suivante\n");
 8000d60:	4883      	ldr	r0, [pc, #524]	@ (8000f70 <StateMachineTask+0x2ec>)
 8000d62:	f001 fc23 	bl	80025ac <send_UART3>
                // memset(rx_buffer1, 0, RX_BUFFER1_SIZE ); // On reset notre buffer par sécurité
                state++;
 8000d66:	4b7b      	ldr	r3, [pc, #492]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b79      	ldr	r3, [pc, #484]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000d70:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8000d72:	4b7a      	ldr	r3, [pc, #488]	@ (8000f5c <StateMachineTask+0x2d8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
            else
            {
                send_UART3("Valeur différente. Entrez à nouveau le PER :\n");
            }
        }
        break;
 8000d78:	e209      	b.n	800118e <StateMachineTask+0x50a>
                send_UART3("Valeur différente. Entrez à nouveau le PER :\n");
 8000d7a:	487e      	ldr	r0, [pc, #504]	@ (8000f74 <StateMachineTask+0x2f0>)
 8000d7c:	f001 fc16 	bl	80025ac <send_UART3>
        break;
 8000d80:	e205      	b.n	800118e <StateMachineTask+0x50a>

    case 2:
        Check_UART1_Timeout();
 8000d82:	f001 fce1 	bl	8002748 <Check_UART1_Timeout>
        if (message_complete1)
 8000d86:	4b76      	ldr	r3, [pc, #472]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8201 	beq.w	8001192 <StateMachineTask+0x50e>
        {
            message_complete1 = 0;
 8000d90:	4b73      	ldr	r3, [pc, #460]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

            TrameDataSTS data = {0};
 8000d96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d9a:	226c      	movs	r2, #108	@ 0x6c
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 fc41 	bl	8008626 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000da4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000da8:	4619      	mov	r1, r3
 8000daa:	4870      	ldr	r0, [pc, #448]	@ (8000f6c <StateMachineTask+0x2e8>)
 8000dac:	f000 fc96 	bl	80016dc <parse_data_STS>

            bool acc_ok = false;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
            bool bat_ok = false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

            // Vérification ACC
            if (data.acc >= 8.5 && data.acc <= 10.0)
 8000dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000dc0:	496d      	ldr	r1, [pc, #436]	@ (8000f78 <StateMachineTask+0x2f4>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff14 	bl	8000bf0 <__aeabi_fcmpge>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00f      	beq.n	8000dee <StateMachineTask+0x16a>
 8000dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000dd2:	496a      	ldr	r1, [pc, #424]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff01 	bl	8000bdc <__aeabi_fcmple>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <StateMachineTask+0x16a>
            {
                send_UART3("Accu OK\n");
 8000de0:	4867      	ldr	r0, [pc, #412]	@ (8000f80 <StateMachineTask+0x2fc>)
 8000de2:	f001 fbe3 	bl	80025ac <send_UART3>
                acc_ok = true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8000dec:	e002      	b.n	8000df4 <StateMachineTask+0x170>
            }
            else
            {
                send_UART3("Accu NOK : Valeur hors plage !!\n");
 8000dee:	4865      	ldr	r0, [pc, #404]	@ (8000f84 <StateMachineTask+0x300>)
 8000df0:	f001 fbdc 	bl	80025ac <send_UART3>
            }

            // Vérification BAT
            if (data.bat >= 11.5 && data.bat <= 13.0)
 8000df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000df8:	4963      	ldr	r1, [pc, #396]	@ (8000f88 <StateMachineTask+0x304>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fef8 	bl	8000bf0 <__aeabi_fcmpge>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00f      	beq.n	8000e26 <StateMachineTask+0x1a2>
 8000e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e0a:	4960      	ldr	r1, [pc, #384]	@ (8000f8c <StateMachineTask+0x308>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fee5 	bl	8000bdc <__aeabi_fcmple>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <StateMachineTask+0x1a2>
            {
                send_UART3("Tension batterie OK\n");
 8000e18:	485d      	ldr	r0, [pc, #372]	@ (8000f90 <StateMachineTask+0x30c>)
 8000e1a:	f001 fbc7 	bl	80025ac <send_UART3>
                bat_ok = true;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000e24:	e002      	b.n	8000e2c <StateMachineTask+0x1a8>
            }
            else
            {
                send_UART3("Tension batterie NOK : Valeur hors plage !!\n");
 8000e26:	485b      	ldr	r0, [pc, #364]	@ (8000f94 <StateMachineTask+0x310>)
 8000e28:	f001 fbc0 	bl	80025ac <send_UART3>
            }

            // Transition si tout est bon
            if (/*acc_ok && */ bat_ok)
 8000e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d010      	beq.n	8000e56 <StateMachineTask+0x1d2>
            {
                send_UART3("STS OK --> Etape suivante\n");
 8000e34:	4858      	ldr	r0, [pc, #352]	@ (8000f98 <StateMachineTask+0x314>)
 8000e36:	f001 fbb9 	bl	80025ac <send_UART3>
                osDelay(500);
 8000e3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3e:	f004 fc31 	bl	80056a4 <osDelay>
                action_done = 0;
 8000e42:	4b46      	ldr	r3, [pc, #280]	@ (8000f5c <StateMachineTask+0x2d8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
                state++;
 8000e48:	4b42      	ldr	r3, [pc, #264]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b40      	ldr	r3, [pc, #256]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000e52:	701a      	strb	r2, [r3, #0]
            else
            {
                send_UART3("STS invalide. Corrigez les erreurs ci-dessus.\n");
            }
        }
        break;
 8000e54:	e19d      	b.n	8001192 <StateMachineTask+0x50e>
                send_UART3("STS invalide. Corrigez les erreurs ci-dessus.\n");
 8000e56:	4851      	ldr	r0, [pc, #324]	@ (8000f9c <StateMachineTask+0x318>)
 8000e58:	f001 fba8 	bl	80025ac <send_UART3>
        break;
 8000e5c:	e199      	b.n	8001192 <StateMachineTask+0x50e>

    case 3: // DIPS OFF
        Check_UART1_Timeout();
 8000e5e:	f001 fc73 	bl	8002748 <Check_UART1_Timeout>
        if (message_complete1)
 8000e62:	4b3f      	ldr	r3, [pc, #252]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8195 	beq.w	8001196 <StateMachineTask+0x512>
        {
            message_complete1 = 0;
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]

            bool dips_ok = true;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

            TrameDataSTS data = {0};
 8000e78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e7c:	226c      	movs	r2, #108	@ 0x6c
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 fbd0 	bl	8008626 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000e86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4837      	ldr	r0, [pc, #220]	@ (8000f6c <StateMachineTask+0x2e8>)
 8000e8e:	f000 fc25 	bl	80016dc <parse_data_STS>

            // Vérification DIP switches
            for (int i = 0; i < 8; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000e98:	e01b      	b.n	8000ed2 <StateMachineTask+0x24e>
            {
                if (data.dips[i])
 8000e9a:	f107 0296 	add.w	r2, r7, #150	@ 0x96
 8000e9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00e      	beq.n	8000ec8 <StateMachineTask+0x244>
                {
                    dips_ok = false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
                    char msg[50];
                    sprintf(msg, "ERROR: DIP %d à ON !\n", i + 1); // On affiche l'état des DIPs en défaut
 8000eb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4939      	ldr	r1, [pc, #228]	@ (8000fa0 <StateMachineTask+0x31c>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fb20 	bl	8008500 <siprintf>
                    send_UART3(msg);
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fb72 	bl	80025ac <send_UART3>
            for (int i = 0; i < 8; i++)
 8000ec8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000ed2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	dddf      	ble.n	8000e9a <StateMachineTask+0x216>
                }
            }

            if (dips_ok)
 8000eda:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d013      	beq.n	8000f0a <StateMachineTask+0x286>
            {
                send_UART3("DIP switches OK\n");
 8000ee2:	4830      	ldr	r0, [pc, #192]	@ (8000fa4 <StateMachineTask+0x320>)
 8000ee4:	f001 fb62 	bl	80025ac <send_UART3>
                osDelay(500);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eec:	f004 fbda 	bl	80056a4 <osDelay>
                state++;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <StateMachineTask+0x2d0>)
 8000efa:	701a      	strb	r2, [r3, #0]
                bp_pressed = 0;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <StateMachineTask+0x324>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <StateMachineTask+0x2d8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
            {
                send_UART3("DIP switches NOK : Tous les DIPs ne sont pas à OFF, mettez les à OFF et rappuyez sur le bouton\n");
                bp_pressed = 0;
            }
        }
        break;
 8000f08:	e145      	b.n	8001196 <StateMachineTask+0x512>
                send_UART3("DIP switches NOK : Tous les DIPs ne sont pas à OFF, mettez les à OFF et rappuyez sur le bouton\n");
 8000f0a:	4828      	ldr	r0, [pc, #160]	@ (8000fac <StateMachineTask+0x328>)
 8000f0c:	f001 fb4e 	bl	80025ac <send_UART3>
                bp_pressed = 0;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <StateMachineTask+0x324>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
        break;
 8000f16:	e13e      	b.n	8001196 <StateMachineTask+0x512>

    case 4: // DIPS ON
        Check_UART1_Timeout();
 8000f18:	f001 fc16 	bl	8002748 <Check_UART1_Timeout>
        if (message_complete1)
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 813a 	beq.w	800119a <StateMachineTask+0x516>
        {
            message_complete1 = 0;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <StateMachineTask+0x2dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]

            bool dips_ok = true;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

            TrameDataSTS data = {0};
 8000f32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f36:	226c      	movs	r2, #108	@ 0x6c
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fb73 	bl	8008626 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000f40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f44:	4619      	mov	r1, r3
 8000f46:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <StateMachineTask+0x2e8>)
 8000f48:	f000 fbc8 	bl	80016dc <parse_data_STS>

            // Vérification DIP switches
            for (int i = 0; i < 8; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000f52:	e04c      	b.n	8000fee <StateMachineTask+0x36a>
 8000f54:	200001f4 	.word	0x200001f4
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	20000201 	.word	0x20000201
 8000f60:	2000036c 	.word	0x2000036c
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	0800be18 	.word	0x0800be18
 8000f6c:	20000370 	.word	0x20000370
 8000f70:	0800be24 	.word	0x0800be24
 8000f74:	0800be44 	.word	0x0800be44
 8000f78:	41080000 	.word	0x41080000
 8000f7c:	41200000 	.word	0x41200000
 8000f80:	0800be78 	.word	0x0800be78
 8000f84:	0800be84 	.word	0x0800be84
 8000f88:	41380000 	.word	0x41380000
 8000f8c:	41500000 	.word	0x41500000
 8000f90:	0800bea8 	.word	0x0800bea8
 8000f94:	0800bec0 	.word	0x0800bec0
 8000f98:	0800bef0 	.word	0x0800bef0
 8000f9c:	0800bf0c 	.word	0x0800bf0c
 8000fa0:	0800bf3c 	.word	0x0800bf3c
 8000fa4:	0800bf54 	.word	0x0800bf54
 8000fa8:	20000202 	.word	0x20000202
 8000fac:	0800bf68 	.word	0x0800bf68
            {
                if (!data.dips[i])
 8000fb0:	f107 0296 	add.w	r2, r7, #150	@ 0x96
 8000fb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00e      	beq.n	8000fe4 <StateMachineTask+0x360>
                {
                    dips_ok = false;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
                    char msg[50];
                    sprintf(msg, "ERROR: DIP %d à OFF !\n", i + 1); // On affiche l'état des DIPs en défaut
 8000fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	49a7      	ldr	r1, [pc, #668]	@ (8001274 <StateMachineTask+0x5f0>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fa92 	bl	8008500 <siprintf>
                    send_UART3(msg);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fae4 	bl	80025ac <send_UART3>
            for (int i = 0; i < 8; i++)
 8000fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	dddc      	ble.n	8000fb0 <StateMachineTask+0x32c>
                }
            }

            if (dips_ok)
 8000ff6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d013      	beq.n	8001026 <StateMachineTask+0x3a2>
            {
                send_UART3("DIP switches OK\n");
 8000ffe:	489e      	ldr	r0, [pc, #632]	@ (8001278 <StateMachineTask+0x5f4>)
 8001000:	f001 fad4 	bl	80025ac <send_UART3>
                osDelay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001008:	f004 fb4c 	bl	80056a4 <osDelay>
                state++;
 800100c:	4b9b      	ldr	r3, [pc, #620]	@ (800127c <StateMachineTask+0x5f8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b99      	ldr	r3, [pc, #612]	@ (800127c <StateMachineTask+0x5f8>)
 8001016:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8001018:	4b99      	ldr	r3, [pc, #612]	@ (8001280 <StateMachineTask+0x5fc>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
                bp_pressed = 0;
 800101e:	4b99      	ldr	r3, [pc, #612]	@ (8001284 <StateMachineTask+0x600>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
            {
                send_UART3("DIP switches NOK : Tous les DIPs ne sont pas à ON, mettez les à ON et rappuyez sur le bouton\n");
                bp_pressed = 0;
            }
        }
        break;
 8001024:	e0b9      	b.n	800119a <StateMachineTask+0x516>
                send_UART3("DIP switches NOK : Tous les DIPs ne sont pas à ON, mettez les à ON et rappuyez sur le bouton\n");
 8001026:	4898      	ldr	r0, [pc, #608]	@ (8001288 <StateMachineTask+0x604>)
 8001028:	f001 fac0 	bl	80025ac <send_UART3>
                bp_pressed = 0;
 800102c:	4b95      	ldr	r3, [pc, #596]	@ (8001284 <StateMachineTask+0x600>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
        break;
 8001032:	e0b2      	b.n	800119a <StateMachineTask+0x516>

    case 5: // Entrées à OFF
        Check_UART1_Timeout();
 8001034:	f001 fb88 	bl	8002748 <Check_UART1_Timeout>
        if (message_complete1)
 8001038:	4b94      	ldr	r3, [pc, #592]	@ (800128c <StateMachineTask+0x608>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80ae 	beq.w	800119e <StateMachineTask+0x51a>
        {
            message_complete1 = 0;
 8001042:	4b92      	ldr	r3, [pc, #584]	@ (800128c <StateMachineTask+0x608>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
            bool inps_ok = true;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

            TrameDataSTS data = {0};
 800104e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001052:	226c      	movs	r2, #108	@ 0x6c
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fae5 	bl	8008626 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 800105c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001060:	4619      	mov	r1, r3
 8001062:	488b      	ldr	r0, [pc, #556]	@ (8001290 <StateMachineTask+0x60c>)
 8001064:	f000 fb3a 	bl	80016dc <parse_data_STS>

            // Verification entrées
            for (int i = 0; i < 3; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800106e:	e01b      	b.n	80010a8 <StateMachineTask+0x424>
            {
                if (data.inps[i])
 8001070:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 8001074:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00e      	beq.n	800109e <StateMachineTask+0x41a>
                {
                    inps_ok = false;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                    char msg[50];
                    sprintf(msg, "ERROR: Entrée %d à ON!", i + 1); // On affiche l'état des entrées
 8001086:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4981      	ldr	r1, [pc, #516]	@ (8001294 <StateMachineTask+0x610>)
 8001090:	4618      	mov	r0, r3
 8001092:	f007 fa35 	bl	8008500 <siprintf>
                    send_UART3(msg);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fa87 	bl	80025ac <send_UART3>
            for (int i = 0; i < 3; i++)
 800109e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80010a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	dddf      	ble.n	8001070 <StateMachineTask+0x3ec>
                }
            }

            if (inps_ok)
 80010b0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d072      	beq.n	800119e <StateMachineTask+0x51a>
            {
                send_UART3("Entrées à OFF --> OK\n");
 80010b8:	4877      	ldr	r0, [pc, #476]	@ (8001298 <StateMachineTask+0x614>)
 80010ba:	f001 fa77 	bl	80025ac <send_UART3>
                osDelay(500);
 80010be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c2:	f004 faef 	bl	80056a4 <osDelay>
                state++;
 80010c6:	4b6d      	ldr	r3, [pc, #436]	@ (800127c <StateMachineTask+0x5f8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <StateMachineTask+0x5f8>)
 80010d0:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 80010d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001280 <StateMachineTask+0x5fc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80010d8:	e061      	b.n	800119e <StateMachineTask+0x51a>

    case 6: // Test entrées à ON
        Check_UART1_Timeout();
 80010da:	f001 fb35 	bl	8002748 <Check_UART1_Timeout>
        if (message_complete1)
 80010de:	4b6b      	ldr	r3, [pc, #428]	@ (800128c <StateMachineTask+0x608>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d05d      	beq.n	80011a2 <StateMachineTask+0x51e>
        {
            message_complete1 = 0;
 80010e6:	4b69      	ldr	r3, [pc, #420]	@ (800128c <StateMachineTask+0x608>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

            bool inps_ok = true;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

            send_UART3((char *)rx_buffer1); //DEBUG
 80010f2:	4867      	ldr	r0, [pc, #412]	@ (8001290 <StateMachineTask+0x60c>)
 80010f4:	f001 fa5a 	bl	80025ac <send_UART3>
            TrameDataSTS data = {0};
 80010f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fc:	226c      	movs	r2, #108	@ 0x6c
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f007 fa90 	bl	8008626 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8001106:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800110a:	4619      	mov	r1, r3
 800110c:	4860      	ldr	r0, [pc, #384]	@ (8001290 <StateMachineTask+0x60c>)
 800110e:	f000 fae5 	bl	80016dc <parse_data_STS>

            // Verification entrées
            for (int i = 0; i < 3; i++)
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001118:	e01e      	b.n	8001158 <StateMachineTask+0x4d4>
            {
                if (!data.inps[i])
 800111a:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 800111e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <StateMachineTask+0x4ca>
                {
                    inps_ok = false;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
                    char msg[50];
                    sprintf(msg, "ERROR: Entrée %d à OFF!", i + 1); // On affiche l'état des entrées
 8001136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4957      	ldr	r1, [pc, #348]	@ (800129c <StateMachineTask+0x618>)
 8001140:	4618      	mov	r0, r3
 8001142:	f007 f9dd 	bl	8008500 <siprintf>
                    send_UART3(msg);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fa2f 	bl	80025ac <send_UART3>
            for (int i = 0; i < 3; i++)
 800114e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001158:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800115c:	2b02      	cmp	r3, #2
 800115e:	dddc      	ble.n	800111a <StateMachineTask+0x496>
                }
            }

            if (inps_ok)
 8001160:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01c      	beq.n	80011a2 <StateMachineTask+0x51e>
            {
                send_UART3("Entrées à ON --> OK\n");
 8001168:	484d      	ldr	r0, [pc, #308]	@ (80012a0 <StateMachineTask+0x61c>)
 800116a:	f001 fa1f 	bl	80025ac <send_UART3>
                osDelay(500);
 800116e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001172:	f004 fa97 	bl	80056a4 <osDelay>
                state++;
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <StateMachineTask+0x5f8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <StateMachineTask+0x5f8>)
 8001180:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <StateMachineTask+0x5fc>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8001188:	e00b      	b.n	80011a2 <StateMachineTask+0x51e>
        break;
 800118a:	bf00      	nop
 800118c:	e00a      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 800118e:	bf00      	nop
 8001190:	e008      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 8001192:	bf00      	nop
 8001194:	e006      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 8001196:	bf00      	nop
 8001198:	e004      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 800119a:	bf00      	nop
 800119c:	e002      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <StateMachineTask+0x520>
        break;
 80011a2:	bf00      	nop


    }

    //--------------------------- ACTIONS
    switch (state)
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <StateMachineTask+0x5f8>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0b      	cmp	r3, #11
 80011aa:	f200 8270 	bhi.w	800168e <StateMachineTask+0xa0a>
 80011ae:	a201      	add	r2, pc, #4	@ (adr r2, 80011b4 <StateMachineTask+0x530>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011e5 	.word	0x080011e5
 80011b8:	0800123d 	.word	0x0800123d
 80011bc:	08001389 	.word	0x08001389
 80011c0:	080013bb 	.word	0x080013bb
 80011c4:	0800140b 	.word	0x0800140b
 80011c8:	0800145b 	.word	0x0800145b
 80011cc:	080014af 	.word	0x080014af
 80011d0:	080014fd 	.word	0x080014fd
 80011d4:	08001543 	.word	0x08001543
 80011d8:	08001611 	.word	0x08001611
 80011dc:	0800164b 	.word	0x0800164b
 80011e0:	08001667 	.word	0x08001667
    {
    case 0:
        HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <StateMachineTask+0x620>)
 80011ec:	f002 f875 	bl	80032da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f6:	482c      	ldr	r0, [pc, #176]	@ (80012a8 <StateMachineTask+0x624>)
 80011f8:	f002 f86f 	bl	80032da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2108      	movs	r1, #8
 8001200:	4828      	ldr	r0, [pc, #160]	@ (80012a4 <StateMachineTask+0x620>)
 8001202:	f002 f86a 	bl	80032da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800120c:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <StateMachineTask+0x620>)
 800120e:	f002 f864 	bl	80032da <HAL_GPIO_WritePin>
        if (!action_done)
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <StateMachineTask+0x5fc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f083 0301 	eor.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8238 	beq.w	8001692 <StateMachineTask+0xa0e>
        {
            send_UART3("ETAPE 0\n");
 8001222:	4822      	ldr	r0, [pc, #136]	@ (80012ac <StateMachineTask+0x628>)
 8001224:	f001 f9c2 	bl	80025ac <send_UART3>
            osDelay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f004 fa3b 	bl	80056a4 <osDelay>
            send_UART3("Appuyer sur le bouton pour commencer\n");
 800122e:	4820      	ldr	r0, [pc, #128]	@ (80012b0 <StateMachineTask+0x62c>)
 8001230:	f001 f9bc 	bl	80025ac <send_UART3>
            action_done = 1;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <StateMachineTask+0x5fc>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
        }
        break;
 800123a:	e22a      	b.n	8001692 <StateMachineTask+0xa0e>
    case 1:
        if (!action_done)
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <StateMachineTask+0x5fc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <StateMachineTask+0x5d2>
        {
            send_UART3("Entrez le PER (juste la valeur sur 8 digits)\n");
 800124a:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <StateMachineTask+0x630>)
 800124c:	f001 f9ae 	bl	80025ac <send_UART3>
            action_done = 1;
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <StateMachineTask+0x5fc>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
        }

        if (message_complete3)
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <StateMachineTask+0x634>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 821b 	beq.w	8001696 <StateMachineTask+0xa12>
        {
            message_complete3 = 0;
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <StateMachineTask+0x634>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
            // Nettoyer la chaîne des caractères \r et \n
            char cleaned_buffer[20];
            int i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            // Copier les caractères sauf \r et \n
            for (int j = 0; j < strlen((char *)rx_buffer3); j++)
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001272:	e045      	b.n	8001300 <StateMachineTask+0x67c>
 8001274:	0800bfcc 	.word	0x0800bfcc
 8001278:	0800bf54 	.word	0x0800bf54
 800127c:	200001f4 	.word	0x200001f4
 8001280:	20000201 	.word	0x20000201
 8001284:	20000202 	.word	0x20000202
 8001288:	0800bfe4 	.word	0x0800bfe4
 800128c:	2000036c 	.word	0x2000036c
 8001290:	20000370 	.word	0x20000370
 8001294:	0800c044 	.word	0x0800c044
 8001298:	0800c060 	.word	0x0800c060
 800129c:	0800c078 	.word	0x0800c078
 80012a0:	0800c094 	.word	0x0800c094
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40010800 	.word	0x40010800
 80012ac:	0800c0ac 	.word	0x0800c0ac
 80012b0:	0800c0b8 	.word	0x0800c0b8
 80012b4:	0800c0e0 	.word	0x0800c0e0
 80012b8:	200004ec 	.word	0x200004ec
            {
                if (rx_buffer3[j] != '\r' && rx_buffer3[j] != '\n')
 80012bc:	4abe      	ldr	r2, [pc, #760]	@ (80015b8 <StateMachineTask+0x934>)
 80012be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b0d      	cmp	r3, #13
 80012c8:	d015      	beq.n	80012f6 <StateMachineTask+0x672>
 80012ca:	4abb      	ldr	r2, [pc, #748]	@ (80015b8 <StateMachineTask+0x934>)
 80012cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d00e      	beq.n	80012f6 <StateMachineTask+0x672>
                {
                    cleaned_buffer[i++] = rx_buffer3[j];
 80012d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80012e2:	49b5      	ldr	r1, [pc, #724]	@ (80015b8 <StateMachineTask+0x934>)
 80012e4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80012e8:	440a      	add	r2, r1
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80012f0:	443b      	add	r3, r7
 80012f2:	f803 2c54 	strb.w	r2, [r3, #-84]
            for (int j = 0; j < strlen((char *)rx_buffer3); j++)
 80012f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80012fa:	3301      	adds	r3, #1
 80012fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001300:	48ad      	ldr	r0, [pc, #692]	@ (80015b8 <StateMachineTask+0x934>)
 8001302:	f7fe ff2f 	bl	8000164 <strlen>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800130c:	429a      	cmp	r2, r3
 800130e:	d8d5      	bhi.n	80012bc <StateMachineTask+0x638>
                }
            }
            cleaned_buffer[i] = '\0'; // Terminer la chaîne propre
 8001310:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8001314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001318:	4413      	add	r3, r2
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

            // Vérifier la longueur après nettoyage
            if (strlen(cleaned_buffer) == MAX_PER_LENGTH)
 800131e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff1e 	bl	8000164 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	2b08      	cmp	r3, #8
 800132c:	d128      	bne.n	8001380 <StateMachineTask+0x6fc>
            {
                strncpy(per_value, cleaned_buffer, MAX_PER_LENGTH);
 800132e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001332:	2208      	movs	r2, #8
 8001334:	4619      	mov	r1, r3
 8001336:	48a1      	ldr	r0, [pc, #644]	@ (80015bc <StateMachineTask+0x938>)
 8001338:	f007 f99c 	bl	8008674 <strncpy>

                char cmd[30];
                sprintf(cmd, "PER=%s\r", per_value);
 800133c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001340:	4a9e      	ldr	r2, [pc, #632]	@ (80015bc <StateMachineTask+0x938>)
 8001342:	499f      	ldr	r1, [pc, #636]	@ (80015c0 <StateMachineTask+0x93c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f007 f8db 	bl	8008500 <siprintf>
                send_UART1(cmd);
 800134a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f8b6 	bl	80024c0 <send_UART1>
                osDelay(10);
 8001354:	200a      	movs	r0, #10
 8001356:	f004 f9a5 	bl	80056a4 <osDelay>
                send_UART1(cmd);
 800135a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f8ae 	bl	80024c0 <send_UART1>
                send_UART3("PER envoyé. Attente confirmation…\n");
 8001364:	4897      	ldr	r0, [pc, #604]	@ (80015c4 <StateMachineTask+0x940>)
 8001366:	f001 f921 	bl	80025ac <send_UART3>
                osDelay(1000);
 800136a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800136e:	f004 f999 	bl	80056a4 <osDelay>
                send_UART1("PER\r");
 8001372:	4895      	ldr	r0, [pc, #596]	@ (80015c8 <StateMachineTask+0x944>)
 8001374:	f001 f8a4 	bl	80024c0 <send_UART1>
                osDelay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f004 f993 	bl	80056a4 <osDelay>
            else
            {
                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\n");
            }
        }
        break;
 800137e:	e18a      	b.n	8001696 <StateMachineTask+0xa12>
                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\n");
 8001380:	4892      	ldr	r0, [pc, #584]	@ (80015cc <StateMachineTask+0x948>)
 8001382:	f001 f913 	bl	80025ac <send_UART3>
        break;
 8001386:	e186      	b.n	8001696 <StateMachineTask+0xa12>

    case 2:
        if (!action_done)
 8001388:	4b91      	ldr	r3, [pc, #580]	@ (80015d0 <StateMachineTask+0x94c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8181 	beq.w	800169a <StateMachineTask+0xa16>
        {
            send_UART3("ETAPE 2\n");
 8001398:	488e      	ldr	r0, [pc, #568]	@ (80015d4 <StateMachineTask+0x950>)
 800139a:	f001 f907 	bl	80025ac <send_UART3>
            send_UART3("Test STS en cours ...\n");
 800139e:	488e      	ldr	r0, [pc, #568]	@ (80015d8 <StateMachineTask+0x954>)
 80013a0:	f001 f904 	bl	80025ac <send_UART3>
            osDelay(500);
 80013a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a8:	f004 f97c 	bl	80056a4 <osDelay>
            send_UART1("STS\r");
 80013ac:	488b      	ldr	r0, [pc, #556]	@ (80015dc <StateMachineTask+0x958>)
 80013ae:	f001 f887 	bl	80024c0 <send_UART1>
            action_done = 1;
 80013b2:	4b87      	ldr	r3, [pc, #540]	@ (80015d0 <StateMachineTask+0x94c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80013b8:	e16f      	b.n	800169a <StateMachineTask+0xa16>
    case 3:
        if (!action_done)
 80013ba:	4b85      	ldr	r3, [pc, #532]	@ (80015d0 <StateMachineTask+0x94c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f083 0301 	eor.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d009      	beq.n	80013dc <StateMachineTask+0x758>
        {
            send_UART3("Mettez les DIPs à OFF et appuyez sur le bouton\n");
 80013c8:	4885      	ldr	r0, [pc, #532]	@ (80015e0 <StateMachineTask+0x95c>)
 80013ca:	f001 f8ef 	bl	80025ac <send_UART3>
            osDelay(500);
 80013ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013d2:	f004 f967 	bl	80056a4 <osDelay>
            action_done = 1;
 80013d6:	4b7e      	ldr	r3, [pc, #504]	@ (80015d0 <StateMachineTask+0x94c>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
        }
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) && !bp_pressed)
 80013dc:	2120      	movs	r1, #32
 80013de:	4881      	ldr	r0, [pc, #516]	@ (80015e4 <StateMachineTask+0x960>)
 80013e0:	f001 ff64 	bl	80032ac <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8159 	bne.w	800169e <StateMachineTask+0xa1a>
 80013ec:	4b7e      	ldr	r3, [pc, #504]	@ (80015e8 <StateMachineTask+0x964>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8151 	beq.w	800169e <StateMachineTask+0xa1a>
        {
            bp_pressed = 1;
 80013fc:	4b7a      	ldr	r3, [pc, #488]	@ (80015e8 <StateMachineTask+0x964>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
            send_UART1("STS\r");
 8001402:	4876      	ldr	r0, [pc, #472]	@ (80015dc <StateMachineTask+0x958>)
 8001404:	f001 f85c 	bl	80024c0 <send_UART1>
        }

        break;
 8001408:	e149      	b.n	800169e <StateMachineTask+0xa1a>

    case 4:
        if (!action_done)
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <StateMachineTask+0x94c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <StateMachineTask+0x7a8>
        {
            send_UART3("Mettez les DIPs à ON, appuyez sur le BP reset et appuyez sur le bouton\n");
 8001418:	4874      	ldr	r0, [pc, #464]	@ (80015ec <StateMachineTask+0x968>)
 800141a:	f001 f8c7 	bl	80025ac <send_UART3>
            osDelay(500);
 800141e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001422:	f004 f93f 	bl	80056a4 <osDelay>
            action_done = 1;
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <StateMachineTask+0x94c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
        }
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) && !bp_pressed)
 800142c:	2120      	movs	r1, #32
 800142e:	486d      	ldr	r0, [pc, #436]	@ (80015e4 <StateMachineTask+0x960>)
 8001430:	f001 ff3c 	bl	80032ac <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 8133 	bne.w	80016a2 <StateMachineTask+0xa1e>
 800143c:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <StateMachineTask+0x964>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 812b 	beq.w	80016a2 <StateMachineTask+0xa1e>
        {
            bp_pressed = 1;
 800144c:	4b66      	ldr	r3, [pc, #408]	@ (80015e8 <StateMachineTask+0x964>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
            send_UART1("STS\r");
 8001452:	4862      	ldr	r0, [pc, #392]	@ (80015dc <StateMachineTask+0x958>)
 8001454:	f001 f834 	bl	80024c0 <send_UART1>
        }

        break;
 8001458:	e123      	b.n	80016a2 <StateMachineTask+0xa1e>
    case 5: // Entrées à OFF
        if (!action_done)
 800145a:	4b5d      	ldr	r3, [pc, #372]	@ (80015d0 <StateMachineTask+0x94c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 811e 	beq.w	80016a6 <StateMachineTask+0xa22>
        {
            send_UART3("ETAPE 4\n");
 800146a:	4861      	ldr	r0, [pc, #388]	@ (80015f0 <StateMachineTask+0x96c>)
 800146c:	f001 f89e 	bl	80025ac <send_UART3>
            send_UART3("Test entrees à OFF en cours...\n");
 8001470:	4860      	ldr	r0, [pc, #384]	@ (80015f4 <StateMachineTask+0x970>)
 8001472:	f001 f89b 	bl	80025ac <send_UART3>
            // Activation de toutes les entrées
            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147c:	485e      	ldr	r0, [pc, #376]	@ (80015f8 <StateMachineTask+0x974>)
 800147e:	f001 ff2c 	bl	80032da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001488:	4856      	ldr	r0, [pc, #344]	@ (80015e4 <StateMachineTask+0x960>)
 800148a:	f001 ff26 	bl	80032da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2108      	movs	r1, #8
 8001492:	4859      	ldr	r0, [pc, #356]	@ (80015f8 <StateMachineTask+0x974>)
 8001494:	f001 ff21 	bl	80032da <HAL_GPIO_WritePin>
            osDelay(1000);
 8001498:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800149c:	f004 f902 	bl	80056a4 <osDelay>
            send_UART1("STS\r");
 80014a0:	484e      	ldr	r0, [pc, #312]	@ (80015dc <StateMachineTask+0x958>)
 80014a2:	f001 f80d 	bl	80024c0 <send_UART1>
            action_done = 1;
 80014a6:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <StateMachineTask+0x94c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
        }
        break;
 80014ac:	e0fb      	b.n	80016a6 <StateMachineTask+0xa22>

    case 6: // Entrées à ON
        if (!action_done)
 80014ae:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <StateMachineTask+0x94c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f083 0301 	eor.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80f6 	beq.w	80016aa <StateMachineTask+0xa26>
        {
            send_UART3("Test entrees à ON en cours...\n");
 80014be:	484f      	ldr	r0, [pc, #316]	@ (80015fc <StateMachineTask+0x978>)
 80014c0:	f001 f874 	bl	80025ac <send_UART3>
            // Activation de toutes les entrées
            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ca:	484b      	ldr	r0, [pc, #300]	@ (80015f8 <StateMachineTask+0x974>)
 80014cc:	f001 ff05 	bl	80032da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014d6:	4843      	ldr	r0, [pc, #268]	@ (80015e4 <StateMachineTask+0x960>)
 80014d8:	f001 feff 	bl	80032da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2108      	movs	r1, #8
 80014e0:	4845      	ldr	r0, [pc, #276]	@ (80015f8 <StateMachineTask+0x974>)
 80014e2:	f001 fefa 	bl	80032da <HAL_GPIO_WritePin>
            osDelay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ea:	f004 f8db 	bl	80056a4 <osDelay>
            send_UART1("STS\r");
 80014ee:	483b      	ldr	r0, [pc, #236]	@ (80015dc <StateMachineTask+0x958>)
 80014f0:	f000 ffe6 	bl	80024c0 <send_UART1>
            action_done = 1;
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <StateMachineTask+0x94c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80014fa:	e0d6      	b.n	80016aa <StateMachineTask+0xa26>
    case 7:
    	if (!action_done)
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <StateMachineTask+0x94c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80d1 	beq.w	80016ae <StateMachineTask+0xa2a>
    	        {
    		        // On réinitialise les entrées précédemment sur ON
    		    	HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001512:	4839      	ldr	r0, [pc, #228]	@ (80015f8 <StateMachineTask+0x974>)
 8001514:	f001 fee1 	bl	80032da <HAL_GPIO_WritePin>
    		    	HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800151e:	4831      	ldr	r0, [pc, #196]	@ (80015e4 <StateMachineTask+0x960>)
 8001520:	f001 fedb 	bl	80032da <HAL_GPIO_WritePin>
    		    	HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2108      	movs	r1, #8
 8001528:	4833      	ldr	r0, [pc, #204]	@ (80015f8 <StateMachineTask+0x974>)
 800152a:	f001 fed6 	bl	80032da <HAL_GPIO_WritePin>
    		        send_UART3("Test du décompteur...\n Veuillez valider en appuyant sur le BP si toutes les leds s'allument correctement et dans le bon ordre sur le décompteur");
 800152e:	4834      	ldr	r0, [pc, #208]	@ (8001600 <StateMachineTask+0x97c>)
 8001530:	f001 f83c 	bl	80025ac <send_UART3>
    		        send_UART1("TST=1\r");
 8001534:	4833      	ldr	r0, [pc, #204]	@ (8001604 <StateMachineTask+0x980>)
 8001536:	f000 ffc3 	bl	80024c0 <send_UART1>
    		        action_done = 1;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <StateMachineTask+0x94c>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    	        }
    	        break;
 8001540:	e0b5      	b.n	80016ae <StateMachineTask+0xa2a>
    case 8: // Défauts ampoules
    	if (!action_done)
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <StateMachineTask+0x94c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <StateMachineTask+0x8de>
    	{
    		send_UART1("TST=0\r"); // On arrête le test décompteur
 8001550:	482d      	ldr	r0, [pc, #180]	@ (8001608 <StateMachineTask+0x984>)
 8001552:	f000 ffb5 	bl	80024c0 <send_UART1>
    		send_UART3("Test des ampoules ...\n\r Vérifiez que les ampoules s'éteignent et se rallument et que le défaut sur l'écran LCD de la carte corresponde bien à la bonne ampoule\n\rEnsuite appuyez sur le bouton pour valider");
 8001556:	482d      	ldr	r0, [pc, #180]	@ (800160c <StateMachineTask+0x988>)
 8001558:	f001 f828 	bl	80025ac <send_UART3>
    		action_done = 1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <StateMachineTask+0x94c>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    	}
    	HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2120      	movs	r1, #32
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <StateMachineTask+0x974>)
 8001568:	f001 feb7 	bl	80032da <HAL_GPIO_WritePin>
    	osDelay(2000);
 800156c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001570:	f004 f898 	bl	80056a4 <osDelay>
    	HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2120      	movs	r1, #32
 8001578:	481f      	ldr	r0, [pc, #124]	@ (80015f8 <StateMachineTask+0x974>)
 800157a:	f001 feae 	bl	80032da <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2140      	movs	r1, #64	@ 0x40
 8001582:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <StateMachineTask+0x974>)
 8001584:	f001 fea9 	bl	80032da <HAL_GPIO_WritePin>
    	osDelay(2000);
 8001588:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800158c:	f004 f88a 	bl	80056a4 <osDelay>
    	HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	@ 0x40
 8001594:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <StateMachineTask+0x974>)
 8001596:	f001 fea0 	bl	80032da <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	4816      	ldr	r0, [pc, #88]	@ (80015f8 <StateMachineTask+0x974>)
 80015a0:	f001 fe9b 	bl	80032da <HAL_GPIO_WritePin>
    	osDelay(2000);
 80015a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015a8:	f004 f87c 	bl	80056a4 <osDelay>
    	HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <StateMachineTask+0x974>)
 80015b2:	f001 fe92 	bl	80032da <HAL_GPIO_WritePin>
    	break;
 80015b6:	e081      	b.n	80016bc <StateMachineTask+0xa38>
 80015b8:	200004f0 	.word	0x200004f0
 80015bc:	200001f8 	.word	0x200001f8
 80015c0:	0800c110 	.word	0x0800c110
 80015c4:	0800c118 	.word	0x0800c118
 80015c8:	0800c140 	.word	0x0800c140
 80015cc:	0800c148 	.word	0x0800c148
 80015d0:	20000201 	.word	0x20000201
 80015d4:	0800c188 	.word	0x0800c188
 80015d8:	0800c194 	.word	0x0800c194
 80015dc:	0800c1ac 	.word	0x0800c1ac
 80015e0:	0800c1b4 	.word	0x0800c1b4
 80015e4:	40010800 	.word	0x40010800
 80015e8:	20000202 	.word	0x20000202
 80015ec:	0800c1e8 	.word	0x0800c1e8
 80015f0:	0800c234 	.word	0x0800c234
 80015f4:	0800c240 	.word	0x0800c240
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	0800c264 	.word	0x0800c264
 8001600:	0800c284 	.word	0x0800c284
 8001604:	0800c318 	.word	0x0800c318
 8001608:	0800c320 	.word	0x0800c320
 800160c:	0800c328 	.word	0x0800c328
    case 9: // Test cellule
    	// on remet les relais à l'état initial
    	HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2120      	movs	r1, #32
 8001614:	482c      	ldr	r0, [pc, #176]	@ (80016c8 <StateMachineTask+0xa44>)
 8001616:	f001 fe60 	bl	80032da <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	482a      	ldr	r0, [pc, #168]	@ (80016c8 <StateMachineTask+0xa44>)
 8001620:	f001 fe5b 	bl	80032da <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	4827      	ldr	r0, [pc, #156]	@ (80016c8 <StateMachineTask+0xa44>)
 800162a:	f001 fe56 	bl	80032da <HAL_GPIO_WritePin>
    	if(!action_done){
 800162e:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <StateMachineTask+0xa48>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03a      	beq.n	80016b2 <StateMachineTask+0xa2e>

    	send_UART3("Test cellule, veuillez exposé la cellule à la lumière, puis reset la carte en cachant la cellule et constatez que la luminosité est bien différente");
 800163c:	4824      	ldr	r0, [pc, #144]	@ (80016d0 <StateMachineTask+0xa4c>)
 800163e:	f000 ffb5 	bl	80025ac <send_UART3>
    	action_done = 1;
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <StateMachineTask+0xa48>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    	}
    	 break;
 8001648:	e033      	b.n	80016b2 <StateMachineTask+0xa2e>


    case 10:// Test IR
    	if(!action_done){
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <StateMachineTask+0xa48>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02e      	beq.n	80016b6 <StateMachineTask+0xa32>

    	send_UART3("Test de l'infrarouge...\n Veuillez valider en appuyant sur le BP si la télécommande fonctionne en émission et réception");
 8001658:	481e      	ldr	r0, [pc, #120]	@ (80016d4 <StateMachineTask+0xa50>)
 800165a:	f000 ffa7 	bl	80025ac <send_UART3>
    	action_done = 1;
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <StateMachineTask+0xa48>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
    	}
        break;
 8001664:	e027      	b.n	80016b6 <StateMachineTask+0xa32>
    case 11:
    	if(!action_done){
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <StateMachineTask+0xa48>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d022      	beq.n	80016ba <StateMachineTask+0xa36>
        HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800167a:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <StateMachineTask+0xa44>)
 800167c:	f001 fe2d 	bl	80032da <HAL_GPIO_WritePin>
        send_UART3("Test de l'accu...\n Veuillez vérifier que vous avez bien le message suppression batterie qui s'affiche à l'écran, si le cas validez");
 8001680:	4815      	ldr	r0, [pc, #84]	@ (80016d8 <StateMachineTask+0xa54>)
 8001682:	f000 ff93 	bl	80025ac <send_UART3>
    	action_done=1;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <StateMachineTask+0xa48>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
    	}
        break;
 800168c:	e015      	b.n	80016ba <StateMachineTask+0xa36>
    default:
        break;
 800168e:	bf00      	nop
 8001690:	e014      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 8001692:	bf00      	nop
 8001694:	e012      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 8001696:	bf00      	nop
 8001698:	e010      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 800169a:	bf00      	nop
 800169c:	e00e      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 800169e:	bf00      	nop
 80016a0:	e00c      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 80016a2:	bf00      	nop
 80016a4:	e00a      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 80016a6:	bf00      	nop
 80016a8:	e008      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 80016aa:	bf00      	nop
 80016ac:	e006      	b.n	80016bc <StateMachineTask+0xa38>
    	        break;
 80016ae:	bf00      	nop
 80016b0:	e004      	b.n	80016bc <StateMachineTask+0xa38>
    	 break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <StateMachineTask+0xa38>
        break;
 80016ba:	bf00      	nop
    }
}
 80016bc:	bf00      	nop
 80016be:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	20000201 	.word	0x20000201
 80016d0:	0800c3f8 	.word	0x0800c3f8
 80016d4:	0800c494 	.word	0x0800c494
 80016d8:	0800c510 	.word	0x0800c510

080016dc <parse_data_STS>:

//---------------------------------------------------------------- Fonctions outils
void parse_data_STS(char *buffer, TrameDataSTS *data)

{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]

    char *line = strtok(buffer, "\r\n");
 80016e6:	4994      	ldr	r1, [pc, #592]	@ (8001938 <parse_data_STS+0x25c>)
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 ffd7 	bl	800869c <strtok>
 80016ee:	62f8      	str	r0, [r7, #44]	@ 0x2c



    bool cel_val_parsed = false;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    bool cel_mode_parsed = false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a



    while (line != NULL)
 80016fc:	e112      	b.n	8001924 <parse_data_STS+0x248>

    {

        if (strncmp(line, "VER =", 5) == 0)
 80016fe:	2205      	movs	r2, #5
 8001700:	498e      	ldr	r1, [pc, #568]	@ (800193c <parse_data_STS+0x260>)
 8001702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001704:	f006 ffa4 	bl	8008650 <strncmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <parse_data_STS+0x40>

        {

            sscanf(line, "VER = %31[^\r\n]", data->ver);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	498b      	ldr	r1, [pc, #556]	@ (8001940 <parse_data_STS+0x264>)
 8001714:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001716:	f006 ff15 	bl	8008544 <siscanf>
 800171a:	e0fe      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "CRC =", 5) == 0)
 800171c:	2205      	movs	r2, #5
 800171e:	4989      	ldr	r1, [pc, #548]	@ (8001944 <parse_data_STS+0x268>)
 8001720:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001722:	f006 ff95 	bl	8008650 <strncmp>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <parse_data_STS+0x60>

        {

            sscanf(line, "CRC = %63[^\r\n]", data->crc);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3320      	adds	r3, #32
 8001730:	461a      	mov	r2, r3
 8001732:	4985      	ldr	r1, [pc, #532]	@ (8001948 <parse_data_STS+0x26c>)
 8001734:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001736:	f006 ff05 	bl	8008544 <siscanf>
 800173a:	e0ee      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "LAN =", 5) == 0)
 800173c:	2205      	movs	r2, #5
 800173e:	4983      	ldr	r1, [pc, #524]	@ (800194c <parse_data_STS+0x270>)
 8001740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001742:	f006 ff85 	bl	8008650 <strncmp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d107      	bne.n	800175c <parse_data_STS+0x80>

        {

            sscanf(line, "LAN = %15[^\r\n]", data->lan);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3340      	adds	r3, #64	@ 0x40
 8001750:	461a      	mov	r2, r3
 8001752:	497f      	ldr	r1, [pc, #508]	@ (8001950 <parse_data_STS+0x274>)
 8001754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001756:	f006 fef5 	bl	8008544 <siscanf>
 800175a:	e0de      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "ACC =", 5) == 0)
 800175c:	2205      	movs	r2, #5
 800175e:	497d      	ldr	r1, [pc, #500]	@ (8001954 <parse_data_STS+0x278>)
 8001760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001762:	f006 ff75 	bl	8008650 <strncmp>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <parse_data_STS+0xa0>

        {

            sscanf(line, "ACC = %f", &data->acc);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	3350      	adds	r3, #80	@ 0x50
 8001770:	461a      	mov	r2, r3
 8001772:	4979      	ldr	r1, [pc, #484]	@ (8001958 <parse_data_STS+0x27c>)
 8001774:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001776:	f006 fee5 	bl	8008544 <siscanf>
 800177a:	e0ce      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "BAT =", 5) == 0)
 800177c:	2205      	movs	r2, #5
 800177e:	4977      	ldr	r1, [pc, #476]	@ (800195c <parse_data_STS+0x280>)
 8001780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001782:	f006 ff65 	bl	8008650 <strncmp>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <parse_data_STS+0xc0>

        {

            sscanf(line, "BAT = %f", &data->bat);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3354      	adds	r3, #84	@ 0x54
 8001790:	461a      	mov	r2, r3
 8001792:	4973      	ldr	r1, [pc, #460]	@ (8001960 <parse_data_STS+0x284>)
 8001794:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001796:	f006 fed5 	bl	8008544 <siscanf>
 800179a:	e0be      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "CEL =", 5) == 0)
 800179c:	2205      	movs	r2, #5
 800179e:	4971      	ldr	r1, [pc, #452]	@ (8001964 <parse_data_STS+0x288>)
 80017a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80017a2:	f006 ff55 	bl	8008650 <strncmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d12b      	bne.n	8001804 <parse_data_STS+0x128>

        {

            // Essaye de parser float si pas encore fait

            if (!cel_val_parsed && sscanf(line, "CEL = %f", &data->cel_val) == 1)
 80017ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80017b0:	f083 0301 	eor.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <parse_data_STS+0xfa>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3358      	adds	r3, #88	@ 0x58
 80017be:	461a      	mov	r2, r3
 80017c0:	4969      	ldr	r1, [pc, #420]	@ (8001968 <parse_data_STS+0x28c>)
 80017c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80017c4:	f006 febe 	bl	8008544 <siscanf>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d103      	bne.n	80017d6 <parse_data_STS+0xfa>

            {

                cel_val_parsed = true;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80017d4:	e0a1      	b.n	800191a <parse_data_STS+0x23e>

            }

            // Sinon essaye de parser mode char, indépendamment

            else if (!cel_mode_parsed && sscanf(line, "CEL = %c", &data->cel_mode) == 1)
 80017d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 809a 	beq.w	800191a <parse_data_STS+0x23e>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	335c      	adds	r3, #92	@ 0x5c
 80017ea:	461a      	mov	r2, r3
 80017ec:	495f      	ldr	r1, [pc, #380]	@ (800196c <parse_data_STS+0x290>)
 80017ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80017f0:	f006 fea8 	bl	8008544 <siscanf>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	f040 808f 	bne.w	800191a <parse_data_STS+0x23e>

            {

                cel_mode_parsed = true;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001802:	e08a      	b.n	800191a <parse_data_STS+0x23e>

            }

        }

        else if (strncmp(line, "LUM =", 5) == 0)
 8001804:	2205      	movs	r2, #5
 8001806:	495a      	ldr	r1, [pc, #360]	@ (8001970 <parse_data_STS+0x294>)
 8001808:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800180a:	f006 ff21 	bl	8008650 <strncmp>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <parse_data_STS+0x148>

        {

            sscanf(line, "LUM = %c", &data->lum);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	335d      	adds	r3, #93	@ 0x5d
 8001818:	461a      	mov	r2, r3
 800181a:	4956      	ldr	r1, [pc, #344]	@ (8001974 <parse_data_STS+0x298>)
 800181c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800181e:	f006 fe91 	bl	8008544 <siscanf>
 8001822:	e07a      	b.n	800191a <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "DIP =", 5) == 0)
 8001824:	2205      	movs	r2, #5
 8001826:	4954      	ldr	r1, [pc, #336]	@ (8001978 <parse_data_STS+0x29c>)
 8001828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800182a:	f006 ff11 	bl	8008650 <strncmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d133      	bne.n	800189c <parse_data_STS+0x1c0>

        {

            char *p = line + 5;
 8001834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001836:	3305      	adds	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24

            char state[4];



            while (sscanf(p, " %d:%3s", &num, state) == 2)
 800183a:	e023      	b.n	8001884 <parse_data_STS+0x1a8>

            {

                if (num >= 1 && num <= 8)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	dd15      	ble.n	800186e <parse_data_STS+0x192>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b08      	cmp	r3, #8
 8001846:	dc12      	bgt.n	800186e <parse_data_STS+0x192>

                    data->dips[num - 1] = (strcmp(state, "ON") == 0);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	494b      	ldr	r1, [pc, #300]	@ (800197c <parse_data_STS+0x2a0>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fc7e 	bl	8000150 <strcmp>
 8001854:	4602      	mov	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3b01      	subs	r3, #1
 800185a:	2a00      	cmp	r2, #0
 800185c:	bf0c      	ite	eq
 800185e:	2201      	moveq	r2, #1
 8001860:	2200      	movne	r2, #0
 8001862:	b2d1      	uxtb	r1, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	460a      	mov	r2, r1
 800186a:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e



                char *next = strchr(p, ' ');
 800186e:	2120      	movs	r1, #32
 8001870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001872:	f006 fee0 	bl	8008636 <strchr>
 8001876:	61b8      	str	r0, [r7, #24]

                if (!next) break;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04a      	beq.n	8001914 <parse_data_STS+0x238>

                p = next + 1;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
            while (sscanf(p, " %d:%3s", &num, state) == 2)
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	f107 0214 	add.w	r2, r7, #20
 800188c:	493c      	ldr	r1, [pc, #240]	@ (8001980 <parse_data_STS+0x2a4>)
 800188e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001890:	f006 fe58 	bl	8008544 <siscanf>
 8001894:	4603      	mov	r3, r0
 8001896:	2b02      	cmp	r3, #2
 8001898:	d0d0      	beq.n	800183c <parse_data_STS+0x160>
 800189a:	e03e      	b.n	800191a <parse_data_STS+0x23e>

            }

        }

        else if (strncmp(line, "INP =", 5) == 0)
 800189c:	2205      	movs	r2, #5
 800189e:	4939      	ldr	r1, [pc, #228]	@ (8001984 <parse_data_STS+0x2a8>)
 80018a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018a2:	f006 fed5 	bl	8008650 <strncmp>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d136      	bne.n	800191a <parse_data_STS+0x23e>

        {

            char *p = line + 5;
 80018ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ae:	3305      	adds	r3, #5
 80018b0:	623b      	str	r3, [r7, #32]

            char state[4];



            while (sscanf(p, " %d:%3s", &num, state) == 2)
 80018b2:	e023      	b.n	80018fc <parse_data_STS+0x220>

            {

                if (num >= 1 && num <= 3)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd15      	ble.n	80018e6 <parse_data_STS+0x20a>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	dc12      	bgt.n	80018e6 <parse_data_STS+0x20a>

                    data->inps[num - 1] = (strcmp(state, "ON") == 0);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	492d      	ldr	r1, [pc, #180]	@ (800197c <parse_data_STS+0x2a0>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fc42 	bl	8000150 <strcmp>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2201      	moveq	r2, #1
 80018d8:	2200      	movne	r2, #0
 80018da:	b2d1      	uxtb	r1, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	460a      	mov	r2, r1
 80018e2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66



                char *next = strchr(p, ' ');
 80018e6:	2120      	movs	r1, #32
 80018e8:	6a38      	ldr	r0, [r7, #32]
 80018ea:	f006 fea4 	bl	8008636 <strchr>
 80018ee:	61f8      	str	r0, [r7, #28]

                if (!next) break;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <parse_data_STS+0x23c>

                p = next + 1;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]
            while (sscanf(p, " %d:%3s", &num, state) == 2)
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <parse_data_STS+0x2a4>)
 8001906:	6a38      	ldr	r0, [r7, #32]
 8001908:	f006 fe1c 	bl	8008544 <siscanf>
 800190c:	4603      	mov	r3, r0
 800190e:	2b02      	cmp	r3, #2
 8001910:	d0d0      	beq.n	80018b4 <parse_data_STS+0x1d8>
 8001912:	e002      	b.n	800191a <parse_data_STS+0x23e>
                if (!next) break;
 8001914:	bf00      	nop
 8001916:	e000      	b.n	800191a <parse_data_STS+0x23e>
                if (!next) break;
 8001918:	bf00      	nop

        }



        line = strtok(NULL, "\r\n");
 800191a:	4907      	ldr	r1, [pc, #28]	@ (8001938 <parse_data_STS+0x25c>)
 800191c:	2000      	movs	r0, #0
 800191e:	f006 febd 	bl	800869c <strtok>
 8001922:	62f8      	str	r0, [r7, #44]	@ 0x2c
    while (line != NULL)
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f aee9 	bne.w	80016fe <parse_data_STS+0x22>

    }

}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3730      	adds	r7, #48	@ 0x30
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0800c598 	.word	0x0800c598
 800193c:	0800c59c 	.word	0x0800c59c
 8001940:	0800c5a4 	.word	0x0800c5a4
 8001944:	0800c5b4 	.word	0x0800c5b4
 8001948:	0800c5bc 	.word	0x0800c5bc
 800194c:	0800c5cc 	.word	0x0800c5cc
 8001950:	0800c5d4 	.word	0x0800c5d4
 8001954:	0800c5e4 	.word	0x0800c5e4
 8001958:	0800c5ec 	.word	0x0800c5ec
 800195c:	0800c5f8 	.word	0x0800c5f8
 8001960:	0800c600 	.word	0x0800c600
 8001964:	0800c60c 	.word	0x0800c60c
 8001968:	0800c614 	.word	0x0800c614
 800196c:	0800c620 	.word	0x0800c620
 8001970:	0800c62c 	.word	0x0800c62c
 8001974:	0800c634 	.word	0x0800c634
 8001978:	0800c640 	.word	0x0800c640
 800197c:	0800c648 	.word	0x0800c648
 8001980:	0800c64c 	.word	0x0800c64c
 8001984:	0800c654 	.word	0x0800c654

08001988 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198c:	f000 ff34 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001990:	f000 f832 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001994:	f000 f948 	bl	8001c28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001998:	f000 f8c8 	bl	8001b2c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800199c:	f000 fd60 	bl	8002460 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019a0:	f000 fda4 	bl	80024ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019a4:	f000 fdd2 	bl	800254c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80019a8:	f000 f882 	bl	8001ab0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019ac:	f000 f8ec 	bl	8001b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019b0:	f003 fd9e 	bl	80054f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019b4:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <main+0x58>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	480a      	ldr	r0, [pc, #40]	@ (80019e4 <main+0x5c>)
 80019ba:	f003 fde1 	bl	8005580 <osThreadNew>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <main+0x60>)
 80019c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 80019c4:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <main+0x64>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <main+0x68>)
 80019ca:	f003 fdd9 	bl	8005580 <osThreadNew>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a08      	ldr	r2, [pc, #32]	@ (80019f4 <main+0x6c>)
 80019d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019d4:	f003 fdae 	bl	8005534 <osKernelStart>
 80019d8:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE END 3 */
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	0800c6a8 	.word	0x0800c6a8
 80019e4:	08001d9b 	.word	0x08001d9b
 80019e8:	200002d0 	.word	0x200002d0
 80019ec:	0800c6cc 	.word	0x0800c6cc
 80019f0:	08001d85 	.word	0x08001d85
 80019f4:	200002d4 	.word	0x200002d4

080019f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	@ 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a02:	2228      	movs	r2, #40	@ 0x28
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f006 fe0d 	bl	8008626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a36:	2301      	movs	r3, #1
 8001a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a44:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 fdb8 	bl	80035c4 <HAL_RCC_OscConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a5a:	f000 f9b7 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	230f      	movs	r3, #15
 8001a60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f824 	bl	8003ac8 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a86:	f000 f9a1 	bl	8001dcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001a8e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f9d4 	bl	8003e44 <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001aa2:	f000 f993 	bl	8001dcc <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3750      	adds	r7, #80	@ 0x50
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ac2:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <MX_ADC1_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ada:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ade:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001aee:	f000 feb5 	bl	800285c <HAL_ADC_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001af8:	f000 f968 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8001afc:	2308      	movs	r3, #8
 8001afe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_ADC1_Init+0x74>)
 8001b0e:	f000 ff7d 	bl	8002a0c <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b18:	f000 f958 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000204 	.word	0x20000204
 8001b28:	40012400 	.word	0x40012400

08001b2c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f001 fbe7 	bl	800333c <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 f92a 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000234 	.word	0x20000234
 8001b80:	40005400 	.word	0x40005400
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <MX_TIM1_Init+0x9c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd0:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bd2:	f002 f9ed 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f000 f8f6 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001bee:	f002 fb71 	bl	80042d4 <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf8:	f000 f8e8 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_TIM1_Init+0x98>)
 8001c0a:	f002 fd53 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c14:	f000 f8da 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000288 	.word	0x20000288
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a45      	ldr	r2, [pc, #276]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b43      	ldr	r3, [pc, #268]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b40      	ldr	r3, [pc, #256]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a3f      	ldr	r2, [pc, #252]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a39      	ldr	r2, [pc, #228]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <MX_GPIO_Init+0x148>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin | BUZZER_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001ca2:	4834      	ldr	r0, [pc, #208]	@ (8001d74 <MX_GPIO_Init+0x14c>)
 8001ca4:	f001 fb19 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin | LED_CEL_Pin | OUT2_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f648 0110 	movw	r1, #34832	@ 0x8810
 8001cae:	4832      	ldr	r0, [pc, #200]	@ (8001d78 <MX_GPIO_Init+0x150>)
 8001cb0:	f001 fb13 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin | LEDG_Pin | LEDY_Pin | RELAIS_ALIM_418_Pin | OUT1_Pin | OUT3_Pin | OUT4_Pin | OUT5_Pin | OUT6_Pin | OUT7_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 8001cba:	4830      	ldr	r0, [pc, #192]	@ (8001d7c <MX_GPIO_Init+0x154>)
 8001cbc:	f001 fb0d 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin | BUZZER_Pin;
 8001cc0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4826      	ldr	r0, [pc, #152]	@ (8001d74 <MX_GPIO_Init+0x14c>)
 8001cda:	f001 f963 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 8001cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4820      	ldr	r0, [pc, #128]	@ (8001d74 <MX_GPIO_Init+0x14c>)
 8001cf4:	f001 f956 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin | DIP3_Pin | BP2_Pin | BP3_Pin | BP4_Pin;
 8001cf8:	23e3      	movs	r3, #227	@ 0xe3
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <MX_GPIO_Init+0x150>)
 8001d0c:	f001 f94a 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin | LED_CEL_Pin | OUT2_Pin;
 8001d10:	f648 0310 	movw	r3, #34832	@ 0x8810
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	4813      	ldr	r0, [pc, #76]	@ (8001d78 <MX_GPIO_Init+0x150>)
 8001d2a:	f001 f93b 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin | LEDG_Pin | LEDY_Pin | RELAIS_ALIM_418_Pin | OUT1_Pin | OUT3_Pin | OUT4_Pin | OUT5_Pin | OUT6_Pin | OUT7_Pin;
 8001d2e:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 8001d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <MX_GPIO_Init+0x154>)
 8001d48:	f001 f92c 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <MX_GPIO_Init+0x158>)
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <MX_GPIO_Init+0x154>)
 8001d62:	f001 f91f 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d66:	bf00      	nop
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	40010c00 	.word	0x40010c00
 8001d80:	10110000 	.word	0x10110000

08001d84 <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    StateMachineTask();
 8001d8c:	f7fe ff7a 	bl	8000c84 <StateMachineTask>
    osDelay(50);
 8001d90:	2032      	movs	r0, #50	@ 0x32
 8001d92:	f003 fc87 	bl	80056a4 <osDelay>
    StateMachineTask();
 8001d96:	bf00      	nop
 8001d98:	e7f8      	b.n	8001d8c <StartStateMachineTask+0x8>

08001d9a <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    // HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da6:	f003 fc7d 	bl	80056a4 <osDelay>
 8001daa:	e7fa      	b.n	8001da2 <StartDefaultTask+0x8>

08001dac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001dbe:	f000 fd31 	bl	8002824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    send_UART3("ERROR");
 8001dd4:	4801      	ldr	r0, [pc, #4]	@ (8001ddc <Error_Handler+0x10>)
 8001dd6:	f000 fbe9 	bl	80025ac <send_UART3>
 8001dda:	e7fb      	b.n	8001dd4 <Error_Handler+0x8>
 8001ddc:	0800c67c 	.word	0x0800c67c

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_MspInit+0x68>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <HAL_MspInit+0x68>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6193      	str	r3, [r2, #24]
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_MspInit+0x68>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_MspInit+0x68>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_MspInit+0x68>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_MspInit+0x68>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	210f      	movs	r1, #15
 8001e1a:	f06f 0001 	mvn.w	r0, #1
 8001e1e:	f000 ffe4 	bl	8002dea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_MspInit+0x6c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_MspInit+0x6c>)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010000 	.word	0x40010000

08001e50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <HAL_ADC_MspInit+0x6c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d121      	bne.n	8001eb4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_ADC_MspInit+0x70>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <HAL_ADC_MspInit+0x74>)
 8001eb0:	f001 f878 	bl	8002fa4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012400 	.word	0x40012400
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010c00 	.word	0x40010c00

08001ec8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <HAL_I2C_MspInit+0x90>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d132      	bne.n	8001f4e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001f00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4812      	ldr	r0, [pc, #72]	@ (8001f60 <HAL_I2C_MspInit+0x98>)
 8001f16:	f001 f845 	bl	8002fa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	@ 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010c00 	.word	0x40010c00
 8001f64:	40010000 	.word	0x40010000

08001f68 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_TIM_Base_MspInit+0x34>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10b      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x38>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x38>)
 8001f80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f84:	6193      	str	r3, [r2, #24]
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x38>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800213c <HAL_UART_MspInit+0x198>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d13a      	bne.n	800203a <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8001ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	4619      	mov	r1, r3
 8002008:	484e      	ldr	r0, [pc, #312]	@ (8002144 <HAL_UART_MspInit+0x1a0>)
 800200a:	f000 ffcb 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 800200e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	4619      	mov	r1, r3
 8002022:	4848      	ldr	r0, [pc, #288]	@ (8002144 <HAL_UART_MspInit+0x1a0>)
 8002024:	f000 ffbe 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2105      	movs	r1, #5
 800202c:	2025      	movs	r0, #37	@ 0x25
 800202e:	f000 fedc 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002032:	2025      	movs	r0, #37	@ 0x25
 8002034:	f000 fef5 	bl	8002e22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002038:	e07c      	b.n	8002134 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a42      	ldr	r2, [pc, #264]	@ (8002148 <HAL_UART_MspInit+0x1a4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d138      	bne.n	80020b6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a3d      	ldr	r2, [pc, #244]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 800204a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a37      	ldr	r2, [pc, #220]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 8002074:	2304      	movs	r3, #4
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	4619      	mov	r1, r3
 8002086:	482f      	ldr	r0, [pc, #188]	@ (8002144 <HAL_UART_MspInit+0x1a0>)
 8002088:	f000 ff8c 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4619      	mov	r1, r3
 800209e:	4829      	ldr	r0, [pc, #164]	@ (8002144 <HAL_UART_MspInit+0x1a0>)
 80020a0:	f000 ff80 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2105      	movs	r1, #5
 80020a8:	2026      	movs	r0, #38	@ 0x26
 80020aa:	f000 fe9e 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ae:	2026      	movs	r0, #38	@ 0x26
 80020b0:	f000 feb7 	bl	8002e22 <HAL_NVIC_EnableIRQ>
}
 80020b4:	e03e      	b.n	8002134 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a24      	ldr	r2, [pc, #144]	@ (800214c <HAL_UART_MspInit+0x1a8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d139      	bne.n	8002134 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ca:	61d3      	str	r3, [r2, #28]
 80020cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_UART_MspInit+0x19c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	4619      	mov	r1, r3
 8002104:	4812      	ldr	r0, [pc, #72]	@ (8002150 <HAL_UART_MspInit+0x1ac>)
 8002106:	f000 ff4d 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800210a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	4619      	mov	r1, r3
 800211e:	480c      	ldr	r0, [pc, #48]	@ (8002150 <HAL_UART_MspInit+0x1ac>)
 8002120:	f000 ff40 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2105      	movs	r1, #5
 8002128:	2027      	movs	r0, #39	@ 0x27
 800212a:	f000 fe5e 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800212e:	2027      	movs	r0, #39	@ 0x27
 8002130:	f000 fe77 	bl	8002e22 <HAL_NVIC_EnableIRQ>
}
 8002134:	bf00      	nop
 8002136:	3730      	adds	r7, #48	@ 0x30
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40013800 	.word	0x40013800
 8002140:	40021000 	.word	0x40021000
 8002144:	40010800 	.word	0x40010800
 8002148:	40004400 	.word	0x40004400
 800214c:	40004800 	.word	0x40004800
 8002150:	40010c00 	.word	0x40010c00

08002154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08e      	sub	sp, #56	@ 0x38
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	4b34      	ldr	r3, [pc, #208]	@ (800223c <HAL_InitTick+0xe8>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a33      	ldr	r2, [pc, #204]	@ (800223c <HAL_InitTick+0xe8>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b31      	ldr	r3, [pc, #196]	@ (800223c <HAL_InitTick+0xe8>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002182:	f107 0210 	add.w	r2, r7, #16
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f001 fe0b 	bl	8003da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800219c:	f001 fddc 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80021a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80021a2:	e004      	b.n	80021ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021a4:	f001 fdd8 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80021a8:	4603      	mov	r3, r0
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b0:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <HAL_InitTick+0xec>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9b      	lsrs	r3, r3, #18
 80021b8:	3b01      	subs	r3, #1
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_InitTick+0xf0>)
 80021be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021c2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <HAL_InitTick+0xf0>)
 80021c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021ca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_InitTick+0xf0>)
 80021ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <HAL_InitTick+0xf0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_InitTick+0xf0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_InitTick+0xf0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80021e4:	4817      	ldr	r0, [pc, #92]	@ (8002244 <HAL_InitTick+0xf0>)
 80021e6:	f001 fee3 	bl	8003fb0 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11b      	bne.n	8002230 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80021f8:	4812      	ldr	r0, [pc, #72]	@ (8002244 <HAL_InitTick+0xf0>)
 80021fa:	f001 ff29 	bl	8004050 <HAL_TIM_Base_Start_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002204:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002208:	2b00      	cmp	r3, #0
 800220a:	d111      	bne.n	8002230 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800220c:	201c      	movs	r0, #28
 800220e:	f000 fe08 	bl	8002e22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d808      	bhi.n	800222a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	201c      	movs	r0, #28
 800221e:	f000 fde4 	bl	8002dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002222:	4a09      	ldr	r2, [pc, #36]	@ (8002248 <HAL_InitTick+0xf4>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e002      	b.n	8002230 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002230:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002234:	4618      	mov	r0, r3
 8002236:	3738      	adds	r7, #56	@ 0x38
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	431bde83 	.word	0x431bde83
 8002244:	200002d8 	.word	0x200002d8
 8002248:	20000004 	.word	0x20000004

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <NMI_Handler+0x4>

08002254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <MemManage_Handler+0x4>

08002264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <UsageFault_Handler+0x4>

08002274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <TIM2_IRQHandler+0x10>)
 8002286:	f001 ff35 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200002d8 	.word	0x200002d8

08002294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <USART1_IRQHandler+0x10>)
 800229a:	f002 fb7b 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000324 	.word	0x20000324

080022a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <USART2_IRQHandler+0x10>)
 80022ae:	f002 fb71 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000558 	.word	0x20000558

080022bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <USART3_IRQHandler+0x10>)
 80022c2:	f002 fb67 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200004a4 	.word	0x200004a4

080022d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_kill>:

int _kill(int pid, int sig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e8:	f006 faee 	bl	80088c8 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2216      	movs	r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
  return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_exit>:

void _exit (int status)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002306:	f04f 31ff 	mov.w	r1, #4294967295
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffe7 	bl	80022de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <_exit+0x12>

08002314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e00a      	b.n	800233c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002326:	f3af 8000 	nop.w
 800232a:	4601      	mov	r1, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	b2ca      	uxtb	r2, r1
 8002334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbf0      	blt.n	8002326 <_read+0x12>
  }

  return len;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e009      	b.n	8002374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	60ba      	str	r2, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf1      	blt.n	8002360 <_write+0x12>
  }
  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_close>:

int _close(int file)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ac:	605a      	str	r2, [r3, #4]
  return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_isatty>:

int _isatty(int file)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f006 fa56 	bl	80088c8 <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20005000 	.word	0x20005000
 8002448:	00000400 	.word	0x00000400
 800244c:	20000320 	.word	0x20000320
 8002450:	20002110 	.word	0x20002110

08002454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002466:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <MX_USART1_UART_Init+0x58>)
 8002468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 800246c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002496:	4807      	ldr	r0, [pc, #28]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 8002498:	f002 f97c 	bl	8004794 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f7ff fc93 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 80024a6:	2201      	movs	r2, #1
 80024a8:	4904      	ldr	r1, [pc, #16]	@ (80024bc <MX_USART1_UART_Init+0x5c>)
 80024aa:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <MX_USART1_UART_Init+0x54>)
 80024ac:	f002 fa4d 	bl	800494a <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000324 	.word	0x20000324
 80024b8:	40013800 	.word	0x40013800
 80024bc:	2000036d 	.word	0x2000036d

080024c0 <send_UART1>:

void send_UART1(const char *msg)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7fd fe4b 	bl	8000164 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <send_UART1+0x28>)
 80024da:	f002 f9ab 	bl	8004834 <HAL_UART_Transmit>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000324 	.word	0x20000324

080024ec <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 80024f2:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <MX_USART2_UART_Init+0x58>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 80024f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002522:	4807      	ldr	r0, [pc, #28]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002524:	f002 f936 	bl	8004794 <HAL_UART_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800252e:	f7ff fc4d 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 8002532:	2201      	movs	r2, #1
 8002534:	4904      	ldr	r1, [pc, #16]	@ (8002548 <MX_USART2_UART_Init+0x5c>)
 8002536:	4802      	ldr	r0, [pc, #8]	@ (8002540 <MX_USART2_UART_Init+0x54>)
 8002538:	f002 fa07 	bl	800494a <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000558 	.word	0x20000558
 8002544:	40004400 	.word	0x40004400
 8002548:	200005a1 	.word	0x200005a1

0800254c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002552:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <MX_USART3_UART_Init+0x58>)
 8002554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002558:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800255c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002582:	4807      	ldr	r0, [pc, #28]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002584:	f002 f906 	bl	8004794 <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800258e:	f7ff fc1d 	bl	8001dcc <Error_Handler>
  }

  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 8002592:	2201      	movs	r2, #1
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <MX_USART3_UART_Init+0x5c>)
 8002596:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <MX_USART3_UART_Init+0x54>)
 8002598:	f002 f9d7 	bl	800494a <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200004a4 	.word	0x200004a4
 80025a4:	40004800 	.word	0x40004800
 80025a8:	200004ed 	.word	0x200004ed

080025ac <send_UART3>:

void send_UART3(const char *msg)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd fdd5 	bl	8000164 <strlen>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b29a      	uxth	r2, r3
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4803      	ldr	r0, [pc, #12]	@ (80025d4 <send_UART3+0x28>)
 80025c6:	f002 f935 	bl	8004834 <HAL_UART_Transmit>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200004a4 	.word	0x200004a4

080025d8 <HAL_UART_RxCpltCallback>:
  memset(rx_buffer3, 0, sizeof(rx_buffer3));
}

// Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); // DEBUG
 80025e0:	2110      	movs	r1, #16
 80025e2:	4845      	ldr	r0, [pc, #276]	@ (80026f8 <HAL_UART_RxCpltCallback+0x120>)
 80025e4:	f000 fe91 	bl	800330a <HAL_GPIO_TogglePin>

  // RS232_418
  if (huart->Instance == USART1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a43      	ldr	r2, [pc, #268]	@ (80026fc <HAL_UART_RxCpltCallback+0x124>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12a      	bne.n	8002648 <HAL_UART_RxCpltCallback+0x70>
  {
    // Stocker le tick de réception à chaque char reçu
    last_rx_tick1 = HAL_GetTick();
 80025f2:	f000 f929 	bl	8002848 <HAL_GetTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a41      	ldr	r2, [pc, #260]	@ (8002700 <HAL_UART_RxCpltCallback+0x128>)
 80025fa:	6013      	str	r3, [r2, #0]

    if (rx_char1 != '\0' && rx_index1 < RX_BUFFER1_SIZE - 1)
 80025fc:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_UART_RxCpltCallback+0x12c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d010      	beq.n	8002626 <HAL_UART_RxCpltCallback+0x4e>
 8002604:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_UART_RxCpltCallback+0x130>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 800260c:	d80b      	bhi.n	8002626 <HAL_UART_RxCpltCallback+0x4e>
    {
      rx_buffer1[rx_index1++] = rx_char1;
 800260e:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_UART_RxCpltCallback+0x130>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	b291      	uxth	r1, r2
 8002616:	4a3c      	ldr	r2, [pc, #240]	@ (8002708 <HAL_UART_RxCpltCallback+0x130>)
 8002618:	8011      	strh	r1, [r2, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <HAL_UART_RxCpltCallback+0x12c>)
 800261e:	7819      	ldrb	r1, [r3, #0]
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_UART_RxCpltCallback+0x134>)
 8002622:	5499      	strb	r1, [r3, r2]
 8002624:	e00b      	b.n	800263e <HAL_UART_RxCpltCallback+0x66>
    }
    else
    {
      rx_buffer1[rx_index1] = '\0';
 8002626:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <HAL_UART_RxCpltCallback+0x130>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <HAL_UART_RxCpltCallback+0x134>)
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]
      message_complete1 = 1;
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_UART_RxCpltCallback+0x138>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
      rx_index1 = 0;
 8002638:	4b33      	ldr	r3, [pc, #204]	@ (8002708 <HAL_UART_RxCpltCallback+0x130>)
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 800263e:	2201      	movs	r2, #1
 8002640:	4930      	ldr	r1, [pc, #192]	@ (8002704 <HAL_UART_RxCpltCallback+0x12c>)
 8002642:	4834      	ldr	r0, [pc, #208]	@ (8002714 <HAL_UART_RxCpltCallback+0x13c>)
 8002644:	f002 f981 	bl	800494a <HAL_UART_Receive_IT>
  }

  // RS232_COM
  if (huart->Instance == USART3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a32      	ldr	r2, [pc, #200]	@ (8002718 <HAL_UART_RxCpltCallback+0x140>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d124      	bne.n	800269c <HAL_UART_RxCpltCallback+0xc4>
  {
    if (rx_char3 != '\r' && rx_index3 < RX_BUFFER3_SIZE - 1)
 8002652:	4b32      	ldr	r3, [pc, #200]	@ (800271c <HAL_UART_RxCpltCallback+0x144>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b0d      	cmp	r3, #13
 8002658:	d00f      	beq.n	800267a <HAL_UART_RxCpltCallback+0xa2>
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_UART_RxCpltCallback+0x148>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2b62      	cmp	r3, #98	@ 0x62
 8002660:	d80b      	bhi.n	800267a <HAL_UART_RxCpltCallback+0xa2>
    {
      rx_buffer3[rx_index3++] = rx_char3;
 8002662:	4b2f      	ldr	r3, [pc, #188]	@ (8002720 <HAL_UART_RxCpltCallback+0x148>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	b291      	uxth	r1, r2
 800266a:	4a2d      	ldr	r2, [pc, #180]	@ (8002720 <HAL_UART_RxCpltCallback+0x148>)
 800266c:	8011      	strh	r1, [r2, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_UART_RxCpltCallback+0x144>)
 8002672:	7819      	ldrb	r1, [r3, #0]
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_UART_RxCpltCallback+0x14c>)
 8002676:	5499      	strb	r1, [r3, r2]
 8002678:	e00b      	b.n	8002692 <HAL_UART_RxCpltCallback+0xba>
    }
    else
    {
      rx_buffer3[rx_index3] = '\r';
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_UART_RxCpltCallback+0x148>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4b28      	ldr	r3, [pc, #160]	@ (8002724 <HAL_UART_RxCpltCallback+0x14c>)
 8002682:	210d      	movs	r1, #13
 8002684:	5499      	strb	r1, [r3, r2]
      message_complete3 = 1;
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_UART_RxCpltCallback+0x150>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
      rx_index3 = 0;
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_UART_RxCpltCallback+0x148>)
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 8002692:	2201      	movs	r2, #1
 8002694:	4921      	ldr	r1, [pc, #132]	@ (800271c <HAL_UART_RxCpltCallback+0x144>)
 8002696:	4825      	ldr	r0, [pc, #148]	@ (800272c <HAL_UART_RxCpltCallback+0x154>)
 8002698:	f002 f957 	bl	800494a <HAL_UART_Receive_IT>
    // send_UART3("COM!"); // DEBUG
  }

  // RS485
  if (huart->Instance == USART2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <HAL_UART_RxCpltCallback+0x158>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d124      	bne.n	80026f0 <HAL_UART_RxCpltCallback+0x118>
  {
    if (rx_char2 != '\0' && rx_index2 < RX_BUFFER2_SIZE - 1)
 80026a6:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_UART_RxCpltCallback+0x15c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00f      	beq.n	80026ce <HAL_UART_RxCpltCallback+0xf6>
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_UART_RxCpltCallback+0x160>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	2b30      	cmp	r3, #48	@ 0x30
 80026b4:	d80b      	bhi.n	80026ce <HAL_UART_RxCpltCallback+0xf6>
    {
      rx_buffer2[rx_index2++] = rx_char2;
 80026b6:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <HAL_UART_RxCpltCallback+0x160>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	b291      	uxth	r1, r2
 80026be:	4a1e      	ldr	r2, [pc, #120]	@ (8002738 <HAL_UART_RxCpltCallback+0x160>)
 80026c0:	8011      	strh	r1, [r2, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_UART_RxCpltCallback+0x15c>)
 80026c6:	7819      	ldrb	r1, [r3, #0]
 80026c8:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_UART_RxCpltCallback+0x164>)
 80026ca:	5499      	strb	r1, [r3, r2]
 80026cc:	e00b      	b.n	80026e6 <HAL_UART_RxCpltCallback+0x10e>
    }
    else
    {

      rx_buffer2[rx_index2] = '\0';
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_UART_RxCpltCallback+0x160>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_UART_RxCpltCallback+0x164>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]
      message_complete2 = 1;
 80026da:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_UART_RxCpltCallback+0x168>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
      rx_index2 = 0;
 80026e0:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_UART_RxCpltCallback+0x160>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	4912      	ldr	r1, [pc, #72]	@ (8002734 <HAL_UART_RxCpltCallback+0x15c>)
 80026ea:	4816      	ldr	r0, [pc, #88]	@ (8002744 <HAL_UART_RxCpltCallback+0x16c>)
 80026ec:	f002 f92d 	bl	800494a <HAL_UART_Receive_IT>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010c00 	.word	0x40010c00
 80026fc:	40013800 	.word	0x40013800
 8002700:	200004a0 	.word	0x200004a0
 8002704:	2000036d 	.word	0x2000036d
 8002708:	2000049c 	.word	0x2000049c
 800270c:	20000370 	.word	0x20000370
 8002710:	2000036c 	.word	0x2000036c
 8002714:	20000324 	.word	0x20000324
 8002718:	40004800 	.word	0x40004800
 800271c:	200004ed 	.word	0x200004ed
 8002720:	20000554 	.word	0x20000554
 8002724:	200004f0 	.word	0x200004f0
 8002728:	200004ec 	.word	0x200004ec
 800272c:	200004a4 	.word	0x200004a4
 8002730:	40004400 	.word	0x40004400
 8002734:	200005a1 	.word	0x200005a1
 8002738:	200005d6 	.word	0x200005d6
 800273c:	200005a4 	.word	0x200005a4
 8002740:	200005a0 	.word	0x200005a0
 8002744:	20000558 	.word	0x20000558

08002748 <Check_UART1_Timeout>:

void Check_UART1_Timeout(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  if (!message_complete1 && rx_index1 > 0)
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <Check_UART1_Timeout+0x54>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d120      	bne.n	8002796 <Check_UART1_Timeout+0x4e>
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <Check_UART1_Timeout+0x58>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <Check_UART1_Timeout+0x4e>
  {
    if ((HAL_GetTick() - last_rx_tick1) > RX_TIMEOUT_MS)
 800275c:	f000 f874 	bl	8002848 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <Check_UART1_Timeout+0x5c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2bc8      	cmp	r3, #200	@ 0xc8
 800276a:	d914      	bls.n	8002796 <Check_UART1_Timeout+0x4e>
    {

      // Sécurité : s'assurer de ne pas dépasser la taille du buffer
      if (rx_index1 >= RX_BUFFER1_SIZE)
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <Check_UART1_Timeout+0x58>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002774:	d303      	bcc.n	800277e <Check_UART1_Timeout+0x36>
      {
        rx_index1 = RX_BUFFER1_SIZE - 1;
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <Check_UART1_Timeout+0x58>)
 8002778:	f240 122b 	movw	r2, #299	@ 0x12b
 800277c:	801a      	strh	r2, [r3, #0]
      }

      rx_buffer1[rx_index1] = '\0'; // Fin de chaîne propre
 800277e:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <Check_UART1_Timeout+0x58>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <Check_UART1_Timeout+0x60>)
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]
      message_complete1 = 1;        // Signal que le message est complet
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <Check_UART1_Timeout+0x54>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
      rx_index1 = 0;                // Réinitialisation de l'index
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <Check_UART1_Timeout+0x58>)
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000036c 	.word	0x2000036c
 80027a0:	2000049c 	.word	0x2000049c
 80027a4:	200004a0 	.word	0x200004a0
 80027a8:	20000370 	.word	0x20000370

080027ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027ac:	f7ff fe52 	bl	8002454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027b2:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027b4:	4a0c      	ldr	r2, [pc, #48]	@ (80027e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027c8:	4c09      	ldr	r4, [pc, #36]	@ (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f006 f87d 	bl	80088d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff f8d5 	bl	8001988 <main>
  bx lr
 80027de:	4770      	bx	lr
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80027e8:	0800cb60 	.word	0x0800cb60
  ldr r2, =_sbss
 80027ec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027f0:	20002110 	.word	0x20002110

080027f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC1_2_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x28>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x28>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fae3 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f7ff fca0 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fae4 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_IncTick+0x1c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_IncTick+0x20>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a03      	ldr	r2, [pc, #12]	@ (8002844 <HAL_IncTick+0x20>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000008 	.word	0x20000008
 8002844:	200005d8 	.word	0x200005d8

08002848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b02      	ldr	r3, [pc, #8]	@ (8002858 <HAL_GetTick+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	200005d8 	.word	0x200005d8

0800285c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0be      	b.n	80029fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fad8 	bl	8001e50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9ab 	bl	8002bfc <ADC_ConversionStop_Disable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 8099 	bne.w	80029ea <HAL_ADC_Init+0x18e>
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8095 	bne.w	80029ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028c8:	f023 0302 	bic.w	r3, r3, #2
 80028cc:	f043 0202 	orr.w	r2, r3, #2
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7b1b      	ldrb	r3, [r3, #12]
 80028e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f4:	d003      	beq.n	80028fe <HAL_ADC_Init+0xa2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_ADC_Init+0xa8>
 80028fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002902:	e000      	b.n	8002906 <HAL_ADC_Init+0xaa>
 8002904:	2300      	movs	r3, #0
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7d1b      	ldrb	r3, [r3, #20]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d119      	bne.n	8002948 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7b1b      	ldrb	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	3b01      	subs	r3, #1
 8002922:	035a      	lsls	r2, r3, #13
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e00b      	b.n	8002948 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <HAL_ADC_Init+0x1a8>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	430b      	orrs	r3, r1
 800296e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002978:	d003      	beq.n	8002982 <HAL_ADC_Init+0x126>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d104      	bne.n	800298c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	3b01      	subs	r3, #1
 8002988:	051b      	lsls	r3, r3, #20
 800298a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	430a      	orrs	r2, r1
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <HAL_ADC_Init+0x1ac>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d10b      	bne.n	80029c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c6:	e018      	b.n	80029fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	f023 0312 	bic.w	r3, r3, #18
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029e8:	e007      	b.n	80029fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	ffe1f7fd 	.word	0xffe1f7fd
 8002a08:	ff1f0efe 	.word	0xff1f0efe

08002a0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x20>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0dc      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x1da>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d81c      	bhi.n	8002a76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b05      	subs	r3, #5
 8002a4e:	221f      	movs	r2, #31
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4019      	ands	r1, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b05      	subs	r3, #5
 8002a68:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a74:	e03c      	b.n	8002af0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d81c      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b23      	subs	r3, #35	@ 0x23
 8002a90:	221f      	movs	r2, #31
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4019      	ands	r1, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b23      	subs	r3, #35	@ 0x23
 8002aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab6:	e01b      	b.n	8002af0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b41      	subs	r3, #65	@ 0x41
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b41      	subs	r3, #65	@ 0x41
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d91c      	bls.n	8002b32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4019      	ands	r1, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6898      	ldr	r0, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	3b1e      	subs	r3, #30
 8002b24:	fa00 f203 	lsl.w	r2, r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e019      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6898      	ldr	r0, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d003      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b72:	2b11      	cmp	r3, #17
 8002b74:	d132      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d125      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d126      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d11a      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0c9a      	lsrs	r2, r3, #18
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f9      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x1b2>
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d12e      	bne.n	8002c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c26:	f7ff fe0f 	bl	8002848 <HAL_GetTick>
 8002c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c2c:	e01b      	b.n	8002c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2e:	f7ff fe0b 	bl	8002848 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10d      	bne.n	8002c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d0dc      	beq.n	8002c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db0b      	blt.n	8002d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4906      	ldr	r1, [pc, #24]	@ (8002d18 <__NVIC_EnableIRQ+0x34>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	@ (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	@ (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	@ 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
         );
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff4f 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff64 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ffb2 	bl	8002d70 <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff81 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff57 	bl	8002ce4 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d008      	beq.n	8002e68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e020      	b.n	8002eaa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d005      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e051      	b.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020e 	bic.w	r2, r2, #14
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a22      	ldr	r2, [pc, #136]	@ (8002f88 <HAL_DMA_Abort_IT+0xd4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d029      	beq.n	8002f56 <HAL_DMA_Abort_IT+0xa2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <HAL_DMA_Abort_IT+0xd8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x9e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_DMA_Abort_IT+0xdc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01a      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x98>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <HAL_DMA_Abort_IT+0xe0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d012      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x92>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	@ (8002f98 <HAL_DMA_Abort_IT+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00a      	beq.n	8002f40 <HAL_DMA_Abort_IT+0x8c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f9c <HAL_DMA_Abort_IT+0xe8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <HAL_DMA_Abort_IT+0x86>
 8002f34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f38:	e00e      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f3e:	e00b      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f44:	e008      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4a:	e005      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f50:	e002      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f52:	2310      	movs	r3, #16
 8002f54:	e000      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4a11      	ldr	r2, [pc, #68]	@ (8002fa0 <HAL_DMA_Abort_IT+0xec>)
 8002f5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    } 
  }
  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40020008 	.word	0x40020008
 8002f8c:	4002001c 	.word	0x4002001c
 8002f90:	40020030 	.word	0x40020030
 8002f94:	40020044 	.word	0x40020044
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	4002006c 	.word	0x4002006c
 8002fa0:	40020000 	.word	0x40020000

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	@ 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e169      	b.n	800328c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 8158 	bne.w	8003286 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a9a      	ldr	r2, [pc, #616]	@ (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fe0:	4a98      	ldr	r2, [pc, #608]	@ (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d875      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002fe6:	4a98      	ldr	r2, [pc, #608]	@ (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d058      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fec:	4a96      	ldr	r2, [pc, #600]	@ (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d86f      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ff2:	4a96      	ldr	r2, [pc, #600]	@ (800324c <HAL_GPIO_Init+0x2a8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d052      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002ff8:	4a94      	ldr	r2, [pc, #592]	@ (800324c <HAL_GPIO_Init+0x2a8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d869      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ffe:	4a94      	ldr	r2, [pc, #592]	@ (8003250 <HAL_GPIO_Init+0x2ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04c      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003004:	4a92      	ldr	r2, [pc, #584]	@ (8003250 <HAL_GPIO_Init+0x2ac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d863      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800300a:	4a92      	ldr	r2, [pc, #584]	@ (8003254 <HAL_GPIO_Init+0x2b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d046      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003010:	4a90      	ldr	r2, [pc, #576]	@ (8003254 <HAL_GPIO_Init+0x2b0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d85d      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8003016:	2b12      	cmp	r3, #18
 8003018:	d82a      	bhi.n	8003070 <HAL_GPIO_Init+0xcc>
 800301a:	2b12      	cmp	r3, #18
 800301c:	d859      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800301e:	a201      	add	r2, pc, #4	@ (adr r2, 8003024 <HAL_GPIO_Init+0x80>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	0800309f 	.word	0x0800309f
 8003028:	08003079 	.word	0x08003079
 800302c:	0800308b 	.word	0x0800308b
 8003030:	080030cd 	.word	0x080030cd
 8003034:	080030d3 	.word	0x080030d3
 8003038:	080030d3 	.word	0x080030d3
 800303c:	080030d3 	.word	0x080030d3
 8003040:	080030d3 	.word	0x080030d3
 8003044:	080030d3 	.word	0x080030d3
 8003048:	080030d3 	.word	0x080030d3
 800304c:	080030d3 	.word	0x080030d3
 8003050:	080030d3 	.word	0x080030d3
 8003054:	080030d3 	.word	0x080030d3
 8003058:	080030d3 	.word	0x080030d3
 800305c:	080030d3 	.word	0x080030d3
 8003060:	080030d3 	.word	0x080030d3
 8003064:	080030d3 	.word	0x080030d3
 8003068:	08003081 	.word	0x08003081
 800306c:	08003095 	.word	0x08003095
 8003070:	4a79      	ldr	r2, [pc, #484]	@ (8003258 <HAL_GPIO_Init+0x2b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003076:	e02c      	b.n	80030d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e029      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e024      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	3308      	adds	r3, #8
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e01f      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	330c      	adds	r3, #12
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e01a      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030a6:	2304      	movs	r3, #4
 80030a8:	623b      	str	r3, [r7, #32]
          break;
 80030aa:	e013      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	611a      	str	r2, [r3, #16]
          break;
 80030be:	e009      	b.n	80030d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	615a      	str	r2, [r3, #20]
          break;
 80030ca:	e003      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          break;
 80030d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2bff      	cmp	r3, #255	@ 0xff
 80030d8:	d801      	bhi.n	80030de <HAL_GPIO_Init+0x13a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	e001      	b.n	80030e2 <HAL_GPIO_Init+0x13e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2bff      	cmp	r3, #255	@ 0xff
 80030e8:	d802      	bhi.n	80030f0 <HAL_GPIO_Init+0x14c>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x152>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	3b08      	subs	r3, #8
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	210f      	movs	r1, #15
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80b1 	beq.w	8003286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	4b4d      	ldr	r3, [pc, #308]	@ (800325c <HAL_GPIO_Init+0x2b8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a4c      	ldr	r2, [pc, #304]	@ (800325c <HAL_GPIO_Init+0x2b8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b4a      	ldr	r3, [pc, #296]	@ (800325c <HAL_GPIO_Init+0x2b8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800313c:	4a48      	ldr	r2, [pc, #288]	@ (8003260 <HAL_GPIO_Init+0x2bc>)
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a40      	ldr	r2, [pc, #256]	@ (8003264 <HAL_GPIO_Init+0x2c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3f      	ldr	r2, [pc, #252]	@ (8003268 <HAL_GPIO_Init+0x2c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00d      	beq.n	800318c <HAL_GPIO_Init+0x1e8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3e      	ldr	r2, [pc, #248]	@ (800326c <HAL_GPIO_Init+0x2c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_Init+0x1e4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3d      	ldr	r2, [pc, #244]	@ (8003270 <HAL_GPIO_Init+0x2cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_GPIO_Init+0x1e0>
 8003180:	2303      	movs	r3, #3
 8003182:	e006      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003184:	2304      	movs	r3, #4
 8003186:	e004      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003188:	2302      	movs	r3, #2
 800318a:	e002      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003190:	2300      	movs	r3, #0
 8003192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003194:	f002 0203 	and.w	r2, r2, #3
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4093      	lsls	r3, r2
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031a2:	492f      	ldr	r1, [pc, #188]	@ (8003260 <HAL_GPIO_Init+0x2bc>)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	492c      	ldr	r1, [pc, #176]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4928      	ldr	r1, [pc, #160]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e4:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4922      	ldr	r1, [pc, #136]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031f2:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	491e      	ldr	r1, [pc, #120]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4918      	ldr	r1, [pc, #96]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800321a:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	4914      	ldr	r1, [pc, #80]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 8003224:	4013      	ands	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d021      	beq.n	8003278 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003234:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	490e      	ldr	r1, [pc, #56]	@ (8003274 <HAL_GPIO_Init+0x2d0>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e021      	b.n	8003286 <HAL_GPIO_Init+0x2e2>
 8003242:	bf00      	nop
 8003244:	10320000 	.word	0x10320000
 8003248:	10310000 	.word	0x10310000
 800324c:	10220000 	.word	0x10220000
 8003250:	10210000 	.word	0x10210000
 8003254:	10120000 	.word	0x10120000
 8003258:	10110000 	.word	0x10110000
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	40010800 	.word	0x40010800
 8003268:	40010c00 	.word	0x40010c00
 800326c:	40011000 	.word	0x40011000
 8003270:	40011400 	.word	0x40011400
 8003274:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	43db      	mvns	r3, r3
 8003280:	4909      	ldr	r1, [pc, #36]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003282:	4013      	ands	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f ae8e 	bne.w	8002fb8 <HAL_GPIO_Init+0x14>
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	372c      	adds	r7, #44	@ 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
 80032e6:	4613      	mov	r3, r2
 80032e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ea:	787b      	ldrb	r3, [r7, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032f6:	e003      	b.n	8003300 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	041a      	lsls	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43d9      	mvns	r1, r3
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	400b      	ands	r3, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e12b      	b.n	80035a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fdb0 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800339e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a0:	f000 fcda 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80033a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a81      	ldr	r2, [pc, #516]	@ (80035b0 <HAL_I2C_Init+0x274>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d807      	bhi.n	80033c0 <HAL_I2C_Init+0x84>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a80      	ldr	r2, [pc, #512]	@ (80035b4 <HAL_I2C_Init+0x278>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e006      	b.n	80033ce <HAL_I2C_Init+0x92>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a7d      	ldr	r2, [pc, #500]	@ (80035b8 <HAL_I2C_Init+0x27c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0e7      	b.n	80035a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a78      	ldr	r2, [pc, #480]	@ (80035bc <HAL_I2C_Init+0x280>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a6a      	ldr	r2, [pc, #424]	@ (80035b0 <HAL_I2C_Init+0x274>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d802      	bhi.n	8003410 <HAL_I2C_Init+0xd4>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3301      	adds	r3, #1
 800340e:	e009      	b.n	8003424 <HAL_I2C_Init+0xe8>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	4a69      	ldr	r2, [pc, #420]	@ (80035c0 <HAL_I2C_Init+0x284>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	3301      	adds	r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003436:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	495c      	ldr	r1, [pc, #368]	@ (80035b0 <HAL_I2C_Init+0x274>)
 8003440:	428b      	cmp	r3, r1
 8003442:	d819      	bhi.n	8003478 <HAL_I2C_Init+0x13c>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e59      	subs	r1, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003458:	400b      	ands	r3, r1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_I2C_Init+0x138>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e59      	subs	r1, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fbb1 f3f3 	udiv	r3, r1, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	e051      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 8003474:	2304      	movs	r3, #4
 8003476:	e04f      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d111      	bne.n	80034a4 <HAL_I2C_Init+0x168>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e012      	b.n	80034ca <HAL_I2C_Init+0x18e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x196>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e022      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <HAL_I2C_Init+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e58      	subs	r0, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	440b      	add	r3, r1
 80034e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f6:	e00f      	b.n	8003518 <HAL_I2C_Init+0x1dc>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e58      	subs	r0, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	0099      	lsls	r1, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	fbb0 f3f3 	udiv	r3, r0, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	6809      	ldr	r1, [r1, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6911      	ldr	r1, [r2, #16]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	000186a0 	.word	0x000186a0
 80035b4:	001e847f 	.word	0x001e847f
 80035b8:	003d08ff 	.word	0x003d08ff
 80035bc:	431bde83 	.word	0x431bde83
 80035c0:	10624dd3 	.word	0x10624dd3

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e272      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b92      	ldr	r3, [pc, #584]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
 80035fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b89      	ldr	r3, [pc, #548]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x12c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e24c      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x76>
 800362c:	4b80      	ldr	r3, [pc, #512]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7f      	ldr	r2, [pc, #508]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7a      	ldr	r2, [pc, #488]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b78      	ldr	r3, [pc, #480]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a77      	ldr	r2, [pc, #476]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xbc>
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a71      	ldr	r2, [pc, #452]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 8003680:	4b6b      	ldr	r3, [pc, #428]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6a      	ldr	r2, [pc, #424]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b68      	ldr	r3, [pc, #416]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a67      	ldr	r2, [pc, #412]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff f8d2 	bl	8002848 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7ff f8ce 	bl	8002848 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	@ 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e200      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe4>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7ff f8be 	bl	8002848 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff f8ba 	bl	8002848 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	@ 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1ec      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x10c>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800370a:	4b49      	ldr	r3, [pc, #292]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x18c>
 8003716:	4b46      	ldr	r3, [pc, #280]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b43      	ldr	r3, [pc, #268]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x176>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1c0      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4939      	ldr	r1, [pc, #228]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e03a      	b.n	80037c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <HAL_RCC_OscConfig+0x270>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff f873 	bl	8002848 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003766:	f7ff f86f 	bl	8002848 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1a1      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4927      	ldr	r1, [pc, #156]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <HAL_RCC_OscConfig+0x270>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7ff f852 	bl	8002848 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a8:	f7ff f84e 	bl	8002848 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e180      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03a      	beq.n	8003848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d019      	beq.n	800380e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <HAL_RCC_OscConfig+0x274>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7ff f832 	bl	8002848 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e8:	f7ff f82e 	bl	8002848 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e160      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003806:	2001      	movs	r0, #1
 8003808:	f000 fafe 	bl	8003e08 <RCC_Delay>
 800380c:	e01c      	b.n	8003848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380e:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <HAL_RCC_OscConfig+0x274>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003814:	f7ff f818 	bl	8002848 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381c:	f7ff f814 	bl	8002848 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d908      	bls.n	800383c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e146      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	42420000 	.word	0x42420000
 8003838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	4b92      	ldr	r3, [pc, #584]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e9      	bne.n	800381c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a6 	beq.w	80039a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	4b88      	ldr	r3, [pc, #544]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a87      	ldr	r2, [pc, #540]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003870:	61d3      	str	r3, [r2, #28]
 8003872:	4b85      	ldr	r3, [pc, #532]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b82      	ldr	r3, [pc, #520]	@ (8003a8c <HAL_RCC_OscConfig+0x4c8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d118      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a8c <HAL_RCC_OscConfig+0x4c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7e      	ldr	r2, [pc, #504]	@ (8003a8c <HAL_RCC_OscConfig+0x4c8>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fe ffd5 	bl	8002848 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fe ffd1 	bl	8002848 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	@ 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e103      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b75      	ldr	r3, [pc, #468]	@ (8003a8c <HAL_RCC_OscConfig+0x4c8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x312>
 80038c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6213      	str	r3, [r2, #32]
 80038d4:	e02d      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x334>
 80038de:	4b6a      	ldr	r3, [pc, #424]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a69      	ldr	r2, [pc, #420]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6213      	str	r3, [r2, #32]
 80038ea:	4b67      	ldr	r3, [pc, #412]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a66      	ldr	r2, [pc, #408]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	e01c      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0x356>
 8003900:	4b61      	ldr	r3, [pc, #388]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4a60      	ldr	r2, [pc, #384]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6213      	str	r3, [r2, #32]
 800390c:	4b5e      	ldr	r3, [pc, #376]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	4a5d      	ldr	r2, [pc, #372]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6213      	str	r3, [r2, #32]
 8003918:	e00b      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 800391a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b58      	ldr	r3, [pc, #352]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a57      	ldr	r2, [pc, #348]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d015      	beq.n	8003966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fe ff85 	bl	8002848 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fe ff81 	bl	8002848 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0b1      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	4b4b      	ldr	r3, [pc, #300]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ee      	beq.n	8003942 <HAL_RCC_OscConfig+0x37e>
 8003964:	e014      	b.n	8003990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe ff6f 	bl	8002848 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe ff6b 	bl	8002848 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e09b      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	4b40      	ldr	r3, [pc, #256]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ee      	bne.n	800396e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b3c      	ldr	r3, [pc, #240]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8087 	beq.w	8003aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ac:	4b36      	ldr	r3, [pc, #216]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d061      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d146      	bne.n	8003a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fe ff3f 	bl	8002848 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fe ff3b 	bl	8002848 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e06d      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	4b29      	ldr	r3, [pc, #164]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039f6:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4921      	ldr	r1, [pc, #132]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a08:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a19      	ldr	r1, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	491b      	ldr	r1, [pc, #108]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a20:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe ff0f 	bl	8002848 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe ff0b 	bl	8002848 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e03d      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a40:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x46a>
 8003a4c:	e035      	b.n	8003aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe fef8 	bl	8002848 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fe fef4 	bl	8002848 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e026      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x498>
 8003a7a:	e01e      	b.n	8003aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e019      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_OscConfig+0x500>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0d0      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d910      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b67      	ldr	r3, [pc, #412]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	4965      	ldr	r1, [pc, #404]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a58      	ldr	r2, [pc, #352]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a52      	ldr	r2, [pc, #328]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d040      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d115      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b41      	ldr	r3, [pc, #260]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e073      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3d      	ldr	r3, [pc, #244]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06b      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4936      	ldr	r1, [pc, #216]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fe fe46 	bl	8002848 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fe fe42 	bl	8002848 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e053      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d210      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0207 	bic.w	r2, r3, #7
 8003bfe:	4922      	ldr	r1, [pc, #136]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c42:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f821 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	490a      	ldr	r1, [pc, #40]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	5ccb      	ldrb	r3, [r1, r3]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	@ (8003c94 <HAL_RCC_ClockConfig+0x1cc>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <HAL_RCC_ClockConfig+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fa6c 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	0800c6f0 	.word	0x0800c6f0
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000004 	.word	0x20000004

08003c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x30>
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cca:	e027      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cce:	613b      	str	r3, [r7, #16]
      break;
 8003cd0:	e027      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	0c9b      	lsrs	r3, r3, #18
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cdc:	5cd3      	ldrb	r3, [r2, r3]
 8003cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d010      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	0c5b      	lsrs	r3, r3, #17
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cfe:	fb03 f202 	mul.w	r2, r3, r2
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e004      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	613b      	str	r3, [r7, #16]
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d1e:	613b      	str	r3, [r7, #16]
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	693b      	ldr	r3, [r7, #16]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	007a1200 	.word	0x007a1200
 8003d38:	0800c708 	.word	0x0800c708
 8003d3c:	0800c718 	.word	0x0800c718
 8003d40:	003d0900 	.word	0x003d0900

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b02      	ldr	r3, [pc, #8]	@ (8003d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000000 	.word	0x20000000

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d5c:	f7ff fff2 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	0800c700 	.word	0x0800c700

08003d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d84:	f7ff ffde 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0adb      	lsrs	r3, r3, #11
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	0800c700 	.word	0x0800c700

08003da8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	220f      	movs	r2, #15
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCC_GetClockConfig+0x58>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40022000 	.word	0x40022000

08003e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <RCC_Delay+0x34>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <RCC_Delay+0x38>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a5b      	lsrs	r3, r3, #9
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e24:	bf00      	nop
  }
  while (Delay --);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <RCC_Delay+0x1c>
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d07d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e64:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	61d3      	str	r3, [r2, #28]
 8003e7c:	4b49      	ldr	r3, [pc, #292]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b46      	ldr	r3, [pc, #280]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d118      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e98:	4b43      	ldr	r3, [pc, #268]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea4:	f7fe fcd0 	bl	8002848 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7fe fccc 	bl	8002848 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e06d      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eca:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d027      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003efe:	4a29      	ldr	r2, [pc, #164]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d014      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fc9b 	bl	8002848 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fc97 	bl	8002848 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e036      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f38:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4917      	ldr	r1, [pc, #92]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4a13      	ldr	r2, [pc, #76]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f68:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	490b      	ldr	r1, [pc, #44]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f86:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4904      	ldr	r1, [pc, #16]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	42420440 	.word	0x42420440

08003fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e041      	b.n	8004046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd ffc6 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 fa5c 	bl	80044ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e03a      	b.n	80040de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_TIM_Base_Start_IT+0x98>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x58>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004092:	d009      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x58>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a14      	ldr	r2, [pc, #80]	@ (80040ec <HAL_TIM_Base_Start_IT+0x9c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x58>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d111      	bne.n	80040cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d010      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	e007      	b.n	80040dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f998 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f98b 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f99a 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f972 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f965 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f974 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d020      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0208 	mvn.w	r2, #8
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2204      	movs	r2, #4
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f94c 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f93f 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f94e 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f926 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f919 	bl	8004462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f928 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0201 	mvn.w	r2, #1
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd fda6 	bl	8001dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa7f 	bl	8004782 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8f8 	bl	8004498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0220 	mvn.w	r2, #32
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa52 	bl	8004770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIM_ConfigClockSource+0x1c>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0b4      	b.n	800445a <HAL_TIM_ConfigClockSource+0x186>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0xd4>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	f200 8087 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	f000 8086 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x172>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	d87f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d01a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xa6>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d87b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d050      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x11a>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d877      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d03c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xfa>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d873      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d058      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x13a>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d86f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d064      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d86b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d060      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15a>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d867      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	2b10      	cmp	r3, #16
 8004376:	d05a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	f000 f974 	bl	8004676 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	f000 f95d 	bl	8004676 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8d4 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	@ 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f92b 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8f2 	bl	80045e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	@ 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f91b 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f8b4 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f90b 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 f902 	bl	8004642 <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
	...

080044ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2f      	ldr	r2, [pc, #188]	@ (800457c <TIM_Base_SetConfig+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00b      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <TIM_Base_SetConfig+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <TIM_Base_SetConfig+0xd8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a22      	ldr	r2, [pc, #136]	@ (800457c <TIM_Base_SetConfig+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00b      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fc:	d007      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a1f      	ldr	r2, [pc, #124]	@ (8004580 <TIM_Base_SetConfig+0xd4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1e      	ldr	r2, [pc, #120]	@ (8004584 <TIM_Base_SetConfig+0xd8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <TIM_Base_SetConfig+0xd0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d103      	bne.n	8004554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]
  }
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800

08004588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 030a 	bic.w	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0210 	bic.w	r2, r3, #16
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800460e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	031b      	lsls	r3, r3, #12
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004620:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	621a      	str	r2, [r3, #32]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	f043 0307 	orr.w	r3, r3, #7
 8004664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	021a      	lsls	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	431a      	orrs	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	609a      	str	r2, [r3, #8]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e046      	b.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004718:	d009      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a12      	ldr	r2, [pc, #72]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a10      	ldr	r2, [pc, #64]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10c      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800

08004770 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e042      	b.n	800482c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd fbf2 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	@ 0x24
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fdb7 	bl	800534c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800480c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b20      	cmp	r3, #32
 8004852:	d175      	bne.n	8004940 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_UART_Transmit+0x2c>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e06e      	b.n	8004942 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2221      	movs	r2, #33	@ 0x21
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004872:	f7fd ffe9 	bl	8002848 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488c:	d108      	bne.n	80048a0 <HAL_UART_Transmit+0x6c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e003      	b.n	80048a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048a8:	e02e      	b.n	8004908 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2180      	movs	r1, #128	@ 0x80
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb1c 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e03a      	b.n	8004942 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3302      	adds	r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e007      	b.n	80048fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1cb      	bne.n	80048aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2140      	movs	r1, #64	@ 0x40
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fae8 	bl	8004ef2 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e006      	b.n	8004942 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	d112      	bne.n	800498a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Receive_IT+0x26>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e00b      	b.n	800498c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	461a      	mov	r2, r3
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fb0f 	bl	8004fa4 <UART_Start_Receive_IT>
 8004986:	4603      	mov	r3, r0
 8004988:	e000      	b.n	800498c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b0ba      	sub	sp, #232	@ 0xe8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_UART_IRQHandler+0x66>
 80049e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fbec 	bl	80051d0 <UART_Receive_IT>
      return;
 80049f8:	e25b      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80de 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x22c>
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80d1 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0xae>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f043 0201 	orr.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_UART_IRQHandler+0xd2>
 8004a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	f043 0202 	orr.w	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_UART_IRQHandler+0xf6>
 8004a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0204 	orr.w	r2, r3, #4
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_UART_IRQHandler+0x126>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0208 	orr.w	r2, r3, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 81f2 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x14e>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb77 	bl	80051d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <HAL_UART_IRQHandler+0x17a>
 8004b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04f      	beq.n	8004bae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa81 	bl	8005016 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d041      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1d9      	bne.n	8004b22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d013      	beq.n	8004b9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d74 <HAL_UART_IRQHandler+0x3e0>)
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f996 	bl	8002eb4 <HAL_DMA_Abort_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	e00e      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f993 	bl	8004eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00a      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f98f 	bl	8004eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e006      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f98b 	bl	8004eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bba:	e175      	b.n	8004ea8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	bf00      	nop
    return;
 8004bbe:	e173      	b.n	8004ea8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 814f 	bne.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8148 	beq.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8141 	beq.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80b6 	beq.w	8004d78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8145 	beq.w	8004eac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f080 813e 	bcs.w	8004eac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	f000 8088 	beq.w	8004d54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1d9      	bne.n	8004c44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cb4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e1      	bne.n	8004c90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cf0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cf6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e3      	bne.n	8004ccc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e3      	bne.n	8004d12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe f875 	bl	8002e3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8b6 	bl	8004edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d70:	e09c      	b.n	8004eac <HAL_UART_IRQHandler+0x518>
 8004d72:	bf00      	nop
 8004d74:	080050db 	.word	0x080050db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 808e 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8089 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	623b      	str	r3, [r7, #32]
   return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e3      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e40:	61fa      	str	r2, [r7, #28]
 8004e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e3      	bne.n	8004e1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f83b 	bl	8004edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e66:	e023      	b.n	8004eb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_UART_IRQHandler+0x4f4>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f93e 	bl	8005102 <UART_Transmit_IT>
    return;
 8004e86:	e014      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f97d 	bl	80051a0 <UART_EndTransmit_IT>
    return;
 8004ea6:	e004      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004eb0:	bf00      	nop
  }
}
 8004eb2:	37e8      	adds	r7, #232	@ 0xe8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	e03b      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d037      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fd fc9c 	bl	8002848 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e03a      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b80      	cmp	r3, #128	@ 0x80
 8004f38:	d020      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b40      	cmp	r3, #64	@ 0x40
 8004f3e:	d01d      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d116      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f856 	bl	8005016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e00f      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d0b4      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2222      	movs	r2, #34	@ 0x22
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0220 	orr.w	r2, r2, #32
 8005008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b095      	sub	sp, #84	@ 0x54
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800503e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800504c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	61fb      	str	r3, [r7, #28]
   return(result);
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2b01      	cmp	r3, #1
 800508c:	d119      	bne.n	80050c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	60bb      	str	r3, [r7, #8]
   return(result);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 0310 	bic.w	r3, r3, #16
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ae:	61ba      	str	r2, [r7, #24]
 80050b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	613b      	str	r3, [r7, #16]
   return(result);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050d0:	bf00      	nop
 80050d2:	3754      	adds	r7, #84	@ 0x54
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fee8 	bl	8004eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b21      	cmp	r3, #33	@ 0x21
 8005114:	d13e      	bne.n	8005194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511e:	d114      	bne.n	800514a <UART_Transmit_IT+0x48>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d110      	bne.n	800514a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]
 8005148:	e008      	b.n	800515c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6211      	str	r1, [r2, #32]
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4619      	mov	r1, r3
 800516a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10f      	bne.n	8005190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800517e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800518e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005194:	2302      	movs	r3, #2
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fe79 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	@ 0x30
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b22      	cmp	r3, #34	@ 0x22
 80051e2:	f040 80ae 	bne.w	8005342 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ee:	d117      	bne.n	8005220 <UART_Receive_IT+0x50>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d113      	bne.n	8005220 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	b29a      	uxth	r2, r3
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	629a      	str	r2, [r3, #40]	@ 0x28
 800521e:	e026      	b.n	800526e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	d007      	beq.n	8005244 <UART_Receive_IT+0x74>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <UART_Receive_IT+0x82>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e008      	b.n	8005264 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800525e:	b2da      	uxtb	r2, r3
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4619      	mov	r1, r3
 800527c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800527e:	2b00      	cmp	r3, #0
 8005280:	d15d      	bne.n	800533e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0220 	bic.w	r2, r2, #32
 8005290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d135      	bne.n	8005334 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	613b      	str	r3, [r7, #16]
   return(result);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ee:	623a      	str	r2, [r7, #32]
 80052f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	69f9      	ldr	r1, [r7, #28]
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b10      	cmp	r3, #16
 800530e:	d10a      	bne.n	8005326 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fdd5 	bl	8004edc <HAL_UARTEx_RxEventCallback>
 8005332:	e002      	b.n	800533a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fd f94f 	bl	80025d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e002      	b.n	8005344 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3730      	adds	r7, #48	@ 0x30
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005386:	f023 030c 	bic.w	r3, r3, #12
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	430b      	orrs	r3, r1
 8005392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <UART_SetConfig+0x114>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fce4 	bl	8003d80 <HAL_RCC_GetPCLK2Freq>
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	e002      	b.n	80053c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fccc 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80053c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	0119      	lsls	r1, r3, #4
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009a      	lsls	r2, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <UART_SetConfig+0x118>)
 80053fa:	fba3 0302 	umull	r0, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2064      	movs	r0, #100	@ 0x64
 8005402:	fb00 f303 	mul.w	r3, r0, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	3332      	adds	r3, #50	@ 0x32
 800540c:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <UART_SetConfig+0x118>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005418:	4419      	add	r1, r3
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005430:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <UART_SetConfig+0x118>)
 8005432:	fba3 0302 	umull	r0, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2064      	movs	r0, #100	@ 0x64
 800543a:	fb00 f303 	mul.w	r3, r0, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	3332      	adds	r3, #50	@ 0x32
 8005444:	4a07      	ldr	r2, [pc, #28]	@ (8005464 <UART_SetConfig+0x118>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	440a      	add	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40013800 	.word	0x40013800
 8005464:	51eb851f 	.word	0x51eb851f

08005468 <__NVIC_SetPriority>:
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db0a      	blt.n	8005492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	490c      	ldr	r1, [pc, #48]	@ (80054b4 <__NVIC_SetPriority+0x4c>)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	0112      	lsls	r2, r2, #4
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	440b      	add	r3, r1
 800548c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005490:	e00a      	b.n	80054a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4908      	ldr	r1, [pc, #32]	@ (80054b8 <__NVIC_SetPriority+0x50>)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	3b04      	subs	r3, #4
 80054a0:	0112      	lsls	r2, r2, #4
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	440b      	add	r3, r1
 80054a6:	761a      	strb	r2, [r3, #24]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000e100 	.word	0xe000e100
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054c0:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <SysTick_Handler+0x1c>)
 80054c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054c4:	f001 fd38 	bl	8006f38 <xTaskGetSchedulerState>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054ce:	f002 fadb 	bl	8007a88 <xPortSysTickHandler>
  }
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	e000e010 	.word	0xe000e010

080054dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054e0:	2100      	movs	r1, #0
 80054e2:	f06f 0004 	mvn.w	r0, #4
 80054e6:	f7ff ffbf 	bl	8005468 <__NVIC_SetPriority>
#endif
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	603b      	str	r3, [r7, #0]
  return(result);
 80054fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005502:	f06f 0305 	mvn.w	r3, #5
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e00c      	b.n	8005524 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800550a:	4b09      	ldr	r3, [pc, #36]	@ (8005530 <osKernelInitialize+0x40>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005512:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <osKernelInitialize+0x40>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	e002      	b.n	8005524 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
 8005522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005524:	687b      	ldr	r3, [r7, #4]
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	200005dc 	.word	0x200005dc

08005534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553a:	f3ef 8305 	mrs	r3, IPSR
 800553e:	603b      	str	r3, [r7, #0]
  return(result);
 8005540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005546:	f06f 0305 	mvn.w	r3, #5
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e010      	b.n	8005570 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800554e:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <osKernelStart+0x48>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d109      	bne.n	800556a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005556:	f7ff ffc1 	bl	80054dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800555a:	4b08      	ldr	r3, [pc, #32]	@ (800557c <osKernelStart+0x48>)
 800555c:	2202      	movs	r2, #2
 800555e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005560:	f001 f88a 	bl	8006678 <vTaskStartScheduler>
      stat = osOK;
 8005564:	2300      	movs	r3, #0
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e002      	b.n	8005570 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005570:	687b      	ldr	r3, [r7, #4]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	200005dc 	.word	0x200005dc

08005580 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08e      	sub	sp, #56	@ 0x38
 8005584:	af04      	add	r7, sp, #16
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005590:	f3ef 8305 	mrs	r3, IPSR
 8005594:	617b      	str	r3, [r7, #20]
  return(result);
 8005596:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005598:	2b00      	cmp	r3, #0
 800559a:	d17e      	bne.n	800569a <osThreadNew+0x11a>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d07b      	beq.n	800569a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055a6:	2318      	movs	r3, #24
 80055a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80055ae:	f04f 33ff 	mov.w	r3, #4294967295
 80055b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d045      	beq.n	8005646 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <osThreadNew+0x48>
        name = attr->name;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <osThreadNew+0x6e>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b38      	cmp	r3, #56	@ 0x38
 80055e0:	d805      	bhi.n	80055ee <osThreadNew+0x6e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <osThreadNew+0x72>
        return (NULL);
 80055ee:	2300      	movs	r3, #0
 80055f0:	e054      	b.n	800569c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <osThreadNew+0xa8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005610:	d90a      	bls.n	8005628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <osThreadNew+0xa8>
        mem = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e010      	b.n	800564a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <osThreadNew+0xca>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <osThreadNew+0xca>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <osThreadNew+0xca>
          mem = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e001      	b.n	800564a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d110      	bne.n	8005672 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005658:	9202      	str	r2, [sp, #8]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fe12 	bl	8006290 <xTaskCreateStatic>
 800566c:	4603      	mov	r3, r0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e013      	b.n	800569a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d110      	bne.n	800569a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fe60 	bl	8006350 <xTaskCreate>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <osThreadNew+0x11a>
            hTask = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800569a:	693b      	ldr	r3, [r7, #16]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	@ 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ac:	f3ef 8305 	mrs	r3, IPSR
 80056b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <osDelay+0x1c>
    stat = osErrorISR;
 80056b8:	f06f 0305 	mvn.w	r3, #5
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e007      	b.n	80056d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 ff9e 	bl	800660c <vTaskDelay>
    }
  }

  return (stat);
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a06      	ldr	r2, [pc, #24]	@ (8005704 <vApplicationGetIdleTaskMemory+0x28>)
 80056ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a05      	ldr	r2, [pc, #20]	@ (8005708 <vApplicationGetIdleTaskMemory+0x2c>)
 80056f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	200005e0 	.word	0x200005e0
 8005708:	20000688 	.word	0x20000688

0800570c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a07      	ldr	r2, [pc, #28]	@ (8005738 <vApplicationGetTimerTaskMemory+0x2c>)
 800571c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a06      	ldr	r2, [pc, #24]	@ (800573c <vApplicationGetTimerTaskMemory+0x30>)
 8005722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800572a:	601a      	str	r2, [r3, #0]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000888 	.word	0x20000888
 800573c:	20000930 	.word	0x20000930

08005740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f103 0208 	add.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f04f 32ff 	mov.w	r2, #4294967295
 8005758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f103 0208 	add.w	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f103 0208 	add.w	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d103      	bne.n	80057fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e00c      	b.n	8005816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3308      	adds	r3, #8
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e002      	b.n	800580a <vListInsert+0x2e>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d2f6      	bcs.n	8005804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d103      	bne.n	8005880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1e5a      	subs	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
	...

080058a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058cc:	f002 f85e 	bl	800798c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	3b01      	subs	r3, #1
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	22ff      	movs	r2, #255	@ 0xff
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d114      	bne.n	800594c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01a      	beq.n	8005960 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3310      	adds	r3, #16
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f93c 	bl	8006bac <xTaskRemoveFromEventList>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d012      	beq.n	8005960 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <xQueueGenericReset+0xd0>)
 800593c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	e009      	b.n	8005960 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3310      	adds	r3, #16
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fef5 	bl	8005740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3324      	adds	r3, #36	@ 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fef0 	bl	8005740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005960:	f002 f844 	bl	80079ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	@ 0x38
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <xQueueGenericCreateStatic+0x56>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <xQueueGenericCreateStatic+0x5a>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueGenericCreateStatic+0x5c>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xQueueGenericCreateStatic+0x84>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericCreateStatic+0x88>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericCreateStatic+0x8a>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	61fb      	str	r3, [r7, #28]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a1a:	2350      	movs	r3, #80	@ 0x50
 8005a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b50      	cmp	r3, #80	@ 0x50
 8005a22:	d00b      	beq.n	8005a3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61bb      	str	r3, [r7, #24]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f805 	bl	8005a6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	@ 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	69b8      	ldr	r0, [r7, #24]
 8005aa0:	f7ff fefe 	bl	80058a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08e      	sub	sp, #56	@ 0x38
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <xQueueGenericSend+0x34>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <xQueueGenericSend+0x42>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <xQueueGenericSend+0x46>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <xQueueGenericSend+0x48>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <xQueueGenericSend+0x64>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	e7fd      	b.n	8005b14 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d103      	bne.n	8005b26 <xQueueGenericSend+0x72>
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <xQueueGenericSend+0x76>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <xQueueGenericSend+0x78>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <xQueueGenericSend+0x94>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	623b      	str	r3, [r7, #32]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b48:	f001 f9f6 	bl	8006f38 <xTaskGetSchedulerState>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <xQueueGenericSend+0xa4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <xQueueGenericSend+0xa8>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <xQueueGenericSend+0xaa>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <xQueueGenericSend+0xc6>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61fb      	str	r3, [r7, #28]
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	e7fd      	b.n	8005b76 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b7a:	f001 ff07 	bl	800798c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d302      	bcc.n	8005b90 <xQueueGenericSend+0xdc>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d129      	bne.n	8005be4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b96:	f000 fa0f 	bl	8005fb8 <prvCopyDataToQueue>
 8005b9a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	3324      	adds	r3, #36	@ 0x24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 ffff 	bl	8006bac <xTaskRemoveFromEventList>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb4 <xQueueGenericSend+0x200>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	e00a      	b.n	8005bdc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bcc:	4b39      	ldr	r3, [pc, #228]	@ (8005cb4 <xQueueGenericSend+0x200>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bdc:	f001 ff06 	bl	80079ec <vPortExitCritical>
				return pdPASS;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e063      	b.n	8005cac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bea:	f001 feff 	bl	80079ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e05c      	b.n	8005cac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf8:	f107 0314 	add.w	r3, r7, #20
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 f839 	bl	8006c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c06:	f001 fef1 	bl	80079ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c0a:	f000 fda5 	bl	8006758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c0e:	f001 febd 	bl	800798c <vPortEnterCritical>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d103      	bne.n	8005c28 <xQueueGenericSend+0x174>
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d103      	bne.n	8005c3e <xQueueGenericSend+0x18a>
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c3e:	f001 fed5 	bl	80079ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c42:	1d3a      	adds	r2, r7, #4
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f828 	bl	8006ca0 <xTaskCheckForTimeOut>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d124      	bne.n	8005ca0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c58:	f000 faa6 	bl	80061a8 <prvIsQueueFull>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	3310      	adds	r3, #16
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 ff4c 	bl	8006b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c72:	f000 fa31 	bl	80060d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c76:	f000 fd7d 	bl	8006774 <xTaskResumeAll>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f47f af7c 	bne.w	8005b7a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <xQueueGenericSend+0x200>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	e772      	b.n	8005b7a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c96:	f000 fa1f 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c9a:	f000 fd6b 	bl	8006774 <xTaskResumeAll>
 8005c9e:	e76c      	b.n	8005b7a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ca2:	f000 fa19 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca6:	f000 fd65 	bl	8006774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005caa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3738      	adds	r7, #56	@ 0x38
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b090      	sub	sp, #64	@ 0x40
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <xQueueGenericSendFromISR+0x3e>
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <xQueueGenericSendFromISR+0x42>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <xQueueGenericSendFromISR+0x44>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d103      	bne.n	8005d26 <xQueueGenericSendFromISR+0x6e>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <xQueueGenericSendFromISR+0x72>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <xQueueGenericSendFromISR+0x74>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	623b      	str	r3, [r7, #32]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d48:	f001 fee2 	bl	8007b10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d4c:	f3ef 8211 	mrs	r2, BASEPRI
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	61fa      	str	r2, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d64:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d66:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d302      	bcc.n	8005d7a <xQueueGenericSendFromISR+0xc2>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d12f      	bne.n	8005dda <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d90:	f000 f912 	bl	8005fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d94:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d112      	bne.n	8005dc4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d016      	beq.n	8005dd4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	3324      	adds	r3, #36	@ 0x24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fefe 	bl	8006bac <xTaskRemoveFromEventList>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00e      	beq.n	8005dd4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e007      	b.n	8005dd4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005dc8:	3301      	adds	r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b25a      	sxtb	r2, r3
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005dd8:	e001      	b.n	8005dde <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005de8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3740      	adds	r7, #64	@ 0x40
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	@ 0x30
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <xQueueReceive+0x32>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	623b      	str	r3, [r7, #32]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <xQueueReceive+0x40>
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <xQueueReceive+0x44>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <xQueueReceive+0x46>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <xQueueReceive+0x62>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61fb      	str	r3, [r7, #28]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e56:	f001 f86f 	bl	8006f38 <xTaskGetSchedulerState>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <xQueueReceive+0x72>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <xQueueReceive+0x76>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueReceive+0x78>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <xQueueReceive+0x94>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61bb      	str	r3, [r7, #24]
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e88:	f001 fd80 	bl	800798c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01f      	beq.n	8005ed8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e9c:	f000 f8f6 	bl	800608c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	1e5a      	subs	r2, r3, #1
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	3310      	adds	r3, #16
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe79 	bl	8006bac <xTaskRemoveFromEventList>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb4 <xQueueReceive+0x1c0>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ed0:	f001 fd8c 	bl	80079ec <vPortExitCritical>
				return pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e069      	b.n	8005fac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ede:	f001 fd85 	bl	80079ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e062      	b.n	8005fac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eec:	f107 0310 	add.w	r3, r7, #16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 febf 	bl	8006c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efa:	f001 fd77 	bl	80079ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005efe:	f000 fc2b 	bl	8006758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f02:	f001 fd43 	bl	800798c <vPortEnterCritical>
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d103      	bne.n	8005f1c <xQueueReceive+0x128>
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d103      	bne.n	8005f32 <xQueueReceive+0x13e>
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f32:	f001 fd5b 	bl	80079ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f36:	1d3a      	adds	r2, r7, #4
 8005f38:	f107 0310 	add.w	r3, r7, #16
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 feae 	bl	8006ca0 <xTaskCheckForTimeOut>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d123      	bne.n	8005f92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f4c:	f000 f916 	bl	800617c <prvIsQueueEmpty>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	3324      	adds	r3, #36	@ 0x24
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fdd2 	bl	8006b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f66:	f000 f8b7 	bl	80060d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f6a:	f000 fc03 	bl	8006774 <xTaskResumeAll>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d189      	bne.n	8005e88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f74:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb4 <xQueueReceive+0x1c0>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e780      	b.n	8005e88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f88:	f000 f8a6 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8c:	f000 fbf2 	bl	8006774 <xTaskResumeAll>
 8005f90:	e77a      	b.n	8005e88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f94:	f000 f8a0 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f98:	f000 fbec 	bl	8006774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f9e:	f000 f8ed 	bl	800617c <prvIsQueueEmpty>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f43f af6f 	beq.w	8005e88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005faa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3730      	adds	r7, #48	@ 0x30
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d14d      	bne.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 ffc6 	bl	8006f74 <xTaskPriorityDisinherit>
 8005fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e043      	b.n	800607a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d119      	bne.n	800602c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6858      	ldr	r0, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	461a      	mov	r2, r3
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	f002 fc8d 	bl	8008922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d32b      	bcc.n	800607a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e026      	b.n	800607a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68d8      	ldr	r0, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f002 fc73 	bl	8008922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	425b      	negs	r3, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d207      	bcs.n	8006068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	425b      	negs	r3, r3
 8006062:	441a      	add	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d105      	bne.n	800607a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3b01      	subs	r3, #1
 8006078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006082:	697b      	ldr	r3, [r7, #20]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d303      	bcc.n	80060c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68d9      	ldr	r1, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	461a      	mov	r2, r3
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f002 fc29 	bl	8008922 <memcpy>
	}
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 fc54 	bl	800798c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ec:	e011      	b.n	8006112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	@ 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fd56 	bl	8006bac <xTaskRemoveFromEventList>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006106:	f000 fe2f 	bl	8006d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3b01      	subs	r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	dce9      	bgt.n	80060ee <prvUnlockQueue+0x16>
 800611a:	e000      	b.n	800611e <prvUnlockQueue+0x46>
					break;
 800611c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	22ff      	movs	r2, #255	@ 0xff
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006126:	f001 fc61 	bl	80079ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800612a:	f001 fc2f 	bl	800798c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006136:	e011      	b.n	800615c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fd31 	bl	8006bac <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006150:	f000 fe0a 	bl	8006d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	dce9      	bgt.n	8006138 <prvUnlockQueue+0x60>
 8006164:	e000      	b.n	8006168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	22ff      	movs	r2, #255	@ 0xff
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006170:	f001 fc3c 	bl	80079ec <vPortExitCritical>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006184:	f001 fc02 	bl	800798c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619a:	f001 fc27 	bl	80079ec <vPortExitCritical>

	return xReturn;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b0:	f001 fbec 	bl	800798c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d102      	bne.n	80061c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f001 fc0f 	bl	80079ec <vPortExitCritical>

	return xReturn;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e014      	b.n	8006212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <vQueueAddToRegistry+0x4c>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061f4:	490b      	ldr	r1, [pc, #44]	@ (8006224 <vQueueAddToRegistry+0x4c>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061fe:	4a09      	ldr	r2, [pc, #36]	@ (8006224 <vQueueAddToRegistry+0x4c>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4413      	add	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800620a:	e006      	b.n	800621a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b07      	cmp	r3, #7
 8006216:	d9e7      	bls.n	80061e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	20000d30 	.word	0x20000d30

08006228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006238:	f001 fba8 	bl	800798c <vPortEnterCritical>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <vQueueWaitForMessageRestricted+0x2a>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d103      	bne.n	8006268 <vQueueWaitForMessageRestricted+0x40>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006268:	f001 fbc0 	bl	80079ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3324      	adds	r3, #36	@ 0x24
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fc69 	bl	8006b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006282:	6978      	ldr	r0, [r7, #20]
 8006284:	f7ff ff28 	bl	80060d8 <prvUnlockQueue>
	}
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08e      	sub	sp, #56	@ 0x38
 8006294:	af04      	add	r7, sp, #16
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	623b      	str	r3, [r7, #32]
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	e7fd      	b.n	80062b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <xTaskCreateStatic+0x4a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	61fb      	str	r3, [r7, #28]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062da:	23a8      	movs	r3, #168	@ 0xa8
 80062dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2ba8      	cmp	r3, #168	@ 0xa8
 80062e2:	d00b      	beq.n	80062fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61bb      	str	r3, [r7, #24]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01e      	beq.n	8006342 <xTaskCreateStatic+0xb2>
 8006304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	2202      	movs	r2, #2
 8006318:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800631c:	2300      	movs	r3, #0
 800631e:	9303      	str	r3, [sp, #12]
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	9302      	str	r3, [sp, #8]
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f851 	bl	80063dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800633a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800633c:	f000 f8f6 	bl	800652c <prvAddNewTaskToReadyList>
 8006340:	e001      	b.n	8006346 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006346:	697b      	ldr	r3, [r7, #20]
	}
 8006348:	4618      	mov	r0, r3
 800634a:	3728      	adds	r7, #40	@ 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	@ 0x30
 8006354:	af04      	add	r7, sp, #16
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	4613      	mov	r3, r2
 800635e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4618      	mov	r0, r3
 8006366:	f001 fc13 	bl	8007b90 <pvPortMalloc>
 800636a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006372:	20a8      	movs	r0, #168	@ 0xa8
 8006374:	f001 fc0c 	bl	8007b90 <pvPortMalloc>
 8006378:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
 8006386:	e005      	b.n	8006394 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f001 fccf 	bl	8007d2c <vPortFree>
 800638e:	e001      	b.n	8006394 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d017      	beq.n	80063ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	2300      	movs	r3, #0
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	9302      	str	r3, [sp, #8]
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f80f 	bl	80063dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063be:	69f8      	ldr	r0, [r7, #28]
 80063c0:	f000 f8b4 	bl	800652c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063c4:	2301      	movs	r3, #1
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	e002      	b.n	80063d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063d0:	69bb      	ldr	r3, [r7, #24]
	}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	461a      	mov	r2, r3
 80063f4:	21a5      	movs	r1, #165	@ 0xa5
 80063f6:	f002 f916 	bl	8008626 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006404:	3b01      	subs	r3, #1
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f023 0307 	bic.w	r3, r3, #7
 8006412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	617b      	str	r3, [r7, #20]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01f      	beq.n	800647c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800643c:	2300      	movs	r3, #0
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	e012      	b.n	8006468 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	7819      	ldrb	r1, [r3, #0]
 800644a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	3334      	adds	r3, #52	@ 0x34
 8006452:	460a      	mov	r2, r1
 8006454:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3301      	adds	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d9e9      	bls.n	8006442 <prvInitialiseNewTask+0x66>
 800646e:	e000      	b.n	8006472 <prvInitialiseNewTask+0x96>
			{
				break;
 8006470:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800647a:	e003      	b.n	8006484 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	2b37      	cmp	r3, #55	@ 0x37
 8006488:	d901      	bls.n	800648e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800648a:	2337      	movs	r3, #55	@ 0x37
 800648c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006492:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006498:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	2200      	movs	r2, #0
 800649e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	3304      	adds	r3, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff f96a 	bl	800577e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	3318      	adds	r3, #24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff f965 	bl	800577e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	3354      	adds	r3, #84	@ 0x54
 80064de:	224c      	movs	r2, #76	@ 0x4c
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f002 f89f 	bl	8008626 <memset>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006520 <prvInitialiseNewTask+0x144>)
 80064ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006524 <prvInitialiseNewTask+0x148>)
 80064f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006528 <prvInitialiseNewTask+0x14c>)
 80064f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	69b8      	ldr	r0, [r7, #24]
 8006500:	f001 f954 	bl	80077ac <pxPortInitialiseStack>
 8006504:	4602      	mov	r2, r0
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006516:	bf00      	nop
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20001fc4 	.word	0x20001fc4
 8006524:	2000202c 	.word	0x2000202c
 8006528:	20002094 	.word	0x20002094

0800652c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006534:	f001 fa2a 	bl	800798c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006538:	4b2d      	ldr	r3, [pc, #180]	@ (80065f0 <prvAddNewTaskToReadyList+0xc4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	4a2c      	ldr	r2, [pc, #176]	@ (80065f0 <prvAddNewTaskToReadyList+0xc4>)
 8006540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006542:	4b2c      	ldr	r3, [pc, #176]	@ (80065f4 <prvAddNewTaskToReadyList+0xc8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800654a:	4a2a      	ldr	r2, [pc, #168]	@ (80065f4 <prvAddNewTaskToReadyList+0xc8>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006550:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <prvAddNewTaskToReadyList+0xc4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d110      	bne.n	800657a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006558:	f000 fc2a 	bl	8006db0 <prvInitialiseTaskLists>
 800655c:	e00d      	b.n	800657a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800655e:	4b26      	ldr	r3, [pc, #152]	@ (80065f8 <prvAddNewTaskToReadyList+0xcc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006566:	4b23      	ldr	r3, [pc, #140]	@ (80065f4 <prvAddNewTaskToReadyList+0xc8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	429a      	cmp	r2, r3
 8006572:	d802      	bhi.n	800657a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006574:	4a1f      	ldr	r2, [pc, #124]	@ (80065f4 <prvAddNewTaskToReadyList+0xc8>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800657a:	4b20      	ldr	r3, [pc, #128]	@ (80065fc <prvAddNewTaskToReadyList+0xd0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	4a1e      	ldr	r2, [pc, #120]	@ (80065fc <prvAddNewTaskToReadyList+0xd0>)
 8006582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006584:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <prvAddNewTaskToReadyList+0xd0>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006590:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <prvAddNewTaskToReadyList+0xd4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d903      	bls.n	80065a0 <prvAddNewTaskToReadyList+0x74>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <prvAddNewTaskToReadyList+0xd4>)
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <prvAddNewTaskToReadyList+0xd8>)
 80065ae:	441a      	add	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f7ff f8ed 	bl	8005796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065bc:	f001 fa16 	bl	80079ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065c0:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <prvAddNewTaskToReadyList+0xcc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00e      	beq.n	80065e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065c8:	4b0a      	ldr	r3, [pc, #40]	@ (80065f4 <prvAddNewTaskToReadyList+0xc8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d207      	bcs.n	80065e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <prvAddNewTaskToReadyList+0xdc>)
 80065d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20001244 	.word	0x20001244
 80065f4:	20000d70 	.word	0x20000d70
 80065f8:	20001250 	.word	0x20001250
 80065fc:	20001260 	.word	0x20001260
 8006600:	2000124c 	.word	0x2000124c
 8006604:	20000d74 	.word	0x20000d74
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d018      	beq.n	8006650 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800661e:	4b14      	ldr	r3, [pc, #80]	@ (8006670 <vTaskDelay+0x64>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <vTaskDelay+0x32>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800663e:	f000 f88b 	bl	8006758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fd05 	bl	8007054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800664a:	f000 f893 	bl	8006774 <xTaskResumeAll>
 800664e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006656:	4b07      	ldr	r3, [pc, #28]	@ (8006674 <vTaskDelay+0x68>)
 8006658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	2000126c 	.word	0x2000126c
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	@ 0x28
 800667c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006686:	463a      	mov	r2, r7
 8006688:	1d39      	adds	r1, r7, #4
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f824 	bl	80056dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	9202      	str	r2, [sp, #8]
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	2300      	movs	r3, #0
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	460a      	mov	r2, r1
 80066a6:	4924      	ldr	r1, [pc, #144]	@ (8006738 <vTaskStartScheduler+0xc0>)
 80066a8:	4824      	ldr	r0, [pc, #144]	@ (800673c <vTaskStartScheduler+0xc4>)
 80066aa:	f7ff fdf1 	bl	8006290 <xTaskCreateStatic>
 80066ae:	4603      	mov	r3, r0
 80066b0:	4a23      	ldr	r2, [pc, #140]	@ (8006740 <vTaskStartScheduler+0xc8>)
 80066b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <vTaskStartScheduler+0xc8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066bc:	2301      	movs	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e001      	b.n	80066c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d102      	bne.n	80066d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066cc:	f000 fd16 	bl	80070fc <xTimerCreateTimerTask>
 80066d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d11b      	bne.n	8006710 <vTaskStartScheduler+0x98>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	613b      	str	r3, [r7, #16]
}
 80066ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066ec:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <vTaskStartScheduler+0xcc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3354      	adds	r3, #84	@ 0x54
 80066f2:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <vTaskStartScheduler+0xd0>)
 80066f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066f6:	4b15      	ldr	r3, [pc, #84]	@ (800674c <vTaskStartScheduler+0xd4>)
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066fe:	4b14      	ldr	r3, [pc, #80]	@ (8006750 <vTaskStartScheduler+0xd8>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006704:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <vTaskStartScheduler+0xdc>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800670a:	f001 f8cd 	bl	80078a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800670e:	e00f      	b.n	8006730 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d10b      	bne.n	8006730 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	e7fd      	b.n	800672c <vTaskStartScheduler+0xb4>
}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	0800c684 	.word	0x0800c684
 800673c:	08006d81 	.word	0x08006d81
 8006740:	20001268 	.word	0x20001268
 8006744:	20000d70 	.word	0x20000d70
 8006748:	2000001c 	.word	0x2000001c
 800674c:	20001264 	.word	0x20001264
 8006750:	20001250 	.word	0x20001250
 8006754:	20001248 	.word	0x20001248

08006758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800675c:	4b04      	ldr	r3, [pc, #16]	@ (8006770 <vTaskSuspendAll+0x18>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a03      	ldr	r2, [pc, #12]	@ (8006770 <vTaskSuspendAll+0x18>)
 8006764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006766:	bf00      	nop
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	2000126c 	.word	0x2000126c

08006774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006782:	4b42      	ldr	r3, [pc, #264]	@ (800688c <xTaskResumeAll+0x118>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	603b      	str	r3, [r7, #0]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067a2:	f001 f8f3 	bl	800798c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067a6:	4b39      	ldr	r3, [pc, #228]	@ (800688c <xTaskResumeAll+0x118>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a37      	ldr	r2, [pc, #220]	@ (800688c <xTaskResumeAll+0x118>)
 80067ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b0:	4b36      	ldr	r3, [pc, #216]	@ (800688c <xTaskResumeAll+0x118>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d162      	bne.n	800687e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067b8:	4b35      	ldr	r3, [pc, #212]	@ (8006890 <xTaskResumeAll+0x11c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d05e      	beq.n	800687e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c0:	e02f      	b.n	8006822 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c2:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <xTaskResumeAll+0x120>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3318      	adds	r3, #24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff f83c 	bl	800584c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff f837 	bl	800584c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006898 <xTaskResumeAll+0x124>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d903      	bls.n	80067f2 <xTaskResumeAll+0x7e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006898 <xTaskResumeAll+0x124>)
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4a27      	ldr	r2, [pc, #156]	@ (800689c <xTaskResumeAll+0x128>)
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7fe ffc4 	bl	8005796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006812:	4b23      	ldr	r3, [pc, #140]	@ (80068a0 <xTaskResumeAll+0x12c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	429a      	cmp	r2, r3
 800681a:	d302      	bcc.n	8006822 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800681c:	4b21      	ldr	r3, [pc, #132]	@ (80068a4 <xTaskResumeAll+0x130>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006822:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <xTaskResumeAll+0x120>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1cb      	bne.n	80067c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006830:	f000 fb62 	bl	8006ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006834:	4b1c      	ldr	r3, [pc, #112]	@ (80068a8 <xTaskResumeAll+0x134>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006840:	f000 f844 	bl	80068cc <xTaskIncrementTick>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800684a:	4b16      	ldr	r3, [pc, #88]	@ (80068a4 <xTaskResumeAll+0x130>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3b01      	subs	r3, #1
 8006854:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800685c:	4b12      	ldr	r3, [pc, #72]	@ (80068a8 <xTaskResumeAll+0x134>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <xTaskResumeAll+0x130>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800686a:	2301      	movs	r3, #1
 800686c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800686e:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <xTaskResumeAll+0x138>)
 8006870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800687e:	f001 f8b5 	bl	80079ec <vPortExitCritical>

	return xAlreadyYielded;
 8006882:	68bb      	ldr	r3, [r7, #8]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2000126c 	.word	0x2000126c
 8006890:	20001244 	.word	0x20001244
 8006894:	20001204 	.word	0x20001204
 8006898:	2000124c 	.word	0x2000124c
 800689c:	20000d74 	.word	0x20000d74
 80068a0:	20000d70 	.word	0x20000d70
 80068a4:	20001258 	.word	0x20001258
 80068a8:	20001254 	.word	0x20001254
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068b6:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <xTaskGetTickCount+0x18>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068bc:	687b      	ldr	r3, [r7, #4]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr
 80068c8:	20001248 	.word	0x20001248

080068cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a14 <xTaskIncrementTick+0x148>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 8090 	bne.w	8006a00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006a18 <xTaskIncrementTick+0x14c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068e8:	4a4b      	ldr	r2, [pc, #300]	@ (8006a18 <xTaskIncrementTick+0x14c>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d121      	bne.n	8006938 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80068f4:	4b49      	ldr	r3, [pc, #292]	@ (8006a1c <xTaskIncrementTick+0x150>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <xTaskIncrementTick+0x4a>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	603b      	str	r3, [r7, #0]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xTaskIncrementTick+0x46>
 8006916:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <xTaskIncrementTick+0x150>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	4b40      	ldr	r3, [pc, #256]	@ (8006a20 <xTaskIncrementTick+0x154>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a3e      	ldr	r2, [pc, #248]	@ (8006a1c <xTaskIncrementTick+0x150>)
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	4a3e      	ldr	r2, [pc, #248]	@ (8006a20 <xTaskIncrementTick+0x154>)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a24 <xTaskIncrementTick+0x158>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	4a3c      	ldr	r2, [pc, #240]	@ (8006a24 <xTaskIncrementTick+0x158>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	f000 fae0 	bl	8006ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006938:	4b3b      	ldr	r3, [pc, #236]	@ (8006a28 <xTaskIncrementTick+0x15c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	429a      	cmp	r2, r3
 8006940:	d349      	bcc.n	80069d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006942:	4b36      	ldr	r3, [pc, #216]	@ (8006a1c <xTaskIncrementTick+0x150>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694c:	4b36      	ldr	r3, [pc, #216]	@ (8006a28 <xTaskIncrementTick+0x15c>)
 800694e:	f04f 32ff 	mov.w	r2, #4294967295
 8006952:	601a      	str	r2, [r3, #0]
					break;
 8006954:	e03f      	b.n	80069d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006956:	4b31      	ldr	r3, [pc, #196]	@ (8006a1c <xTaskIncrementTick+0x150>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	429a      	cmp	r2, r3
 800696c:	d203      	bcs.n	8006976 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800696e:	4a2e      	ldr	r2, [pc, #184]	@ (8006a28 <xTaskIncrementTick+0x15c>)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006974:	e02f      	b.n	80069d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3304      	adds	r3, #4
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe ff66 	bl	800584c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	3318      	adds	r3, #24
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe ff5d 	bl	800584c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006996:	4b25      	ldr	r3, [pc, #148]	@ (8006a2c <xTaskIncrementTick+0x160>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d903      	bls.n	80069a6 <xTaskIncrementTick+0xda>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	4a22      	ldr	r2, [pc, #136]	@ (8006a2c <xTaskIncrementTick+0x160>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a30 <xTaskIncrementTick+0x164>)
 80069b4:	441a      	add	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7fe feea 	bl	8005796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a34 <xTaskIncrementTick+0x168>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3b8      	bcc.n	8006942 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d4:	e7b5      	b.n	8006942 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069d6:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <xTaskIncrementTick+0x168>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	4914      	ldr	r1, [pc, #80]	@ (8006a30 <xTaskIncrementTick+0x164>)
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d901      	bls.n	80069f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069f2:	4b11      	ldr	r3, [pc, #68]	@ (8006a38 <xTaskIncrementTick+0x16c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80069fa:	2301      	movs	r3, #1
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e004      	b.n	8006a0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a00:	4b0e      	ldr	r3, [pc, #56]	@ (8006a3c <xTaskIncrementTick+0x170>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	4a0d      	ldr	r2, [pc, #52]	@ (8006a3c <xTaskIncrementTick+0x170>)
 8006a08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a0a:	697b      	ldr	r3, [r7, #20]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	2000126c 	.word	0x2000126c
 8006a18:	20001248 	.word	0x20001248
 8006a1c:	200011fc 	.word	0x200011fc
 8006a20:	20001200 	.word	0x20001200
 8006a24:	2000125c 	.word	0x2000125c
 8006a28:	20001264 	.word	0x20001264
 8006a2c:	2000124c 	.word	0x2000124c
 8006a30:	20000d74 	.word	0x20000d74
 8006a34:	20000d70 	.word	0x20000d70
 8006a38:	20001258 	.word	0x20001258
 8006a3c:	20001254 	.word	0x20001254

08006a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a46:	4b2a      	ldr	r3, [pc, #168]	@ (8006af0 <vTaskSwitchContext+0xb0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a4e:	4b29      	ldr	r3, [pc, #164]	@ (8006af4 <vTaskSwitchContext+0xb4>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a54:	e047      	b.n	8006ae6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006a56:	4b27      	ldr	r3, [pc, #156]	@ (8006af4 <vTaskSwitchContext+0xb4>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <vTaskSwitchContext+0xb8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e011      	b.n	8006a88 <vTaskSwitchContext+0x48>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	607b      	str	r3, [r7, #4]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <vTaskSwitchContext+0x3e>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	491c      	ldr	r1, [pc, #112]	@ (8006afc <vTaskSwitchContext+0xbc>)
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0e3      	beq.n	8006a64 <vTaskSwitchContext+0x24>
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <vTaskSwitchContext+0xbc>)
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	3308      	adds	r3, #8
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d104      	bne.n	8006acc <vTaskSwitchContext+0x8c>
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8006b00 <vTaskSwitchContext+0xc0>)
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	4a08      	ldr	r2, [pc, #32]	@ (8006af8 <vTaskSwitchContext+0xb8>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006adc:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <vTaskSwitchContext+0xc0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3354      	adds	r3, #84	@ 0x54
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <vTaskSwitchContext+0xc4>)
 8006ae4:	6013      	str	r3, [r2, #0]
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr
 8006af0:	2000126c 	.word	0x2000126c
 8006af4:	20001258 	.word	0x20001258
 8006af8:	2000124c 	.word	0x2000124c
 8006afc:	20000d74 	.word	0x20000d74
 8006b00:	20000d70 	.word	0x20000d70
 8006b04:	2000001c 	.word	0x2000001c

08006b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	60fb      	str	r3, [r7, #12]
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b30:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <vTaskPlaceOnEventList+0x48>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3318      	adds	r3, #24
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fe fe4f 	bl	80057dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6838      	ldr	r0, [r7, #0]
 8006b42:	f000 fa87 	bl	8007054 <prvAddCurrentTaskToDelayedList>
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000d70 	.word	0x20000d70

08006b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	617b      	str	r3, [r7, #20]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3318      	adds	r3, #24
 8006b84:	4619      	mov	r1, r3
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7fe fe05 	bl	8005796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006b92:	f04f 33ff 	mov.w	r3, #4294967295
 8006b96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	68b8      	ldr	r0, [r7, #8]
 8006b9c:	f000 fa5a 	bl	8007054 <prvAddCurrentTaskToDelayedList>
	}
 8006ba0:	bf00      	nop
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000d70 	.word	0x20000d70

08006bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3318      	adds	r3, #24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fe34 	bl	800584c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c5c <xTaskRemoveFromEventList+0xb0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11d      	bne.n	8006c28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fe2b 	bl	800584c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b19      	ldr	r3, [pc, #100]	@ (8006c60 <xTaskRemoveFromEventList+0xb4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d903      	bls.n	8006c0a <xTaskRemoveFromEventList+0x5e>
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	4a16      	ldr	r2, [pc, #88]	@ (8006c60 <xTaskRemoveFromEventList+0xb4>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a13      	ldr	r2, [pc, #76]	@ (8006c64 <xTaskRemoveFromEventList+0xb8>)
 8006c18:	441a      	add	r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe fdb8 	bl	8005796 <vListInsertEnd>
 8006c26:	e005      	b.n	8006c34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	480e      	ldr	r0, [pc, #56]	@ (8006c68 <xTaskRemoveFromEventList+0xbc>)
 8006c30:	f7fe fdb1 	bl	8005796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c38:	4b0c      	ldr	r3, [pc, #48]	@ (8006c6c <xTaskRemoveFromEventList+0xc0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d905      	bls.n	8006c4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c42:	2301      	movs	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c46:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <xTaskRemoveFromEventList+0xc4>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e001      	b.n	8006c52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c52:	697b      	ldr	r3, [r7, #20]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	2000126c 	.word	0x2000126c
 8006c60:	2000124c 	.word	0x2000124c
 8006c64:	20000d74 	.word	0x20000d74
 8006c68:	20001204 	.word	0x20001204
 8006c6c:	20000d70 	.word	0x20000d70
 8006c70:	20001258 	.word	0x20001258

08006c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <vTaskInternalSetTimeOutState+0x24>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <vTaskInternalSetTimeOutState+0x28>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	605a      	str	r2, [r3, #4]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	2000125c 	.word	0x2000125c
 8006c9c:	20001248 	.word	0x20001248

08006ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006ce6:	f000 fe51 	bl	800798c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <xTaskCheckForTimeOut+0xc0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d102      	bne.n	8006d0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e023      	b.n	8006d52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <xTaskCheckForTimeOut+0xc4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d007      	beq.n	8006d26 <xTaskCheckForTimeOut+0x86>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e015      	b.n	8006d52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d20b      	bcs.n	8006d48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1ad2      	subs	r2, r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff99 	bl	8006c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e004      	b.n	8006d52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d52:	f000 fe4b 	bl	80079ec <vPortExitCritical>

	return xReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20001248 	.word	0x20001248
 8006d64:	2000125c 	.word	0x2000125c

08006d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d6c:	4b03      	ldr	r3, [pc, #12]	@ (8006d7c <vTaskMissedYield+0x14>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20001258 	.word	0x20001258

08006d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d88:	f000 f852 	bl	8006e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <prvIdleTask+0x28>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d9f9      	bls.n	8006d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <prvIdleTask+0x2c>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006da4:	e7f0      	b.n	8006d88 <prvIdleTask+0x8>
 8006da6:	bf00      	nop
 8006da8:	20000d74 	.word	0x20000d74
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	e00c      	b.n	8006dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <prvInitialiseTaskLists+0x60>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fcb8 	bl	8005740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b37      	cmp	r3, #55	@ 0x37
 8006dda:	d9ef      	bls.n	8006dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ddc:	480d      	ldr	r0, [pc, #52]	@ (8006e14 <prvInitialiseTaskLists+0x64>)
 8006dde:	f7fe fcaf 	bl	8005740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006de2:	480d      	ldr	r0, [pc, #52]	@ (8006e18 <prvInitialiseTaskLists+0x68>)
 8006de4:	f7fe fcac 	bl	8005740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006de8:	480c      	ldr	r0, [pc, #48]	@ (8006e1c <prvInitialiseTaskLists+0x6c>)
 8006dea:	f7fe fca9 	bl	8005740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dee:	480c      	ldr	r0, [pc, #48]	@ (8006e20 <prvInitialiseTaskLists+0x70>)
 8006df0:	f7fe fca6 	bl	8005740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006df4:	480b      	ldr	r0, [pc, #44]	@ (8006e24 <prvInitialiseTaskLists+0x74>)
 8006df6:	f7fe fca3 	bl	8005740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <prvInitialiseTaskLists+0x78>)
 8006dfc:	4a05      	ldr	r2, [pc, #20]	@ (8006e14 <prvInitialiseTaskLists+0x64>)
 8006dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e00:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <prvInitialiseTaskLists+0x7c>)
 8006e02:	4a05      	ldr	r2, [pc, #20]	@ (8006e18 <prvInitialiseTaskLists+0x68>)
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000d74 	.word	0x20000d74
 8006e14:	200011d4 	.word	0x200011d4
 8006e18:	200011e8 	.word	0x200011e8
 8006e1c:	20001204 	.word	0x20001204
 8006e20:	20001218 	.word	0x20001218
 8006e24:	20001230 	.word	0x20001230
 8006e28:	200011fc 	.word	0x200011fc
 8006e2c:	20001200 	.word	0x20001200

08006e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e36:	e019      	b.n	8006e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e38:	f000 fda8 	bl	800798c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3c:	4b10      	ldr	r3, [pc, #64]	@ (8006e80 <prvCheckTasksWaitingTermination+0x50>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fcff 	bl	800584c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <prvCheckTasksWaitingTermination+0x54>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	4a0b      	ldr	r2, [pc, #44]	@ (8006e84 <prvCheckTasksWaitingTermination+0x54>)
 8006e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e58:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e62:	f000 fdc3 	bl	80079ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f810 	bl	8006e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e1      	bne.n	8006e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20001218 	.word	0x20001218
 8006e84:	20001244 	.word	0x20001244
 8006e88:	2000122c 	.word	0x2000122c

08006e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3354      	adds	r3, #84	@ 0x54
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fc81 	bl	80087a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 ff3d 	bl	8007d2c <vPortFree>
				vPortFree( pxTCB );
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 ff3a 	bl	8007d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006eb8:	e019      	b.n	8006eee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d103      	bne.n	8006ecc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 ff31 	bl	8007d2c <vPortFree>
	}
 8006eca:	e010      	b.n	8006eee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d00b      	beq.n	8006eee <prvDeleteTCB+0x62>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <prvDeleteTCB+0x5e>
	}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006efe:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f10:	e008      	b.n	8006f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a04      	ldr	r2, [pc, #16]	@ (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	200011fc 	.word	0x200011fc
 8006f34:	20001264 	.word	0x20001264

08006f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f6c <xTaskGetSchedulerState+0x34>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f46:	2301      	movs	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	e008      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4c:	4b08      	ldr	r3, [pc, #32]	@ (8006f70 <xTaskGetSchedulerState+0x38>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f54:	2302      	movs	r3, #2
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	e001      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f5e:	687b      	ldr	r3, [r7, #4]
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20001250 	.word	0x20001250
 8006f70:	2000126c 	.word	0x2000126c

08006f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d058      	beq.n	800703c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007048 <xTaskPriorityDisinherit+0xd4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d00b      	beq.n	8006fac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	60bb      	str	r3, [r7, #8]
}
 8006fc6:	bf00      	nop
 8006fc8:	bf00      	nop
 8006fca:	e7fd      	b.n	8006fc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d02c      	beq.n	800703c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d128      	bne.n	800703c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fc2c 	bl	800584c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700c:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <xTaskPriorityDisinherit+0xd8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d903      	bls.n	800701c <xTaskPriorityDisinherit+0xa8>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	4a0c      	ldr	r2, [pc, #48]	@ (800704c <xTaskPriorityDisinherit+0xd8>)
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a09      	ldr	r2, [pc, #36]	@ (8007050 <xTaskPriorityDisinherit+0xdc>)
 800702a:	441a      	add	r2, r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f7fe fbaf 	bl	8005796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
	}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000d70 	.word	0x20000d70
 800704c:	2000124c 	.word	0x2000124c
 8007050:	20000d74 	.word	0x20000d74

08007054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800705e:	4b21      	ldr	r3, [pc, #132]	@ (80070e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007064:	4b20      	ldr	r3, [pc, #128]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3304      	adds	r3, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fbee 	bl	800584c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d10a      	bne.n	800708e <prvAddCurrentTaskToDelayedList+0x3a>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	4b1a      	ldr	r3, [pc, #104]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4819      	ldr	r0, [pc, #100]	@ (80070ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007088:	f7fe fb85 	bl	8005796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800708c:	e026      	b.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d209      	bcs.n	80070ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7fe fb92 	bl	80057dc <vListInsert>
}
 80070b8:	e010      	b.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ba:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe fb88 	bl	80057dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070cc:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d202      	bcs.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070d6:	4a08      	ldr	r2, [pc, #32]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20001248 	.word	0x20001248
 80070e8:	20000d70 	.word	0x20000d70
 80070ec:	20001230 	.word	0x20001230
 80070f0:	20001200 	.word	0x20001200
 80070f4:	200011fc 	.word	0x200011fc
 80070f8:	20001264 	.word	0x20001264

080070fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	@ 0x28
 8007100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007106:	f000 fb11 	bl	800772c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <xTimerCreateTimerTask+0x84>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d021      	beq.n	8007156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800711a:	1d3a      	adds	r2, r7, #4
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe faf1 	bl	800570c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	9202      	str	r2, [sp, #8]
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	2302      	movs	r3, #2
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	460a      	mov	r2, r1
 800713c:	4911      	ldr	r1, [pc, #68]	@ (8007184 <xTimerCreateTimerTask+0x88>)
 800713e:	4812      	ldr	r0, [pc, #72]	@ (8007188 <xTimerCreateTimerTask+0x8c>)
 8007140:	f7ff f8a6 	bl	8006290 <xTaskCreateStatic>
 8007144:	4603      	mov	r3, r0
 8007146:	4a11      	ldr	r2, [pc, #68]	@ (800718c <xTimerCreateTimerTask+0x90>)
 8007148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800714a:	4b10      	ldr	r3, [pc, #64]	@ (800718c <xTimerCreateTimerTask+0x90>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	613b      	str	r3, [r7, #16]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007174:	697b      	ldr	r3, [r7, #20]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200012a0 	.word	0x200012a0
 8007184:	0800c68c 	.word	0x0800c68c
 8007188:	080072c9 	.word	0x080072c9
 800718c:	200012a4 	.word	0x200012a4

08007190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	@ 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10b      	bne.n	80071c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	623b      	str	r3, [r7, #32]
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	e7fd      	b.n	80071bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071c0:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <xTimerGenericCommand+0x98>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02a      	beq.n	800721e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	dc18      	bgt.n	800720c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071da:	f7ff fead 	bl	8006f38 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d109      	bne.n	80071f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071e4:	4b10      	ldr	r3, [pc, #64]	@ (8007228 <xTimerGenericCommand+0x98>)
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	f107 0110 	add.w	r1, r7, #16
 80071ec:	2300      	movs	r3, #0
 80071ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f0:	f7fe fc60 	bl	8005ab4 <xQueueGenericSend>
 80071f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80071f6:	e012      	b.n	800721e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <xTimerGenericCommand+0x98>)
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f107 0110 	add.w	r1, r7, #16
 8007200:	2300      	movs	r3, #0
 8007202:	2200      	movs	r2, #0
 8007204:	f7fe fc56 	bl	8005ab4 <xQueueGenericSend>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24
 800720a:	e008      	b.n	800721e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800720c:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <xTimerGenericCommand+0x98>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	f107 0110 	add.w	r1, r7, #16
 8007214:	2300      	movs	r3, #0
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	f7fe fd4e 	bl	8005cb8 <xQueueGenericSendFromISR>
 800721c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007220:	4618      	mov	r0, r3
 8007222:	3728      	adds	r7, #40	@ 0x28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	200012a0 	.word	0x200012a0

0800722c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007236:	4b23      	ldr	r3, [pc, #140]	@ (80072c4 <prvProcessExpiredTimer+0x98>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fb01 	bl	800584c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d023      	beq.n	80072a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	699a      	ldr	r2, [r3, #24]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	18d1      	adds	r1, r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	6978      	ldr	r0, [r7, #20]
 8007266:	f000 f8d3 	bl	8007410 <prvInsertTimerInActiveList>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007270:	2300      	movs	r3, #0
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	2100      	movs	r1, #0
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f7ff ff88 	bl	8007190 <xTimerGenericCommand>
 8007280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d114      	bne.n	80072b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	4798      	blx	r3
}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20001298 	.word	0x20001298

080072c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 f859 	bl	800738c <prvGetNextExpireTime>
 80072da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f805 	bl	80072f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072e6:	f000 f8d5 	bl	8007494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072ea:	bf00      	nop
 80072ec:	e7f0      	b.n	80072d0 <prvTimerTask+0x8>
	...

080072f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072fa:	f7ff fa2d 	bl	8006758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f864 	bl	80073d0 <prvSampleTimeNow>
 8007308:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d130      	bne.n	8007372 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <prvProcessTimerOrBlockTask+0x3c>
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	429a      	cmp	r2, r3
 800731c:	d806      	bhi.n	800732c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800731e:	f7ff fa29 	bl	8006774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ff81 	bl	800722c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800732a:	e024      	b.n	8007376 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007332:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <prvProcessTimerOrBlockTask+0x90>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <prvProcessTimerOrBlockTask+0x50>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <prvProcessTimerOrBlockTask+0x52>
 8007340:	2300      	movs	r3, #0
 8007342:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007344:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <prvProcessTimerOrBlockTask+0x94>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	4619      	mov	r1, r3
 8007352:	f7fe ff69 	bl	8006228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007356:	f7ff fa0d 	bl	8006774 <xTaskResumeAll>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007360:	4b09      	ldr	r3, [pc, #36]	@ (8007388 <prvProcessTimerOrBlockTask+0x98>)
 8007362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
}
 8007370:	e001      	b.n	8007376 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007372:	f7ff f9ff 	bl	8006774 <xTaskResumeAll>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	2000129c 	.word	0x2000129c
 8007384:	200012a0 	.word	0x200012a0
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007394:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <prvGetNextExpireTime+0x40>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <prvGetNextExpireTime+0x16>
 800739e:	2201      	movs	r2, #1
 80073a0:	e000      	b.n	80073a4 <prvGetNextExpireTime+0x18>
 80073a2:	2200      	movs	r2, #0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073b0:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <prvGetNextExpireTime+0x40>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e001      	b.n	80073c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	20001298 	.word	0x20001298

080073d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073d8:	f7ff fa6a 	bl	80068b0 <xTaskGetTickCount>
 80073dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073de:	4b0b      	ldr	r3, [pc, #44]	@ (800740c <prvSampleTimeNow+0x3c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d205      	bcs.n	80073f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073e8:	f000 f93a 	bl	8007660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e002      	b.n	80073fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073fa:	4a04      	ldr	r2, [pc, #16]	@ (800740c <prvSampleTimeNow+0x3c>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007400:	68fb      	ldr	r3, [r7, #12]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200012a8 	.word	0x200012a8

08007410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d812      	bhi.n	800745c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	429a      	cmp	r2, r3
 8007442:	d302      	bcc.n	800744a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	e01b      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <prvInsertTimerInActiveList+0x7c>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7fe f9c1 	bl	80057dc <vListInsert>
 800745a:	e012      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d206      	bcs.n	8007472 <prvInsertTimerInActiveList+0x62>
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e007      	b.n	8007482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <prvInsertTimerInActiveList+0x80>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fe f9ad 	bl	80057dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	2000129c 	.word	0x2000129c
 8007490:	20001298 	.word	0x20001298

08007494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08e      	sub	sp, #56	@ 0x38
 8007498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800749a:	e0ce      	b.n	800763a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da19      	bge.n	80074d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	3304      	adds	r3, #4
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10b      	bne.n	80074c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61fb      	str	r3, [r7, #28]
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	e7fd      	b.n	80074c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074cc:	6850      	ldr	r0, [r2, #4]
 80074ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d0:	6892      	ldr	r2, [r2, #8]
 80074d2:	4611      	mov	r1, r2
 80074d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f2c0 80ae 	blt.w	800763a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe f9ac 	bl	800584c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074f4:	463b      	mov	r3, r7
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff ff6a 	bl	80073d0 <prvSampleTimeNow>
 80074fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b09      	cmp	r3, #9
 8007502:	f200 8097 	bhi.w	8007634 <prvProcessReceivedCommands+0x1a0>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <prvProcessReceivedCommands+0x78>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007535 	.word	0x08007535
 8007510:	08007535 	.word	0x08007535
 8007514:	08007535 	.word	0x08007535
 8007518:	080075ab 	.word	0x080075ab
 800751c:	080075bf 	.word	0x080075bf
 8007520:	0800760b 	.word	0x0800760b
 8007524:	08007535 	.word	0x08007535
 8007528:	08007535 	.word	0x08007535
 800752c:	080075ab 	.word	0x080075ab
 8007530:	080075bf 	.word	0x080075bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	18d1      	adds	r1, r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007554:	f7ff ff5c 	bl	8007410 <prvInsertTimerInActiveList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d06c      	beq.n	8007638 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d061      	beq.n	8007638 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	441a      	add	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2300      	movs	r3, #0
 8007582:	2100      	movs	r1, #0
 8007584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007586:	f7ff fe03 	bl	8007190 <xTimerGenericCommand>
 800758a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d152      	bne.n	8007638 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61bb      	str	r3, [r7, #24]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075bc:	e03d      	b.n	800763a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	617b      	str	r3, [r7, #20]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	18d1      	adds	r1, r2, r3
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007604:	f7ff ff04 	bl	8007410 <prvInsertTimerInActiveList>
					break;
 8007608:	e017      	b.n	800763a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800761a:	f000 fb87 	bl	8007d2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800761e:	e00c      	b.n	800763a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007632:	e002      	b.n	800763a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007634:	bf00      	nop
 8007636:	e000      	b.n	800763a <prvProcessReceivedCommands+0x1a6>
					break;
 8007638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800763a:	4b08      	ldr	r3, [pc, #32]	@ (800765c <prvProcessReceivedCommands+0x1c8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	1d39      	adds	r1, r7, #4
 8007640:	2200      	movs	r2, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fbd6 	bl	8005df4 <xQueueReceive>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	f47f af26 	bne.w	800749c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	3730      	adds	r7, #48	@ 0x30
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200012a0 	.word	0x200012a0

08007660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007666:	e049      	b.n	80076fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007668:	4b2e      	ldr	r3, [pc, #184]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007672:	4b2c      	ldr	r3, [pc, #176]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3304      	adds	r3, #4
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe f8e3 	bl	800584c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02f      	beq.n	80076fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4413      	add	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d90e      	bls.n	80076cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fe f889 	bl	80057dc <vListInsert>
 80076ca:	e017      	b.n	80076fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076cc:	2300      	movs	r3, #0
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fd5a 	bl	8007190 <xTimerGenericCommand>
 80076dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	603b      	str	r3, [r7, #0]
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1b0      	bne.n	8007668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007706:	4b07      	ldr	r3, [pc, #28]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800770c:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <prvSwitchTimerLists+0xc8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a04      	ldr	r2, [pc, #16]	@ (8007724 <prvSwitchTimerLists+0xc4>)
 8007712:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007714:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <prvSwitchTimerLists+0xc8>)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6013      	str	r3, [r2, #0]
}
 800771a:	bf00      	nop
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20001298 	.word	0x20001298
 8007728:	2000129c 	.word	0x2000129c

0800772c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007732:	f000 f92b 	bl	800798c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007736:	4b15      	ldr	r3, [pc, #84]	@ (800778c <prvCheckForValidListAndQueue+0x60>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d120      	bne.n	8007780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800773e:	4814      	ldr	r0, [pc, #80]	@ (8007790 <prvCheckForValidListAndQueue+0x64>)
 8007740:	f7fd fffe 	bl	8005740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007744:	4813      	ldr	r0, [pc, #76]	@ (8007794 <prvCheckForValidListAndQueue+0x68>)
 8007746:	f7fd fffb 	bl	8005740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800774a:	4b13      	ldr	r3, [pc, #76]	@ (8007798 <prvCheckForValidListAndQueue+0x6c>)
 800774c:	4a10      	ldr	r2, [pc, #64]	@ (8007790 <prvCheckForValidListAndQueue+0x64>)
 800774e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007750:	4b12      	ldr	r3, [pc, #72]	@ (800779c <prvCheckForValidListAndQueue+0x70>)
 8007752:	4a10      	ldr	r2, [pc, #64]	@ (8007794 <prvCheckForValidListAndQueue+0x68>)
 8007754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <prvCheckForValidListAndQueue+0x74>)
 800775c:	4a11      	ldr	r2, [pc, #68]	@ (80077a4 <prvCheckForValidListAndQueue+0x78>)
 800775e:	2110      	movs	r1, #16
 8007760:	200a      	movs	r0, #10
 8007762:	f7fe f907 	bl	8005974 <xQueueGenericCreateStatic>
 8007766:	4603      	mov	r3, r0
 8007768:	4a08      	ldr	r2, [pc, #32]	@ (800778c <prvCheckForValidListAndQueue+0x60>)
 800776a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800776c:	4b07      	ldr	r3, [pc, #28]	@ (800778c <prvCheckForValidListAndQueue+0x60>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <prvCheckForValidListAndQueue+0x60>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	490b      	ldr	r1, [pc, #44]	@ (80077a8 <prvCheckForValidListAndQueue+0x7c>)
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fd2c 	bl	80061d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007780:	f000 f934 	bl	80079ec <vPortExitCritical>
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200012a0 	.word	0x200012a0
 8007790:	20001270 	.word	0x20001270
 8007794:	20001284 	.word	0x20001284
 8007798:	20001298 	.word	0x20001298
 800779c:	2000129c 	.word	0x2000129c
 80077a0:	2000134c 	.word	0x2000134c
 80077a4:	200012ac 	.word	0x200012ac
 80077a8:	0800c694 	.word	0x0800c694

080077ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f023 0201 	bic.w	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3b04      	subs	r3, #4
 80077da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077dc:	4a08      	ldr	r2, [pc, #32]	@ (8007800 <pxPortInitialiseStack+0x54>)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b14      	subs	r3, #20
 80077e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3b20      	subs	r3, #32
 80077f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077f4:	68fb      	ldr	r3, [r7, #12]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr
 8007800:	08007805 	.word	0x08007805

08007804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800780e:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <prvTaskExitError+0x54>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d00b      	beq.n	8007830 <prvTaskExitError+0x2c>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <prvTaskExitError+0x28>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60bb      	str	r3, [r7, #8]
}
 8007842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007844:	bf00      	nop
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0fc      	beq.n	8007846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	2000000c 	.word	0x2000000c
 800785c:	00000000 	.word	0x00000000

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	f04e 0e0d 	orr.w	lr, lr, #13
 800787e:	4770      	bx	lr

08007880 <pxCurrentTCBConst2>:
 8007880:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007888:	4806      	ldr	r0, [pc, #24]	@ (80078a4 <prvPortStartFirstTask+0x1c>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	b662      	cpsie	i
 8007894:	b661      	cpsie	f
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	df00      	svc	0
 80078a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078a2:	bf00      	nop
 80078a4:	e000ed08 	.word	0xe000ed08

080078a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ae:	4b32      	ldr	r3, [pc, #200]	@ (8007978 <xPortStartScheduler+0xd0>)
 80078b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	22ff      	movs	r2, #255	@ 0xff
 80078be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	4b2a      	ldr	r3, [pc, #168]	@ (800797c <xPortStartScheduler+0xd4>)
 80078d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007980 <xPortStartScheduler+0xd8>)
 80078d8:	2207      	movs	r2, #7
 80078da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078dc:	e009      	b.n	80078f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078de:	4b28      	ldr	r3, [pc, #160]	@ (8007980 <xPortStartScheduler+0xd8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	4a26      	ldr	r2, [pc, #152]	@ (8007980 <xPortStartScheduler+0xd8>)
 80078e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	2b80      	cmp	r3, #128	@ 0x80
 80078fc:	d0ef      	beq.n	80078de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078fe:	4b20      	ldr	r3, [pc, #128]	@ (8007980 <xPortStartScheduler+0xd8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f1c3 0307 	rsb	r3, r3, #7
 8007906:	2b04      	cmp	r3, #4
 8007908:	d00b      	beq.n	8007922 <xPortStartScheduler+0x7a>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	60bb      	str	r3, [r7, #8]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007922:	4b17      	ldr	r3, [pc, #92]	@ (8007980 <xPortStartScheduler+0xd8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	4a15      	ldr	r2, [pc, #84]	@ (8007980 <xPortStartScheduler+0xd8>)
 800792a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800792c:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <xPortStartScheduler+0xd8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007934:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <xPortStartScheduler+0xd8>)
 8007936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	b2da      	uxtb	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <xPortStartScheduler+0xdc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a0f      	ldr	r2, [pc, #60]	@ (8007984 <xPortStartScheduler+0xdc>)
 8007946:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800794a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <xPortStartScheduler+0xdc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0c      	ldr	r2, [pc, #48]	@ (8007984 <xPortStartScheduler+0xdc>)
 8007952:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007958:	f000 f8b8 	bl	8007acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800795c:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <xPortStartScheduler+0xe0>)
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007962:	f7ff ff91 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007966:	f7ff f86b 	bl	8006a40 <vTaskSwitchContext>
	prvTaskExitError();
 800796a:	f7ff ff4b 	bl	8007804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000e400 	.word	0xe000e400
 800797c:	2000139c 	.word	0x2000139c
 8007980:	200013a0 	.word	0x200013a0
 8007984:	e000ed20 	.word	0xe000ed20
 8007988:	2000000c 	.word	0x2000000c

0800798c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	607b      	str	r3, [r7, #4]
}
 80079a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079a6:	4b0f      	ldr	r3, [pc, #60]	@ (80079e4 <vPortEnterCritical+0x58>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	4a0d      	ldr	r2, [pc, #52]	@ (80079e4 <vPortEnterCritical+0x58>)
 80079ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <vPortEnterCritical+0x58>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d110      	bne.n	80079da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079b8:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <vPortEnterCritical+0x5c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <vPortEnterCritical+0x4e>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <vPortEnterCritical+0x4a>
	}
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr
 80079e4:	2000000c 	.word	0x2000000c
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079f2:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <vPortExitCritical+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10b      	bne.n	8007a12 <vPortExitCritical+0x26>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	607b      	str	r3, [r7, #4]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a12:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <vPortExitCritical+0x50>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	4a08      	ldr	r2, [pc, #32]	@ (8007a3c <vPortExitCritical+0x50>)
 8007a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a1c:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <vPortExitCritical+0x50>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <vPortExitCritical+0x44>
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a40:	f3ef 8009 	mrs	r0, PSP
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4b0d      	ldr	r3, [pc, #52]	@ (8007a80 <pxCurrentTCBConst>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a50:	6010      	str	r0, [r2, #0]
 8007a52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a5a:	f380 8811 	msr	BASEPRI, r0
 8007a5e:	f7fe ffef 	bl	8006a40 <vTaskSwitchContext>
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	6808      	ldr	r0, [r1, #0]
 8007a72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a76:	f380 8809 	msr	PSP, r0
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	4770      	bx	lr

08007a80 <pxCurrentTCBConst>:
 8007a80:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f7fe ff13 	bl	80068cc <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aac:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <xPortSysTickHandler+0x40>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <vPortSetupTimerInterrupt+0x30>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007adc:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <vPortSetupTimerInterrupt+0x38>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a09      	ldr	r2, [pc, #36]	@ (8007b08 <vPortSetupTimerInterrupt+0x3c>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	099b      	lsrs	r3, r3, #6
 8007ae8:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <vPortSetupTimerInterrupt+0x40>)
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aee:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <vPortSetupTimerInterrupt+0x30>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr
 8007afc:	e000e010 	.word	0xe000e010
 8007b00:	e000e018 	.word	0xe000e018
 8007b04:	20000000 	.word	0x20000000
 8007b08:	10624dd3 	.word	0x10624dd3
 8007b0c:	e000e014 	.word	0xe000e014

08007b10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b16:	f3ef 8305 	mrs	r3, IPSR
 8007b1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b0f      	cmp	r3, #15
 8007b20:	d915      	bls.n	8007b4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b22:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <vPortValidateInterruptPriority+0x70>)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b2c:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <vPortValidateInterruptPriority+0x74>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	7afa      	ldrb	r2, [r7, #11]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d20b      	bcs.n	8007b4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	607b      	str	r3, [r7, #4]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <vPortValidateInterruptPriority+0x78>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b56:	4b0d      	ldr	r3, [pc, #52]	@ (8007b8c <vPortValidateInterruptPriority+0x7c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d90b      	bls.n	8007b76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	603b      	str	r3, [r7, #0]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <vPortValidateInterruptPriority+0x62>
	}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr
 8007b80:	e000e3f0 	.word	0xe000e3f0
 8007b84:	2000139c 	.word	0x2000139c
 8007b88:	e000ed0c 	.word	0xe000ed0c
 8007b8c:	200013a0 	.word	0x200013a0

08007b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	@ 0x28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b9c:	f7fe fddc 	bl	8006758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8007d14 <pvPortMalloc+0x184>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba8:	f000 f924 	bl	8007df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bac:	4b5a      	ldr	r3, [pc, #360]	@ (8007d18 <pvPortMalloc+0x188>)
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 8095 	bne.w	8007ce4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01e      	beq.n	8007bfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d015      	beq.n	8007bfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	3308      	adds	r3, #8
 8007bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <pvPortMalloc+0x6e>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	617b      	str	r3, [r7, #20]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d06f      	beq.n	8007ce4 <pvPortMalloc+0x154>
 8007c04:	4b45      	ldr	r3, [pc, #276]	@ (8007d1c <pvPortMalloc+0x18c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d86a      	bhi.n	8007ce4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c0e:	4b44      	ldr	r3, [pc, #272]	@ (8007d20 <pvPortMalloc+0x190>)
 8007c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c12:	4b43      	ldr	r3, [pc, #268]	@ (8007d20 <pvPortMalloc+0x190>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c18:	e004      	b.n	8007c24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d903      	bls.n	8007c36 <pvPortMalloc+0xa6>
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f1      	bne.n	8007c1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c36:	4b37      	ldr	r3, [pc, #220]	@ (8007d14 <pvPortMalloc+0x184>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d051      	beq.n	8007ce4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2208      	movs	r2, #8
 8007c46:	4413      	add	r3, r2
 8007c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	1ad2      	subs	r2, r2, r3
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d920      	bls.n	8007ca4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <pvPortMalloc+0xfc>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	613b      	str	r3, [r7, #16]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c9e:	69b8      	ldr	r0, [r7, #24]
 8007ca0:	f000 f90a 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8007d1c <pvPortMalloc+0x18c>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	4a1b      	ldr	r2, [pc, #108]	@ (8007d1c <pvPortMalloc+0x18c>)
 8007cb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d1c <pvPortMalloc+0x18c>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d24 <pvPortMalloc+0x194>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d203      	bcs.n	8007cc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cbe:	4b17      	ldr	r3, [pc, #92]	@ (8007d1c <pvPortMalloc+0x18c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a18      	ldr	r2, [pc, #96]	@ (8007d24 <pvPortMalloc+0x194>)
 8007cc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <pvPortMalloc+0x188>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cda:	4b13      	ldr	r3, [pc, #76]	@ (8007d28 <pvPortMalloc+0x198>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	4a11      	ldr	r2, [pc, #68]	@ (8007d28 <pvPortMalloc+0x198>)
 8007ce2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce4:	f7fe fd46 	bl	8006774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <pvPortMalloc+0x17a>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60fb      	str	r3, [r7, #12]
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <pvPortMalloc+0x176>
	return pvReturn;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3728      	adds	r7, #40	@ 0x28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20001fac 	.word	0x20001fac
 8007d18:	20001fc0 	.word	0x20001fc0
 8007d1c:	20001fb0 	.word	0x20001fb0
 8007d20:	20001fa4 	.word	0x20001fa4
 8007d24:	20001fb4 	.word	0x20001fb4
 8007d28:	20001fb8 	.word	0x20001fb8

08007d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d04f      	beq.n	8007dde <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d3e:	2308      	movs	r3, #8
 8007d40:	425b      	negs	r3, r3
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b25      	ldr	r3, [pc, #148]	@ (8007de8 <vPortFree+0xbc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <vPortFree+0x46>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60fb      	str	r3, [r7, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <vPortFree+0x66>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	60bb      	str	r3, [r7, #8]
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	e7fd      	b.n	8007d8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <vPortFree+0xbc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b0e      	ldr	r3, [pc, #56]	@ (8007de8 <vPortFree+0xbc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	401a      	ands	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db8:	f7fe fcce 	bl	8006758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <vPortFree+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <vPortFree+0xc0>)
 8007dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f000 f874 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <vPortFree+0xc4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a06      	ldr	r2, [pc, #24]	@ (8007df0 <vPortFree+0xc4>)
 8007dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dda:	f7fe fccb 	bl	8006774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20001fc0 	.word	0x20001fc0
 8007dec:	20001fb0 	.word	0x20001fb0
 8007df0:	20001fbc 	.word	0x20001fbc

08007df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e00:	4b27      	ldr	r3, [pc, #156]	@ (8007ea0 <prvHeapInit+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea0 <prvHeapInit+0xac>)
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea4 <prvHeapInit+0xb0>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea4 <prvHeapInit+0xb0>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <prvHeapInit+0xb4>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	@ (8007eac <prvHeapInit+0xb8>)
 8007e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <prvHeapInit+0xbc>)
 8007e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <prvHeapInit+0xc0>)
 8007e8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	200013a4 	.word	0x200013a4
 8007ea4:	20001fa4 	.word	0x20001fa4
 8007ea8:	20001fac 	.word	0x20001fac
 8007eac:	20001fb4 	.word	0x20001fb4
 8007eb0:	20001fb0 	.word	0x20001fb0
 8007eb4:	20001fc0 	.word	0x20001fc0

08007eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <prvInsertBlockIntoFreeList+0xa8>)
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x14>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d8f7      	bhi.n	8007ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d108      	bne.n	8007efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d118      	bne.n	8007f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b14      	ldr	r3, [pc, #80]	@ (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00d      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e008      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	@ (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d002      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr
 8007f60:	20001fa4 	.word	0x20001fa4
 8007f64:	20001fac 	.word	0x20001fac

08007f68 <_scanf_float>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	688b      	ldr	r3, [r1, #8]
 8007f72:	4691      	mov	r9, r2
 8007f74:	1e5a      	subs	r2, r3, #1
 8007f76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f7a:	bf82      	ittt	hi
 8007f7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f80:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f88:	460a      	mov	r2, r1
 8007f8a:	f04f 0500 	mov.w	r5, #0
 8007f8e:	bf88      	it	hi
 8007f90:	608b      	strhi	r3, [r1, #8]
 8007f92:	680b      	ldr	r3, [r1, #0]
 8007f94:	4680      	mov	r8, r0
 8007f96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f9a:	f842 3b1c 	str.w	r3, [r2], #28
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	bf98      	it	ls
 8007fa2:	f04f 0b00 	movls.w	fp, #0
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	46aa      	mov	sl, r5
 8007faa:	462f      	mov	r7, r5
 8007fac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fb0:	9201      	str	r2, [sp, #4]
 8007fb2:	9502      	str	r5, [sp, #8]
 8007fb4:	68a2      	ldr	r2, [r4, #8]
 8007fb6:	b15a      	cbz	r2, 8007fd0 <_scanf_float+0x68>
 8007fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b4e      	cmp	r3, #78	@ 0x4e
 8007fc0:	d862      	bhi.n	8008088 <_scanf_float+0x120>
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d83a      	bhi.n	800803c <_scanf_float+0xd4>
 8007fc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007fca:	b2c8      	uxtb	r0, r1
 8007fcc:	280e      	cmp	r0, #14
 8007fce:	d938      	bls.n	8008042 <_scanf_float+0xda>
 8007fd0:	b11f      	cbz	r7, 8007fda <_scanf_float+0x72>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fde:	f1ba 0f01 	cmp.w	sl, #1
 8007fe2:	f200 8114 	bhi.w	800820e <_scanf_float+0x2a6>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	429e      	cmp	r6, r3
 8007fea:	f200 8105 	bhi.w	80081f8 <_scanf_float+0x290>
 8007fee:	2001      	movs	r0, #1
 8007ff0:	b007      	add	sp, #28
 8007ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ffa:	2a0d      	cmp	r2, #13
 8007ffc:	d8e8      	bhi.n	8007fd0 <_scanf_float+0x68>
 8007ffe:	a101      	add	r1, pc, #4	@ (adr r1, 8008004 <_scanf_float+0x9c>)
 8008000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008004:	0800814d 	.word	0x0800814d
 8008008:	08007fd1 	.word	0x08007fd1
 800800c:	08007fd1 	.word	0x08007fd1
 8008010:	08007fd1 	.word	0x08007fd1
 8008014:	080081a9 	.word	0x080081a9
 8008018:	08008183 	.word	0x08008183
 800801c:	08007fd1 	.word	0x08007fd1
 8008020:	08007fd1 	.word	0x08007fd1
 8008024:	0800815b 	.word	0x0800815b
 8008028:	08007fd1 	.word	0x08007fd1
 800802c:	08007fd1 	.word	0x08007fd1
 8008030:	08007fd1 	.word	0x08007fd1
 8008034:	08007fd1 	.word	0x08007fd1
 8008038:	08008117 	.word	0x08008117
 800803c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008040:	e7db      	b.n	8007ffa <_scanf_float+0x92>
 8008042:	290e      	cmp	r1, #14
 8008044:	d8c4      	bhi.n	8007fd0 <_scanf_float+0x68>
 8008046:	a001      	add	r0, pc, #4	@ (adr r0, 800804c <_scanf_float+0xe4>)
 8008048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800804c:	08008107 	.word	0x08008107
 8008050:	08007fd1 	.word	0x08007fd1
 8008054:	08008107 	.word	0x08008107
 8008058:	08008197 	.word	0x08008197
 800805c:	08007fd1 	.word	0x08007fd1
 8008060:	080080a9 	.word	0x080080a9
 8008064:	080080ed 	.word	0x080080ed
 8008068:	080080ed 	.word	0x080080ed
 800806c:	080080ed 	.word	0x080080ed
 8008070:	080080ed 	.word	0x080080ed
 8008074:	080080ed 	.word	0x080080ed
 8008078:	080080ed 	.word	0x080080ed
 800807c:	080080ed 	.word	0x080080ed
 8008080:	080080ed 	.word	0x080080ed
 8008084:	080080ed 	.word	0x080080ed
 8008088:	2b6e      	cmp	r3, #110	@ 0x6e
 800808a:	d809      	bhi.n	80080a0 <_scanf_float+0x138>
 800808c:	2b60      	cmp	r3, #96	@ 0x60
 800808e:	d8b2      	bhi.n	8007ff6 <_scanf_float+0x8e>
 8008090:	2b54      	cmp	r3, #84	@ 0x54
 8008092:	d07b      	beq.n	800818c <_scanf_float+0x224>
 8008094:	2b59      	cmp	r3, #89	@ 0x59
 8008096:	d19b      	bne.n	8007fd0 <_scanf_float+0x68>
 8008098:	2d07      	cmp	r5, #7
 800809a:	d199      	bne.n	8007fd0 <_scanf_float+0x68>
 800809c:	2508      	movs	r5, #8
 800809e:	e02f      	b.n	8008100 <_scanf_float+0x198>
 80080a0:	2b74      	cmp	r3, #116	@ 0x74
 80080a2:	d073      	beq.n	800818c <_scanf_float+0x224>
 80080a4:	2b79      	cmp	r3, #121	@ 0x79
 80080a6:	e7f6      	b.n	8008096 <_scanf_float+0x12e>
 80080a8:	6821      	ldr	r1, [r4, #0]
 80080aa:	05c8      	lsls	r0, r1, #23
 80080ac:	d51e      	bpl.n	80080ec <_scanf_float+0x184>
 80080ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080b2:	6021      	str	r1, [r4, #0]
 80080b4:	3701      	adds	r7, #1
 80080b6:	f1bb 0f00 	cmp.w	fp, #0
 80080ba:	d003      	beq.n	80080c4 <_scanf_float+0x15c>
 80080bc:	3201      	adds	r2, #1
 80080be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080c2:	60a2      	str	r2, [r4, #8]
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	3301      	adds	r3, #1
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80080dc:	f340 8083 	ble.w	80081e6 <_scanf_float+0x27e>
 80080e0:	f8d9 3000 	ldr.w	r3, [r9]
 80080e4:	3301      	adds	r3, #1
 80080e6:	f8c9 3000 	str.w	r3, [r9]
 80080ea:	e763      	b.n	8007fb4 <_scanf_float+0x4c>
 80080ec:	eb1a 0105 	adds.w	r1, sl, r5
 80080f0:	f47f af6e 	bne.w	8007fd0 <_scanf_float+0x68>
 80080f4:	460d      	mov	r5, r1
 80080f6:	468a      	mov	sl, r1
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	f806 3b01 	strb.w	r3, [r6], #1
 8008104:	e7de      	b.n	80080c4 <_scanf_float+0x15c>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	0610      	lsls	r0, r2, #24
 800810a:	f57f af61 	bpl.w	8007fd0 <_scanf_float+0x68>
 800810e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	e7f4      	b.n	8008100 <_scanf_float+0x198>
 8008116:	f1ba 0f00 	cmp.w	sl, #0
 800811a:	d10c      	bne.n	8008136 <_scanf_float+0x1ce>
 800811c:	b977      	cbnz	r7, 800813c <_scanf_float+0x1d4>
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008124:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008128:	d108      	bne.n	800813c <_scanf_float+0x1d4>
 800812a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800812e:	f04f 0a01 	mov.w	sl, #1
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	e7e4      	b.n	8008100 <_scanf_float+0x198>
 8008136:	f1ba 0f02 	cmp.w	sl, #2
 800813a:	d051      	beq.n	80081e0 <_scanf_float+0x278>
 800813c:	2d01      	cmp	r5, #1
 800813e:	d002      	beq.n	8008146 <_scanf_float+0x1de>
 8008140:	2d04      	cmp	r5, #4
 8008142:	f47f af45 	bne.w	8007fd0 <_scanf_float+0x68>
 8008146:	3501      	adds	r5, #1
 8008148:	b2ed      	uxtb	r5, r5
 800814a:	e7d9      	b.n	8008100 <_scanf_float+0x198>
 800814c:	f1ba 0f01 	cmp.w	sl, #1
 8008150:	f47f af3e 	bne.w	8007fd0 <_scanf_float+0x68>
 8008154:	f04f 0a02 	mov.w	sl, #2
 8008158:	e7d2      	b.n	8008100 <_scanf_float+0x198>
 800815a:	b975      	cbnz	r5, 800817a <_scanf_float+0x212>
 800815c:	2f00      	cmp	r7, #0
 800815e:	f47f af38 	bne.w	8007fd2 <_scanf_float+0x6a>
 8008162:	6822      	ldr	r2, [r4, #0]
 8008164:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008168:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800816c:	f040 80ff 	bne.w	800836e <_scanf_float+0x406>
 8008170:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008174:	2501      	movs	r5, #1
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	e7c2      	b.n	8008100 <_scanf_float+0x198>
 800817a:	2d03      	cmp	r5, #3
 800817c:	d0e3      	beq.n	8008146 <_scanf_float+0x1de>
 800817e:	2d05      	cmp	r5, #5
 8008180:	e7df      	b.n	8008142 <_scanf_float+0x1da>
 8008182:	2d02      	cmp	r5, #2
 8008184:	f47f af24 	bne.w	8007fd0 <_scanf_float+0x68>
 8008188:	2503      	movs	r5, #3
 800818a:	e7b9      	b.n	8008100 <_scanf_float+0x198>
 800818c:	2d06      	cmp	r5, #6
 800818e:	f47f af1f 	bne.w	8007fd0 <_scanf_float+0x68>
 8008192:	2507      	movs	r5, #7
 8008194:	e7b4      	b.n	8008100 <_scanf_float+0x198>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	0591      	lsls	r1, r2, #22
 800819a:	f57f af19 	bpl.w	8007fd0 <_scanf_float+0x68>
 800819e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	9702      	str	r7, [sp, #8]
 80081a6:	e7ab      	b.n	8008100 <_scanf_float+0x198>
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081b2:	d005      	beq.n	80081c0 <_scanf_float+0x258>
 80081b4:	0550      	lsls	r0, r2, #21
 80081b6:	f57f af0b 	bpl.w	8007fd0 <_scanf_float+0x68>
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	f000 80d7 	beq.w	800836e <_scanf_float+0x406>
 80081c0:	0591      	lsls	r1, r2, #22
 80081c2:	bf58      	it	pl
 80081c4:	9902      	ldrpl	r1, [sp, #8]
 80081c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081ca:	bf58      	it	pl
 80081cc:	1a79      	subpl	r1, r7, r1
 80081ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081d2:	f04f 0700 	mov.w	r7, #0
 80081d6:	bf58      	it	pl
 80081d8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081dc:	6022      	str	r2, [r4, #0]
 80081de:	e78f      	b.n	8008100 <_scanf_float+0x198>
 80081e0:	f04f 0a03 	mov.w	sl, #3
 80081e4:	e78c      	b.n	8008100 <_scanf_float+0x198>
 80081e6:	4649      	mov	r1, r9
 80081e8:	4640      	mov	r0, r8
 80081ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80081ee:	4798      	blx	r3
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f aedf 	beq.w	8007fb4 <_scanf_float+0x4c>
 80081f6:	e6eb      	b.n	8007fd0 <_scanf_float+0x68>
 80081f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081fc:	464a      	mov	r2, r9
 80081fe:	4640      	mov	r0, r8
 8008200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008204:	4798      	blx	r3
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	3b01      	subs	r3, #1
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	e6eb      	b.n	8007fe6 <_scanf_float+0x7e>
 800820e:	1e6b      	subs	r3, r5, #1
 8008210:	2b06      	cmp	r3, #6
 8008212:	d824      	bhi.n	800825e <_scanf_float+0x2f6>
 8008214:	2d02      	cmp	r5, #2
 8008216:	d836      	bhi.n	8008286 <_scanf_float+0x31e>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	429e      	cmp	r6, r3
 800821c:	f67f aee7 	bls.w	8007fee <_scanf_float+0x86>
 8008220:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008224:	464a      	mov	r2, r9
 8008226:	4640      	mov	r0, r8
 8008228:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800822c:	4798      	blx	r3
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	3b01      	subs	r3, #1
 8008232:	6123      	str	r3, [r4, #16]
 8008234:	e7f0      	b.n	8008218 <_scanf_float+0x2b0>
 8008236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800823a:	464a      	mov	r2, r9
 800823c:	4640      	mov	r0, r8
 800823e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008242:	4798      	blx	r3
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	3b01      	subs	r3, #1
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800824e:	fa5f fa8a 	uxtb.w	sl, sl
 8008252:	f1ba 0f02 	cmp.w	sl, #2
 8008256:	d1ee      	bne.n	8008236 <_scanf_float+0x2ce>
 8008258:	3d03      	subs	r5, #3
 800825a:	b2ed      	uxtb	r5, r5
 800825c:	1b76      	subs	r6, r6, r5
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	05da      	lsls	r2, r3, #23
 8008262:	d530      	bpl.n	80082c6 <_scanf_float+0x35e>
 8008264:	055b      	lsls	r3, r3, #21
 8008266:	d511      	bpl.n	800828c <_scanf_float+0x324>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	429e      	cmp	r6, r3
 800826c:	f67f aebf 	bls.w	8007fee <_scanf_float+0x86>
 8008270:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008274:	464a      	mov	r2, r9
 8008276:	4640      	mov	r0, r8
 8008278:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800827c:	4798      	blx	r3
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	3b01      	subs	r3, #1
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	e7f0      	b.n	8008268 <_scanf_float+0x300>
 8008286:	46aa      	mov	sl, r5
 8008288:	46b3      	mov	fp, r6
 800828a:	e7de      	b.n	800824a <_scanf_float+0x2e2>
 800828c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	2965      	cmp	r1, #101	@ 0x65
 8008294:	f103 33ff 	add.w	r3, r3, #4294967295
 8008298:	f106 35ff 	add.w	r5, r6, #4294967295
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	d00c      	beq.n	80082ba <_scanf_float+0x352>
 80082a0:	2945      	cmp	r1, #69	@ 0x45
 80082a2:	d00a      	beq.n	80082ba <_scanf_float+0x352>
 80082a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082a8:	464a      	mov	r2, r9
 80082aa:	4640      	mov	r0, r8
 80082ac:	4798      	blx	r3
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	1eb5      	subs	r5, r6, #2
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	464a      	mov	r2, r9
 80082bc:	4640      	mov	r0, r8
 80082be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082c2:	4798      	blx	r3
 80082c4:	462e      	mov	r6, r5
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	f012 0210 	ands.w	r2, r2, #16
 80082cc:	d001      	beq.n	80082d2 <_scanf_float+0x36a>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e68e      	b.n	8007ff0 <_scanf_float+0x88>
 80082d2:	7032      	strb	r2, [r6, #0]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d125      	bne.n	800832c <_scanf_float+0x3c4>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	429f      	cmp	r7, r3
 80082e4:	d00a      	beq.n	80082fc <_scanf_float+0x394>
 80082e6:	1bda      	subs	r2, r3, r7
 80082e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80082ec:	429e      	cmp	r6, r3
 80082ee:	bf28      	it	cs
 80082f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80082f4:	4630      	mov	r0, r6
 80082f6:	491f      	ldr	r1, [pc, #124]	@ (8008374 <_scanf_float+0x40c>)
 80082f8:	f000 f902 	bl	8008500 <siprintf>
 80082fc:	2200      	movs	r2, #0
 80082fe:	4640      	mov	r0, r8
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	f001 fa39 	bl	8009778 <_strtod_r>
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	6825      	ldr	r5, [r4, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f015 0f02 	tst.w	r5, #2
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	f103 0204 	add.w	r2, r3, #4
 8008318:	d015      	beq.n	8008346 <_scanf_float+0x3de>
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	600a      	str	r2, [r1, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	e9c3 6700 	strd	r6, r7, [r3]
 8008324:	68e3      	ldr	r3, [r4, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60e3      	str	r3, [r4, #12]
 800832a:	e7d0      	b.n	80082ce <_scanf_float+0x366>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0e4      	beq.n	80082fc <_scanf_float+0x394>
 8008332:	9905      	ldr	r1, [sp, #20]
 8008334:	230a      	movs	r3, #10
 8008336:	4640      	mov	r0, r8
 8008338:	3101      	adds	r1, #1
 800833a:	f001 fa9d 	bl	8009878 <_strtol_r>
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	9e05      	ldr	r6, [sp, #20]
 8008342:	1ac2      	subs	r2, r0, r3
 8008344:	e7d0      	b.n	80082e8 <_scanf_float+0x380>
 8008346:	076d      	lsls	r5, r5, #29
 8008348:	d4e7      	bmi.n	800831a <_scanf_float+0x3b2>
 800834a:	9d03      	ldr	r5, [sp, #12]
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	681d      	ldr	r5, [r3, #0]
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	f7f8 fb64 	bl	8000a20 <__aeabi_dcmpun>
 8008358:	b120      	cbz	r0, 8008364 <_scanf_float+0x3fc>
 800835a:	4807      	ldr	r0, [pc, #28]	@ (8008378 <_scanf_float+0x410>)
 800835c:	f000 faf0 	bl	8008940 <nanf>
 8008360:	6028      	str	r0, [r5, #0]
 8008362:	e7df      	b.n	8008324 <_scanf_float+0x3bc>
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f8 fb90 	bl	8000a8c <__aeabi_d2f>
 800836c:	e7f8      	b.n	8008360 <_scanf_float+0x3f8>
 800836e:	2700      	movs	r7, #0
 8008370:	e633      	b.n	8007fda <_scanf_float+0x72>
 8008372:	bf00      	nop
 8008374:	0800c71a 	.word	0x0800c71a
 8008378:	0800c7cb 	.word	0x0800c7cb

0800837c <std>:
 800837c:	2300      	movs	r3, #0
 800837e:	b510      	push	{r4, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	e9c0 3300 	strd	r3, r3, [r0]
 8008386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800838a:	6083      	str	r3, [r0, #8]
 800838c:	8181      	strh	r1, [r0, #12]
 800838e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008390:	81c2      	strh	r2, [r0, #14]
 8008392:	6183      	str	r3, [r0, #24]
 8008394:	4619      	mov	r1, r3
 8008396:	2208      	movs	r2, #8
 8008398:	305c      	adds	r0, #92	@ 0x5c
 800839a:	f000 f944 	bl	8008626 <memset>
 800839e:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <std+0x58>)
 80083a0:	6224      	str	r4, [r4, #32]
 80083a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80083a4:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <std+0x5c>)
 80083a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083a8:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <std+0x60>)
 80083aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083ac:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <std+0x64>)
 80083ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <std+0x68>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d006      	beq.n	80083c4 <std+0x48>
 80083b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083ba:	4294      	cmp	r4, r2
 80083bc:	d002      	beq.n	80083c4 <std+0x48>
 80083be:	33d0      	adds	r3, #208	@ 0xd0
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d105      	bne.n	80083d0 <std+0x54>
 80083c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083cc:	f000 baa6 	b.w	800891c <__retarget_lock_init_recursive>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	bf00      	nop
 80083d4:	0800859d 	.word	0x0800859d
 80083d8:	080085c3 	.word	0x080085c3
 80083dc:	080085fb 	.word	0x080085fb
 80083e0:	0800861f 	.word	0x0800861f
 80083e4:	20001fc4 	.word	0x20001fc4

080083e8 <stdio_exit_handler>:
 80083e8:	4a02      	ldr	r2, [pc, #8]	@ (80083f4 <stdio_exit_handler+0xc>)
 80083ea:	4903      	ldr	r1, [pc, #12]	@ (80083f8 <stdio_exit_handler+0x10>)
 80083ec:	4803      	ldr	r0, [pc, #12]	@ (80083fc <stdio_exit_handler+0x14>)
 80083ee:	f000 b869 	b.w	80084c4 <_fwalk_sglue>
 80083f2:	bf00      	nop
 80083f4:	20000010 	.word	0x20000010
 80083f8:	0800a581 	.word	0x0800a581
 80083fc:	20000020 	.word	0x20000020

08008400 <cleanup_stdio>:
 8008400:	6841      	ldr	r1, [r0, #4]
 8008402:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <cleanup_stdio+0x34>)
 8008404:	b510      	push	{r4, lr}
 8008406:	4299      	cmp	r1, r3
 8008408:	4604      	mov	r4, r0
 800840a:	d001      	beq.n	8008410 <cleanup_stdio+0x10>
 800840c:	f002 f8b8 	bl	800a580 <_fflush_r>
 8008410:	68a1      	ldr	r1, [r4, #8]
 8008412:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <cleanup_stdio+0x38>)
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <cleanup_stdio+0x1e>
 8008418:	4620      	mov	r0, r4
 800841a:	f002 f8b1 	bl	800a580 <_fflush_r>
 800841e:	68e1      	ldr	r1, [r4, #12]
 8008420:	4b06      	ldr	r3, [pc, #24]	@ (800843c <cleanup_stdio+0x3c>)
 8008422:	4299      	cmp	r1, r3
 8008424:	d004      	beq.n	8008430 <cleanup_stdio+0x30>
 8008426:	4620      	mov	r0, r4
 8008428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842c:	f002 b8a8 	b.w	800a580 <_fflush_r>
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop
 8008434:	20001fc4 	.word	0x20001fc4
 8008438:	2000202c 	.word	0x2000202c
 800843c:	20002094 	.word	0x20002094

08008440 <global_stdio_init.part.0>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4b0b      	ldr	r3, [pc, #44]	@ (8008470 <global_stdio_init.part.0+0x30>)
 8008444:	4c0b      	ldr	r4, [pc, #44]	@ (8008474 <global_stdio_init.part.0+0x34>)
 8008446:	4a0c      	ldr	r2, [pc, #48]	@ (8008478 <global_stdio_init.part.0+0x38>)
 8008448:	4620      	mov	r0, r4
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	2104      	movs	r1, #4
 800844e:	2200      	movs	r2, #0
 8008450:	f7ff ff94 	bl	800837c <std>
 8008454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008458:	2201      	movs	r2, #1
 800845a:	2109      	movs	r1, #9
 800845c:	f7ff ff8e 	bl	800837c <std>
 8008460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008464:	2202      	movs	r2, #2
 8008466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846a:	2112      	movs	r1, #18
 800846c:	f7ff bf86 	b.w	800837c <std>
 8008470:	200020fc 	.word	0x200020fc
 8008474:	20001fc4 	.word	0x20001fc4
 8008478:	080083e9 	.word	0x080083e9

0800847c <__sfp_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	@ (8008484 <__sfp_lock_acquire+0x8>)
 800847e:	f000 ba4e 	b.w	800891e <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	20002105 	.word	0x20002105

08008488 <__sfp_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	@ (8008490 <__sfp_lock_release+0x8>)
 800848a:	f000 ba49 	b.w	8008920 <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	20002105 	.word	0x20002105

08008494 <__sinit>:
 8008494:	b510      	push	{r4, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	f7ff fff0 	bl	800847c <__sfp_lock_acquire>
 800849c:	6a23      	ldr	r3, [r4, #32]
 800849e:	b11b      	cbz	r3, 80084a8 <__sinit+0x14>
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f7ff bff0 	b.w	8008488 <__sfp_lock_release>
 80084a8:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <__sinit+0x28>)
 80084aa:	6223      	str	r3, [r4, #32]
 80084ac:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <__sinit+0x2c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f5      	bne.n	80084a0 <__sinit+0xc>
 80084b4:	f7ff ffc4 	bl	8008440 <global_stdio_init.part.0>
 80084b8:	e7f2      	b.n	80084a0 <__sinit+0xc>
 80084ba:	bf00      	nop
 80084bc:	08008401 	.word	0x08008401
 80084c0:	200020fc 	.word	0x200020fc

080084c4 <_fwalk_sglue>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	4607      	mov	r7, r0
 80084ca:	4688      	mov	r8, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	2600      	movs	r6, #0
 80084d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d4:	f1b9 0901 	subs.w	r9, r9, #1
 80084d8:	d505      	bpl.n	80084e6 <_fwalk_sglue+0x22>
 80084da:	6824      	ldr	r4, [r4, #0]
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d1f7      	bne.n	80084d0 <_fwalk_sglue+0xc>
 80084e0:	4630      	mov	r0, r6
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d907      	bls.n	80084fc <_fwalk_sglue+0x38>
 80084ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f0:	3301      	adds	r3, #1
 80084f2:	d003      	beq.n	80084fc <_fwalk_sglue+0x38>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c0      	blx	r8
 80084fa:	4306      	orrs	r6, r0
 80084fc:	3568      	adds	r5, #104	@ 0x68
 80084fe:	e7e9      	b.n	80084d4 <_fwalk_sglue+0x10>

08008500 <siprintf>:
 8008500:	b40e      	push	{r1, r2, r3}
 8008502:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008506:	b510      	push	{r4, lr}
 8008508:	2400      	movs	r4, #0
 800850a:	b09d      	sub	sp, #116	@ 0x74
 800850c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800850e:	9002      	str	r0, [sp, #8]
 8008510:	9006      	str	r0, [sp, #24]
 8008512:	9107      	str	r1, [sp, #28]
 8008514:	9104      	str	r1, [sp, #16]
 8008516:	4809      	ldr	r0, [pc, #36]	@ (800853c <siprintf+0x3c>)
 8008518:	4909      	ldr	r1, [pc, #36]	@ (8008540 <siprintf+0x40>)
 800851a:	f853 2b04 	ldr.w	r2, [r3], #4
 800851e:	9105      	str	r1, [sp, #20]
 8008520:	6800      	ldr	r0, [r0, #0]
 8008522:	a902      	add	r1, sp, #8
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008528:	f001 fa04 	bl	8009934 <_svfiprintf_r>
 800852c:	9b02      	ldr	r3, [sp, #8]
 800852e:	701c      	strb	r4, [r3, #0]
 8008530:	b01d      	add	sp, #116	@ 0x74
 8008532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008536:	b003      	add	sp, #12
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	2000001c 	.word	0x2000001c
 8008540:	ffff0208 	.word	0xffff0208

08008544 <siscanf>:
 8008544:	b40e      	push	{r1, r2, r3}
 8008546:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800854a:	b570      	push	{r4, r5, r6, lr}
 800854c:	2500      	movs	r5, #0
 800854e:	b09d      	sub	sp, #116	@ 0x74
 8008550:	ac21      	add	r4, sp, #132	@ 0x84
 8008552:	f854 6b04 	ldr.w	r6, [r4], #4
 8008556:	f8ad 2014 	strh.w	r2, [sp, #20]
 800855a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800855c:	9002      	str	r0, [sp, #8]
 800855e:	9006      	str	r0, [sp, #24]
 8008560:	f7f7 fe00 	bl	8000164 <strlen>
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <siscanf+0x50>)
 8008566:	9003      	str	r0, [sp, #12]
 8008568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800856a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800856e:	9007      	str	r0, [sp, #28]
 8008570:	4809      	ldr	r0, [pc, #36]	@ (8008598 <siscanf+0x54>)
 8008572:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008576:	4632      	mov	r2, r6
 8008578:	4623      	mov	r3, r4
 800857a:	a902      	add	r1, sp, #8
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008580:	9514      	str	r5, [sp, #80]	@ 0x50
 8008582:	9401      	str	r4, [sp, #4]
 8008584:	f001 fb2c 	bl	8009be0 <__ssvfiscanf_r>
 8008588:	b01d      	add	sp, #116	@ 0x74
 800858a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800858e:	b003      	add	sp, #12
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	080085bf 	.word	0x080085bf
 8008598:	2000001c 	.word	0x2000001c

0800859c <__sread>:
 800859c:	b510      	push	{r4, lr}
 800859e:	460c      	mov	r4, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	f000 f96c 	bl	8008880 <_read_r>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	bfab      	itete	ge
 80085ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085ae:	89a3      	ldrhlt	r3, [r4, #12]
 80085b0:	181b      	addge	r3, r3, r0
 80085b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085b6:	bfac      	ite	ge
 80085b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085ba:	81a3      	strhlt	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__seofread>:
 80085be:	2000      	movs	r0, #0
 80085c0:	4770      	bx	lr

080085c2 <__swrite>:
 80085c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	461f      	mov	r7, r3
 80085c8:	898b      	ldrh	r3, [r1, #12]
 80085ca:	4605      	mov	r5, r0
 80085cc:	05db      	lsls	r3, r3, #23
 80085ce:	460c      	mov	r4, r1
 80085d0:	4616      	mov	r6, r2
 80085d2:	d505      	bpl.n	80085e0 <__swrite+0x1e>
 80085d4:	2302      	movs	r3, #2
 80085d6:	2200      	movs	r2, #0
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	f000 f93e 	bl	800885c <_lseek_r>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	4632      	mov	r2, r6
 80085e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	4628      	mov	r0, r5
 80085ec:	463b      	mov	r3, r7
 80085ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	f000 b955 	b.w	80088a4 <_write_r>

080085fa <__sseek>:
 80085fa:	b510      	push	{r4, lr}
 80085fc:	460c      	mov	r4, r1
 80085fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008602:	f000 f92b 	bl	800885c <_lseek_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	bf15      	itete	ne
 800860c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800860e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008612:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008616:	81a3      	strheq	r3, [r4, #12]
 8008618:	bf18      	it	ne
 800861a:	81a3      	strhne	r3, [r4, #12]
 800861c:	bd10      	pop	{r4, pc}

0800861e <__sclose>:
 800861e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008622:	f000 b8ad 	b.w	8008780 <_close_r>

08008626 <memset>:
 8008626:	4603      	mov	r3, r0
 8008628:	4402      	add	r2, r0
 800862a:	4293      	cmp	r3, r2
 800862c:	d100      	bne.n	8008630 <memset+0xa>
 800862e:	4770      	bx	lr
 8008630:	f803 1b01 	strb.w	r1, [r3], #1
 8008634:	e7f9      	b.n	800862a <memset+0x4>

08008636 <strchr>:
 8008636:	4603      	mov	r3, r0
 8008638:	b2c9      	uxtb	r1, r1
 800863a:	4618      	mov	r0, r3
 800863c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008640:	b112      	cbz	r2, 8008648 <strchr+0x12>
 8008642:	428a      	cmp	r2, r1
 8008644:	d1f9      	bne.n	800863a <strchr+0x4>
 8008646:	4770      	bx	lr
 8008648:	2900      	cmp	r1, #0
 800864a:	bf18      	it	ne
 800864c:	2000      	movne	r0, #0
 800864e:	4770      	bx	lr

08008650 <strncmp>:
 8008650:	b510      	push	{r4, lr}
 8008652:	b16a      	cbz	r2, 8008670 <strncmp+0x20>
 8008654:	3901      	subs	r1, #1
 8008656:	1884      	adds	r4, r0, r2
 8008658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800865c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008660:	429a      	cmp	r2, r3
 8008662:	d103      	bne.n	800866c <strncmp+0x1c>
 8008664:	42a0      	cmp	r0, r4
 8008666:	d001      	beq.n	800866c <strncmp+0x1c>
 8008668:	2a00      	cmp	r2, #0
 800866a:	d1f5      	bne.n	8008658 <strncmp+0x8>
 800866c:	1ad0      	subs	r0, r2, r3
 800866e:	bd10      	pop	{r4, pc}
 8008670:	4610      	mov	r0, r2
 8008672:	e7fc      	b.n	800866e <strncmp+0x1e>

08008674 <strncpy>:
 8008674:	4603      	mov	r3, r0
 8008676:	b510      	push	{r4, lr}
 8008678:	3901      	subs	r1, #1
 800867a:	b132      	cbz	r2, 800868a <strncpy+0x16>
 800867c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008680:	3a01      	subs	r2, #1
 8008682:	f803 4b01 	strb.w	r4, [r3], #1
 8008686:	2c00      	cmp	r4, #0
 8008688:	d1f7      	bne.n	800867a <strncpy+0x6>
 800868a:	2100      	movs	r1, #0
 800868c:	441a      	add	r2, r3
 800868e:	4293      	cmp	r3, r2
 8008690:	d100      	bne.n	8008694 <strncpy+0x20>
 8008692:	bd10      	pop	{r4, pc}
 8008694:	f803 1b01 	strb.w	r1, [r3], #1
 8008698:	e7f9      	b.n	800868e <strncpy+0x1a>
	...

0800869c <strtok>:
 800869c:	4b16      	ldr	r3, [pc, #88]	@ (80086f8 <strtok+0x5c>)
 800869e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a2:	681f      	ldr	r7, [r3, #0]
 80086a4:	4605      	mov	r5, r0
 80086a6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80086a8:	460e      	mov	r6, r1
 80086aa:	b9ec      	cbnz	r4, 80086e8 <strtok+0x4c>
 80086ac:	2050      	movs	r0, #80	@ 0x50
 80086ae:	f000 f9b1 	bl	8008a14 <malloc>
 80086b2:	4602      	mov	r2, r0
 80086b4:	6478      	str	r0, [r7, #68]	@ 0x44
 80086b6:	b920      	cbnz	r0, 80086c2 <strtok+0x26>
 80086b8:	215b      	movs	r1, #91	@ 0x5b
 80086ba:	4b10      	ldr	r3, [pc, #64]	@ (80086fc <strtok+0x60>)
 80086bc:	4810      	ldr	r0, [pc, #64]	@ (8008700 <strtok+0x64>)
 80086be:	f000 f943 	bl	8008948 <__assert_func>
 80086c2:	e9c0 4400 	strd	r4, r4, [r0]
 80086c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80086d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80086d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80086da:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80086de:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80086e2:	6184      	str	r4, [r0, #24]
 80086e4:	7704      	strb	r4, [r0, #28]
 80086e6:	6244      	str	r4, [r0, #36]	@ 0x24
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086ee:	2301      	movs	r3, #1
 80086f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	f000 b806 	b.w	8008704 <__strtok_r>
 80086f8:	2000001c 	.word	0x2000001c
 80086fc:	0800c71f 	.word	0x0800c71f
 8008700:	0800c736 	.word	0x0800c736

08008704 <__strtok_r>:
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	b908      	cbnz	r0, 800870e <__strtok_r+0xa>
 800870a:	6814      	ldr	r4, [r2, #0]
 800870c:	b144      	cbz	r4, 8008720 <__strtok_r+0x1c>
 800870e:	460f      	mov	r7, r1
 8008710:	4620      	mov	r0, r4
 8008712:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008716:	f817 6b01 	ldrb.w	r6, [r7], #1
 800871a:	b91e      	cbnz	r6, 8008724 <__strtok_r+0x20>
 800871c:	b965      	cbnz	r5, 8008738 <__strtok_r+0x34>
 800871e:	6015      	str	r5, [r2, #0]
 8008720:	2000      	movs	r0, #0
 8008722:	e005      	b.n	8008730 <__strtok_r+0x2c>
 8008724:	42b5      	cmp	r5, r6
 8008726:	d1f6      	bne.n	8008716 <__strtok_r+0x12>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <__strtok_r+0xa>
 800872c:	6014      	str	r4, [r2, #0]
 800872e:	7003      	strb	r3, [r0, #0]
 8008730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008732:	461c      	mov	r4, r3
 8008734:	e00c      	b.n	8008750 <__strtok_r+0x4c>
 8008736:	b91d      	cbnz	r5, 8008740 <__strtok_r+0x3c>
 8008738:	460e      	mov	r6, r1
 800873a:	4627      	mov	r7, r4
 800873c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008740:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008744:	42ab      	cmp	r3, r5
 8008746:	d1f6      	bne.n	8008736 <__strtok_r+0x32>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0f2      	beq.n	8008732 <__strtok_r+0x2e>
 800874c:	2300      	movs	r3, #0
 800874e:	703b      	strb	r3, [r7, #0]
 8008750:	6014      	str	r4, [r2, #0]
 8008752:	e7ed      	b.n	8008730 <__strtok_r+0x2c>

08008754 <strstr>:
 8008754:	780a      	ldrb	r2, [r1, #0]
 8008756:	b570      	push	{r4, r5, r6, lr}
 8008758:	b96a      	cbnz	r2, 8008776 <strstr+0x22>
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	429a      	cmp	r2, r3
 800875e:	d109      	bne.n	8008774 <strstr+0x20>
 8008760:	460c      	mov	r4, r1
 8008762:	4605      	mov	r5, r0
 8008764:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f6      	beq.n	800875a <strstr+0x6>
 800876c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008770:	429e      	cmp	r6, r3
 8008772:	d0f7      	beq.n	8008764 <strstr+0x10>
 8008774:	3001      	adds	r0, #1
 8008776:	7803      	ldrb	r3, [r0, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1ef      	bne.n	800875c <strstr+0x8>
 800877c:	4618      	mov	r0, r3
 800877e:	e7ec      	b.n	800875a <strstr+0x6>

08008780 <_close_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	2300      	movs	r3, #0
 8008784:	4d05      	ldr	r5, [pc, #20]	@ (800879c <_close_r+0x1c>)
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f7f9 fdfb 	bl	8002386 <_close>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_close_r+0x1a>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_close_r+0x1a>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20002100 	.word	0x20002100

080087a0 <_reclaim_reent>:
 80087a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008858 <_reclaim_reent+0xb8>)
 80087a2:	b570      	push	{r4, r5, r6, lr}
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4604      	mov	r4, r0
 80087a8:	4283      	cmp	r3, r0
 80087aa:	d053      	beq.n	8008854 <_reclaim_reent+0xb4>
 80087ac:	69c3      	ldr	r3, [r0, #28]
 80087ae:	b31b      	cbz	r3, 80087f8 <_reclaim_reent+0x58>
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	b163      	cbz	r3, 80087ce <_reclaim_reent+0x2e>
 80087b4:	2500      	movs	r5, #0
 80087b6:	69e3      	ldr	r3, [r4, #28]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	5959      	ldr	r1, [r3, r5]
 80087bc:	b9b1      	cbnz	r1, 80087ec <_reclaim_reent+0x4c>
 80087be:	3504      	adds	r5, #4
 80087c0:	2d80      	cmp	r5, #128	@ 0x80
 80087c2:	d1f8      	bne.n	80087b6 <_reclaim_reent+0x16>
 80087c4:	69e3      	ldr	r3, [r4, #28]
 80087c6:	4620      	mov	r0, r4
 80087c8:	68d9      	ldr	r1, [r3, #12]
 80087ca:	f000 f8db 	bl	8008984 <_free_r>
 80087ce:	69e3      	ldr	r3, [r4, #28]
 80087d0:	6819      	ldr	r1, [r3, #0]
 80087d2:	b111      	cbz	r1, 80087da <_reclaim_reent+0x3a>
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 f8d5 	bl	8008984 <_free_r>
 80087da:	69e3      	ldr	r3, [r4, #28]
 80087dc:	689d      	ldr	r5, [r3, #8]
 80087de:	b15d      	cbz	r5, 80087f8 <_reclaim_reent+0x58>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4620      	mov	r0, r4
 80087e4:	682d      	ldr	r5, [r5, #0]
 80087e6:	f000 f8cd 	bl	8008984 <_free_r>
 80087ea:	e7f8      	b.n	80087de <_reclaim_reent+0x3e>
 80087ec:	680e      	ldr	r6, [r1, #0]
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 f8c8 	bl	8008984 <_free_r>
 80087f4:	4631      	mov	r1, r6
 80087f6:	e7e1      	b.n	80087bc <_reclaim_reent+0x1c>
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	b111      	cbz	r1, 8008802 <_reclaim_reent+0x62>
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 f8c1 	bl	8008984 <_free_r>
 8008802:	69e1      	ldr	r1, [r4, #28]
 8008804:	b111      	cbz	r1, 800880c <_reclaim_reent+0x6c>
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f8bc 	bl	8008984 <_free_r>
 800880c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800880e:	b111      	cbz	r1, 8008816 <_reclaim_reent+0x76>
 8008810:	4620      	mov	r0, r4
 8008812:	f000 f8b7 	bl	8008984 <_free_r>
 8008816:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008818:	b111      	cbz	r1, 8008820 <_reclaim_reent+0x80>
 800881a:	4620      	mov	r0, r4
 800881c:	f000 f8b2 	bl	8008984 <_free_r>
 8008820:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008822:	b111      	cbz	r1, 800882a <_reclaim_reent+0x8a>
 8008824:	4620      	mov	r0, r4
 8008826:	f000 f8ad 	bl	8008984 <_free_r>
 800882a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800882c:	b111      	cbz	r1, 8008834 <_reclaim_reent+0x94>
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f8a8 	bl	8008984 <_free_r>
 8008834:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008836:	b111      	cbz	r1, 800883e <_reclaim_reent+0x9e>
 8008838:	4620      	mov	r0, r4
 800883a:	f000 f8a3 	bl	8008984 <_free_r>
 800883e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008840:	b111      	cbz	r1, 8008848 <_reclaim_reent+0xa8>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f89e 	bl	8008984 <_free_r>
 8008848:	6a23      	ldr	r3, [r4, #32]
 800884a:	b11b      	cbz	r3, 8008854 <_reclaim_reent+0xb4>
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008852:	4718      	bx	r3
 8008854:	bd70      	pop	{r4, r5, r6, pc}
 8008856:	bf00      	nop
 8008858:	2000001c 	.word	0x2000001c

0800885c <_lseek_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	2200      	movs	r2, #0
 8008866:	4d05      	ldr	r5, [pc, #20]	@ (800887c <_lseek_r+0x20>)
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7f9 fdaf 	bl	80023ce <_lseek>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_lseek_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_lseek_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20002100 	.word	0x20002100

08008880 <_read_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	2200      	movs	r2, #0
 800888a:	4d05      	ldr	r5, [pc, #20]	@ (80088a0 <_read_r+0x20>)
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f9 fd40 	bl	8002314 <_read>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_read_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_read_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20002100 	.word	0x20002100

080088a4 <_write_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	4d05      	ldr	r5, [pc, #20]	@ (80088c4 <_write_r+0x20>)
 80088b0:	602a      	str	r2, [r5, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f7f9 fd4b 	bl	800234e <_write>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_write_r+0x1e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_write_r+0x1e>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20002100 	.word	0x20002100

080088c8 <__errno>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	@ (80088d0 <__errno+0x8>)
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	2000001c 	.word	0x2000001c

080088d4 <__libc_init_array>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	2600      	movs	r6, #0
 80088d8:	4d0c      	ldr	r5, [pc, #48]	@ (800890c <__libc_init_array+0x38>)
 80088da:	4c0d      	ldr	r4, [pc, #52]	@ (8008910 <__libc_init_array+0x3c>)
 80088dc:	1b64      	subs	r4, r4, r5
 80088de:	10a4      	asrs	r4, r4, #2
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	d109      	bne.n	80088f8 <__libc_init_array+0x24>
 80088e4:	f003 fa8c 	bl	800be00 <_init>
 80088e8:	2600      	movs	r6, #0
 80088ea:	4d0a      	ldr	r5, [pc, #40]	@ (8008914 <__libc_init_array+0x40>)
 80088ec:	4c0a      	ldr	r4, [pc, #40]	@ (8008918 <__libc_init_array+0x44>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	42a6      	cmp	r6, r4
 80088f4:	d105      	bne.n	8008902 <__libc_init_array+0x2e>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fc:	4798      	blx	r3
 80088fe:	3601      	adds	r6, #1
 8008900:	e7ee      	b.n	80088e0 <__libc_init_array+0xc>
 8008902:	f855 3b04 	ldr.w	r3, [r5], #4
 8008906:	4798      	blx	r3
 8008908:	3601      	adds	r6, #1
 800890a:	e7f2      	b.n	80088f2 <__libc_init_array+0x1e>
 800890c:	0800cb58 	.word	0x0800cb58
 8008910:	0800cb58 	.word	0x0800cb58
 8008914:	0800cb58 	.word	0x0800cb58
 8008918:	0800cb5c 	.word	0x0800cb5c

0800891c <__retarget_lock_init_recursive>:
 800891c:	4770      	bx	lr

0800891e <__retarget_lock_acquire_recursive>:
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_release_recursive>:
 8008920:	4770      	bx	lr

08008922 <memcpy>:
 8008922:	440a      	add	r2, r1
 8008924:	4291      	cmp	r1, r2
 8008926:	f100 33ff 	add.w	r3, r0, #4294967295
 800892a:	d100      	bne.n	800892e <memcpy+0xc>
 800892c:	4770      	bx	lr
 800892e:	b510      	push	{r4, lr}
 8008930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008934:	4291      	cmp	r1, r2
 8008936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893a:	d1f9      	bne.n	8008930 <memcpy+0xe>
 800893c:	bd10      	pop	{r4, pc}
	...

08008940 <nanf>:
 8008940:	4800      	ldr	r0, [pc, #0]	@ (8008944 <nanf+0x4>)
 8008942:	4770      	bx	lr
 8008944:	7fc00000 	.word	0x7fc00000

08008948 <__assert_func>:
 8008948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894a:	4614      	mov	r4, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <__assert_func+0x2c>)
 8008950:	4605      	mov	r5, r0
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68d8      	ldr	r0, [r3, #12]
 8008956:	b14c      	cbz	r4, 800896c <__assert_func+0x24>
 8008958:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <__assert_func+0x30>)
 800895a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800895e:	9100      	str	r1, [sp, #0]
 8008960:	462b      	mov	r3, r5
 8008962:	4906      	ldr	r1, [pc, #24]	@ (800897c <__assert_func+0x34>)
 8008964:	f001 fe34 	bl	800a5d0 <fiprintf>
 8008968:	f001 fef4 	bl	800a754 <abort>
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <__assert_func+0x38>)
 800896e:	461c      	mov	r4, r3
 8008970:	e7f3      	b.n	800895a <__assert_func+0x12>
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c
 8008978:	0800c790 	.word	0x0800c790
 800897c:	0800c79d 	.word	0x0800c79d
 8008980:	0800c7cb 	.word	0x0800c7cb

08008984 <_free_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	2900      	cmp	r1, #0
 800898a:	d040      	beq.n	8008a0e <_free_r+0x8a>
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfb8      	it	lt
 8008996:	18e4      	addlt	r4, r4, r3
 8008998:	f000 f8e6 	bl	8008b68 <__malloc_lock>
 800899c:	4a1c      	ldr	r2, [pc, #112]	@ (8008a10 <_free_r+0x8c>)
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x2c>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ac:	f000 b8e2 	b.w	8008b74 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x42>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	1821      	adds	r1, r4, r0
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1809      	addeq	r1, r1, r0
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x1e>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x4c>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x42>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x6c>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	4401      	add	r1, r0
 80089dc:	1850      	adds	r0, r2, r1
 80089de:	4283      	cmp	r3, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x22>
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4408      	add	r0, r1
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	6053      	str	r3, [r2, #4]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x22>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x74>
 80089f2:	230c      	movs	r3, #12
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x22>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	1821      	adds	r1, r4, r0
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf01      	itttt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	1809      	addeq	r1, r1, r0
 8008a06:	6021      	streq	r1, [r4, #0]
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6054      	str	r4, [r2, #4]
 8008a0c:	e7cb      	b.n	80089a6 <_free_r+0x22>
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	2000210c 	.word	0x2000210c

08008a14 <malloc>:
 8008a14:	4b02      	ldr	r3, [pc, #8]	@ (8008a20 <malloc+0xc>)
 8008a16:	4601      	mov	r1, r0
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	f000 b825 	b.w	8008a68 <_malloc_r>
 8008a1e:	bf00      	nop
 8008a20:	2000001c 	.word	0x2000001c

08008a24 <sbrk_aligned>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4e0f      	ldr	r6, [pc, #60]	@ (8008a64 <sbrk_aligned+0x40>)
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6831      	ldr	r1, [r6, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b911      	cbnz	r1, 8008a36 <sbrk_aligned+0x12>
 8008a30:	f001 fe6c 	bl	800a70c <_sbrk_r>
 8008a34:	6030      	str	r0, [r6, #0]
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f001 fe67 	bl	800a70c <_sbrk_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d103      	bne.n	8008a4a <sbrk_aligned+0x26>
 8008a42:	f04f 34ff 	mov.w	r4, #4294967295
 8008a46:	4620      	mov	r0, r4
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d0f8      	beq.n	8008a46 <sbrk_aligned+0x22>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4628      	mov	r0, r5
 8008a58:	f001 fe58 	bl	800a70c <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1f2      	bne.n	8008a46 <sbrk_aligned+0x22>
 8008a60:	e7ef      	b.n	8008a42 <sbrk_aligned+0x1e>
 8008a62:	bf00      	nop
 8008a64:	20002108 	.word	0x20002108

08008a68 <_malloc_r>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	1ccd      	adds	r5, r1, #3
 8008a6e:	f025 0503 	bic.w	r5, r5, #3
 8008a72:	3508      	adds	r5, #8
 8008a74:	2d0c      	cmp	r5, #12
 8008a76:	bf38      	it	cc
 8008a78:	250c      	movcc	r5, #12
 8008a7a:	2d00      	cmp	r5, #0
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	db01      	blt.n	8008a84 <_malloc_r+0x1c>
 8008a80:	42a9      	cmp	r1, r5
 8008a82:	d904      	bls.n	8008a8e <_malloc_r+0x26>
 8008a84:	230c      	movs	r3, #12
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b64 <_malloc_r+0xfc>
 8008a92:	f000 f869 	bl	8008b68 <__malloc_lock>
 8008a96:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	bb44      	cbnz	r4, 8008af0 <_malloc_r+0x88>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff ffbf 	bl	8008a24 <sbrk_aligned>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	d158      	bne.n	8008b5e <_malloc_r+0xf6>
 8008aac:	f8d8 4000 	ldr.w	r4, [r8]
 8008ab0:	4627      	mov	r7, r4
 8008ab2:	2f00      	cmp	r7, #0
 8008ab4:	d143      	bne.n	8008b3e <_malloc_r+0xd6>
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d04b      	beq.n	8008b52 <_malloc_r+0xea>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	4639      	mov	r1, r7
 8008abe:	4630      	mov	r0, r6
 8008ac0:	eb04 0903 	add.w	r9, r4, r3
 8008ac4:	f001 fe22 	bl	800a70c <_sbrk_r>
 8008ac8:	4581      	cmp	r9, r0
 8008aca:	d142      	bne.n	8008b52 <_malloc_r+0xea>
 8008acc:	6821      	ldr	r1, [r4, #0]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	1a6d      	subs	r5, r5, r1
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7ff ffa6 	bl	8008a24 <sbrk_aligned>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d03a      	beq.n	8008b52 <_malloc_r+0xea>
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	442b      	add	r3, r5
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	bb62      	cbnz	r2, 8008b44 <_malloc_r+0xdc>
 8008aea:	f8c8 7000 	str.w	r7, [r8]
 8008aee:	e00f      	b.n	8008b10 <_malloc_r+0xa8>
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	1b52      	subs	r2, r2, r5
 8008af4:	d420      	bmi.n	8008b38 <_malloc_r+0xd0>
 8008af6:	2a0b      	cmp	r2, #11
 8008af8:	d917      	bls.n	8008b2a <_malloc_r+0xc2>
 8008afa:	1961      	adds	r1, r4, r5
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	6025      	str	r5, [r4, #0]
 8008b00:	bf18      	it	ne
 8008b02:	6059      	strne	r1, [r3, #4]
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	bf08      	it	eq
 8008b08:	f8c8 1000 	streq.w	r1, [r8]
 8008b0c:	5162      	str	r2, [r4, r5]
 8008b0e:	604b      	str	r3, [r1, #4]
 8008b10:	4630      	mov	r0, r6
 8008b12:	f000 f82f 	bl	8008b74 <__malloc_unlock>
 8008b16:	f104 000b 	add.w	r0, r4, #11
 8008b1a:	1d23      	adds	r3, r4, #4
 8008b1c:	f020 0007 	bic.w	r0, r0, #7
 8008b20:	1ac2      	subs	r2, r0, r3
 8008b22:	bf1c      	itt	ne
 8008b24:	1a1b      	subne	r3, r3, r0
 8008b26:	50a3      	strne	r3, [r4, r2]
 8008b28:	e7af      	b.n	8008a8a <_malloc_r+0x22>
 8008b2a:	6862      	ldr	r2, [r4, #4]
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	bf0c      	ite	eq
 8008b30:	f8c8 2000 	streq.w	r2, [r8]
 8008b34:	605a      	strne	r2, [r3, #4]
 8008b36:	e7eb      	b.n	8008b10 <_malloc_r+0xa8>
 8008b38:	4623      	mov	r3, r4
 8008b3a:	6864      	ldr	r4, [r4, #4]
 8008b3c:	e7ae      	b.n	8008a9c <_malloc_r+0x34>
 8008b3e:	463c      	mov	r4, r7
 8008b40:	687f      	ldr	r7, [r7, #4]
 8008b42:	e7b6      	b.n	8008ab2 <_malloc_r+0x4a>
 8008b44:	461a      	mov	r2, r3
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	d1fb      	bne.n	8008b44 <_malloc_r+0xdc>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6053      	str	r3, [r2, #4]
 8008b50:	e7de      	b.n	8008b10 <_malloc_r+0xa8>
 8008b52:	230c      	movs	r3, #12
 8008b54:	4630      	mov	r0, r6
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f000 f80c 	bl	8008b74 <__malloc_unlock>
 8008b5c:	e794      	b.n	8008a88 <_malloc_r+0x20>
 8008b5e:	6005      	str	r5, [r0, #0]
 8008b60:	e7d6      	b.n	8008b10 <_malloc_r+0xa8>
 8008b62:	bf00      	nop
 8008b64:	2000210c 	.word	0x2000210c

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	@ (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7ff bed8 	b.w	800891e <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	20002104 	.word	0x20002104

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7ff bed3 	b.w	8008920 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20002104 	.word	0x20002104

08008b80 <sulp>:
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	460f      	mov	r7, r1
 8008b86:	4690      	mov	r8, r2
 8008b88:	f002 fca4 	bl	800b4d4 <__ulp>
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	f1b8 0f00 	cmp.w	r8, #0
 8008b94:	d011      	beq.n	8008bba <sulp+0x3a>
 8008b96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008b9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd0b      	ble.n	8008bba <sulp+0x3a>
 8008ba2:	2400      	movs	r4, #0
 8008ba4:	051b      	lsls	r3, r3, #20
 8008ba6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008baa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bae:	4622      	mov	r2, r4
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	f7f7 fc9b 	bl	80004ec <__aeabi_dmul>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc2:	0000      	movs	r0, r0
 8008bc4:	0000      	movs	r0, r0
	...

08008bc8 <_strtod_l>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	b09f      	sub	sp, #124	@ 0x7c
 8008bce:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bd6:	f04f 0a00 	mov.w	sl, #0
 8008bda:	f04f 0b00 	mov.w	fp, #0
 8008bde:	460a      	mov	r2, r1
 8008be0:	9005      	str	r0, [sp, #20]
 8008be2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008be4:	7811      	ldrb	r1, [r2, #0]
 8008be6:	292b      	cmp	r1, #43	@ 0x2b
 8008be8:	d048      	beq.n	8008c7c <_strtod_l+0xb4>
 8008bea:	d836      	bhi.n	8008c5a <_strtod_l+0x92>
 8008bec:	290d      	cmp	r1, #13
 8008bee:	d830      	bhi.n	8008c52 <_strtod_l+0x8a>
 8008bf0:	2908      	cmp	r1, #8
 8008bf2:	d830      	bhi.n	8008c56 <_strtod_l+0x8e>
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d039      	beq.n	8008c6c <_strtod_l+0xa4>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008bfe:	782a      	ldrb	r2, [r5, #0]
 8008c00:	2a30      	cmp	r2, #48	@ 0x30
 8008c02:	f040 80b0 	bne.w	8008d66 <_strtod_l+0x19e>
 8008c06:	786a      	ldrb	r2, [r5, #1]
 8008c08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c0c:	2a58      	cmp	r2, #88	@ 0x58
 8008c0e:	d16c      	bne.n	8008cea <_strtod_l+0x122>
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c14:	4a8f      	ldr	r2, [pc, #572]	@ (8008e54 <_strtod_l+0x28c>)
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	9805      	ldr	r0, [sp, #20]
 8008c1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c20:	a919      	add	r1, sp, #100	@ 0x64
 8008c22:	f001 fe07 	bl	800a834 <__gethex>
 8008c26:	f010 060f 	ands.w	r6, r0, #15
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	d005      	beq.n	8008c3a <_strtod_l+0x72>
 8008c2e:	2e06      	cmp	r6, #6
 8008c30:	d126      	bne.n	8008c80 <_strtod_l+0xb8>
 8008c32:	2300      	movs	r3, #0
 8008c34:	3501      	adds	r5, #1
 8008c36:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c38:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 8582 	bne.w	8009746 <_strtod_l+0xb7e>
 8008c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c44:	b1bb      	cbz	r3, 8008c76 <_strtod_l+0xae>
 8008c46:	4650      	mov	r0, sl
 8008c48:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008c4c:	b01f      	add	sp, #124	@ 0x7c
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	2920      	cmp	r1, #32
 8008c54:	d1d0      	bne.n	8008bf8 <_strtod_l+0x30>
 8008c56:	3201      	adds	r2, #1
 8008c58:	e7c3      	b.n	8008be2 <_strtod_l+0x1a>
 8008c5a:	292d      	cmp	r1, #45	@ 0x2d
 8008c5c:	d1cc      	bne.n	8008bf8 <_strtod_l+0x30>
 8008c5e:	2101      	movs	r1, #1
 8008c60:	910e      	str	r1, [sp, #56]	@ 0x38
 8008c62:	1c51      	adds	r1, r2, #1
 8008c64:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c66:	7852      	ldrb	r2, [r2, #1]
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d1c7      	bne.n	8008bfc <_strtod_l+0x34>
 8008c6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 8566 	bne.w	8009742 <_strtod_l+0xb7a>
 8008c76:	4650      	mov	r0, sl
 8008c78:	4659      	mov	r1, fp
 8008c7a:	e7e7      	b.n	8008c4c <_strtod_l+0x84>
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	e7ef      	b.n	8008c60 <_strtod_l+0x98>
 8008c80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c82:	b13a      	cbz	r2, 8008c94 <_strtod_l+0xcc>
 8008c84:	2135      	movs	r1, #53	@ 0x35
 8008c86:	a81c      	add	r0, sp, #112	@ 0x70
 8008c88:	f002 fd14 	bl	800b6b4 <__copybits>
 8008c8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c8e:	9805      	ldr	r0, [sp, #20]
 8008c90:	f002 f8f4 	bl	800ae7c <_Bfree>
 8008c94:	3e01      	subs	r6, #1
 8008c96:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008c98:	2e04      	cmp	r6, #4
 8008c9a:	d806      	bhi.n	8008caa <_strtod_l+0xe2>
 8008c9c:	e8df f006 	tbb	[pc, r6]
 8008ca0:	201d0314 	.word	0x201d0314
 8008ca4:	14          	.byte	0x14
 8008ca5:	00          	.byte	0x00
 8008ca6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008caa:	05e1      	lsls	r1, r4, #23
 8008cac:	bf48      	it	mi
 8008cae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cb6:	0d1b      	lsrs	r3, r3, #20
 8008cb8:	051b      	lsls	r3, r3, #20
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1bd      	bne.n	8008c3a <_strtod_l+0x72>
 8008cbe:	f7ff fe03 	bl	80088c8 <__errno>
 8008cc2:	2322      	movs	r3, #34	@ 0x22
 8008cc4:	6003      	str	r3, [r0, #0]
 8008cc6:	e7b8      	b.n	8008c3a <_strtod_l+0x72>
 8008cc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ccc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008cd4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cd8:	e7e7      	b.n	8008caa <_strtod_l+0xe2>
 8008cda:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008e58 <_strtod_l+0x290>
 8008cde:	e7e4      	b.n	8008caa <_strtod_l+0xe2>
 8008ce0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008ce4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ce8:	e7df      	b.n	8008caa <_strtod_l+0xe2>
 8008cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b30      	cmp	r3, #48	@ 0x30
 8008cf4:	d0f9      	beq.n	8008cea <_strtod_l+0x122>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d09f      	beq.n	8008c3a <_strtod_l+0x72>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	2700      	movs	r7, #0
 8008cfe:	220a      	movs	r2, #10
 8008d00:	46b9      	mov	r9, r7
 8008d02:	9308      	str	r3, [sp, #32]
 8008d04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d06:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008d08:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d0a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d0c:	7805      	ldrb	r5, [r0, #0]
 8008d0e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d12:	b2d9      	uxtb	r1, r3
 8008d14:	2909      	cmp	r1, #9
 8008d16:	d928      	bls.n	8008d6a <_strtod_l+0x1a2>
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4950      	ldr	r1, [pc, #320]	@ (8008e5c <_strtod_l+0x294>)
 8008d1c:	f7ff fc98 	bl	8008650 <strncmp>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d032      	beq.n	8008d8a <_strtod_l+0x1c2>
 8008d24:	2000      	movs	r0, #0
 8008d26:	462a      	mov	r2, r5
 8008d28:	4603      	mov	r3, r0
 8008d2a:	464d      	mov	r5, r9
 8008d2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d2e:	2a65      	cmp	r2, #101	@ 0x65
 8008d30:	d001      	beq.n	8008d36 <_strtod_l+0x16e>
 8008d32:	2a45      	cmp	r2, #69	@ 0x45
 8008d34:	d114      	bne.n	8008d60 <_strtod_l+0x198>
 8008d36:	b91d      	cbnz	r5, 8008d40 <_strtod_l+0x178>
 8008d38:	9a08      	ldr	r2, [sp, #32]
 8008d3a:	4302      	orrs	r2, r0
 8008d3c:	d096      	beq.n	8008c6c <_strtod_l+0xa4>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d42:	1c62      	adds	r2, r4, #1
 8008d44:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d46:	7862      	ldrb	r2, [r4, #1]
 8008d48:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d4a:	d07a      	beq.n	8008e42 <_strtod_l+0x27a>
 8008d4c:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d4e:	d07e      	beq.n	8008e4e <_strtod_l+0x286>
 8008d50:	f04f 0c00 	mov.w	ip, #0
 8008d54:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d58:	2909      	cmp	r1, #9
 8008d5a:	f240 8085 	bls.w	8008e68 <_strtod_l+0x2a0>
 8008d5e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d60:	f04f 0800 	mov.w	r8, #0
 8008d64:	e0a5      	b.n	8008eb2 <_strtod_l+0x2ea>
 8008d66:	2300      	movs	r3, #0
 8008d68:	e7c8      	b.n	8008cfc <_strtod_l+0x134>
 8008d6a:	f1b9 0f08 	cmp.w	r9, #8
 8008d6e:	bfd8      	it	le
 8008d70:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008d72:	f100 0001 	add.w	r0, r0, #1
 8008d76:	bfd6      	itet	le
 8008d78:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d7c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008d80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008d82:	f109 0901 	add.w	r9, r9, #1
 8008d86:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d88:	e7bf      	b.n	8008d0a <_strtod_l+0x142>
 8008d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d90:	785a      	ldrb	r2, [r3, #1]
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	d03b      	beq.n	8008e10 <_strtod_l+0x248>
 8008d98:	464d      	mov	r5, r9
 8008d9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d9c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d912      	bls.n	8008dca <_strtod_l+0x202>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7c2      	b.n	8008d2e <_strtod_l+0x166>
 8008da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008daa:	3001      	adds	r0, #1
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	9219      	str	r2, [sp, #100]	@ 0x64
 8008db0:	785a      	ldrb	r2, [r3, #1]
 8008db2:	2a30      	cmp	r2, #48	@ 0x30
 8008db4:	d0f8      	beq.n	8008da8 <_strtod_l+0x1e0>
 8008db6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	f200 84c8 	bhi.w	8009750 <_strtod_l+0xb88>
 8008dc0:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dca:	3a30      	subs	r2, #48	@ 0x30
 8008dcc:	f100 0301 	add.w	r3, r0, #1
 8008dd0:	d018      	beq.n	8008e04 <_strtod_l+0x23c>
 8008dd2:	462e      	mov	r6, r5
 8008dd4:	f04f 0e0a 	mov.w	lr, #10
 8008dd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dda:	4419      	add	r1, r3
 8008ddc:	910a      	str	r1, [sp, #40]	@ 0x28
 8008dde:	1c71      	adds	r1, r6, #1
 8008de0:	eba1 0c05 	sub.w	ip, r1, r5
 8008de4:	4563      	cmp	r3, ip
 8008de6:	dc15      	bgt.n	8008e14 <_strtod_l+0x24c>
 8008de8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008dec:	182b      	adds	r3, r5, r0
 8008dee:	2b08      	cmp	r3, #8
 8008df0:	f105 0501 	add.w	r5, r5, #1
 8008df4:	4405      	add	r5, r0
 8008df6:	dc1a      	bgt.n	8008e2e <_strtod_l+0x266>
 8008df8:	230a      	movs	r3, #10
 8008dfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dfc:	fb03 2301 	mla	r3, r3, r1, r2
 8008e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e02:	2300      	movs	r3, #0
 8008e04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e06:	4618      	mov	r0, r3
 8008e08:	1c51      	adds	r1, r2, #1
 8008e0a:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e0c:	7852      	ldrb	r2, [r2, #1]
 8008e0e:	e7c5      	b.n	8008d9c <_strtod_l+0x1d4>
 8008e10:	4648      	mov	r0, r9
 8008e12:	e7ce      	b.n	8008db2 <_strtod_l+0x1ea>
 8008e14:	2e08      	cmp	r6, #8
 8008e16:	dc05      	bgt.n	8008e24 <_strtod_l+0x25c>
 8008e18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e1a:	fb0e f606 	mul.w	r6, lr, r6
 8008e1e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008e20:	460e      	mov	r6, r1
 8008e22:	e7dc      	b.n	8008dde <_strtod_l+0x216>
 8008e24:	2910      	cmp	r1, #16
 8008e26:	bfd8      	it	le
 8008e28:	fb0e f707 	mulle.w	r7, lr, r7
 8008e2c:	e7f8      	b.n	8008e20 <_strtod_l+0x258>
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	bfdc      	itt	le
 8008e32:	230a      	movle	r3, #10
 8008e34:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e38:	e7e3      	b.n	8008e02 <_strtod_l+0x23a>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e77a      	b.n	8008d38 <_strtod_l+0x170>
 8008e42:	f04f 0c00 	mov.w	ip, #0
 8008e46:	1ca2      	adds	r2, r4, #2
 8008e48:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e4a:	78a2      	ldrb	r2, [r4, #2]
 8008e4c:	e782      	b.n	8008d54 <_strtod_l+0x18c>
 8008e4e:	f04f 0c01 	mov.w	ip, #1
 8008e52:	e7f8      	b.n	8008e46 <_strtod_l+0x27e>
 8008e54:	0800c910 	.word	0x0800c910
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	0800c7cc 	.word	0x0800c7cc
 8008e60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e62:	1c51      	adds	r1, r2, #1
 8008e64:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e66:	7852      	ldrb	r2, [r2, #1]
 8008e68:	2a30      	cmp	r2, #48	@ 0x30
 8008e6a:	d0f9      	beq.n	8008e60 <_strtod_l+0x298>
 8008e6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e70:	2908      	cmp	r1, #8
 8008e72:	f63f af75 	bhi.w	8008d60 <_strtod_l+0x198>
 8008e76:	f04f 080a 	mov.w	r8, #10
 8008e7a:	3a30      	subs	r2, #48	@ 0x30
 8008e7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e84:	1c56      	adds	r6, r2, #1
 8008e86:	9619      	str	r6, [sp, #100]	@ 0x64
 8008e88:	7852      	ldrb	r2, [r2, #1]
 8008e8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008e8e:	f1be 0f09 	cmp.w	lr, #9
 8008e92:	d939      	bls.n	8008f08 <_strtod_l+0x340>
 8008e94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008e9a:	1a76      	subs	r6, r6, r1
 8008e9c:	2e08      	cmp	r6, #8
 8008e9e:	dc03      	bgt.n	8008ea8 <_strtod_l+0x2e0>
 8008ea0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ea2:	4588      	cmp	r8, r1
 8008ea4:	bfa8      	it	ge
 8008ea6:	4688      	movge	r8, r1
 8008ea8:	f1bc 0f00 	cmp.w	ip, #0
 8008eac:	d001      	beq.n	8008eb2 <_strtod_l+0x2ea>
 8008eae:	f1c8 0800 	rsb	r8, r8, #0
 8008eb2:	2d00      	cmp	r5, #0
 8008eb4:	d14e      	bne.n	8008f54 <_strtod_l+0x38c>
 8008eb6:	9908      	ldr	r1, [sp, #32]
 8008eb8:	4308      	orrs	r0, r1
 8008eba:	f47f aebe 	bne.w	8008c3a <_strtod_l+0x72>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f47f aed4 	bne.w	8008c6c <_strtod_l+0xa4>
 8008ec4:	2a69      	cmp	r2, #105	@ 0x69
 8008ec6:	d028      	beq.n	8008f1a <_strtod_l+0x352>
 8008ec8:	dc25      	bgt.n	8008f16 <_strtod_l+0x34e>
 8008eca:	2a49      	cmp	r2, #73	@ 0x49
 8008ecc:	d025      	beq.n	8008f1a <_strtod_l+0x352>
 8008ece:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ed0:	f47f aecc 	bne.w	8008c6c <_strtod_l+0xa4>
 8008ed4:	4999      	ldr	r1, [pc, #612]	@ (800913c <_strtod_l+0x574>)
 8008ed6:	a819      	add	r0, sp, #100	@ 0x64
 8008ed8:	f001 fece 	bl	800ac78 <__match>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	f43f aec5 	beq.w	8008c6c <_strtod_l+0xa4>
 8008ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b28      	cmp	r3, #40	@ 0x28
 8008ee8:	d12e      	bne.n	8008f48 <_strtod_l+0x380>
 8008eea:	4995      	ldr	r1, [pc, #596]	@ (8009140 <_strtod_l+0x578>)
 8008eec:	aa1c      	add	r2, sp, #112	@ 0x70
 8008eee:	a819      	add	r0, sp, #100	@ 0x64
 8008ef0:	f001 fed6 	bl	800aca0 <__hexnan>
 8008ef4:	2805      	cmp	r0, #5
 8008ef6:	d127      	bne.n	8008f48 <_strtod_l+0x380>
 8008ef8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008efa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008efe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f06:	e698      	b.n	8008c3a <_strtod_l+0x72>
 8008f08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f0a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f14:	e7b5      	b.n	8008e82 <_strtod_l+0x2ba>
 8008f16:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f18:	e7da      	b.n	8008ed0 <_strtod_l+0x308>
 8008f1a:	498a      	ldr	r1, [pc, #552]	@ (8009144 <_strtod_l+0x57c>)
 8008f1c:	a819      	add	r0, sp, #100	@ 0x64
 8008f1e:	f001 feab 	bl	800ac78 <__match>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f aea2 	beq.w	8008c6c <_strtod_l+0xa4>
 8008f28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f2a:	4987      	ldr	r1, [pc, #540]	@ (8009148 <_strtod_l+0x580>)
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	a819      	add	r0, sp, #100	@ 0x64
 8008f30:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f32:	f001 fea1 	bl	800ac78 <__match>
 8008f36:	b910      	cbnz	r0, 8008f3e <_strtod_l+0x376>
 8008f38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f3e:	f04f 0a00 	mov.w	sl, #0
 8008f42:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800914c <_strtod_l+0x584>
 8008f46:	e678      	b.n	8008c3a <_strtod_l+0x72>
 8008f48:	4881      	ldr	r0, [pc, #516]	@ (8009150 <_strtod_l+0x588>)
 8008f4a:	f001 fbfd 	bl	800a748 <nan>
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	e672      	b.n	8008c3a <_strtod_l+0x72>
 8008f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	bf08      	it	eq
 8008f5c:	46a9      	moveq	r9, r5
 8008f5e:	eba8 0303 	sub.w	r3, r8, r3
 8008f62:	2d10      	cmp	r5, #16
 8008f64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008f66:	462c      	mov	r4, r5
 8008f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6a:	bfa8      	it	ge
 8008f6c:	2410      	movge	r4, #16
 8008f6e:	f7f7 fa43 	bl	80003f8 <__aeabi_ui2d>
 8008f72:	2d09      	cmp	r5, #9
 8008f74:	4682      	mov	sl, r0
 8008f76:	468b      	mov	fp, r1
 8008f78:	dc11      	bgt.n	8008f9e <_strtod_l+0x3d6>
 8008f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f43f ae5c 	beq.w	8008c3a <_strtod_l+0x72>
 8008f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f84:	dd76      	ble.n	8009074 <_strtod_l+0x4ac>
 8008f86:	2b16      	cmp	r3, #22
 8008f88:	dc5d      	bgt.n	8009046 <_strtod_l+0x47e>
 8008f8a:	4972      	ldr	r1, [pc, #456]	@ (8009154 <_strtod_l+0x58c>)
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f92:	465b      	mov	r3, fp
 8008f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f98:	f7f7 faa8 	bl	80004ec <__aeabi_dmul>
 8008f9c:	e7d7      	b.n	8008f4e <_strtod_l+0x386>
 8008f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8009154 <_strtod_l+0x58c>)
 8008fa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fa8:	f7f7 faa0 	bl	80004ec <__aeabi_dmul>
 8008fac:	4682      	mov	sl, r0
 8008fae:	4638      	mov	r0, r7
 8008fb0:	468b      	mov	fp, r1
 8008fb2:	f7f7 fa21 	bl	80003f8 <__aeabi_ui2d>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4650      	mov	r0, sl
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 f8df 	bl	8000180 <__adddf3>
 8008fc2:	2d0f      	cmp	r5, #15
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	468b      	mov	fp, r1
 8008fc8:	ddd7      	ble.n	8008f7a <_strtod_l+0x3b2>
 8008fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fcc:	1b2c      	subs	r4, r5, r4
 8008fce:	441c      	add	r4, r3
 8008fd0:	2c00      	cmp	r4, #0
 8008fd2:	f340 8093 	ble.w	80090fc <_strtod_l+0x534>
 8008fd6:	f014 030f 	ands.w	r3, r4, #15
 8008fda:	d00a      	beq.n	8008ff2 <_strtod_l+0x42a>
 8008fdc:	495d      	ldr	r1, [pc, #372]	@ (8009154 <_strtod_l+0x58c>)
 8008fde:	4652      	mov	r2, sl
 8008fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe8:	465b      	mov	r3, fp
 8008fea:	f7f7 fa7f 	bl	80004ec <__aeabi_dmul>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	468b      	mov	fp, r1
 8008ff2:	f034 040f 	bics.w	r4, r4, #15
 8008ff6:	d073      	beq.n	80090e0 <_strtod_l+0x518>
 8008ff8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008ffc:	dd49      	ble.n	8009092 <_strtod_l+0x4ca>
 8008ffe:	2400      	movs	r4, #0
 8009000:	46a0      	mov	r8, r4
 8009002:	46a1      	mov	r9, r4
 8009004:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009006:	2322      	movs	r3, #34	@ 0x22
 8009008:	f04f 0a00 	mov.w	sl, #0
 800900c:	9a05      	ldr	r2, [sp, #20]
 800900e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800914c <_strtod_l+0x584>
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009016:	2b00      	cmp	r3, #0
 8009018:	f43f ae0f 	beq.w	8008c3a <_strtod_l+0x72>
 800901c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800901e:	9805      	ldr	r0, [sp, #20]
 8009020:	f001 ff2c 	bl	800ae7c <_Bfree>
 8009024:	4649      	mov	r1, r9
 8009026:	9805      	ldr	r0, [sp, #20]
 8009028:	f001 ff28 	bl	800ae7c <_Bfree>
 800902c:	4641      	mov	r1, r8
 800902e:	9805      	ldr	r0, [sp, #20]
 8009030:	f001 ff24 	bl	800ae7c <_Bfree>
 8009034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009036:	9805      	ldr	r0, [sp, #20]
 8009038:	f001 ff20 	bl	800ae7c <_Bfree>
 800903c:	4621      	mov	r1, r4
 800903e:	9805      	ldr	r0, [sp, #20]
 8009040:	f001 ff1c 	bl	800ae7c <_Bfree>
 8009044:	e5f9      	b.n	8008c3a <_strtod_l+0x72>
 8009046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009048:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800904c:	4293      	cmp	r3, r2
 800904e:	dbbc      	blt.n	8008fca <_strtod_l+0x402>
 8009050:	4c40      	ldr	r4, [pc, #256]	@ (8009154 <_strtod_l+0x58c>)
 8009052:	f1c5 050f 	rsb	r5, r5, #15
 8009056:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800905a:	4652      	mov	r2, sl
 800905c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009060:	465b      	mov	r3, fp
 8009062:	f7f7 fa43 	bl	80004ec <__aeabi_dmul>
 8009066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009068:	1b5d      	subs	r5, r3, r5
 800906a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800906e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009072:	e791      	b.n	8008f98 <_strtod_l+0x3d0>
 8009074:	3316      	adds	r3, #22
 8009076:	dba8      	blt.n	8008fca <_strtod_l+0x402>
 8009078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907a:	4650      	mov	r0, sl
 800907c:	eba3 0808 	sub.w	r8, r3, r8
 8009080:	4b34      	ldr	r3, [pc, #208]	@ (8009154 <_strtod_l+0x58c>)
 8009082:	4659      	mov	r1, fp
 8009084:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009088:	e9d8 2300 	ldrd	r2, r3, [r8]
 800908c:	f7f7 fb58 	bl	8000740 <__aeabi_ddiv>
 8009090:	e75d      	b.n	8008f4e <_strtod_l+0x386>
 8009092:	2300      	movs	r3, #0
 8009094:	4650      	mov	r0, sl
 8009096:	4659      	mov	r1, fp
 8009098:	461e      	mov	r6, r3
 800909a:	4f2f      	ldr	r7, [pc, #188]	@ (8009158 <_strtod_l+0x590>)
 800909c:	1124      	asrs	r4, r4, #4
 800909e:	2c01      	cmp	r4, #1
 80090a0:	dc21      	bgt.n	80090e6 <_strtod_l+0x51e>
 80090a2:	b10b      	cbz	r3, 80090a8 <_strtod_l+0x4e0>
 80090a4:	4682      	mov	sl, r0
 80090a6:	468b      	mov	fp, r1
 80090a8:	492b      	ldr	r1, [pc, #172]	@ (8009158 <_strtod_l+0x590>)
 80090aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090b2:	4652      	mov	r2, sl
 80090b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b8:	465b      	mov	r3, fp
 80090ba:	f7f7 fa17 	bl	80004ec <__aeabi_dmul>
 80090be:	4b23      	ldr	r3, [pc, #140]	@ (800914c <_strtod_l+0x584>)
 80090c0:	460a      	mov	r2, r1
 80090c2:	400b      	ands	r3, r1
 80090c4:	4925      	ldr	r1, [pc, #148]	@ (800915c <_strtod_l+0x594>)
 80090c6:	4682      	mov	sl, r0
 80090c8:	428b      	cmp	r3, r1
 80090ca:	d898      	bhi.n	8008ffe <_strtod_l+0x436>
 80090cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090d0:	428b      	cmp	r3, r1
 80090d2:	bf86      	itte	hi
 80090d4:	f04f 3aff 	movhi.w	sl, #4294967295
 80090d8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009160 <_strtod_l+0x598>
 80090dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80090e0:	2300      	movs	r3, #0
 80090e2:	9308      	str	r3, [sp, #32]
 80090e4:	e076      	b.n	80091d4 <_strtod_l+0x60c>
 80090e6:	07e2      	lsls	r2, r4, #31
 80090e8:	d504      	bpl.n	80090f4 <_strtod_l+0x52c>
 80090ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ee:	f7f7 f9fd 	bl	80004ec <__aeabi_dmul>
 80090f2:	2301      	movs	r3, #1
 80090f4:	3601      	adds	r6, #1
 80090f6:	1064      	asrs	r4, r4, #1
 80090f8:	3708      	adds	r7, #8
 80090fa:	e7d0      	b.n	800909e <_strtod_l+0x4d6>
 80090fc:	d0f0      	beq.n	80090e0 <_strtod_l+0x518>
 80090fe:	4264      	negs	r4, r4
 8009100:	f014 020f 	ands.w	r2, r4, #15
 8009104:	d00a      	beq.n	800911c <_strtod_l+0x554>
 8009106:	4b13      	ldr	r3, [pc, #76]	@ (8009154 <_strtod_l+0x58c>)
 8009108:	4650      	mov	r0, sl
 800910a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800910e:	4659      	mov	r1, fp
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f7f7 fb14 	bl	8000740 <__aeabi_ddiv>
 8009118:	4682      	mov	sl, r0
 800911a:	468b      	mov	fp, r1
 800911c:	1124      	asrs	r4, r4, #4
 800911e:	d0df      	beq.n	80090e0 <_strtod_l+0x518>
 8009120:	2c1f      	cmp	r4, #31
 8009122:	dd1f      	ble.n	8009164 <_strtod_l+0x59c>
 8009124:	2400      	movs	r4, #0
 8009126:	46a0      	mov	r8, r4
 8009128:	46a1      	mov	r9, r4
 800912a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800912c:	2322      	movs	r3, #34	@ 0x22
 800912e:	9a05      	ldr	r2, [sp, #20]
 8009130:	f04f 0a00 	mov.w	sl, #0
 8009134:	f04f 0b00 	mov.w	fp, #0
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	e76b      	b.n	8009014 <_strtod_l+0x44c>
 800913c:	0800c7d7 	.word	0x0800c7d7
 8009140:	0800c8fc 	.word	0x0800c8fc
 8009144:	0800c7ce 	.word	0x0800c7ce
 8009148:	0800c7d1 	.word	0x0800c7d1
 800914c:	7ff00000 	.word	0x7ff00000
 8009150:	0800c7cb 	.word	0x0800c7cb
 8009154:	0800ca88 	.word	0x0800ca88
 8009158:	0800ca60 	.word	0x0800ca60
 800915c:	7ca00000 	.word	0x7ca00000
 8009160:	7fefffff 	.word	0x7fefffff
 8009164:	f014 0310 	ands.w	r3, r4, #16
 8009168:	bf18      	it	ne
 800916a:	236a      	movne	r3, #106	@ 0x6a
 800916c:	4650      	mov	r0, sl
 800916e:	9308      	str	r3, [sp, #32]
 8009170:	4659      	mov	r1, fp
 8009172:	2300      	movs	r3, #0
 8009174:	4e77      	ldr	r6, [pc, #476]	@ (8009354 <_strtod_l+0x78c>)
 8009176:	07e7      	lsls	r7, r4, #31
 8009178:	d504      	bpl.n	8009184 <_strtod_l+0x5bc>
 800917a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800917e:	f7f7 f9b5 	bl	80004ec <__aeabi_dmul>
 8009182:	2301      	movs	r3, #1
 8009184:	1064      	asrs	r4, r4, #1
 8009186:	f106 0608 	add.w	r6, r6, #8
 800918a:	d1f4      	bne.n	8009176 <_strtod_l+0x5ae>
 800918c:	b10b      	cbz	r3, 8009192 <_strtod_l+0x5ca>
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	b1b3      	cbz	r3, 80091c4 <_strtod_l+0x5fc>
 8009196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800919a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800919e:	2b00      	cmp	r3, #0
 80091a0:	4659      	mov	r1, fp
 80091a2:	dd0f      	ble.n	80091c4 <_strtod_l+0x5fc>
 80091a4:	2b1f      	cmp	r3, #31
 80091a6:	dd58      	ble.n	800925a <_strtod_l+0x692>
 80091a8:	2b34      	cmp	r3, #52	@ 0x34
 80091aa:	bfd8      	it	le
 80091ac:	f04f 33ff 	movle.w	r3, #4294967295
 80091b0:	f04f 0a00 	mov.w	sl, #0
 80091b4:	bfcf      	iteee	gt
 80091b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091be:	4093      	lslle	r3, r2
 80091c0:	ea03 0b01 	andle.w	fp, r3, r1
 80091c4:	2200      	movs	r2, #0
 80091c6:	2300      	movs	r3, #0
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	f7f7 fbf6 	bl	80009bc <__aeabi_dcmpeq>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1a7      	bne.n	8009124 <_strtod_l+0x55c>
 80091d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d6:	464a      	mov	r2, r9
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80091dc:	462b      	mov	r3, r5
 80091de:	9805      	ldr	r0, [sp, #20]
 80091e0:	f001 feb4 	bl	800af4c <__s2b>
 80091e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f af09 	beq.w	8008ffe <_strtod_l+0x436>
 80091ec:	2400      	movs	r4, #0
 80091ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	eba3 0308 	sub.w	r3, r3, r8
 80091f8:	bfa8      	it	ge
 80091fa:	2300      	movge	r3, #0
 80091fc:	46a0      	mov	r8, r4
 80091fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8009200:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009204:	9316      	str	r3, [sp, #88]	@ 0x58
 8009206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009208:	9805      	ldr	r0, [sp, #20]
 800920a:	6859      	ldr	r1, [r3, #4]
 800920c:	f001 fdf6 	bl	800adfc <_Balloc>
 8009210:	4681      	mov	r9, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	f43f aef7 	beq.w	8009006 <_strtod_l+0x43e>
 8009218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800921a:	300c      	adds	r0, #12
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	f103 010c 	add.w	r1, r3, #12
 8009222:	3202      	adds	r2, #2
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	f7ff fb7c 	bl	8008922 <memcpy>
 800922a:	ab1c      	add	r3, sp, #112	@ 0x70
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800923c:	f002 f9b2 	bl	800b5a4 <__d2b>
 8009240:	901a      	str	r0, [sp, #104]	@ 0x68
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f aedf 	beq.w	8009006 <_strtod_l+0x43e>
 8009248:	2101      	movs	r1, #1
 800924a:	9805      	ldr	r0, [sp, #20]
 800924c:	f001 ff14 	bl	800b078 <__i2b>
 8009250:	4680      	mov	r8, r0
 8009252:	b948      	cbnz	r0, 8009268 <_strtod_l+0x6a0>
 8009254:	f04f 0800 	mov.w	r8, #0
 8009258:	e6d5      	b.n	8009006 <_strtod_l+0x43e>
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	fa02 f303 	lsl.w	r3, r2, r3
 8009262:	ea03 0a0a 	and.w	sl, r3, sl
 8009266:	e7ad      	b.n	80091c4 <_strtod_l+0x5fc>
 8009268:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800926a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800926c:	2d00      	cmp	r5, #0
 800926e:	bfab      	itete	ge
 8009270:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009272:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009274:	18ef      	addge	r7, r5, r3
 8009276:	1b5e      	sublt	r6, r3, r5
 8009278:	9b08      	ldr	r3, [sp, #32]
 800927a:	bfa8      	it	ge
 800927c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800927e:	eba5 0503 	sub.w	r5, r5, r3
 8009282:	4415      	add	r5, r2
 8009284:	4b34      	ldr	r3, [pc, #208]	@ (8009358 <_strtod_l+0x790>)
 8009286:	f105 35ff 	add.w	r5, r5, #4294967295
 800928a:	bfb8      	it	lt
 800928c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800928e:	429d      	cmp	r5, r3
 8009290:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009294:	da50      	bge.n	8009338 <_strtod_l+0x770>
 8009296:	1b5b      	subs	r3, r3, r5
 8009298:	2b1f      	cmp	r3, #31
 800929a:	f04f 0101 	mov.w	r1, #1
 800929e:	eba2 0203 	sub.w	r2, r2, r3
 80092a2:	dc3d      	bgt.n	8009320 <_strtod_l+0x758>
 80092a4:	fa01 f303 	lsl.w	r3, r1, r3
 80092a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092aa:	2300      	movs	r3, #0
 80092ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80092ae:	18bd      	adds	r5, r7, r2
 80092b0:	9b08      	ldr	r3, [sp, #32]
 80092b2:	42af      	cmp	r7, r5
 80092b4:	4416      	add	r6, r2
 80092b6:	441e      	add	r6, r3
 80092b8:	463b      	mov	r3, r7
 80092ba:	bfa8      	it	ge
 80092bc:	462b      	movge	r3, r5
 80092be:	42b3      	cmp	r3, r6
 80092c0:	bfa8      	it	ge
 80092c2:	4633      	movge	r3, r6
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	bfc2      	ittt	gt
 80092c8:	1aed      	subgt	r5, r5, r3
 80092ca:	1af6      	subgt	r6, r6, r3
 80092cc:	1aff      	subgt	r7, r7, r3
 80092ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dd16      	ble.n	8009302 <_strtod_l+0x73a>
 80092d4:	4641      	mov	r1, r8
 80092d6:	461a      	mov	r2, r3
 80092d8:	9805      	ldr	r0, [sp, #20]
 80092da:	f001 ff85 	bl	800b1e8 <__pow5mult>
 80092de:	4680      	mov	r8, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d0b7      	beq.n	8009254 <_strtod_l+0x68c>
 80092e4:	4601      	mov	r1, r0
 80092e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092e8:	9805      	ldr	r0, [sp, #20]
 80092ea:	f001 fedb 	bl	800b0a4 <__multiply>
 80092ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f43f ae88 	beq.w	8009006 <_strtod_l+0x43e>
 80092f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092f8:	9805      	ldr	r0, [sp, #20]
 80092fa:	f001 fdbf 	bl	800ae7c <_Bfree>
 80092fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009300:	931a      	str	r3, [sp, #104]	@ 0x68
 8009302:	2d00      	cmp	r5, #0
 8009304:	dc1d      	bgt.n	8009342 <_strtod_l+0x77a>
 8009306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	dd27      	ble.n	800935c <_strtod_l+0x794>
 800930c:	4649      	mov	r1, r9
 800930e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009310:	9805      	ldr	r0, [sp, #20]
 8009312:	f001 ff69 	bl	800b1e8 <__pow5mult>
 8009316:	4681      	mov	r9, r0
 8009318:	bb00      	cbnz	r0, 800935c <_strtod_l+0x794>
 800931a:	f04f 0900 	mov.w	r9, #0
 800931e:	e672      	b.n	8009006 <_strtod_l+0x43e>
 8009320:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009324:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009328:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800932c:	35e2      	adds	r5, #226	@ 0xe2
 800932e:	fa01 f305 	lsl.w	r3, r1, r5
 8009332:	9310      	str	r3, [sp, #64]	@ 0x40
 8009334:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009336:	e7ba      	b.n	80092ae <_strtod_l+0x6e6>
 8009338:	2300      	movs	r3, #0
 800933a:	9310      	str	r3, [sp, #64]	@ 0x40
 800933c:	2301      	movs	r3, #1
 800933e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009340:	e7b5      	b.n	80092ae <_strtod_l+0x6e6>
 8009342:	462a      	mov	r2, r5
 8009344:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009346:	9805      	ldr	r0, [sp, #20]
 8009348:	f001 ffa8 	bl	800b29c <__lshift>
 800934c:	901a      	str	r0, [sp, #104]	@ 0x68
 800934e:	2800      	cmp	r0, #0
 8009350:	d1d9      	bne.n	8009306 <_strtod_l+0x73e>
 8009352:	e658      	b.n	8009006 <_strtod_l+0x43e>
 8009354:	0800c928 	.word	0x0800c928
 8009358:	fffffc02 	.word	0xfffffc02
 800935c:	2e00      	cmp	r6, #0
 800935e:	dd07      	ble.n	8009370 <_strtod_l+0x7a8>
 8009360:	4649      	mov	r1, r9
 8009362:	4632      	mov	r2, r6
 8009364:	9805      	ldr	r0, [sp, #20]
 8009366:	f001 ff99 	bl	800b29c <__lshift>
 800936a:	4681      	mov	r9, r0
 800936c:	2800      	cmp	r0, #0
 800936e:	d0d4      	beq.n	800931a <_strtod_l+0x752>
 8009370:	2f00      	cmp	r7, #0
 8009372:	dd08      	ble.n	8009386 <_strtod_l+0x7be>
 8009374:	4641      	mov	r1, r8
 8009376:	463a      	mov	r2, r7
 8009378:	9805      	ldr	r0, [sp, #20]
 800937a:	f001 ff8f 	bl	800b29c <__lshift>
 800937e:	4680      	mov	r8, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f ae40 	beq.w	8009006 <_strtod_l+0x43e>
 8009386:	464a      	mov	r2, r9
 8009388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800938a:	9805      	ldr	r0, [sp, #20]
 800938c:	f002 f80e 	bl	800b3ac <__mdiff>
 8009390:	4604      	mov	r4, r0
 8009392:	2800      	cmp	r0, #0
 8009394:	f43f ae37 	beq.w	8009006 <_strtod_l+0x43e>
 8009398:	68c3      	ldr	r3, [r0, #12]
 800939a:	4641      	mov	r1, r8
 800939c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800939e:	2300      	movs	r3, #0
 80093a0:	60c3      	str	r3, [r0, #12]
 80093a2:	f001 ffe7 	bl	800b374 <__mcmp>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	da3d      	bge.n	8009426 <_strtod_l+0x85e>
 80093aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ac:	ea53 030a 	orrs.w	r3, r3, sl
 80093b0:	d163      	bne.n	800947a <_strtod_l+0x8b2>
 80093b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d15f      	bne.n	800947a <_strtod_l+0x8b2>
 80093ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093be:	0d1b      	lsrs	r3, r3, #20
 80093c0:	051b      	lsls	r3, r3, #20
 80093c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093c6:	d958      	bls.n	800947a <_strtod_l+0x8b2>
 80093c8:	6963      	ldr	r3, [r4, #20]
 80093ca:	b913      	cbnz	r3, 80093d2 <_strtod_l+0x80a>
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	dd53      	ble.n	800947a <_strtod_l+0x8b2>
 80093d2:	4621      	mov	r1, r4
 80093d4:	2201      	movs	r2, #1
 80093d6:	9805      	ldr	r0, [sp, #20]
 80093d8:	f001 ff60 	bl	800b29c <__lshift>
 80093dc:	4641      	mov	r1, r8
 80093de:	4604      	mov	r4, r0
 80093e0:	f001 ffc8 	bl	800b374 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dd48      	ble.n	800947a <_strtod_l+0x8b2>
 80093e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ec:	9a08      	ldr	r2, [sp, #32]
 80093ee:	0d1b      	lsrs	r3, r3, #20
 80093f0:	051b      	lsls	r3, r3, #20
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	d062      	beq.n	80094bc <_strtod_l+0x8f4>
 80093f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093fa:	d85f      	bhi.n	80094bc <_strtod_l+0x8f4>
 80093fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009400:	f67f ae94 	bls.w	800912c <_strtod_l+0x564>
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	4ba3      	ldr	r3, [pc, #652]	@ (8009698 <_strtod_l+0xad0>)
 800940a:	2200      	movs	r2, #0
 800940c:	f7f7 f86e 	bl	80004ec <__aeabi_dmul>
 8009410:	4ba2      	ldr	r3, [pc, #648]	@ (800969c <_strtod_l+0xad4>)
 8009412:	4682      	mov	sl, r0
 8009414:	400b      	ands	r3, r1
 8009416:	468b      	mov	fp, r1
 8009418:	2b00      	cmp	r3, #0
 800941a:	f47f adff 	bne.w	800901c <_strtod_l+0x454>
 800941e:	2322      	movs	r3, #34	@ 0x22
 8009420:	9a05      	ldr	r2, [sp, #20]
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	e5fa      	b.n	800901c <_strtod_l+0x454>
 8009426:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800942a:	d165      	bne.n	80094f8 <_strtod_l+0x930>
 800942c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800942e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009432:	b35a      	cbz	r2, 800948c <_strtod_l+0x8c4>
 8009434:	4a9a      	ldr	r2, [pc, #616]	@ (80096a0 <_strtod_l+0xad8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d12b      	bne.n	8009492 <_strtod_l+0x8ca>
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	4651      	mov	r1, sl
 800943e:	b303      	cbz	r3, 8009482 <_strtod_l+0x8ba>
 8009440:	465a      	mov	r2, fp
 8009442:	4b96      	ldr	r3, [pc, #600]	@ (800969c <_strtod_l+0xad4>)
 8009444:	4013      	ands	r3, r2
 8009446:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	d81b      	bhi.n	8009488 <_strtod_l+0x8c0>
 8009450:	0d1b      	lsrs	r3, r3, #20
 8009452:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	4299      	cmp	r1, r3
 800945c:	d119      	bne.n	8009492 <_strtod_l+0x8ca>
 800945e:	4b91      	ldr	r3, [pc, #580]	@ (80096a4 <_strtod_l+0xadc>)
 8009460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009462:	429a      	cmp	r2, r3
 8009464:	d102      	bne.n	800946c <_strtod_l+0x8a4>
 8009466:	3101      	adds	r1, #1
 8009468:	f43f adcd 	beq.w	8009006 <_strtod_l+0x43e>
 800946c:	f04f 0a00 	mov.w	sl, #0
 8009470:	4b8a      	ldr	r3, [pc, #552]	@ (800969c <_strtod_l+0xad4>)
 8009472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009474:	401a      	ands	r2, r3
 8009476:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1c1      	bne.n	8009404 <_strtod_l+0x83c>
 8009480:	e5cc      	b.n	800901c <_strtod_l+0x454>
 8009482:	f04f 33ff 	mov.w	r3, #4294967295
 8009486:	e7e8      	b.n	800945a <_strtod_l+0x892>
 8009488:	4613      	mov	r3, r2
 800948a:	e7e6      	b.n	800945a <_strtod_l+0x892>
 800948c:	ea53 030a 	orrs.w	r3, r3, sl
 8009490:	d0aa      	beq.n	80093e8 <_strtod_l+0x820>
 8009492:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009494:	b1db      	cbz	r3, 80094ce <_strtod_l+0x906>
 8009496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009498:	4213      	tst	r3, r2
 800949a:	d0ee      	beq.n	800947a <_strtod_l+0x8b2>
 800949c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949e:	4650      	mov	r0, sl
 80094a0:	4659      	mov	r1, fp
 80094a2:	9a08      	ldr	r2, [sp, #32]
 80094a4:	b1bb      	cbz	r3, 80094d6 <_strtod_l+0x90e>
 80094a6:	f7ff fb6b 	bl	8008b80 <sulp>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094b2:	f7f6 fe65 	bl	8000180 <__adddf3>
 80094b6:	4682      	mov	sl, r0
 80094b8:	468b      	mov	fp, r1
 80094ba:	e7de      	b.n	800947a <_strtod_l+0x8b2>
 80094bc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094c0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094c4:	f04f 3aff 	mov.w	sl, #4294967295
 80094c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094cc:	e7d5      	b.n	800947a <_strtod_l+0x8b2>
 80094ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094d0:	ea13 0f0a 	tst.w	r3, sl
 80094d4:	e7e1      	b.n	800949a <_strtod_l+0x8d2>
 80094d6:	f7ff fb53 	bl	8008b80 <sulp>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e2:	f7f6 fe4b 	bl	800017c <__aeabi_dsub>
 80094e6:	2200      	movs	r2, #0
 80094e8:	2300      	movs	r3, #0
 80094ea:	4682      	mov	sl, r0
 80094ec:	468b      	mov	fp, r1
 80094ee:	f7f7 fa65 	bl	80009bc <__aeabi_dcmpeq>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0c1      	beq.n	800947a <_strtod_l+0x8b2>
 80094f6:	e619      	b.n	800912c <_strtod_l+0x564>
 80094f8:	4641      	mov	r1, r8
 80094fa:	4620      	mov	r0, r4
 80094fc:	f002 f8aa 	bl	800b654 <__ratio>
 8009500:	2200      	movs	r2, #0
 8009502:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	f7f7 fa6b 	bl	80009e4 <__aeabi_dcmple>
 800950e:	2800      	cmp	r0, #0
 8009510:	d06d      	beq.n	80095ee <_strtod_l+0xa26>
 8009512:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d178      	bne.n	800960a <_strtod_l+0xa42>
 8009518:	f1ba 0f00 	cmp.w	sl, #0
 800951c:	d156      	bne.n	80095cc <_strtod_l+0xa04>
 800951e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009524:	2b00      	cmp	r3, #0
 8009526:	d158      	bne.n	80095da <_strtod_l+0xa12>
 8009528:	2200      	movs	r2, #0
 800952a:	4630      	mov	r0, r6
 800952c:	4639      	mov	r1, r7
 800952e:	4b5e      	ldr	r3, [pc, #376]	@ (80096a8 <_strtod_l+0xae0>)
 8009530:	f7f7 fa4e 	bl	80009d0 <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	d157      	bne.n	80095e8 <_strtod_l+0xa20>
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	2200      	movs	r2, #0
 800953e:	4b5b      	ldr	r3, [pc, #364]	@ (80096ac <_strtod_l+0xae4>)
 8009540:	f7f6 ffd4 	bl	80004ec <__aeabi_dmul>
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800954c:	9606      	str	r6, [sp, #24]
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009554:	4d51      	ldr	r5, [pc, #324]	@ (800969c <_strtod_l+0xad4>)
 8009556:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800955a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800955c:	401d      	ands	r5, r3
 800955e:	4b54      	ldr	r3, [pc, #336]	@ (80096b0 <_strtod_l+0xae8>)
 8009560:	429d      	cmp	r5, r3
 8009562:	f040 80ab 	bne.w	80096bc <_strtod_l+0xaf4>
 8009566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009568:	4650      	mov	r0, sl
 800956a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800956e:	4659      	mov	r1, fp
 8009570:	f001 ffb0 	bl	800b4d4 <__ulp>
 8009574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009578:	f7f6 ffb8 	bl	80004ec <__aeabi_dmul>
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	f7f6 fdfe 	bl	8000180 <__adddf3>
 8009584:	460b      	mov	r3, r1
 8009586:	4945      	ldr	r1, [pc, #276]	@ (800969c <_strtod_l+0xad4>)
 8009588:	4a4a      	ldr	r2, [pc, #296]	@ (80096b4 <_strtod_l+0xaec>)
 800958a:	4019      	ands	r1, r3
 800958c:	4291      	cmp	r1, r2
 800958e:	4682      	mov	sl, r0
 8009590:	d942      	bls.n	8009618 <_strtod_l+0xa50>
 8009592:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009594:	4b43      	ldr	r3, [pc, #268]	@ (80096a4 <_strtod_l+0xadc>)
 8009596:	429a      	cmp	r2, r3
 8009598:	d103      	bne.n	80095a2 <_strtod_l+0x9da>
 800959a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800959c:	3301      	adds	r3, #1
 800959e:	f43f ad32 	beq.w	8009006 <_strtod_l+0x43e>
 80095a2:	f04f 3aff 	mov.w	sl, #4294967295
 80095a6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80096a4 <_strtod_l+0xadc>
 80095aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ac:	9805      	ldr	r0, [sp, #20]
 80095ae:	f001 fc65 	bl	800ae7c <_Bfree>
 80095b2:	4649      	mov	r1, r9
 80095b4:	9805      	ldr	r0, [sp, #20]
 80095b6:	f001 fc61 	bl	800ae7c <_Bfree>
 80095ba:	4641      	mov	r1, r8
 80095bc:	9805      	ldr	r0, [sp, #20]
 80095be:	f001 fc5d 	bl	800ae7c <_Bfree>
 80095c2:	4621      	mov	r1, r4
 80095c4:	9805      	ldr	r0, [sp, #20]
 80095c6:	f001 fc59 	bl	800ae7c <_Bfree>
 80095ca:	e61c      	b.n	8009206 <_strtod_l+0x63e>
 80095cc:	f1ba 0f01 	cmp.w	sl, #1
 80095d0:	d103      	bne.n	80095da <_strtod_l+0xa12>
 80095d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f43f ada9 	beq.w	800912c <_strtod_l+0x564>
 80095da:	2200      	movs	r2, #0
 80095dc:	4b36      	ldr	r3, [pc, #216]	@ (80096b8 <_strtod_l+0xaf0>)
 80095de:	2600      	movs	r6, #0
 80095e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095e4:	4f30      	ldr	r7, [pc, #192]	@ (80096a8 <_strtod_l+0xae0>)
 80095e6:	e7b3      	b.n	8009550 <_strtod_l+0x988>
 80095e8:	2600      	movs	r6, #0
 80095ea:	4f30      	ldr	r7, [pc, #192]	@ (80096ac <_strtod_l+0xae4>)
 80095ec:	e7ac      	b.n	8009548 <_strtod_l+0x980>
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	4b2e      	ldr	r3, [pc, #184]	@ (80096ac <_strtod_l+0xae4>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	f7f6 ff79 	bl	80004ec <__aeabi_dmul>
 80095fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fc:	4606      	mov	r6, r0
 80095fe:	460f      	mov	r7, r1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0a1      	beq.n	8009548 <_strtod_l+0x980>
 8009604:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009608:	e7a2      	b.n	8009550 <_strtod_l+0x988>
 800960a:	2200      	movs	r2, #0
 800960c:	4b26      	ldr	r3, [pc, #152]	@ (80096a8 <_strtod_l+0xae0>)
 800960e:	4616      	mov	r6, r2
 8009610:	461f      	mov	r7, r3
 8009612:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009616:	e79b      	b.n	8009550 <_strtod_l+0x988>
 8009618:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800961c:	9b08      	ldr	r3, [sp, #32]
 800961e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1c1      	bne.n	80095aa <_strtod_l+0x9e2>
 8009626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800962a:	0d1b      	lsrs	r3, r3, #20
 800962c:	051b      	lsls	r3, r3, #20
 800962e:	429d      	cmp	r5, r3
 8009630:	d1bb      	bne.n	80095aa <_strtod_l+0x9e2>
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f7 faef 	bl	8000c18 <__aeabi_d2lz>
 800963a:	f7f6 ff29 	bl	8000490 <__aeabi_l2d>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4630      	mov	r0, r6
 8009644:	4639      	mov	r1, r7
 8009646:	f7f6 fd99 	bl	800017c <__aeabi_dsub>
 800964a:	460b      	mov	r3, r1
 800964c:	4602      	mov	r2, r0
 800964e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009652:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009658:	ea46 060a 	orr.w	r6, r6, sl
 800965c:	431e      	orrs	r6, r3
 800965e:	d06a      	beq.n	8009736 <_strtod_l+0xb6e>
 8009660:	a309      	add	r3, pc, #36	@ (adr r3, 8009688 <_strtod_l+0xac0>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f7 f9b3 	bl	80009d0 <__aeabi_dcmplt>
 800966a:	2800      	cmp	r0, #0
 800966c:	f47f acd6 	bne.w	800901c <_strtod_l+0x454>
 8009670:	a307      	add	r3, pc, #28	@ (adr r3, 8009690 <_strtod_l+0xac8>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800967a:	f7f7 f9c7 	bl	8000a0c <__aeabi_dcmpgt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d093      	beq.n	80095aa <_strtod_l+0x9e2>
 8009682:	e4cb      	b.n	800901c <_strtod_l+0x454>
 8009684:	f3af 8000 	nop.w
 8009688:	94a03595 	.word	0x94a03595
 800968c:	3fdfffff 	.word	0x3fdfffff
 8009690:	35afe535 	.word	0x35afe535
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	39500000 	.word	0x39500000
 800969c:	7ff00000 	.word	0x7ff00000
 80096a0:	000fffff 	.word	0x000fffff
 80096a4:	7fefffff 	.word	0x7fefffff
 80096a8:	3ff00000 	.word	0x3ff00000
 80096ac:	3fe00000 	.word	0x3fe00000
 80096b0:	7fe00000 	.word	0x7fe00000
 80096b4:	7c9fffff 	.word	0x7c9fffff
 80096b8:	bff00000 	.word	0xbff00000
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	b323      	cbz	r3, 800970a <_strtod_l+0xb42>
 80096c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096c4:	d821      	bhi.n	800970a <_strtod_l+0xb42>
 80096c6:	a328      	add	r3, pc, #160	@ (adr r3, 8009768 <_strtod_l+0xba0>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f7 f988 	bl	80009e4 <__aeabi_dcmple>
 80096d4:	b1a0      	cbz	r0, 8009700 <_strtod_l+0xb38>
 80096d6:	4639      	mov	r1, r7
 80096d8:	4630      	mov	r0, r6
 80096da:	f7f7 f9b7 	bl	8000a4c <__aeabi_d2uiz>
 80096de:	2801      	cmp	r0, #1
 80096e0:	bf38      	it	cc
 80096e2:	2001      	movcc	r0, #1
 80096e4:	f7f6 fe88 	bl	80003f8 <__aeabi_ui2d>
 80096e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	b9fb      	cbnz	r3, 8009730 <_strtod_l+0xb68>
 80096f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80096f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80096f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80096fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009700:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009702:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009706:	1b5b      	subs	r3, r3, r5
 8009708:	9311      	str	r3, [sp, #68]	@ 0x44
 800970a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800970e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009712:	f001 fedf 	bl	800b4d4 <__ulp>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4650      	mov	r0, sl
 800971c:	4659      	mov	r1, fp
 800971e:	f7f6 fee5 	bl	80004ec <__aeabi_dmul>
 8009722:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009726:	f7f6 fd2b 	bl	8000180 <__adddf3>
 800972a:	4682      	mov	sl, r0
 800972c:	468b      	mov	fp, r1
 800972e:	e775      	b.n	800961c <_strtod_l+0xa54>
 8009730:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009734:	e7e0      	b.n	80096f8 <_strtod_l+0xb30>
 8009736:	a30e      	add	r3, pc, #56	@ (adr r3, 8009770 <_strtod_l+0xba8>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f7 f948 	bl	80009d0 <__aeabi_dcmplt>
 8009740:	e79d      	b.n	800967e <_strtod_l+0xab6>
 8009742:	2300      	movs	r3, #0
 8009744:	930e      	str	r3, [sp, #56]	@ 0x38
 8009746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009748:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	f7ff ba79 	b.w	8008c42 <_strtod_l+0x7a>
 8009750:	2a65      	cmp	r2, #101	@ 0x65
 8009752:	f43f ab72 	beq.w	8008e3a <_strtod_l+0x272>
 8009756:	2a45      	cmp	r2, #69	@ 0x45
 8009758:	f43f ab6f 	beq.w	8008e3a <_strtod_l+0x272>
 800975c:	2301      	movs	r3, #1
 800975e:	f7ff bbaa 	b.w	8008eb6 <_strtod_l+0x2ee>
 8009762:	bf00      	nop
 8009764:	f3af 8000 	nop.w
 8009768:	ffc00000 	.word	0xffc00000
 800976c:	41dfffff 	.word	0x41dfffff
 8009770:	94a03595 	.word	0x94a03595
 8009774:	3fcfffff 	.word	0x3fcfffff

08009778 <_strtod_r>:
 8009778:	4b01      	ldr	r3, [pc, #4]	@ (8009780 <_strtod_r+0x8>)
 800977a:	f7ff ba25 	b.w	8008bc8 <_strtod_l>
 800977e:	bf00      	nop
 8009780:	2000006c 	.word	0x2000006c

08009784 <_strtol_l.isra.0>:
 8009784:	2b24      	cmp	r3, #36	@ 0x24
 8009786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978a:	4686      	mov	lr, r0
 800978c:	4690      	mov	r8, r2
 800978e:	d801      	bhi.n	8009794 <_strtol_l.isra.0+0x10>
 8009790:	2b01      	cmp	r3, #1
 8009792:	d106      	bne.n	80097a2 <_strtol_l.isra.0+0x1e>
 8009794:	f7ff f898 	bl	80088c8 <__errno>
 8009798:	2316      	movs	r3, #22
 800979a:	6003      	str	r3, [r0, #0]
 800979c:	2000      	movs	r0, #0
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	460d      	mov	r5, r1
 80097a4:	4833      	ldr	r0, [pc, #204]	@ (8009874 <_strtol_l.isra.0+0xf0>)
 80097a6:	462a      	mov	r2, r5
 80097a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097ac:	5d06      	ldrb	r6, [r0, r4]
 80097ae:	f016 0608 	ands.w	r6, r6, #8
 80097b2:	d1f8      	bne.n	80097a6 <_strtol_l.isra.0+0x22>
 80097b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80097b6:	d110      	bne.n	80097da <_strtol_l.isra.0+0x56>
 80097b8:	2601      	movs	r6, #1
 80097ba:	782c      	ldrb	r4, [r5, #0]
 80097bc:	1c95      	adds	r5, r2, #2
 80097be:	f033 0210 	bics.w	r2, r3, #16
 80097c2:	d115      	bne.n	80097f0 <_strtol_l.isra.0+0x6c>
 80097c4:	2c30      	cmp	r4, #48	@ 0x30
 80097c6:	d10d      	bne.n	80097e4 <_strtol_l.isra.0+0x60>
 80097c8:	782a      	ldrb	r2, [r5, #0]
 80097ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097ce:	2a58      	cmp	r2, #88	@ 0x58
 80097d0:	d108      	bne.n	80097e4 <_strtol_l.isra.0+0x60>
 80097d2:	786c      	ldrb	r4, [r5, #1]
 80097d4:	3502      	adds	r5, #2
 80097d6:	2310      	movs	r3, #16
 80097d8:	e00a      	b.n	80097f0 <_strtol_l.isra.0+0x6c>
 80097da:	2c2b      	cmp	r4, #43	@ 0x2b
 80097dc:	bf04      	itt	eq
 80097de:	782c      	ldrbeq	r4, [r5, #0]
 80097e0:	1c95      	addeq	r5, r2, #2
 80097e2:	e7ec      	b.n	80097be <_strtol_l.isra.0+0x3a>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f6      	bne.n	80097d6 <_strtol_l.isra.0+0x52>
 80097e8:	2c30      	cmp	r4, #48	@ 0x30
 80097ea:	bf14      	ite	ne
 80097ec:	230a      	movne	r3, #10
 80097ee:	2308      	moveq	r3, #8
 80097f0:	2200      	movs	r2, #0
 80097f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80097f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097fa:	fbbc f9f3 	udiv	r9, ip, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	fb03 ca19 	mls	sl, r3, r9, ip
 8009804:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009808:	2f09      	cmp	r7, #9
 800980a:	d80f      	bhi.n	800982c <_strtol_l.isra.0+0xa8>
 800980c:	463c      	mov	r4, r7
 800980e:	42a3      	cmp	r3, r4
 8009810:	dd1b      	ble.n	800984a <_strtol_l.isra.0+0xc6>
 8009812:	1c57      	adds	r7, r2, #1
 8009814:	d007      	beq.n	8009826 <_strtol_l.isra.0+0xa2>
 8009816:	4581      	cmp	r9, r0
 8009818:	d314      	bcc.n	8009844 <_strtol_l.isra.0+0xc0>
 800981a:	d101      	bne.n	8009820 <_strtol_l.isra.0+0x9c>
 800981c:	45a2      	cmp	sl, r4
 800981e:	db11      	blt.n	8009844 <_strtol_l.isra.0+0xc0>
 8009820:	2201      	movs	r2, #1
 8009822:	fb00 4003 	mla	r0, r0, r3, r4
 8009826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800982a:	e7eb      	b.n	8009804 <_strtol_l.isra.0+0x80>
 800982c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009830:	2f19      	cmp	r7, #25
 8009832:	d801      	bhi.n	8009838 <_strtol_l.isra.0+0xb4>
 8009834:	3c37      	subs	r4, #55	@ 0x37
 8009836:	e7ea      	b.n	800980e <_strtol_l.isra.0+0x8a>
 8009838:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800983c:	2f19      	cmp	r7, #25
 800983e:	d804      	bhi.n	800984a <_strtol_l.isra.0+0xc6>
 8009840:	3c57      	subs	r4, #87	@ 0x57
 8009842:	e7e4      	b.n	800980e <_strtol_l.isra.0+0x8a>
 8009844:	f04f 32ff 	mov.w	r2, #4294967295
 8009848:	e7ed      	b.n	8009826 <_strtol_l.isra.0+0xa2>
 800984a:	1c53      	adds	r3, r2, #1
 800984c:	d108      	bne.n	8009860 <_strtol_l.isra.0+0xdc>
 800984e:	2322      	movs	r3, #34	@ 0x22
 8009850:	4660      	mov	r0, ip
 8009852:	f8ce 3000 	str.w	r3, [lr]
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	d0a0      	beq.n	800979e <_strtol_l.isra.0+0x1a>
 800985c:	1e69      	subs	r1, r5, #1
 800985e:	e006      	b.n	800986e <_strtol_l.isra.0+0xea>
 8009860:	b106      	cbz	r6, 8009864 <_strtol_l.isra.0+0xe0>
 8009862:	4240      	negs	r0, r0
 8009864:	f1b8 0f00 	cmp.w	r8, #0
 8009868:	d099      	beq.n	800979e <_strtol_l.isra.0+0x1a>
 800986a:	2a00      	cmp	r2, #0
 800986c:	d1f6      	bne.n	800985c <_strtol_l.isra.0+0xd8>
 800986e:	f8c8 1000 	str.w	r1, [r8]
 8009872:	e794      	b.n	800979e <_strtol_l.isra.0+0x1a>
 8009874:	0800c951 	.word	0x0800c951

08009878 <_strtol_r>:
 8009878:	f7ff bf84 	b.w	8009784 <_strtol_l.isra.0>

0800987c <__ssputs_r>:
 800987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009880:	461f      	mov	r7, r3
 8009882:	688e      	ldr	r6, [r1, #8]
 8009884:	4682      	mov	sl, r0
 8009886:	42be      	cmp	r6, r7
 8009888:	460c      	mov	r4, r1
 800988a:	4690      	mov	r8, r2
 800988c:	680b      	ldr	r3, [r1, #0]
 800988e:	d82d      	bhi.n	80098ec <__ssputs_r+0x70>
 8009890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009898:	d026      	beq.n	80098e8 <__ssputs_r+0x6c>
 800989a:	6965      	ldr	r5, [r4, #20]
 800989c:	6909      	ldr	r1, [r1, #16]
 800989e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098a2:	eba3 0901 	sub.w	r9, r3, r1
 80098a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098aa:	1c7b      	adds	r3, r7, #1
 80098ac:	444b      	add	r3, r9
 80098ae:	106d      	asrs	r5, r5, #1
 80098b0:	429d      	cmp	r5, r3
 80098b2:	bf38      	it	cc
 80098b4:	461d      	movcc	r5, r3
 80098b6:	0553      	lsls	r3, r2, #21
 80098b8:	d527      	bpl.n	800990a <__ssputs_r+0x8e>
 80098ba:	4629      	mov	r1, r5
 80098bc:	f7ff f8d4 	bl	8008a68 <_malloc_r>
 80098c0:	4606      	mov	r6, r0
 80098c2:	b360      	cbz	r0, 800991e <__ssputs_r+0xa2>
 80098c4:	464a      	mov	r2, r9
 80098c6:	6921      	ldr	r1, [r4, #16]
 80098c8:	f7ff f82b 	bl	8008922 <memcpy>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	6126      	str	r6, [r4, #16]
 80098da:	444e      	add	r6, r9
 80098dc:	6026      	str	r6, [r4, #0]
 80098de:	463e      	mov	r6, r7
 80098e0:	6165      	str	r5, [r4, #20]
 80098e2:	eba5 0509 	sub.w	r5, r5, r9
 80098e6:	60a5      	str	r5, [r4, #8]
 80098e8:	42be      	cmp	r6, r7
 80098ea:	d900      	bls.n	80098ee <__ssputs_r+0x72>
 80098ec:	463e      	mov	r6, r7
 80098ee:	4632      	mov	r2, r6
 80098f0:	4641      	mov	r1, r8
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	f000 feef 	bl	800a6d6 <memmove>
 80098f8:	2000      	movs	r0, #0
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	1b9b      	subs	r3, r3, r6
 80098fe:	60a3      	str	r3, [r4, #8]
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	4433      	add	r3, r6
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	462a      	mov	r2, r5
 800990c:	f001 ff16 	bl	800b73c <_realloc_r>
 8009910:	4606      	mov	r6, r0
 8009912:	2800      	cmp	r0, #0
 8009914:	d1e0      	bne.n	80098d8 <__ssputs_r+0x5c>
 8009916:	4650      	mov	r0, sl
 8009918:	6921      	ldr	r1, [r4, #16]
 800991a:	f7ff f833 	bl	8008984 <_free_r>
 800991e:	230c      	movs	r3, #12
 8009920:	f8ca 3000 	str.w	r3, [sl]
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	e7e9      	b.n	8009906 <__ssputs_r+0x8a>
	...

08009934 <_svfiprintf_r>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	4698      	mov	r8, r3
 800993a:	898b      	ldrh	r3, [r1, #12]
 800993c:	4607      	mov	r7, r0
 800993e:	061b      	lsls	r3, r3, #24
 8009940:	460d      	mov	r5, r1
 8009942:	4614      	mov	r4, r2
 8009944:	b09d      	sub	sp, #116	@ 0x74
 8009946:	d510      	bpl.n	800996a <_svfiprintf_r+0x36>
 8009948:	690b      	ldr	r3, [r1, #16]
 800994a:	b973      	cbnz	r3, 800996a <_svfiprintf_r+0x36>
 800994c:	2140      	movs	r1, #64	@ 0x40
 800994e:	f7ff f88b 	bl	8008a68 <_malloc_r>
 8009952:	6028      	str	r0, [r5, #0]
 8009954:	6128      	str	r0, [r5, #16]
 8009956:	b930      	cbnz	r0, 8009966 <_svfiprintf_r+0x32>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	b01d      	add	sp, #116	@ 0x74
 8009962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009966:	2340      	movs	r3, #64	@ 0x40
 8009968:	616b      	str	r3, [r5, #20]
 800996a:	2300      	movs	r3, #0
 800996c:	9309      	str	r3, [sp, #36]	@ 0x24
 800996e:	2320      	movs	r3, #32
 8009970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009974:	2330      	movs	r3, #48	@ 0x30
 8009976:	f04f 0901 	mov.w	r9, #1
 800997a:	f8cd 800c 	str.w	r8, [sp, #12]
 800997e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009b18 <_svfiprintf_r+0x1e4>
 8009982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009986:	4623      	mov	r3, r4
 8009988:	469a      	mov	sl, r3
 800998a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800998e:	b10a      	cbz	r2, 8009994 <_svfiprintf_r+0x60>
 8009990:	2a25      	cmp	r2, #37	@ 0x25
 8009992:	d1f9      	bne.n	8009988 <_svfiprintf_r+0x54>
 8009994:	ebba 0b04 	subs.w	fp, sl, r4
 8009998:	d00b      	beq.n	80099b2 <_svfiprintf_r+0x7e>
 800999a:	465b      	mov	r3, fp
 800999c:	4622      	mov	r2, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff ff6b 	bl	800987c <__ssputs_r>
 80099a6:	3001      	adds	r0, #1
 80099a8:	f000 80a7 	beq.w	8009afa <_svfiprintf_r+0x1c6>
 80099ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ae:	445a      	add	r2, fp
 80099b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80099b2:	f89a 3000 	ldrb.w	r3, [sl]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 809f 	beq.w	8009afa <_svfiprintf_r+0x1c6>
 80099bc:	2300      	movs	r3, #0
 80099be:	f04f 32ff 	mov.w	r2, #4294967295
 80099c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c6:	f10a 0a01 	add.w	sl, sl, #1
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	9307      	str	r3, [sp, #28]
 80099ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80099d4:	4654      	mov	r4, sl
 80099d6:	2205      	movs	r2, #5
 80099d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099dc:	484e      	ldr	r0, [pc, #312]	@ (8009b18 <_svfiprintf_r+0x1e4>)
 80099de:	f000 fea5 	bl	800a72c <memchr>
 80099e2:	9a04      	ldr	r2, [sp, #16]
 80099e4:	b9d8      	cbnz	r0, 8009a1e <_svfiprintf_r+0xea>
 80099e6:	06d0      	lsls	r0, r2, #27
 80099e8:	bf44      	itt	mi
 80099ea:	2320      	movmi	r3, #32
 80099ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099f0:	0711      	lsls	r1, r2, #28
 80099f2:	bf44      	itt	mi
 80099f4:	232b      	movmi	r3, #43	@ 0x2b
 80099f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099fa:	f89a 3000 	ldrb.w	r3, [sl]
 80099fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a00:	d015      	beq.n	8009a2e <_svfiprintf_r+0xfa>
 8009a02:	4654      	mov	r4, sl
 8009a04:	2000      	movs	r0, #0
 8009a06:	f04f 0c0a 	mov.w	ip, #10
 8009a0a:	9a07      	ldr	r2, [sp, #28]
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a12:	3b30      	subs	r3, #48	@ 0x30
 8009a14:	2b09      	cmp	r3, #9
 8009a16:	d94b      	bls.n	8009ab0 <_svfiprintf_r+0x17c>
 8009a18:	b1b0      	cbz	r0, 8009a48 <_svfiprintf_r+0x114>
 8009a1a:	9207      	str	r2, [sp, #28]
 8009a1c:	e014      	b.n	8009a48 <_svfiprintf_r+0x114>
 8009a1e:	eba0 0308 	sub.w	r3, r0, r8
 8009a22:	fa09 f303 	lsl.w	r3, r9, r3
 8009a26:	4313      	orrs	r3, r2
 8009a28:	46a2      	mov	sl, r4
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	e7d2      	b.n	80099d4 <_svfiprintf_r+0xa0>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	1d19      	adds	r1, r3, #4
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	9103      	str	r1, [sp, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfbb      	ittet	lt
 8009a3a:	425b      	neglt	r3, r3
 8009a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a40:	9307      	strge	r3, [sp, #28]
 8009a42:	9307      	strlt	r3, [sp, #28]
 8009a44:	bfb8      	it	lt
 8009a46:	9204      	strlt	r2, [sp, #16]
 8009a48:	7823      	ldrb	r3, [r4, #0]
 8009a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a4c:	d10a      	bne.n	8009a64 <_svfiprintf_r+0x130>
 8009a4e:	7863      	ldrb	r3, [r4, #1]
 8009a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a52:	d132      	bne.n	8009aba <_svfiprintf_r+0x186>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	3402      	adds	r4, #2
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9203      	str	r2, [sp, #12]
 8009a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009b1c <_svfiprintf_r+0x1e8>
 8009a68:	2203      	movs	r2, #3
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	7821      	ldrb	r1, [r4, #0]
 8009a6e:	f000 fe5d 	bl	800a72c <memchr>
 8009a72:	b138      	cbz	r0, 8009a84 <_svfiprintf_r+0x150>
 8009a74:	2240      	movs	r2, #64	@ 0x40
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	eba0 000a 	sub.w	r0, r0, sl
 8009a7c:	4082      	lsls	r2, r0
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	3401      	adds	r4, #1
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a88:	2206      	movs	r2, #6
 8009a8a:	4825      	ldr	r0, [pc, #148]	@ (8009b20 <_svfiprintf_r+0x1ec>)
 8009a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a90:	f000 fe4c 	bl	800a72c <memchr>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d036      	beq.n	8009b06 <_svfiprintf_r+0x1d2>
 8009a98:	4b22      	ldr	r3, [pc, #136]	@ (8009b24 <_svfiprintf_r+0x1f0>)
 8009a9a:	bb1b      	cbnz	r3, 8009ae4 <_svfiprintf_r+0x1b0>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	3307      	adds	r3, #7
 8009aa0:	f023 0307 	bic.w	r3, r3, #7
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aaa:	4433      	add	r3, r6
 8009aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aae:	e76a      	b.n	8009986 <_svfiprintf_r+0x52>
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ab8:	e7a8      	b.n	8009a0c <_svfiprintf_r+0xd8>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f04f 0c0a 	mov.w	ip, #10
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	3401      	adds	r4, #1
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009acc:	3a30      	subs	r2, #48	@ 0x30
 8009ace:	2a09      	cmp	r2, #9
 8009ad0:	d903      	bls.n	8009ada <_svfiprintf_r+0x1a6>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0c6      	beq.n	8009a64 <_svfiprintf_r+0x130>
 8009ad6:	9105      	str	r1, [sp, #20]
 8009ad8:	e7c4      	b.n	8009a64 <_svfiprintf_r+0x130>
 8009ada:	4604      	mov	r4, r0
 8009adc:	2301      	movs	r3, #1
 8009ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae2:	e7f0      	b.n	8009ac6 <_svfiprintf_r+0x192>
 8009ae4:	ab03      	add	r3, sp, #12
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4638      	mov	r0, r7
 8009aec:	4b0e      	ldr	r3, [pc, #56]	@ (8009b28 <_svfiprintf_r+0x1f4>)
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	f3af 8000 	nop.w
 8009af4:	1c42      	adds	r2, r0, #1
 8009af6:	4606      	mov	r6, r0
 8009af8:	d1d6      	bne.n	8009aa8 <_svfiprintf_r+0x174>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	065b      	lsls	r3, r3, #25
 8009afe:	f53f af2d 	bmi.w	800995c <_svfiprintf_r+0x28>
 8009b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b04:	e72c      	b.n	8009960 <_svfiprintf_r+0x2c>
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <_svfiprintf_r+0x1f4>)
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	f000 fa4b 	bl	8009fac <_printf_i>
 8009b16:	e7ed      	b.n	8009af4 <_svfiprintf_r+0x1c0>
 8009b18:	0800c7da 	.word	0x0800c7da
 8009b1c:	0800c7e0 	.word	0x0800c7e0
 8009b20:	0800c7e4 	.word	0x0800c7e4
 8009b24:	00000000 	.word	0x00000000
 8009b28:	0800987d 	.word	0x0800987d

08009b2c <_sungetc_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	1c4b      	adds	r3, r1, #1
 8009b30:	4614      	mov	r4, r2
 8009b32:	d103      	bne.n	8009b3c <_sungetc_r+0x10>
 8009b34:	f04f 35ff 	mov.w	r5, #4294967295
 8009b38:	4628      	mov	r0, r5
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	8993      	ldrh	r3, [r2, #12]
 8009b3e:	b2cd      	uxtb	r5, r1
 8009b40:	f023 0320 	bic.w	r3, r3, #32
 8009b44:	8193      	strh	r3, [r2, #12]
 8009b46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b48:	6852      	ldr	r2, [r2, #4]
 8009b4a:	b18b      	cbz	r3, 8009b70 <_sungetc_r+0x44>
 8009b4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	dd08      	ble.n	8009b64 <_sungetc_r+0x38>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	1e5a      	subs	r2, r3, #1
 8009b56:	6022      	str	r2, [r4, #0]
 8009b58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	e7e9      	b.n	8009b38 <_sungetc_r+0xc>
 8009b64:	4621      	mov	r1, r4
 8009b66:	f000 fd7e 	bl	800a666 <__submore>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d0f1      	beq.n	8009b52 <_sungetc_r+0x26>
 8009b6e:	e7e1      	b.n	8009b34 <_sungetc_r+0x8>
 8009b70:	6921      	ldr	r1, [r4, #16]
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	b151      	cbz	r1, 8009b8c <_sungetc_r+0x60>
 8009b76:	4299      	cmp	r1, r3
 8009b78:	d208      	bcs.n	8009b8c <_sungetc_r+0x60>
 8009b7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009b7e:	42a9      	cmp	r1, r5
 8009b80:	d104      	bne.n	8009b8c <_sungetc_r+0x60>
 8009b82:	3b01      	subs	r3, #1
 8009b84:	3201      	adds	r2, #1
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	6062      	str	r2, [r4, #4]
 8009b8a:	e7d5      	b.n	8009b38 <_sungetc_r+0xc>
 8009b8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b96:	2303      	movs	r3, #3
 8009b98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e7dc      	b.n	8009b60 <_sungetc_r+0x34>

08009ba6 <__ssrefill_r>:
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	460c      	mov	r4, r1
 8009baa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009bac:	b169      	cbz	r1, 8009bca <__ssrefill_r+0x24>
 8009bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	d001      	beq.n	8009bba <__ssrefill_r+0x14>
 8009bb6:	f7fe fee5 	bl	8008984 <_free_r>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bbe:	6360      	str	r0, [r4, #52]	@ 0x34
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	b113      	cbz	r3, 8009bca <__ssrefill_r+0x24>
 8009bc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6063      	str	r3, [r4, #4]
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	f043 0320 	orr.w	r3, r3, #32
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	e7f3      	b.n	8009bc8 <__ssrefill_r+0x22>

08009be0 <__ssvfiscanf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	460c      	mov	r4, r1
 8009be6:	2100      	movs	r1, #0
 8009be8:	4606      	mov	r6, r0
 8009bea:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8009bee:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009bf2:	49ab      	ldr	r1, [pc, #684]	@ (8009ea0 <__ssvfiscanf_r+0x2c0>)
 8009bf4:	f10d 0804 	add.w	r8, sp, #4
 8009bf8:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009bfa:	49aa      	ldr	r1, [pc, #680]	@ (8009ea4 <__ssvfiscanf_r+0x2c4>)
 8009bfc:	4faa      	ldr	r7, [pc, #680]	@ (8009ea8 <__ssvfiscanf_r+0x2c8>)
 8009bfe:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009c02:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	f892 9000 	ldrb.w	r9, [r2]
 8009c0a:	f1b9 0f00 	cmp.w	r9, #0
 8009c0e:	f000 8159 	beq.w	8009ec4 <__ssvfiscanf_r+0x2e4>
 8009c12:	f817 3009 	ldrb.w	r3, [r7, r9]
 8009c16:	1c55      	adds	r5, r2, #1
 8009c18:	f013 0308 	ands.w	r3, r3, #8
 8009c1c:	d019      	beq.n	8009c52 <__ssvfiscanf_r+0x72>
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dd0f      	ble.n	8009c44 <__ssvfiscanf_r+0x64>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	781a      	ldrb	r2, [r3, #0]
 8009c28:	5cba      	ldrb	r2, [r7, r2]
 8009c2a:	0712      	lsls	r2, r2, #28
 8009c2c:	d401      	bmi.n	8009c32 <__ssvfiscanf_r+0x52>
 8009c2e:	462a      	mov	r2, r5
 8009c30:	e7e9      	b.n	8009c06 <__ssvfiscanf_r+0x26>
 8009c32:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009c34:	3301      	adds	r3, #1
 8009c36:	3201      	adds	r2, #1
 8009c38:	9245      	str	r2, [sp, #276]	@ 0x114
 8009c3a:	6862      	ldr	r2, [r4, #4]
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	3a01      	subs	r2, #1
 8009c40:	6062      	str	r2, [r4, #4]
 8009c42:	e7ec      	b.n	8009c1e <__ssvfiscanf_r+0x3e>
 8009c44:	4621      	mov	r1, r4
 8009c46:	4630      	mov	r0, r6
 8009c48:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009c4a:	4798      	blx	r3
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d0e9      	beq.n	8009c24 <__ssvfiscanf_r+0x44>
 8009c50:	e7ed      	b.n	8009c2e <__ssvfiscanf_r+0x4e>
 8009c52:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009c56:	f040 8086 	bne.w	8009d66 <__ssvfiscanf_r+0x186>
 8009c5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009c5c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009c5e:	7853      	ldrb	r3, [r2, #1]
 8009c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c62:	bf04      	itt	eq
 8009c64:	2310      	moveq	r3, #16
 8009c66:	1c95      	addeq	r5, r2, #2
 8009c68:	f04f 020a 	mov.w	r2, #10
 8009c6c:	bf08      	it	eq
 8009c6e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009c70:	46aa      	mov	sl, r5
 8009c72:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009c76:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	d91e      	bls.n	8009cbc <__ssvfiscanf_r+0xdc>
 8009c7e:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8009eac <__ssvfiscanf_r+0x2cc>
 8009c82:	2203      	movs	r2, #3
 8009c84:	4658      	mov	r0, fp
 8009c86:	f000 fd51 	bl	800a72c <memchr>
 8009c8a:	b138      	cbz	r0, 8009c9c <__ssvfiscanf_r+0xbc>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4655      	mov	r5, sl
 8009c90:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009c92:	eba0 000b 	sub.w	r0, r0, fp
 8009c96:	4083      	lsls	r3, r0
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009c9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ca0:	2b78      	cmp	r3, #120	@ 0x78
 8009ca2:	d806      	bhi.n	8009cb2 <__ssvfiscanf_r+0xd2>
 8009ca4:	2b57      	cmp	r3, #87	@ 0x57
 8009ca6:	d810      	bhi.n	8009cca <__ssvfiscanf_r+0xea>
 8009ca8:	2b25      	cmp	r3, #37	@ 0x25
 8009caa:	d05c      	beq.n	8009d66 <__ssvfiscanf_r+0x186>
 8009cac:	d856      	bhi.n	8009d5c <__ssvfiscanf_r+0x17c>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d074      	beq.n	8009d9c <__ssvfiscanf_r+0x1bc>
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	9342      	str	r3, [sp, #264]	@ 0x108
 8009cba:	e087      	b.n	8009dcc <__ssvfiscanf_r+0x1ec>
 8009cbc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009cbe:	4655      	mov	r5, sl
 8009cc0:	fb02 1103 	mla	r1, r2, r3, r1
 8009cc4:	3930      	subs	r1, #48	@ 0x30
 8009cc6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009cc8:	e7d2      	b.n	8009c70 <__ssvfiscanf_r+0x90>
 8009cca:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009cce:	2a20      	cmp	r2, #32
 8009cd0:	d8ef      	bhi.n	8009cb2 <__ssvfiscanf_r+0xd2>
 8009cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8009cd8 <__ssvfiscanf_r+0xf8>)
 8009cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cd8:	08009dab 	.word	0x08009dab
 8009cdc:	08009cb3 	.word	0x08009cb3
 8009ce0:	08009cb3 	.word	0x08009cb3
 8009ce4:	08009e05 	.word	0x08009e05
 8009ce8:	08009cb3 	.word	0x08009cb3
 8009cec:	08009cb3 	.word	0x08009cb3
 8009cf0:	08009cb3 	.word	0x08009cb3
 8009cf4:	08009cb3 	.word	0x08009cb3
 8009cf8:	08009cb3 	.word	0x08009cb3
 8009cfc:	08009cb3 	.word	0x08009cb3
 8009d00:	08009cb3 	.word	0x08009cb3
 8009d04:	08009e1b 	.word	0x08009e1b
 8009d08:	08009e01 	.word	0x08009e01
 8009d0c:	08009d63 	.word	0x08009d63
 8009d10:	08009d63 	.word	0x08009d63
 8009d14:	08009d63 	.word	0x08009d63
 8009d18:	08009cb3 	.word	0x08009cb3
 8009d1c:	08009dbd 	.word	0x08009dbd
 8009d20:	08009cb3 	.word	0x08009cb3
 8009d24:	08009cb3 	.word	0x08009cb3
 8009d28:	08009cb3 	.word	0x08009cb3
 8009d2c:	08009cb3 	.word	0x08009cb3
 8009d30:	08009e2b 	.word	0x08009e2b
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009da3 	.word	0x08009da3
 8009d3c:	08009cb3 	.word	0x08009cb3
 8009d40:	08009cb3 	.word	0x08009cb3
 8009d44:	08009e27 	.word	0x08009e27
 8009d48:	08009cb3 	.word	0x08009cb3
 8009d4c:	08009e01 	.word	0x08009e01
 8009d50:	08009cb3 	.word	0x08009cb3
 8009d54:	08009cb3 	.word	0x08009cb3
 8009d58:	08009dab 	.word	0x08009dab
 8009d5c:	3b45      	subs	r3, #69	@ 0x45
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d8a7      	bhi.n	8009cb2 <__ssvfiscanf_r+0xd2>
 8009d62:	2305      	movs	r3, #5
 8009d64:	e031      	b.n	8009dca <__ssvfiscanf_r+0x1ea>
 8009d66:	6863      	ldr	r3, [r4, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dd0d      	ble.n	8009d88 <__ssvfiscanf_r+0x1a8>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	781a      	ldrb	r2, [r3, #0]
 8009d70:	454a      	cmp	r2, r9
 8009d72:	f040 80a7 	bne.w	8009ec4 <__ssvfiscanf_r+0x2e4>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009d7e:	3a01      	subs	r2, #1
 8009d80:	3301      	adds	r3, #1
 8009d82:	6062      	str	r2, [r4, #4]
 8009d84:	9345      	str	r3, [sp, #276]	@ 0x114
 8009d86:	e752      	b.n	8009c2e <__ssvfiscanf_r+0x4e>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d8e:	4798      	blx	r3
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0eb      	beq.n	8009d6c <__ssvfiscanf_r+0x18c>
 8009d94:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 808c 	bne.w	8009eb4 <__ssvfiscanf_r+0x2d4>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e08c      	b.n	8009ebc <__ssvfiscanf_r+0x2dc>
 8009da2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009da4:	f042 0220 	orr.w	r2, r2, #32
 8009da8:	9241      	str	r2, [sp, #260]	@ 0x104
 8009daa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009db0:	9241      	str	r2, [sp, #260]	@ 0x104
 8009db2:	2210      	movs	r2, #16
 8009db4:	2b6e      	cmp	r3, #110	@ 0x6e
 8009db6:	9242      	str	r2, [sp, #264]	@ 0x108
 8009db8:	d902      	bls.n	8009dc0 <__ssvfiscanf_r+0x1e0>
 8009dba:	e005      	b.n	8009dc8 <__ssvfiscanf_r+0x1e8>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9342      	str	r3, [sp, #264]	@ 0x108
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e002      	b.n	8009dca <__ssvfiscanf_r+0x1ea>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	9342      	str	r3, [sp, #264]	@ 0x108
 8009dc8:	2304      	movs	r3, #4
 8009dca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dd39      	ble.n	8009e46 <__ssvfiscanf_r+0x266>
 8009dd2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009dd4:	0659      	lsls	r1, r3, #25
 8009dd6:	d404      	bmi.n	8009de2 <__ssvfiscanf_r+0x202>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	5cba      	ldrb	r2, [r7, r2]
 8009dde:	0712      	lsls	r2, r2, #28
 8009de0:	d438      	bmi.n	8009e54 <__ssvfiscanf_r+0x274>
 8009de2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	dc47      	bgt.n	8009e78 <__ssvfiscanf_r+0x298>
 8009de8:	466b      	mov	r3, sp
 8009dea:	4622      	mov	r2, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	a941      	add	r1, sp, #260	@ 0x104
 8009df0:	f000 f9fa 	bl	800a1e8 <_scanf_chars>
 8009df4:	2801      	cmp	r0, #1
 8009df6:	d065      	beq.n	8009ec4 <__ssvfiscanf_r+0x2e4>
 8009df8:	2802      	cmp	r0, #2
 8009dfa:	f47f af18 	bne.w	8009c2e <__ssvfiscanf_r+0x4e>
 8009dfe:	e7c9      	b.n	8009d94 <__ssvfiscanf_r+0x1b4>
 8009e00:	220a      	movs	r2, #10
 8009e02:	e7d7      	b.n	8009db4 <__ssvfiscanf_r+0x1d4>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4640      	mov	r0, r8
 8009e08:	f000 fbf4 	bl	800a5f4 <__sccl>
 8009e0c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009e0e:	4605      	mov	r5, r0
 8009e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e14:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e16:	2301      	movs	r3, #1
 8009e18:	e7d7      	b.n	8009dca <__ssvfiscanf_r+0x1ea>
 8009e1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e20:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e22:	2300      	movs	r3, #0
 8009e24:	e7d1      	b.n	8009dca <__ssvfiscanf_r+0x1ea>
 8009e26:	2302      	movs	r3, #2
 8009e28:	e7cf      	b.n	8009dca <__ssvfiscanf_r+0x1ea>
 8009e2a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009e2c:	06c3      	lsls	r3, r0, #27
 8009e2e:	f53f aefe 	bmi.w	8009c2e <__ssvfiscanf_r+0x4e>
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009e36:	1d19      	adds	r1, r3, #4
 8009e38:	9100      	str	r1, [sp, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	07c0      	lsls	r0, r0, #31
 8009e3e:	bf4c      	ite	mi
 8009e40:	801a      	strhmi	r2, [r3, #0]
 8009e42:	601a      	strpl	r2, [r3, #0]
 8009e44:	e6f3      	b.n	8009c2e <__ssvfiscanf_r+0x4e>
 8009e46:	4621      	mov	r1, r4
 8009e48:	4630      	mov	r0, r6
 8009e4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009e4c:	4798      	blx	r3
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d0bf      	beq.n	8009dd2 <__ssvfiscanf_r+0x1f2>
 8009e52:	e79f      	b.n	8009d94 <__ssvfiscanf_r+0x1b4>
 8009e54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009e56:	3201      	adds	r2, #1
 8009e58:	9245      	str	r2, [sp, #276]	@ 0x114
 8009e5a:	6862      	ldr	r2, [r4, #4]
 8009e5c:	3a01      	subs	r2, #1
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	6062      	str	r2, [r4, #4]
 8009e62:	dd02      	ble.n	8009e6a <__ssvfiscanf_r+0x28a>
 8009e64:	3301      	adds	r3, #1
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	e7b6      	b.n	8009dd8 <__ssvfiscanf_r+0x1f8>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009e70:	4798      	blx	r3
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0b0      	beq.n	8009dd8 <__ssvfiscanf_r+0x1f8>
 8009e76:	e78d      	b.n	8009d94 <__ssvfiscanf_r+0x1b4>
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	dc06      	bgt.n	8009e8a <__ssvfiscanf_r+0x2aa>
 8009e7c:	466b      	mov	r3, sp
 8009e7e:	4622      	mov	r2, r4
 8009e80:	4630      	mov	r0, r6
 8009e82:	a941      	add	r1, sp, #260	@ 0x104
 8009e84:	f000 fa0a 	bl	800a29c <_scanf_i>
 8009e88:	e7b4      	b.n	8009df4 <__ssvfiscanf_r+0x214>
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <__ssvfiscanf_r+0x2d0>)
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f43f aece 	beq.w	8009c2e <__ssvfiscanf_r+0x4e>
 8009e92:	466b      	mov	r3, sp
 8009e94:	4622      	mov	r2, r4
 8009e96:	4630      	mov	r0, r6
 8009e98:	a941      	add	r1, sp, #260	@ 0x104
 8009e9a:	f7fe f865 	bl	8007f68 <_scanf_float>
 8009e9e:	e7a9      	b.n	8009df4 <__ssvfiscanf_r+0x214>
 8009ea0:	08009b2d 	.word	0x08009b2d
 8009ea4:	08009ba7 	.word	0x08009ba7
 8009ea8:	0800c951 	.word	0x0800c951
 8009eac:	0800c7e0 	.word	0x0800c7e0
 8009eb0:	08007f69 	.word	0x08007f69
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	065b      	lsls	r3, r3, #25
 8009eb8:	f53f af70 	bmi.w	8009d9c <__ssvfiscanf_r+0x1bc>
 8009ebc:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009ec6:	e7f9      	b.n	8009ebc <__ssvfiscanf_r+0x2dc>

08009ec8 <_printf_common>:
 8009ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	4616      	mov	r6, r2
 8009ece:	4698      	mov	r8, r3
 8009ed0:	688a      	ldr	r2, [r1, #8]
 8009ed2:	690b      	ldr	r3, [r1, #16]
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	bfb8      	it	lt
 8009eda:	4613      	movlt	r3, r2
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ee8:	b10a      	cbz	r2, 8009eee <_printf_common+0x26>
 8009eea:	3301      	adds	r3, #1
 8009eec:	6033      	str	r3, [r6, #0]
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	0699      	lsls	r1, r3, #26
 8009ef2:	bf42      	ittt	mi
 8009ef4:	6833      	ldrmi	r3, [r6, #0]
 8009ef6:	3302      	addmi	r3, #2
 8009ef8:	6033      	strmi	r3, [r6, #0]
 8009efa:	6825      	ldr	r5, [r4, #0]
 8009efc:	f015 0506 	ands.w	r5, r5, #6
 8009f00:	d106      	bne.n	8009f10 <_printf_common+0x48>
 8009f02:	f104 0a19 	add.w	sl, r4, #25
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	6832      	ldr	r2, [r6, #0]
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dc2b      	bgt.n	8009f68 <_printf_common+0xa0>
 8009f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	3b00      	subs	r3, #0
 8009f18:	bf18      	it	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	0692      	lsls	r2, r2, #26
 8009f1e:	d430      	bmi.n	8009f82 <_printf_common+0xba>
 8009f20:	4641      	mov	r1, r8
 8009f22:	4638      	mov	r0, r7
 8009f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f28:	47c8      	blx	r9
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d023      	beq.n	8009f76 <_printf_common+0xae>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	6922      	ldr	r2, [r4, #16]
 8009f32:	f003 0306 	and.w	r3, r3, #6
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	bf14      	ite	ne
 8009f3a:	2500      	movne	r5, #0
 8009f3c:	6833      	ldreq	r3, [r6, #0]
 8009f3e:	f04f 0600 	mov.w	r6, #0
 8009f42:	bf08      	it	eq
 8009f44:	68e5      	ldreq	r5, [r4, #12]
 8009f46:	f104 041a 	add.w	r4, r4, #26
 8009f4a:	bf08      	it	eq
 8009f4c:	1aed      	subeq	r5, r5, r3
 8009f4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009f52:	bf08      	it	eq
 8009f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfc4      	itt	gt
 8009f5c:	1a9b      	subgt	r3, r3, r2
 8009f5e:	18ed      	addgt	r5, r5, r3
 8009f60:	42b5      	cmp	r5, r6
 8009f62:	d11a      	bne.n	8009f9a <_printf_common+0xd2>
 8009f64:	2000      	movs	r0, #0
 8009f66:	e008      	b.n	8009f7a <_printf_common+0xb2>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4652      	mov	r2, sl
 8009f6c:	4641      	mov	r1, r8
 8009f6e:	4638      	mov	r0, r7
 8009f70:	47c8      	blx	r9
 8009f72:	3001      	adds	r0, #1
 8009f74:	d103      	bne.n	8009f7e <_printf_common+0xb6>
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7e:	3501      	adds	r5, #1
 8009f80:	e7c1      	b.n	8009f06 <_printf_common+0x3e>
 8009f82:	2030      	movs	r0, #48	@ 0x30
 8009f84:	18e1      	adds	r1, r4, r3
 8009f86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f90:	4422      	add	r2, r4
 8009f92:	3302      	adds	r3, #2
 8009f94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f98:	e7c2      	b.n	8009f20 <_printf_common+0x58>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	47c8      	blx	r9
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d0e6      	beq.n	8009f76 <_printf_common+0xae>
 8009fa8:	3601      	adds	r6, #1
 8009faa:	e7d9      	b.n	8009f60 <_printf_common+0x98>

08009fac <_printf_i>:
 8009fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	7e0f      	ldrb	r7, [r1, #24]
 8009fb2:	4691      	mov	r9, r2
 8009fb4:	2f78      	cmp	r7, #120	@ 0x78
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	460c      	mov	r4, r1
 8009fba:	469a      	mov	sl, r3
 8009fbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fc2:	d807      	bhi.n	8009fd4 <_printf_i+0x28>
 8009fc4:	2f62      	cmp	r7, #98	@ 0x62
 8009fc6:	d80a      	bhi.n	8009fde <_printf_i+0x32>
 8009fc8:	2f00      	cmp	r7, #0
 8009fca:	f000 80d1 	beq.w	800a170 <_printf_i+0x1c4>
 8009fce:	2f58      	cmp	r7, #88	@ 0x58
 8009fd0:	f000 80b8 	beq.w	800a144 <_printf_i+0x198>
 8009fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fdc:	e03a      	b.n	800a054 <_printf_i+0xa8>
 8009fde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fe2:	2b15      	cmp	r3, #21
 8009fe4:	d8f6      	bhi.n	8009fd4 <_printf_i+0x28>
 8009fe6:	a101      	add	r1, pc, #4	@ (adr r1, 8009fec <_printf_i+0x40>)
 8009fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fec:	0800a045 	.word	0x0800a045
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	08009fd5 	.word	0x08009fd5
 8009ff8:	08009fd5 	.word	0x08009fd5
 8009ffc:	08009fd5 	.word	0x08009fd5
 800a000:	08009fd5 	.word	0x08009fd5
 800a004:	0800a059 	.word	0x0800a059
 800a008:	08009fd5 	.word	0x08009fd5
 800a00c:	08009fd5 	.word	0x08009fd5
 800a010:	08009fd5 	.word	0x08009fd5
 800a014:	08009fd5 	.word	0x08009fd5
 800a018:	0800a157 	.word	0x0800a157
 800a01c:	0800a083 	.word	0x0800a083
 800a020:	0800a111 	.word	0x0800a111
 800a024:	08009fd5 	.word	0x08009fd5
 800a028:	08009fd5 	.word	0x08009fd5
 800a02c:	0800a179 	.word	0x0800a179
 800a030:	08009fd5 	.word	0x08009fd5
 800a034:	0800a083 	.word	0x0800a083
 800a038:	08009fd5 	.word	0x08009fd5
 800a03c:	08009fd5 	.word	0x08009fd5
 800a040:	0800a119 	.word	0x0800a119
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6032      	str	r2, [r6, #0]
 800a04c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a054:	2301      	movs	r3, #1
 800a056:	e09c      	b.n	800a192 <_printf_i+0x1e6>
 800a058:	6833      	ldr	r3, [r6, #0]
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	1d19      	adds	r1, r3, #4
 800a05e:	6031      	str	r1, [r6, #0]
 800a060:	0606      	lsls	r6, r0, #24
 800a062:	d501      	bpl.n	800a068 <_printf_i+0xbc>
 800a064:	681d      	ldr	r5, [r3, #0]
 800a066:	e003      	b.n	800a070 <_printf_i+0xc4>
 800a068:	0645      	lsls	r5, r0, #25
 800a06a:	d5fb      	bpl.n	800a064 <_printf_i+0xb8>
 800a06c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a070:	2d00      	cmp	r5, #0
 800a072:	da03      	bge.n	800a07c <_printf_i+0xd0>
 800a074:	232d      	movs	r3, #45	@ 0x2d
 800a076:	426d      	negs	r5, r5
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a07c:	230a      	movs	r3, #10
 800a07e:	4858      	ldr	r0, [pc, #352]	@ (800a1e0 <_printf_i+0x234>)
 800a080:	e011      	b.n	800a0a6 <_printf_i+0xfa>
 800a082:	6821      	ldr	r1, [r4, #0]
 800a084:	6833      	ldr	r3, [r6, #0]
 800a086:	0608      	lsls	r0, r1, #24
 800a088:	f853 5b04 	ldr.w	r5, [r3], #4
 800a08c:	d402      	bmi.n	800a094 <_printf_i+0xe8>
 800a08e:	0649      	lsls	r1, r1, #25
 800a090:	bf48      	it	mi
 800a092:	b2ad      	uxthmi	r5, r5
 800a094:	2f6f      	cmp	r7, #111	@ 0x6f
 800a096:	6033      	str	r3, [r6, #0]
 800a098:	bf14      	ite	ne
 800a09a:	230a      	movne	r3, #10
 800a09c:	2308      	moveq	r3, #8
 800a09e:	4850      	ldr	r0, [pc, #320]	@ (800a1e0 <_printf_i+0x234>)
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0a6:	6866      	ldr	r6, [r4, #4]
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	60a6      	str	r6, [r4, #8]
 800a0ac:	db05      	blt.n	800a0ba <_printf_i+0x10e>
 800a0ae:	6821      	ldr	r1, [r4, #0]
 800a0b0:	432e      	orrs	r6, r5
 800a0b2:	f021 0104 	bic.w	r1, r1, #4
 800a0b6:	6021      	str	r1, [r4, #0]
 800a0b8:	d04b      	beq.n	800a152 <_printf_i+0x1a6>
 800a0ba:	4616      	mov	r6, r2
 800a0bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0c0:	fb03 5711 	mls	r7, r3, r1, r5
 800a0c4:	5dc7      	ldrb	r7, [r0, r7]
 800a0c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0ca:	462f      	mov	r7, r5
 800a0cc:	42bb      	cmp	r3, r7
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	d9f4      	bls.n	800a0bc <_printf_i+0x110>
 800a0d2:	2b08      	cmp	r3, #8
 800a0d4:	d10b      	bne.n	800a0ee <_printf_i+0x142>
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	07df      	lsls	r7, r3, #31
 800a0da:	d508      	bpl.n	800a0ee <_printf_i+0x142>
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	6861      	ldr	r1, [r4, #4]
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	bfde      	ittt	le
 800a0e4:	2330      	movle	r3, #48	@ 0x30
 800a0e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ee:	1b92      	subs	r2, r2, r6
 800a0f0:	6122      	str	r2, [r4, #16]
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f8cd a000 	str.w	sl, [sp]
 800a0fc:	aa03      	add	r2, sp, #12
 800a0fe:	f7ff fee3 	bl	8009ec8 <_printf_common>
 800a102:	3001      	adds	r0, #1
 800a104:	d14a      	bne.n	800a19c <_printf_i+0x1f0>
 800a106:	f04f 30ff 	mov.w	r0, #4294967295
 800a10a:	b004      	add	sp, #16
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	f043 0320 	orr.w	r3, r3, #32
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	2778      	movs	r7, #120	@ 0x78
 800a11a:	4832      	ldr	r0, [pc, #200]	@ (800a1e4 <_printf_i+0x238>)
 800a11c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	6831      	ldr	r1, [r6, #0]
 800a124:	061f      	lsls	r7, r3, #24
 800a126:	f851 5b04 	ldr.w	r5, [r1], #4
 800a12a:	d402      	bmi.n	800a132 <_printf_i+0x186>
 800a12c:	065f      	lsls	r7, r3, #25
 800a12e:	bf48      	it	mi
 800a130:	b2ad      	uxthmi	r5, r5
 800a132:	6031      	str	r1, [r6, #0]
 800a134:	07d9      	lsls	r1, r3, #31
 800a136:	bf44      	itt	mi
 800a138:	f043 0320 	orrmi.w	r3, r3, #32
 800a13c:	6023      	strmi	r3, [r4, #0]
 800a13e:	b11d      	cbz	r5, 800a148 <_printf_i+0x19c>
 800a140:	2310      	movs	r3, #16
 800a142:	e7ad      	b.n	800a0a0 <_printf_i+0xf4>
 800a144:	4826      	ldr	r0, [pc, #152]	@ (800a1e0 <_printf_i+0x234>)
 800a146:	e7e9      	b.n	800a11c <_printf_i+0x170>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	f023 0320 	bic.w	r3, r3, #32
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	e7f6      	b.n	800a140 <_printf_i+0x194>
 800a152:	4616      	mov	r6, r2
 800a154:	e7bd      	b.n	800a0d2 <_printf_i+0x126>
 800a156:	6833      	ldr	r3, [r6, #0]
 800a158:	6825      	ldr	r5, [r4, #0]
 800a15a:	1d18      	adds	r0, r3, #4
 800a15c:	6961      	ldr	r1, [r4, #20]
 800a15e:	6030      	str	r0, [r6, #0]
 800a160:	062e      	lsls	r6, r5, #24
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	d501      	bpl.n	800a16a <_printf_i+0x1be>
 800a166:	6019      	str	r1, [r3, #0]
 800a168:	e002      	b.n	800a170 <_printf_i+0x1c4>
 800a16a:	0668      	lsls	r0, r5, #25
 800a16c:	d5fb      	bpl.n	800a166 <_printf_i+0x1ba>
 800a16e:	8019      	strh	r1, [r3, #0]
 800a170:	2300      	movs	r3, #0
 800a172:	4616      	mov	r6, r2
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	e7bc      	b.n	800a0f2 <_printf_i+0x146>
 800a178:	6833      	ldr	r3, [r6, #0]
 800a17a:	2100      	movs	r1, #0
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	6032      	str	r2, [r6, #0]
 800a180:	681e      	ldr	r6, [r3, #0]
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	4630      	mov	r0, r6
 800a186:	f000 fad1 	bl	800a72c <memchr>
 800a18a:	b108      	cbz	r0, 800a190 <_printf_i+0x1e4>
 800a18c:	1b80      	subs	r0, r0, r6
 800a18e:	6060      	str	r0, [r4, #4]
 800a190:	6863      	ldr	r3, [r4, #4]
 800a192:	6123      	str	r3, [r4, #16]
 800a194:	2300      	movs	r3, #0
 800a196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a19a:	e7aa      	b.n	800a0f2 <_printf_i+0x146>
 800a19c:	4632      	mov	r2, r6
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	47d0      	blx	sl
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d0ad      	beq.n	800a106 <_printf_i+0x15a>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	079b      	lsls	r3, r3, #30
 800a1ae:	d413      	bmi.n	800a1d8 <_printf_i+0x22c>
 800a1b0:	68e0      	ldr	r0, [r4, #12]
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	4298      	cmp	r0, r3
 800a1b6:	bfb8      	it	lt
 800a1b8:	4618      	movlt	r0, r3
 800a1ba:	e7a6      	b.n	800a10a <_printf_i+0x15e>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4632      	mov	r2, r6
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	47d0      	blx	sl
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d09d      	beq.n	800a106 <_printf_i+0x15a>
 800a1ca:	3501      	adds	r5, #1
 800a1cc:	68e3      	ldr	r3, [r4, #12]
 800a1ce:	9903      	ldr	r1, [sp, #12]
 800a1d0:	1a5b      	subs	r3, r3, r1
 800a1d2:	42ab      	cmp	r3, r5
 800a1d4:	dcf2      	bgt.n	800a1bc <_printf_i+0x210>
 800a1d6:	e7eb      	b.n	800a1b0 <_printf_i+0x204>
 800a1d8:	2500      	movs	r5, #0
 800a1da:	f104 0619 	add.w	r6, r4, #25
 800a1de:	e7f5      	b.n	800a1cc <_printf_i+0x220>
 800a1e0:	0800c7eb 	.word	0x0800c7eb
 800a1e4:	0800c7fc 	.word	0x0800c7fc

0800a1e8 <_scanf_chars>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	688a      	ldr	r2, [r1, #8]
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b932      	cbnz	r2, 800a204 <_scanf_chars+0x1c>
 800a1f6:	698a      	ldr	r2, [r1, #24]
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	bf14      	ite	ne
 800a1fc:	f04f 32ff 	movne.w	r2, #4294967295
 800a200:	2201      	moveq	r2, #1
 800a202:	608a      	str	r2, [r1, #8]
 800a204:	2700      	movs	r7, #0
 800a206:	6822      	ldr	r2, [r4, #0]
 800a208:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a298 <_scanf_chars+0xb0>
 800a20c:	06d1      	lsls	r1, r2, #27
 800a20e:	bf5f      	itttt	pl
 800a210:	681a      	ldrpl	r2, [r3, #0]
 800a212:	1d11      	addpl	r1, r2, #4
 800a214:	6019      	strpl	r1, [r3, #0]
 800a216:	6816      	ldrpl	r6, [r2, #0]
 800a218:	69a0      	ldr	r0, [r4, #24]
 800a21a:	b188      	cbz	r0, 800a240 <_scanf_chars+0x58>
 800a21c:	2801      	cmp	r0, #1
 800a21e:	d107      	bne.n	800a230 <_scanf_chars+0x48>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	781a      	ldrb	r2, [r3, #0]
 800a224:	6963      	ldr	r3, [r4, #20]
 800a226:	5c9b      	ldrb	r3, [r3, r2]
 800a228:	b953      	cbnz	r3, 800a240 <_scanf_chars+0x58>
 800a22a:	2f00      	cmp	r7, #0
 800a22c:	d031      	beq.n	800a292 <_scanf_chars+0xaa>
 800a22e:	e022      	b.n	800a276 <_scanf_chars+0x8e>
 800a230:	2802      	cmp	r0, #2
 800a232:	d120      	bne.n	800a276 <_scanf_chars+0x8e>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a23c:	071b      	lsls	r3, r3, #28
 800a23e:	d41a      	bmi.n	800a276 <_scanf_chars+0x8e>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	3701      	adds	r7, #1
 800a244:	06da      	lsls	r2, r3, #27
 800a246:	bf5e      	ittt	pl
 800a248:	682b      	ldrpl	r3, [r5, #0]
 800a24a:	781b      	ldrbpl	r3, [r3, #0]
 800a24c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a250:	682a      	ldr	r2, [r5, #0]
 800a252:	686b      	ldr	r3, [r5, #4]
 800a254:	3201      	adds	r2, #1
 800a256:	602a      	str	r2, [r5, #0]
 800a258:	68a2      	ldr	r2, [r4, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	3a01      	subs	r2, #1
 800a25e:	606b      	str	r3, [r5, #4]
 800a260:	60a2      	str	r2, [r4, #8]
 800a262:	b142      	cbz	r2, 800a276 <_scanf_chars+0x8e>
 800a264:	2b00      	cmp	r3, #0
 800a266:	dcd7      	bgt.n	800a218 <_scanf_chars+0x30>
 800a268:	4629      	mov	r1, r5
 800a26a:	4640      	mov	r0, r8
 800a26c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a270:	4798      	blx	r3
 800a272:	2800      	cmp	r0, #0
 800a274:	d0d0      	beq.n	800a218 <_scanf_chars+0x30>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	f013 0310 	ands.w	r3, r3, #16
 800a27c:	d105      	bne.n	800a28a <_scanf_chars+0xa2>
 800a27e:	68e2      	ldr	r2, [r4, #12]
 800a280:	3201      	adds	r2, #1
 800a282:	60e2      	str	r2, [r4, #12]
 800a284:	69a2      	ldr	r2, [r4, #24]
 800a286:	b102      	cbz	r2, 800a28a <_scanf_chars+0xa2>
 800a288:	7033      	strb	r3, [r6, #0]
 800a28a:	2000      	movs	r0, #0
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	443b      	add	r3, r7
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a296:	bf00      	nop
 800a298:	0800c951 	.word	0x0800c951

0800a29c <_scanf_i>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	4698      	mov	r8, r3
 800a2a4:	4b72      	ldr	r3, [pc, #456]	@ (800a470 <_scanf_i+0x1d4>)
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	4616      	mov	r6, r2
 800a2ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a2b6:	4b6f      	ldr	r3, [pc, #444]	@ (800a474 <_scanf_i+0x1d8>)
 800a2b8:	69a1      	ldr	r1, [r4, #24]
 800a2ba:	4a6f      	ldr	r2, [pc, #444]	@ (800a478 <_scanf_i+0x1dc>)
 800a2bc:	4627      	mov	r7, r4
 800a2be:	2903      	cmp	r1, #3
 800a2c0:	bf08      	it	eq
 800a2c2:	461a      	moveq	r2, r3
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	9201      	str	r2, [sp, #4]
 800a2c8:	1e5a      	subs	r2, r3, #1
 800a2ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a2ce:	bf81      	itttt	hi
 800a2d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a2d4:	eb03 0905 	addhi.w	r9, r3, r5
 800a2d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a2dc:	60a3      	strhi	r3, [r4, #8]
 800a2de:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a2e2:	bf98      	it	ls
 800a2e4:	f04f 0900 	movls.w	r9, #0
 800a2e8:	463d      	mov	r5, r7
 800a2ea:	f04f 0b00 	mov.w	fp, #0
 800a2ee:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	6831      	ldr	r1, [r6, #0]
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	7809      	ldrb	r1, [r1, #0]
 800a2fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a300:	f000 fa14 	bl	800a72c <memchr>
 800a304:	b328      	cbz	r0, 800a352 <_scanf_i+0xb6>
 800a306:	f1bb 0f01 	cmp.w	fp, #1
 800a30a:	d159      	bne.n	800a3c0 <_scanf_i+0x124>
 800a30c:	6862      	ldr	r2, [r4, #4]
 800a30e:	b92a      	cbnz	r2, 800a31c <_scanf_i+0x80>
 800a310:	2108      	movs	r1, #8
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	6061      	str	r1, [r4, #4]
 800a316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a31a:	6022      	str	r2, [r4, #0]
 800a31c:	6822      	ldr	r2, [r4, #0]
 800a31e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a322:	6022      	str	r2, [r4, #0]
 800a324:	68a2      	ldr	r2, [r4, #8]
 800a326:	1e51      	subs	r1, r2, #1
 800a328:	60a1      	str	r1, [r4, #8]
 800a32a:	b192      	cbz	r2, 800a352 <_scanf_i+0xb6>
 800a32c:	6832      	ldr	r2, [r6, #0]
 800a32e:	1c51      	adds	r1, r2, #1
 800a330:	6031      	str	r1, [r6, #0]
 800a332:	7812      	ldrb	r2, [r2, #0]
 800a334:	f805 2b01 	strb.w	r2, [r5], #1
 800a338:	6872      	ldr	r2, [r6, #4]
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	6072      	str	r2, [r6, #4]
 800a340:	dc07      	bgt.n	800a352 <_scanf_i+0xb6>
 800a342:	4631      	mov	r1, r6
 800a344:	4650      	mov	r0, sl
 800a346:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a34a:	4790      	blx	r2
 800a34c:	2800      	cmp	r0, #0
 800a34e:	f040 8085 	bne.w	800a45c <_scanf_i+0x1c0>
 800a352:	f10b 0b01 	add.w	fp, fp, #1
 800a356:	f1bb 0f03 	cmp.w	fp, #3
 800a35a:	d1cb      	bne.n	800a2f4 <_scanf_i+0x58>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	b90b      	cbnz	r3, 800a364 <_scanf_i+0xc8>
 800a360:	230a      	movs	r3, #10
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	4945      	ldr	r1, [pc, #276]	@ (800a47c <_scanf_i+0x1e0>)
 800a368:	6960      	ldr	r0, [r4, #20]
 800a36a:	1ac9      	subs	r1, r1, r3
 800a36c:	f000 f942 	bl	800a5f4 <__sccl>
 800a370:	f04f 0b00 	mov.w	fp, #0
 800a374:	68a3      	ldr	r3, [r4, #8]
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d03d      	beq.n	800a3f8 <_scanf_i+0x15c>
 800a37c:	6831      	ldr	r1, [r6, #0]
 800a37e:	6960      	ldr	r0, [r4, #20]
 800a380:	f891 c000 	ldrb.w	ip, [r1]
 800a384:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a388:	2800      	cmp	r0, #0
 800a38a:	d035      	beq.n	800a3f8 <_scanf_i+0x15c>
 800a38c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a390:	d124      	bne.n	800a3dc <_scanf_i+0x140>
 800a392:	0510      	lsls	r0, r2, #20
 800a394:	d522      	bpl.n	800a3dc <_scanf_i+0x140>
 800a396:	f10b 0b01 	add.w	fp, fp, #1
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	d003      	beq.n	800a3a8 <_scanf_i+0x10c>
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3a6:	60a3      	str	r3, [r4, #8]
 800a3a8:	6873      	ldr	r3, [r6, #4]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	6073      	str	r3, [r6, #4]
 800a3b0:	dd1b      	ble.n	800a3ea <_scanf_i+0x14e>
 800a3b2:	6833      	ldr	r3, [r6, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6033      	str	r3, [r6, #0]
 800a3b8:	68a3      	ldr	r3, [r4, #8]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	60a3      	str	r3, [r4, #8]
 800a3be:	e7d9      	b.n	800a374 <_scanf_i+0xd8>
 800a3c0:	f1bb 0f02 	cmp.w	fp, #2
 800a3c4:	d1ae      	bne.n	800a324 <_scanf_i+0x88>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a3cc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a3d0:	d1c4      	bne.n	800a35c <_scanf_i+0xc0>
 800a3d2:	2110      	movs	r1, #16
 800a3d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3d8:	6061      	str	r1, [r4, #4]
 800a3da:	e7a2      	b.n	800a322 <_scanf_i+0x86>
 800a3dc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	780b      	ldrb	r3, [r1, #0]
 800a3e4:	f805 3b01 	strb.w	r3, [r5], #1
 800a3e8:	e7de      	b.n	800a3a8 <_scanf_i+0x10c>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3f2:	4798      	blx	r3
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d0df      	beq.n	800a3b8 <_scanf_i+0x11c>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	05d9      	lsls	r1, r3, #23
 800a3fc:	d50d      	bpl.n	800a41a <_scanf_i+0x17e>
 800a3fe:	42bd      	cmp	r5, r7
 800a400:	d909      	bls.n	800a416 <_scanf_i+0x17a>
 800a402:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a406:	4632      	mov	r2, r6
 800a408:	4650      	mov	r0, sl
 800a40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a40e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a412:	4798      	blx	r3
 800a414:	464d      	mov	r5, r9
 800a416:	42bd      	cmp	r5, r7
 800a418:	d028      	beq.n	800a46c <_scanf_i+0x1d0>
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	f012 0210 	ands.w	r2, r2, #16
 800a420:	d113      	bne.n	800a44a <_scanf_i+0x1ae>
 800a422:	702a      	strb	r2, [r5, #0]
 800a424:	4639      	mov	r1, r7
 800a426:	6863      	ldr	r3, [r4, #4]
 800a428:	4650      	mov	r0, sl
 800a42a:	9e01      	ldr	r6, [sp, #4]
 800a42c:	47b0      	blx	r6
 800a42e:	f8d8 3000 	ldr.w	r3, [r8]
 800a432:	6821      	ldr	r1, [r4, #0]
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	f8c8 2000 	str.w	r2, [r8]
 800a43a:	f011 0f20 	tst.w	r1, #32
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	d00f      	beq.n	800a462 <_scanf_i+0x1c6>
 800a442:	6018      	str	r0, [r3, #0]
 800a444:	68e3      	ldr	r3, [r4, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60e3      	str	r3, [r4, #12]
 800a44a:	2000      	movs	r0, #0
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	1bed      	subs	r5, r5, r7
 800a450:	445d      	add	r5, fp
 800a452:	442b      	add	r3, r5
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	b007      	add	sp, #28
 800a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45c:	f04f 0b00 	mov.w	fp, #0
 800a460:	e7ca      	b.n	800a3f8 <_scanf_i+0x15c>
 800a462:	07ca      	lsls	r2, r1, #31
 800a464:	bf4c      	ite	mi
 800a466:	8018      	strhmi	r0, [r3, #0]
 800a468:	6018      	strpl	r0, [r3, #0]
 800a46a:	e7eb      	b.n	800a444 <_scanf_i+0x1a8>
 800a46c:	2001      	movs	r0, #1
 800a46e:	e7f2      	b.n	800a456 <_scanf_i+0x1ba>
 800a470:	0800c69c 	.word	0x0800c69c
 800a474:	08009879 	.word	0x08009879
 800a478:	0800b875 	.word	0x0800b875
 800a47c:	0800c81d 	.word	0x0800c81d

0800a480 <__sflush_r>:
 800a480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	0716      	lsls	r6, r2, #28
 800a488:	4605      	mov	r5, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	d454      	bmi.n	800a538 <__sflush_r+0xb8>
 800a48e:	684b      	ldr	r3, [r1, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc02      	bgt.n	800a49a <__sflush_r+0x1a>
 800a494:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd48      	ble.n	800a52c <__sflush_r+0xac>
 800a49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	d045      	beq.n	800a52c <__sflush_r+0xac>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4a6:	682f      	ldr	r7, [r5, #0]
 800a4a8:	6a21      	ldr	r1, [r4, #32]
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	d030      	beq.n	800a510 <__sflush_r+0x90>
 800a4ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	0759      	lsls	r1, r3, #29
 800a4b4:	d505      	bpl.n	800a4c2 <__sflush_r+0x42>
 800a4b6:	6863      	ldr	r3, [r4, #4]
 800a4b8:	1ad2      	subs	r2, r2, r3
 800a4ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4bc:	b10b      	cbz	r3, 800a4c2 <__sflush_r+0x42>
 800a4be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4c0:	1ad2      	subs	r2, r2, r3
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c8:	6a21      	ldr	r1, [r4, #32]
 800a4ca:	47b0      	blx	r6
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	d106      	bne.n	800a4e0 <__sflush_r+0x60>
 800a4d2:	6829      	ldr	r1, [r5, #0]
 800a4d4:	291d      	cmp	r1, #29
 800a4d6:	d82b      	bhi.n	800a530 <__sflush_r+0xb0>
 800a4d8:	4a28      	ldr	r2, [pc, #160]	@ (800a57c <__sflush_r+0xfc>)
 800a4da:	40ca      	lsrs	r2, r1
 800a4dc:	07d6      	lsls	r6, r2, #31
 800a4de:	d527      	bpl.n	800a530 <__sflush_r+0xb0>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	6062      	str	r2, [r4, #4]
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	04d9      	lsls	r1, r3, #19
 800a4e8:	6022      	str	r2, [r4, #0]
 800a4ea:	d504      	bpl.n	800a4f6 <__sflush_r+0x76>
 800a4ec:	1c42      	adds	r2, r0, #1
 800a4ee:	d101      	bne.n	800a4f4 <__sflush_r+0x74>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b903      	cbnz	r3, 800a4f6 <__sflush_r+0x76>
 800a4f4:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4f8:	602f      	str	r7, [r5, #0]
 800a4fa:	b1b9      	cbz	r1, 800a52c <__sflush_r+0xac>
 800a4fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a500:	4299      	cmp	r1, r3
 800a502:	d002      	beq.n	800a50a <__sflush_r+0x8a>
 800a504:	4628      	mov	r0, r5
 800a506:	f7fe fa3d 	bl	8008984 <_free_r>
 800a50a:	2300      	movs	r3, #0
 800a50c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a50e:	e00d      	b.n	800a52c <__sflush_r+0xac>
 800a510:	2301      	movs	r3, #1
 800a512:	4628      	mov	r0, r5
 800a514:	47b0      	blx	r6
 800a516:	4602      	mov	r2, r0
 800a518:	1c50      	adds	r0, r2, #1
 800a51a:	d1c9      	bne.n	800a4b0 <__sflush_r+0x30>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0c6      	beq.n	800a4b0 <__sflush_r+0x30>
 800a522:	2b1d      	cmp	r3, #29
 800a524:	d001      	beq.n	800a52a <__sflush_r+0xaa>
 800a526:	2b16      	cmp	r3, #22
 800a528:	d11d      	bne.n	800a566 <__sflush_r+0xe6>
 800a52a:	602f      	str	r7, [r5, #0]
 800a52c:	2000      	movs	r0, #0
 800a52e:	e021      	b.n	800a574 <__sflush_r+0xf4>
 800a530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a534:	b21b      	sxth	r3, r3
 800a536:	e01a      	b.n	800a56e <__sflush_r+0xee>
 800a538:	690f      	ldr	r7, [r1, #16]
 800a53a:	2f00      	cmp	r7, #0
 800a53c:	d0f6      	beq.n	800a52c <__sflush_r+0xac>
 800a53e:	0793      	lsls	r3, r2, #30
 800a540:	bf18      	it	ne
 800a542:	2300      	movne	r3, #0
 800a544:	680e      	ldr	r6, [r1, #0]
 800a546:	bf08      	it	eq
 800a548:	694b      	ldreq	r3, [r1, #20]
 800a54a:	1bf6      	subs	r6, r6, r7
 800a54c:	600f      	str	r7, [r1, #0]
 800a54e:	608b      	str	r3, [r1, #8]
 800a550:	2e00      	cmp	r6, #0
 800a552:	ddeb      	ble.n	800a52c <__sflush_r+0xac>
 800a554:	4633      	mov	r3, r6
 800a556:	463a      	mov	r2, r7
 800a558:	4628      	mov	r0, r5
 800a55a:	6a21      	ldr	r1, [r4, #32]
 800a55c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a560:	47e0      	blx	ip
 800a562:	2800      	cmp	r0, #0
 800a564:	dc07      	bgt.n	800a576 <__sflush_r+0xf6>
 800a566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a56e:	f04f 30ff 	mov.w	r0, #4294967295
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a576:	4407      	add	r7, r0
 800a578:	1a36      	subs	r6, r6, r0
 800a57a:	e7e9      	b.n	800a550 <__sflush_r+0xd0>
 800a57c:	20400001 	.word	0x20400001

0800a580 <_fflush_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b913      	cbnz	r3, 800a590 <_fflush_r+0x10>
 800a58a:	2500      	movs	r5, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	b118      	cbz	r0, 800a59a <_fflush_r+0x1a>
 800a592:	6a03      	ldr	r3, [r0, #32]
 800a594:	b90b      	cbnz	r3, 800a59a <_fflush_r+0x1a>
 800a596:	f7fd ff7d 	bl	8008494 <__sinit>
 800a59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f3      	beq.n	800a58a <_fflush_r+0xa>
 800a5a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5a4:	07d0      	lsls	r0, r2, #31
 800a5a6:	d404      	bmi.n	800a5b2 <_fflush_r+0x32>
 800a5a8:	0599      	lsls	r1, r3, #22
 800a5aa:	d402      	bmi.n	800a5b2 <_fflush_r+0x32>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ae:	f7fe f9b6 	bl	800891e <__retarget_lock_acquire_recursive>
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f7ff ff63 	bl	800a480 <__sflush_r>
 800a5ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5bc:	4605      	mov	r5, r0
 800a5be:	07da      	lsls	r2, r3, #31
 800a5c0:	d4e4      	bmi.n	800a58c <_fflush_r+0xc>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	059b      	lsls	r3, r3, #22
 800a5c6:	d4e1      	bmi.n	800a58c <_fflush_r+0xc>
 800a5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ca:	f7fe f9a9 	bl	8008920 <__retarget_lock_release_recursive>
 800a5ce:	e7dd      	b.n	800a58c <_fflush_r+0xc>

0800a5d0 <fiprintf>:
 800a5d0:	b40e      	push	{r1, r2, r3}
 800a5d2:	b503      	push	{r0, r1, lr}
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	4805      	ldr	r0, [pc, #20]	@ (800a5f0 <fiprintf+0x20>)
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f001 f97d 	bl	800b8e0 <_vfiprintf_r>
 800a5e6:	b002      	add	sp, #8
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	2000001c 	.word	0x2000001c

0800a5f4 <__sccl>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	780b      	ldrb	r3, [r1, #0]
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	2b5e      	cmp	r3, #94	@ 0x5e
 800a5fc:	bf0b      	itete	eq
 800a5fe:	784b      	ldrbeq	r3, [r1, #1]
 800a600:	1c4a      	addne	r2, r1, #1
 800a602:	1c8a      	addeq	r2, r1, #2
 800a604:	2100      	movne	r1, #0
 800a606:	bf08      	it	eq
 800a608:	2101      	moveq	r1, #1
 800a60a:	3801      	subs	r0, #1
 800a60c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a610:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a614:	42a8      	cmp	r0, r5
 800a616:	d1fb      	bne.n	800a610 <__sccl+0x1c>
 800a618:	b90b      	cbnz	r3, 800a61e <__sccl+0x2a>
 800a61a:	1e50      	subs	r0, r2, #1
 800a61c:	bd70      	pop	{r4, r5, r6, pc}
 800a61e:	f081 0101 	eor.w	r1, r1, #1
 800a622:	4610      	mov	r0, r2
 800a624:	54e1      	strb	r1, [r4, r3]
 800a626:	4602      	mov	r2, r0
 800a628:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a62c:	2d2d      	cmp	r5, #45	@ 0x2d
 800a62e:	d005      	beq.n	800a63c <__sccl+0x48>
 800a630:	2d5d      	cmp	r5, #93	@ 0x5d
 800a632:	d016      	beq.n	800a662 <__sccl+0x6e>
 800a634:	2d00      	cmp	r5, #0
 800a636:	d0f1      	beq.n	800a61c <__sccl+0x28>
 800a638:	462b      	mov	r3, r5
 800a63a:	e7f2      	b.n	800a622 <__sccl+0x2e>
 800a63c:	7846      	ldrb	r6, [r0, #1]
 800a63e:	2e5d      	cmp	r6, #93	@ 0x5d
 800a640:	d0fa      	beq.n	800a638 <__sccl+0x44>
 800a642:	42b3      	cmp	r3, r6
 800a644:	dcf8      	bgt.n	800a638 <__sccl+0x44>
 800a646:	461a      	mov	r2, r3
 800a648:	3002      	adds	r0, #2
 800a64a:	3201      	adds	r2, #1
 800a64c:	4296      	cmp	r6, r2
 800a64e:	54a1      	strb	r1, [r4, r2]
 800a650:	dcfb      	bgt.n	800a64a <__sccl+0x56>
 800a652:	1af2      	subs	r2, r6, r3
 800a654:	3a01      	subs	r2, #1
 800a656:	42b3      	cmp	r3, r6
 800a658:	bfa8      	it	ge
 800a65a:	2200      	movge	r2, #0
 800a65c:	1c5d      	adds	r5, r3, #1
 800a65e:	18ab      	adds	r3, r5, r2
 800a660:	e7e1      	b.n	800a626 <__sccl+0x32>
 800a662:	4610      	mov	r0, r2
 800a664:	e7da      	b.n	800a61c <__sccl+0x28>

0800a666 <__submore>:
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	460c      	mov	r4, r1
 800a66c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a66e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a672:	4299      	cmp	r1, r3
 800a674:	d11b      	bne.n	800a6ae <__submore+0x48>
 800a676:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a67a:	f7fe f9f5 	bl	8008a68 <_malloc_r>
 800a67e:	b918      	cbnz	r0, 800a688 <__submore+0x22>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a68c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a68e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a692:	6360      	str	r0, [r4, #52]	@ 0x34
 800a694:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a698:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a69c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a6a0:	7043      	strb	r3, [r0, #1]
 800a6a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a6a6:	7003      	strb	r3, [r0, #0]
 800a6a8:	6020      	str	r0, [r4, #0]
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	e7ea      	b.n	800a684 <__submore+0x1e>
 800a6ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a6b0:	0077      	lsls	r7, r6, #1
 800a6b2:	463a      	mov	r2, r7
 800a6b4:	f001 f842 	bl	800b73c <_realloc_r>
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0e0      	beq.n	800a680 <__submore+0x1a>
 800a6be:	eb00 0806 	add.w	r8, r0, r6
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	f7fe f92b 	bl	8008922 <memcpy>
 800a6cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a6d0:	f8c4 8000 	str.w	r8, [r4]
 800a6d4:	e7e9      	b.n	800a6aa <__submore+0x44>

0800a6d6 <memmove>:
 800a6d6:	4288      	cmp	r0, r1
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	eb01 0402 	add.w	r4, r1, r2
 800a6de:	d902      	bls.n	800a6e6 <memmove+0x10>
 800a6e0:	4284      	cmp	r4, r0
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	d807      	bhi.n	800a6f6 <memmove+0x20>
 800a6e6:	1e43      	subs	r3, r0, #1
 800a6e8:	42a1      	cmp	r1, r4
 800a6ea:	d008      	beq.n	800a6fe <memmove+0x28>
 800a6ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6f4:	e7f8      	b.n	800a6e8 <memmove+0x12>
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	4402      	add	r2, r0
 800a6fa:	428a      	cmp	r2, r1
 800a6fc:	d100      	bne.n	800a700 <memmove+0x2a>
 800a6fe:	bd10      	pop	{r4, pc}
 800a700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a704:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a708:	e7f7      	b.n	800a6fa <memmove+0x24>
	...

0800a70c <_sbrk_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	2300      	movs	r3, #0
 800a710:	4d05      	ldr	r5, [pc, #20]	@ (800a728 <_sbrk_r+0x1c>)
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f7 fe66 	bl	80023e8 <_sbrk>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_sbrk_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_sbrk_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20002100 	.word	0x20002100

0800a72c <memchr>:
 800a72c:	4603      	mov	r3, r0
 800a72e:	b510      	push	{r4, lr}
 800a730:	b2c9      	uxtb	r1, r1
 800a732:	4402      	add	r2, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	4618      	mov	r0, r3
 800a738:	d101      	bne.n	800a73e <memchr+0x12>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e003      	b.n	800a746 <memchr+0x1a>
 800a73e:	7804      	ldrb	r4, [r0, #0]
 800a740:	3301      	adds	r3, #1
 800a742:	428c      	cmp	r4, r1
 800a744:	d1f6      	bne.n	800a734 <memchr+0x8>
 800a746:	bd10      	pop	{r4, pc}

0800a748 <nan>:
 800a748:	2000      	movs	r0, #0
 800a74a:	4901      	ldr	r1, [pc, #4]	@ (800a750 <nan+0x8>)
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	7ff80000 	.word	0x7ff80000

0800a754 <abort>:
 800a754:	2006      	movs	r0, #6
 800a756:	b508      	push	{r3, lr}
 800a758:	f001 fa96 	bl	800bc88 <raise>
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7f7 fdce 	bl	80022fe <_exit>

0800a762 <rshift>:
 800a762:	6903      	ldr	r3, [r0, #16]
 800a764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a768:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a76c:	f100 0414 	add.w	r4, r0, #20
 800a770:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a774:	dd46      	ble.n	800a804 <rshift+0xa2>
 800a776:	f011 011f 	ands.w	r1, r1, #31
 800a77a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a77e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a782:	d10c      	bne.n	800a79e <rshift+0x3c>
 800a784:	4629      	mov	r1, r5
 800a786:	f100 0710 	add.w	r7, r0, #16
 800a78a:	42b1      	cmp	r1, r6
 800a78c:	d335      	bcc.n	800a7fa <rshift+0x98>
 800a78e:	1a9b      	subs	r3, r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	1eea      	subs	r2, r5, #3
 800a794:	4296      	cmp	r6, r2
 800a796:	bf38      	it	cc
 800a798:	2300      	movcc	r3, #0
 800a79a:	4423      	add	r3, r4
 800a79c:	e015      	b.n	800a7ca <rshift+0x68>
 800a79e:	46a1      	mov	r9, r4
 800a7a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7a4:	f1c1 0820 	rsb	r8, r1, #32
 800a7a8:	40cf      	lsrs	r7, r1
 800a7aa:	f105 0e04 	add.w	lr, r5, #4
 800a7ae:	4576      	cmp	r6, lr
 800a7b0:	46f4      	mov	ip, lr
 800a7b2:	d816      	bhi.n	800a7e2 <rshift+0x80>
 800a7b4:	1a9a      	subs	r2, r3, r2
 800a7b6:	0092      	lsls	r2, r2, #2
 800a7b8:	3a04      	subs	r2, #4
 800a7ba:	3501      	adds	r5, #1
 800a7bc:	42ae      	cmp	r6, r5
 800a7be:	bf38      	it	cc
 800a7c0:	2200      	movcc	r2, #0
 800a7c2:	18a3      	adds	r3, r4, r2
 800a7c4:	50a7      	str	r7, [r4, r2]
 800a7c6:	b107      	cbz	r7, 800a7ca <rshift+0x68>
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	eba3 0204 	sub.w	r2, r3, r4
 800a7d0:	bf08      	it	eq
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7d8:	6102      	str	r2, [r0, #16]
 800a7da:	bf08      	it	eq
 800a7dc:	6143      	streq	r3, [r0, #20]
 800a7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e2:	f8dc c000 	ldr.w	ip, [ip]
 800a7e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7ea:	ea4c 0707 	orr.w	r7, ip, r7
 800a7ee:	f849 7b04 	str.w	r7, [r9], #4
 800a7f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7f6:	40cf      	lsrs	r7, r1
 800a7f8:	e7d9      	b.n	800a7ae <rshift+0x4c>
 800a7fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800a802:	e7c2      	b.n	800a78a <rshift+0x28>
 800a804:	4623      	mov	r3, r4
 800a806:	e7e0      	b.n	800a7ca <rshift+0x68>

0800a808 <__hexdig_fun>:
 800a808:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a80c:	2b09      	cmp	r3, #9
 800a80e:	d802      	bhi.n	800a816 <__hexdig_fun+0xe>
 800a810:	3820      	subs	r0, #32
 800a812:	b2c0      	uxtb	r0, r0
 800a814:	4770      	bx	lr
 800a816:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d801      	bhi.n	800a822 <__hexdig_fun+0x1a>
 800a81e:	3847      	subs	r0, #71	@ 0x47
 800a820:	e7f7      	b.n	800a812 <__hexdig_fun+0xa>
 800a822:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a826:	2b05      	cmp	r3, #5
 800a828:	d801      	bhi.n	800a82e <__hexdig_fun+0x26>
 800a82a:	3827      	subs	r0, #39	@ 0x27
 800a82c:	e7f1      	b.n	800a812 <__hexdig_fun+0xa>
 800a82e:	2000      	movs	r0, #0
 800a830:	4770      	bx	lr
	...

0800a834 <__gethex>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	468a      	mov	sl, r1
 800a83a:	4690      	mov	r8, r2
 800a83c:	b085      	sub	sp, #20
 800a83e:	9302      	str	r3, [sp, #8]
 800a840:	680b      	ldr	r3, [r1, #0]
 800a842:	9001      	str	r0, [sp, #4]
 800a844:	1c9c      	adds	r4, r3, #2
 800a846:	46a1      	mov	r9, r4
 800a848:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a84c:	2830      	cmp	r0, #48	@ 0x30
 800a84e:	d0fa      	beq.n	800a846 <__gethex+0x12>
 800a850:	eba9 0303 	sub.w	r3, r9, r3
 800a854:	f1a3 0b02 	sub.w	fp, r3, #2
 800a858:	f7ff ffd6 	bl	800a808 <__hexdig_fun>
 800a85c:	4605      	mov	r5, r0
 800a85e:	2800      	cmp	r0, #0
 800a860:	d168      	bne.n	800a934 <__gethex+0x100>
 800a862:	2201      	movs	r2, #1
 800a864:	4648      	mov	r0, r9
 800a866:	499f      	ldr	r1, [pc, #636]	@ (800aae4 <__gethex+0x2b0>)
 800a868:	f7fd fef2 	bl	8008650 <strncmp>
 800a86c:	4607      	mov	r7, r0
 800a86e:	2800      	cmp	r0, #0
 800a870:	d167      	bne.n	800a942 <__gethex+0x10e>
 800a872:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a876:	4626      	mov	r6, r4
 800a878:	f7ff ffc6 	bl	800a808 <__hexdig_fun>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d062      	beq.n	800a946 <__gethex+0x112>
 800a880:	4623      	mov	r3, r4
 800a882:	7818      	ldrb	r0, [r3, #0]
 800a884:	4699      	mov	r9, r3
 800a886:	2830      	cmp	r0, #48	@ 0x30
 800a888:	f103 0301 	add.w	r3, r3, #1
 800a88c:	d0f9      	beq.n	800a882 <__gethex+0x4e>
 800a88e:	f7ff ffbb 	bl	800a808 <__hexdig_fun>
 800a892:	fab0 f580 	clz	r5, r0
 800a896:	f04f 0b01 	mov.w	fp, #1
 800a89a:	096d      	lsrs	r5, r5, #5
 800a89c:	464a      	mov	r2, r9
 800a89e:	4616      	mov	r6, r2
 800a8a0:	7830      	ldrb	r0, [r6, #0]
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	f7ff ffb0 	bl	800a808 <__hexdig_fun>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1f8      	bne.n	800a89e <__gethex+0x6a>
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	498c      	ldr	r1, [pc, #560]	@ (800aae4 <__gethex+0x2b0>)
 800a8b2:	f7fd fecd 	bl	8008650 <strncmp>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d13f      	bne.n	800a93a <__gethex+0x106>
 800a8ba:	b944      	cbnz	r4, 800a8ce <__gethex+0x9a>
 800a8bc:	1c74      	adds	r4, r6, #1
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4616      	mov	r6, r2
 800a8c2:	7830      	ldrb	r0, [r6, #0]
 800a8c4:	3201      	adds	r2, #1
 800a8c6:	f7ff ff9f 	bl	800a808 <__hexdig_fun>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d1f8      	bne.n	800a8c0 <__gethex+0x8c>
 800a8ce:	1ba4      	subs	r4, r4, r6
 800a8d0:	00a7      	lsls	r7, r4, #2
 800a8d2:	7833      	ldrb	r3, [r6, #0]
 800a8d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a8d8:	2b50      	cmp	r3, #80	@ 0x50
 800a8da:	d13e      	bne.n	800a95a <__gethex+0x126>
 800a8dc:	7873      	ldrb	r3, [r6, #1]
 800a8de:	2b2b      	cmp	r3, #43	@ 0x2b
 800a8e0:	d033      	beq.n	800a94a <__gethex+0x116>
 800a8e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a8e4:	d034      	beq.n	800a950 <__gethex+0x11c>
 800a8e6:	2400      	movs	r4, #0
 800a8e8:	1c71      	adds	r1, r6, #1
 800a8ea:	7808      	ldrb	r0, [r1, #0]
 800a8ec:	f7ff ff8c 	bl	800a808 <__hexdig_fun>
 800a8f0:	1e43      	subs	r3, r0, #1
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b18      	cmp	r3, #24
 800a8f6:	d830      	bhi.n	800a95a <__gethex+0x126>
 800a8f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a8fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a900:	f7ff ff82 	bl	800a808 <__hexdig_fun>
 800a904:	f100 3cff 	add.w	ip, r0, #4294967295
 800a908:	fa5f fc8c 	uxtb.w	ip, ip
 800a90c:	f1bc 0f18 	cmp.w	ip, #24
 800a910:	f04f 030a 	mov.w	r3, #10
 800a914:	d91e      	bls.n	800a954 <__gethex+0x120>
 800a916:	b104      	cbz	r4, 800a91a <__gethex+0xe6>
 800a918:	4252      	negs	r2, r2
 800a91a:	4417      	add	r7, r2
 800a91c:	f8ca 1000 	str.w	r1, [sl]
 800a920:	b1ed      	cbz	r5, 800a95e <__gethex+0x12a>
 800a922:	f1bb 0f00 	cmp.w	fp, #0
 800a926:	bf0c      	ite	eq
 800a928:	2506      	moveq	r5, #6
 800a92a:	2500      	movne	r5, #0
 800a92c:	4628      	mov	r0, r5
 800a92e:	b005      	add	sp, #20
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	2500      	movs	r5, #0
 800a936:	462c      	mov	r4, r5
 800a938:	e7b0      	b.n	800a89c <__gethex+0x68>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	d1c7      	bne.n	800a8ce <__gethex+0x9a>
 800a93e:	4627      	mov	r7, r4
 800a940:	e7c7      	b.n	800a8d2 <__gethex+0x9e>
 800a942:	464e      	mov	r6, r9
 800a944:	462f      	mov	r7, r5
 800a946:	2501      	movs	r5, #1
 800a948:	e7c3      	b.n	800a8d2 <__gethex+0x9e>
 800a94a:	2400      	movs	r4, #0
 800a94c:	1cb1      	adds	r1, r6, #2
 800a94e:	e7cc      	b.n	800a8ea <__gethex+0xb6>
 800a950:	2401      	movs	r4, #1
 800a952:	e7fb      	b.n	800a94c <__gethex+0x118>
 800a954:	fb03 0002 	mla	r0, r3, r2, r0
 800a958:	e7ce      	b.n	800a8f8 <__gethex+0xc4>
 800a95a:	4631      	mov	r1, r6
 800a95c:	e7de      	b.n	800a91c <__gethex+0xe8>
 800a95e:	4629      	mov	r1, r5
 800a960:	eba6 0309 	sub.w	r3, r6, r9
 800a964:	3b01      	subs	r3, #1
 800a966:	2b07      	cmp	r3, #7
 800a968:	dc0a      	bgt.n	800a980 <__gethex+0x14c>
 800a96a:	9801      	ldr	r0, [sp, #4]
 800a96c:	f000 fa46 	bl	800adfc <_Balloc>
 800a970:	4604      	mov	r4, r0
 800a972:	b940      	cbnz	r0, 800a986 <__gethex+0x152>
 800a974:	4602      	mov	r2, r0
 800a976:	21e4      	movs	r1, #228	@ 0xe4
 800a978:	4b5b      	ldr	r3, [pc, #364]	@ (800aae8 <__gethex+0x2b4>)
 800a97a:	485c      	ldr	r0, [pc, #368]	@ (800aaec <__gethex+0x2b8>)
 800a97c:	f7fd ffe4 	bl	8008948 <__assert_func>
 800a980:	3101      	adds	r1, #1
 800a982:	105b      	asrs	r3, r3, #1
 800a984:	e7ef      	b.n	800a966 <__gethex+0x132>
 800a986:	2300      	movs	r3, #0
 800a988:	f100 0a14 	add.w	sl, r0, #20
 800a98c:	4655      	mov	r5, sl
 800a98e:	469b      	mov	fp, r3
 800a990:	45b1      	cmp	r9, r6
 800a992:	d337      	bcc.n	800aa04 <__gethex+0x1d0>
 800a994:	f845 bb04 	str.w	fp, [r5], #4
 800a998:	eba5 050a 	sub.w	r5, r5, sl
 800a99c:	10ad      	asrs	r5, r5, #2
 800a99e:	6125      	str	r5, [r4, #16]
 800a9a0:	4658      	mov	r0, fp
 800a9a2:	f000 fb1d 	bl	800afe0 <__hi0bits>
 800a9a6:	016d      	lsls	r5, r5, #5
 800a9a8:	f8d8 6000 	ldr.w	r6, [r8]
 800a9ac:	1a2d      	subs	r5, r5, r0
 800a9ae:	42b5      	cmp	r5, r6
 800a9b0:	dd54      	ble.n	800aa5c <__gethex+0x228>
 800a9b2:	1bad      	subs	r5, r5, r6
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fe9f 	bl	800b6fa <__any_on>
 800a9bc:	4681      	mov	r9, r0
 800a9be:	b178      	cbz	r0, 800a9e0 <__gethex+0x1ac>
 800a9c0:	f04f 0901 	mov.w	r9, #1
 800a9c4:	1e6b      	subs	r3, r5, #1
 800a9c6:	1159      	asrs	r1, r3, #5
 800a9c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a9cc:	f003 021f 	and.w	r2, r3, #31
 800a9d0:	fa09 f202 	lsl.w	r2, r9, r2
 800a9d4:	420a      	tst	r2, r1
 800a9d6:	d003      	beq.n	800a9e0 <__gethex+0x1ac>
 800a9d8:	454b      	cmp	r3, r9
 800a9da:	dc36      	bgt.n	800aa4a <__gethex+0x216>
 800a9dc:	f04f 0902 	mov.w	r9, #2
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f7ff febd 	bl	800a762 <rshift>
 800a9e8:	442f      	add	r7, r5
 800a9ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9ee:	42bb      	cmp	r3, r7
 800a9f0:	da42      	bge.n	800aa78 <__gethex+0x244>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	9801      	ldr	r0, [sp, #4]
 800a9f6:	f000 fa41 	bl	800ae7c <_Bfree>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9fe:	25a3      	movs	r5, #163	@ 0xa3
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	e793      	b.n	800a92c <__gethex+0xf8>
 800aa04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa08:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa0a:	d012      	beq.n	800aa32 <__gethex+0x1fe>
 800aa0c:	2b20      	cmp	r3, #32
 800aa0e:	d104      	bne.n	800aa1a <__gethex+0x1e6>
 800aa10:	f845 bb04 	str.w	fp, [r5], #4
 800aa14:	f04f 0b00 	mov.w	fp, #0
 800aa18:	465b      	mov	r3, fp
 800aa1a:	7830      	ldrb	r0, [r6, #0]
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	f7ff fef3 	bl	800a808 <__hexdig_fun>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	f000 000f 	and.w	r0, r0, #15
 800aa28:	4098      	lsls	r0, r3
 800aa2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa2e:	3304      	adds	r3, #4
 800aa30:	e7ae      	b.n	800a990 <__gethex+0x15c>
 800aa32:	45b1      	cmp	r9, r6
 800aa34:	d8ea      	bhi.n	800aa0c <__gethex+0x1d8>
 800aa36:	2201      	movs	r2, #1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	492a      	ldr	r1, [pc, #168]	@ (800aae4 <__gethex+0x2b0>)
 800aa3c:	9303      	str	r3, [sp, #12]
 800aa3e:	f7fd fe07 	bl	8008650 <strncmp>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d1e1      	bne.n	800aa0c <__gethex+0x1d8>
 800aa48:	e7a2      	b.n	800a990 <__gethex+0x15c>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	1ea9      	subs	r1, r5, #2
 800aa4e:	f000 fe54 	bl	800b6fa <__any_on>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d0c2      	beq.n	800a9dc <__gethex+0x1a8>
 800aa56:	f04f 0903 	mov.w	r9, #3
 800aa5a:	e7c1      	b.n	800a9e0 <__gethex+0x1ac>
 800aa5c:	da09      	bge.n	800aa72 <__gethex+0x23e>
 800aa5e:	1b75      	subs	r5, r6, r5
 800aa60:	4621      	mov	r1, r4
 800aa62:	462a      	mov	r2, r5
 800aa64:	9801      	ldr	r0, [sp, #4]
 800aa66:	f000 fc19 	bl	800b29c <__lshift>
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	1b7f      	subs	r7, r7, r5
 800aa6e:	f100 0a14 	add.w	sl, r0, #20
 800aa72:	f04f 0900 	mov.w	r9, #0
 800aa76:	e7b8      	b.n	800a9ea <__gethex+0x1b6>
 800aa78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa7c:	42bd      	cmp	r5, r7
 800aa7e:	dd6f      	ble.n	800ab60 <__gethex+0x32c>
 800aa80:	1bed      	subs	r5, r5, r7
 800aa82:	42ae      	cmp	r6, r5
 800aa84:	dc34      	bgt.n	800aaf0 <__gethex+0x2bc>
 800aa86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d022      	beq.n	800aad4 <__gethex+0x2a0>
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d024      	beq.n	800aadc <__gethex+0x2a8>
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d115      	bne.n	800aac2 <__gethex+0x28e>
 800aa96:	42ae      	cmp	r6, r5
 800aa98:	d113      	bne.n	800aac2 <__gethex+0x28e>
 800aa9a:	2e01      	cmp	r6, #1
 800aa9c:	d10b      	bne.n	800aab6 <__gethex+0x282>
 800aa9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaa2:	9a02      	ldr	r2, [sp, #8]
 800aaa4:	2562      	movs	r5, #98	@ 0x62
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	f8ca 3000 	str.w	r3, [sl]
 800aab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab2:	601c      	str	r4, [r3, #0]
 800aab4:	e73a      	b.n	800a92c <__gethex+0xf8>
 800aab6:	4620      	mov	r0, r4
 800aab8:	1e71      	subs	r1, r6, #1
 800aaba:	f000 fe1e 	bl	800b6fa <__any_on>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d1ed      	bne.n	800aa9e <__gethex+0x26a>
 800aac2:	4621      	mov	r1, r4
 800aac4:	9801      	ldr	r0, [sp, #4]
 800aac6:	f000 f9d9 	bl	800ae7c <_Bfree>
 800aaca:	2300      	movs	r3, #0
 800aacc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aace:	2550      	movs	r5, #80	@ 0x50
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	e72b      	b.n	800a92c <__gethex+0xf8>
 800aad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f3      	bne.n	800aac2 <__gethex+0x28e>
 800aada:	e7e0      	b.n	800aa9e <__gethex+0x26a>
 800aadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1dd      	bne.n	800aa9e <__gethex+0x26a>
 800aae2:	e7ee      	b.n	800aac2 <__gethex+0x28e>
 800aae4:	0800c7cc 	.word	0x0800c7cc
 800aae8:	0800c830 	.word	0x0800c830
 800aaec:	0800c841 	.word	0x0800c841
 800aaf0:	1e6f      	subs	r7, r5, #1
 800aaf2:	f1b9 0f00 	cmp.w	r9, #0
 800aaf6:	d130      	bne.n	800ab5a <__gethex+0x326>
 800aaf8:	b127      	cbz	r7, 800ab04 <__gethex+0x2d0>
 800aafa:	4639      	mov	r1, r7
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fdfc 	bl	800b6fa <__any_on>
 800ab02:	4681      	mov	r9, r0
 800ab04:	2301      	movs	r3, #1
 800ab06:	4629      	mov	r1, r5
 800ab08:	1b76      	subs	r6, r6, r5
 800ab0a:	2502      	movs	r5, #2
 800ab0c:	117a      	asrs	r2, r7, #5
 800ab0e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab12:	f007 071f 	and.w	r7, r7, #31
 800ab16:	40bb      	lsls	r3, r7
 800ab18:	4213      	tst	r3, r2
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	bf18      	it	ne
 800ab1e:	f049 0902 	orrne.w	r9, r9, #2
 800ab22:	f7ff fe1e 	bl	800a762 <rshift>
 800ab26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab2a:	f1b9 0f00 	cmp.w	r9, #0
 800ab2e:	d047      	beq.n	800abc0 <__gethex+0x38c>
 800ab30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d015      	beq.n	800ab64 <__gethex+0x330>
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d017      	beq.n	800ab6c <__gethex+0x338>
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d109      	bne.n	800ab54 <__gethex+0x320>
 800ab40:	f019 0f02 	tst.w	r9, #2
 800ab44:	d006      	beq.n	800ab54 <__gethex+0x320>
 800ab46:	f8da 3000 	ldr.w	r3, [sl]
 800ab4a:	ea49 0903 	orr.w	r9, r9, r3
 800ab4e:	f019 0f01 	tst.w	r9, #1
 800ab52:	d10e      	bne.n	800ab72 <__gethex+0x33e>
 800ab54:	f045 0510 	orr.w	r5, r5, #16
 800ab58:	e032      	b.n	800abc0 <__gethex+0x38c>
 800ab5a:	f04f 0901 	mov.w	r9, #1
 800ab5e:	e7d1      	b.n	800ab04 <__gethex+0x2d0>
 800ab60:	2501      	movs	r5, #1
 800ab62:	e7e2      	b.n	800ab2a <__gethex+0x2f6>
 800ab64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab66:	f1c3 0301 	rsb	r3, r3, #1
 800ab6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f0      	beq.n	800ab54 <__gethex+0x320>
 800ab72:	f04f 0c00 	mov.w	ip, #0
 800ab76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab7a:	f104 0314 	add.w	r3, r4, #20
 800ab7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab90:	d01b      	beq.n	800abca <__gethex+0x396>
 800ab92:	3201      	adds	r2, #1
 800ab94:	6002      	str	r2, [r0, #0]
 800ab96:	2d02      	cmp	r5, #2
 800ab98:	f104 0314 	add.w	r3, r4, #20
 800ab9c:	d13c      	bne.n	800ac18 <__gethex+0x3e4>
 800ab9e:	f8d8 2000 	ldr.w	r2, [r8]
 800aba2:	3a01      	subs	r2, #1
 800aba4:	42b2      	cmp	r2, r6
 800aba6:	d109      	bne.n	800abbc <__gethex+0x388>
 800aba8:	2201      	movs	r2, #1
 800abaa:	1171      	asrs	r1, r6, #5
 800abac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abb0:	f006 061f 	and.w	r6, r6, #31
 800abb4:	fa02 f606 	lsl.w	r6, r2, r6
 800abb8:	421e      	tst	r6, r3
 800abba:	d13a      	bne.n	800ac32 <__gethex+0x3fe>
 800abbc:	f045 0520 	orr.w	r5, r5, #32
 800abc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abc2:	601c      	str	r4, [r3, #0]
 800abc4:	9b02      	ldr	r3, [sp, #8]
 800abc6:	601f      	str	r7, [r3, #0]
 800abc8:	e6b0      	b.n	800a92c <__gethex+0xf8>
 800abca:	4299      	cmp	r1, r3
 800abcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800abd0:	d8d9      	bhi.n	800ab86 <__gethex+0x352>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	459b      	cmp	fp, r3
 800abd6:	db17      	blt.n	800ac08 <__gethex+0x3d4>
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	9801      	ldr	r0, [sp, #4]
 800abdc:	3101      	adds	r1, #1
 800abde:	f000 f90d 	bl	800adfc <_Balloc>
 800abe2:	4681      	mov	r9, r0
 800abe4:	b918      	cbnz	r0, 800abee <__gethex+0x3ba>
 800abe6:	4602      	mov	r2, r0
 800abe8:	2184      	movs	r1, #132	@ 0x84
 800abea:	4b19      	ldr	r3, [pc, #100]	@ (800ac50 <__gethex+0x41c>)
 800abec:	e6c5      	b.n	800a97a <__gethex+0x146>
 800abee:	6922      	ldr	r2, [r4, #16]
 800abf0:	f104 010c 	add.w	r1, r4, #12
 800abf4:	3202      	adds	r2, #2
 800abf6:	0092      	lsls	r2, r2, #2
 800abf8:	300c      	adds	r0, #12
 800abfa:	f7fd fe92 	bl	8008922 <memcpy>
 800abfe:	4621      	mov	r1, r4
 800ac00:	9801      	ldr	r0, [sp, #4]
 800ac02:	f000 f93b 	bl	800ae7c <_Bfree>
 800ac06:	464c      	mov	r4, r9
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	6122      	str	r2, [r4, #16]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac14:	615a      	str	r2, [r3, #20]
 800ac16:	e7be      	b.n	800ab96 <__gethex+0x362>
 800ac18:	6922      	ldr	r2, [r4, #16]
 800ac1a:	455a      	cmp	r2, fp
 800ac1c:	dd0b      	ble.n	800ac36 <__gethex+0x402>
 800ac1e:	2101      	movs	r1, #1
 800ac20:	4620      	mov	r0, r4
 800ac22:	f7ff fd9e 	bl	800a762 <rshift>
 800ac26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac2a:	3701      	adds	r7, #1
 800ac2c:	42bb      	cmp	r3, r7
 800ac2e:	f6ff aee0 	blt.w	800a9f2 <__gethex+0x1be>
 800ac32:	2501      	movs	r5, #1
 800ac34:	e7c2      	b.n	800abbc <__gethex+0x388>
 800ac36:	f016 061f 	ands.w	r6, r6, #31
 800ac3a:	d0fa      	beq.n	800ac32 <__gethex+0x3fe>
 800ac3c:	4453      	add	r3, sl
 800ac3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac42:	f000 f9cd 	bl	800afe0 <__hi0bits>
 800ac46:	f1c6 0620 	rsb	r6, r6, #32
 800ac4a:	42b0      	cmp	r0, r6
 800ac4c:	dbe7      	blt.n	800ac1e <__gethex+0x3ea>
 800ac4e:	e7f0      	b.n	800ac32 <__gethex+0x3fe>
 800ac50:	0800c830 	.word	0x0800c830

0800ac54 <L_shift>:
 800ac54:	f1c2 0208 	rsb	r2, r2, #8
 800ac58:	0092      	lsls	r2, r2, #2
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	f1c2 0620 	rsb	r6, r2, #32
 800ac60:	6843      	ldr	r3, [r0, #4]
 800ac62:	6804      	ldr	r4, [r0, #0]
 800ac64:	fa03 f506 	lsl.w	r5, r3, r6
 800ac68:	432c      	orrs	r4, r5
 800ac6a:	40d3      	lsrs	r3, r2
 800ac6c:	6004      	str	r4, [r0, #0]
 800ac6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac72:	4288      	cmp	r0, r1
 800ac74:	d3f4      	bcc.n	800ac60 <L_shift+0xc>
 800ac76:	bd70      	pop	{r4, r5, r6, pc}

0800ac78 <__match>:
 800ac78:	b530      	push	{r4, r5, lr}
 800ac7a:	6803      	ldr	r3, [r0, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac82:	b914      	cbnz	r4, 800ac8a <__match+0x12>
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	2001      	movs	r0, #1
 800ac88:	bd30      	pop	{r4, r5, pc}
 800ac8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac92:	2d19      	cmp	r5, #25
 800ac94:	bf98      	it	ls
 800ac96:	3220      	addls	r2, #32
 800ac98:	42a2      	cmp	r2, r4
 800ac9a:	d0f0      	beq.n	800ac7e <__match+0x6>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	e7f3      	b.n	800ac88 <__match+0x10>

0800aca0 <__hexnan>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	2500      	movs	r5, #0
 800aca6:	680b      	ldr	r3, [r1, #0]
 800aca8:	4682      	mov	sl, r0
 800acaa:	115e      	asrs	r6, r3, #5
 800acac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acb0:	f013 031f 	ands.w	r3, r3, #31
 800acb4:	bf18      	it	ne
 800acb6:	3604      	addne	r6, #4
 800acb8:	1f37      	subs	r7, r6, #4
 800acba:	4690      	mov	r8, r2
 800acbc:	46b9      	mov	r9, r7
 800acbe:	463c      	mov	r4, r7
 800acc0:	46ab      	mov	fp, r5
 800acc2:	b087      	sub	sp, #28
 800acc4:	6801      	ldr	r1, [r0, #0]
 800acc6:	9301      	str	r3, [sp, #4]
 800acc8:	f846 5c04 	str.w	r5, [r6, #-4]
 800accc:	9502      	str	r5, [sp, #8]
 800acce:	784a      	ldrb	r2, [r1, #1]
 800acd0:	1c4b      	adds	r3, r1, #1
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	b342      	cbz	r2, 800ad28 <__hexnan+0x88>
 800acd6:	4610      	mov	r0, r2
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	9204      	str	r2, [sp, #16]
 800acdc:	f7ff fd94 	bl	800a808 <__hexdig_fun>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d151      	bne.n	800ad88 <__hexnan+0xe8>
 800ace4:	9a04      	ldr	r2, [sp, #16]
 800ace6:	9905      	ldr	r1, [sp, #20]
 800ace8:	2a20      	cmp	r2, #32
 800acea:	d818      	bhi.n	800ad1e <__hexnan+0x7e>
 800acec:	9b02      	ldr	r3, [sp, #8]
 800acee:	459b      	cmp	fp, r3
 800acf0:	dd13      	ble.n	800ad1a <__hexnan+0x7a>
 800acf2:	454c      	cmp	r4, r9
 800acf4:	d206      	bcs.n	800ad04 <__hexnan+0x64>
 800acf6:	2d07      	cmp	r5, #7
 800acf8:	dc04      	bgt.n	800ad04 <__hexnan+0x64>
 800acfa:	462a      	mov	r2, r5
 800acfc:	4649      	mov	r1, r9
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7ff ffa8 	bl	800ac54 <L_shift>
 800ad04:	4544      	cmp	r4, r8
 800ad06:	d952      	bls.n	800adae <__hexnan+0x10e>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ad0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad12:	461d      	mov	r5, r3
 800ad14:	464c      	mov	r4, r9
 800ad16:	f8cd b008 	str.w	fp, [sp, #8]
 800ad1a:	9903      	ldr	r1, [sp, #12]
 800ad1c:	e7d7      	b.n	800acce <__hexnan+0x2e>
 800ad1e:	2a29      	cmp	r2, #41	@ 0x29
 800ad20:	d157      	bne.n	800add2 <__hexnan+0x132>
 800ad22:	3102      	adds	r1, #2
 800ad24:	f8ca 1000 	str.w	r1, [sl]
 800ad28:	f1bb 0f00 	cmp.w	fp, #0
 800ad2c:	d051      	beq.n	800add2 <__hexnan+0x132>
 800ad2e:	454c      	cmp	r4, r9
 800ad30:	d206      	bcs.n	800ad40 <__hexnan+0xa0>
 800ad32:	2d07      	cmp	r5, #7
 800ad34:	dc04      	bgt.n	800ad40 <__hexnan+0xa0>
 800ad36:	462a      	mov	r2, r5
 800ad38:	4649      	mov	r1, r9
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff ff8a 	bl	800ac54 <L_shift>
 800ad40:	4544      	cmp	r4, r8
 800ad42:	d936      	bls.n	800adb2 <__hexnan+0x112>
 800ad44:	4623      	mov	r3, r4
 800ad46:	f1a8 0204 	sub.w	r2, r8, #4
 800ad4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad4e:	429f      	cmp	r7, r3
 800ad50:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad54:	d2f9      	bcs.n	800ad4a <__hexnan+0xaa>
 800ad56:	1b3b      	subs	r3, r7, r4
 800ad58:	f023 0303 	bic.w	r3, r3, #3
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	3401      	adds	r4, #1
 800ad60:	3e03      	subs	r6, #3
 800ad62:	42b4      	cmp	r4, r6
 800ad64:	bf88      	it	hi
 800ad66:	2304      	movhi	r3, #4
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4443      	add	r3, r8
 800ad6c:	f843 2b04 	str.w	r2, [r3], #4
 800ad70:	429f      	cmp	r7, r3
 800ad72:	d2fb      	bcs.n	800ad6c <__hexnan+0xcc>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	b91b      	cbnz	r3, 800ad80 <__hexnan+0xe0>
 800ad78:	4547      	cmp	r7, r8
 800ad7a:	d128      	bne.n	800adce <__hexnan+0x12e>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	2005      	movs	r0, #5
 800ad82:	b007      	add	sp, #28
 800ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad88:	3501      	adds	r5, #1
 800ad8a:	2d08      	cmp	r5, #8
 800ad8c:	f10b 0b01 	add.w	fp, fp, #1
 800ad90:	dd06      	ble.n	800ada0 <__hexnan+0x100>
 800ad92:	4544      	cmp	r4, r8
 800ad94:	d9c1      	bls.n	800ad1a <__hexnan+0x7a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2501      	movs	r5, #1
 800ad9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad9e:	3c04      	subs	r4, #4
 800ada0:	6822      	ldr	r2, [r4, #0]
 800ada2:	f000 000f 	and.w	r0, r0, #15
 800ada6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adaa:	6020      	str	r0, [r4, #0]
 800adac:	e7b5      	b.n	800ad1a <__hexnan+0x7a>
 800adae:	2508      	movs	r5, #8
 800adb0:	e7b3      	b.n	800ad1a <__hexnan+0x7a>
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0dd      	beq.n	800ad74 <__hexnan+0xd4>
 800adb8:	f04f 32ff 	mov.w	r2, #4294967295
 800adbc:	f1c3 0320 	rsb	r3, r3, #32
 800adc0:	40da      	lsrs	r2, r3
 800adc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800adc6:	4013      	ands	r3, r2
 800adc8:	f846 3c04 	str.w	r3, [r6, #-4]
 800adcc:	e7d2      	b.n	800ad74 <__hexnan+0xd4>
 800adce:	3f04      	subs	r7, #4
 800add0:	e7d0      	b.n	800ad74 <__hexnan+0xd4>
 800add2:	2004      	movs	r0, #4
 800add4:	e7d5      	b.n	800ad82 <__hexnan+0xe2>

0800add6 <__ascii_mbtowc>:
 800add6:	b082      	sub	sp, #8
 800add8:	b901      	cbnz	r1, 800addc <__ascii_mbtowc+0x6>
 800adda:	a901      	add	r1, sp, #4
 800addc:	b142      	cbz	r2, 800adf0 <__ascii_mbtowc+0x1a>
 800adde:	b14b      	cbz	r3, 800adf4 <__ascii_mbtowc+0x1e>
 800ade0:	7813      	ldrb	r3, [r2, #0]
 800ade2:	600b      	str	r3, [r1, #0]
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	1e10      	subs	r0, r2, #0
 800ade8:	bf18      	it	ne
 800adea:	2001      	movne	r0, #1
 800adec:	b002      	add	sp, #8
 800adee:	4770      	bx	lr
 800adf0:	4610      	mov	r0, r2
 800adf2:	e7fb      	b.n	800adec <__ascii_mbtowc+0x16>
 800adf4:	f06f 0001 	mvn.w	r0, #1
 800adf8:	e7f8      	b.n	800adec <__ascii_mbtowc+0x16>
	...

0800adfc <_Balloc>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	69c6      	ldr	r6, [r0, #28]
 800ae00:	4604      	mov	r4, r0
 800ae02:	460d      	mov	r5, r1
 800ae04:	b976      	cbnz	r6, 800ae24 <_Balloc+0x28>
 800ae06:	2010      	movs	r0, #16
 800ae08:	f7fd fe04 	bl	8008a14 <malloc>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	61e0      	str	r0, [r4, #28]
 800ae10:	b920      	cbnz	r0, 800ae1c <_Balloc+0x20>
 800ae12:	216b      	movs	r1, #107	@ 0x6b
 800ae14:	4b17      	ldr	r3, [pc, #92]	@ (800ae74 <_Balloc+0x78>)
 800ae16:	4818      	ldr	r0, [pc, #96]	@ (800ae78 <_Balloc+0x7c>)
 800ae18:	f7fd fd96 	bl	8008948 <__assert_func>
 800ae1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae20:	6006      	str	r6, [r0, #0]
 800ae22:	60c6      	str	r6, [r0, #12]
 800ae24:	69e6      	ldr	r6, [r4, #28]
 800ae26:	68f3      	ldr	r3, [r6, #12]
 800ae28:	b183      	cbz	r3, 800ae4c <_Balloc+0x50>
 800ae2a:	69e3      	ldr	r3, [r4, #28]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae32:	b9b8      	cbnz	r0, 800ae64 <_Balloc+0x68>
 800ae34:	2101      	movs	r1, #1
 800ae36:	fa01 f605 	lsl.w	r6, r1, r5
 800ae3a:	1d72      	adds	r2, r6, #5
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	0092      	lsls	r2, r2, #2
 800ae40:	f000 ff3e 	bl	800bcc0 <_calloc_r>
 800ae44:	b160      	cbz	r0, 800ae60 <_Balloc+0x64>
 800ae46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae4a:	e00e      	b.n	800ae6a <_Balloc+0x6e>
 800ae4c:	2221      	movs	r2, #33	@ 0x21
 800ae4e:	2104      	movs	r1, #4
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 ff35 	bl	800bcc0 <_calloc_r>
 800ae56:	69e3      	ldr	r3, [r4, #28]
 800ae58:	60f0      	str	r0, [r6, #12]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e4      	bne.n	800ae2a <_Balloc+0x2e>
 800ae60:	2000      	movs	r0, #0
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	6802      	ldr	r2, [r0, #0]
 800ae66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae70:	e7f7      	b.n	800ae62 <_Balloc+0x66>
 800ae72:	bf00      	nop
 800ae74:	0800c71f 	.word	0x0800c71f
 800ae78:	0800c8a1 	.word	0x0800c8a1

0800ae7c <_Bfree>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	69c6      	ldr	r6, [r0, #28]
 800ae80:	4605      	mov	r5, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	b976      	cbnz	r6, 800aea4 <_Bfree+0x28>
 800ae86:	2010      	movs	r0, #16
 800ae88:	f7fd fdc4 	bl	8008a14 <malloc>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	61e8      	str	r0, [r5, #28]
 800ae90:	b920      	cbnz	r0, 800ae9c <_Bfree+0x20>
 800ae92:	218f      	movs	r1, #143	@ 0x8f
 800ae94:	4b08      	ldr	r3, [pc, #32]	@ (800aeb8 <_Bfree+0x3c>)
 800ae96:	4809      	ldr	r0, [pc, #36]	@ (800aebc <_Bfree+0x40>)
 800ae98:	f7fd fd56 	bl	8008948 <__assert_func>
 800ae9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aea0:	6006      	str	r6, [r0, #0]
 800aea2:	60c6      	str	r6, [r0, #12]
 800aea4:	b13c      	cbz	r4, 800aeb6 <_Bfree+0x3a>
 800aea6:	69eb      	ldr	r3, [r5, #28]
 800aea8:	6862      	ldr	r2, [r4, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeb0:	6021      	str	r1, [r4, #0]
 800aeb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	0800c71f 	.word	0x0800c71f
 800aebc:	0800c8a1 	.word	0x0800c8a1

0800aec0 <__multadd>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	4607      	mov	r7, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	461e      	mov	r6, r3
 800aeca:	2000      	movs	r0, #0
 800aecc:	690d      	ldr	r5, [r1, #16]
 800aece:	f101 0c14 	add.w	ip, r1, #20
 800aed2:	f8dc 3000 	ldr.w	r3, [ip]
 800aed6:	3001      	adds	r0, #1
 800aed8:	b299      	uxth	r1, r3
 800aeda:	fb02 6101 	mla	r1, r2, r1, r6
 800aede:	0c1e      	lsrs	r6, r3, #16
 800aee0:	0c0b      	lsrs	r3, r1, #16
 800aee2:	fb02 3306 	mla	r3, r2, r6, r3
 800aee6:	b289      	uxth	r1, r1
 800aee8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aeec:	4285      	cmp	r5, r0
 800aeee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aef2:	f84c 1b04 	str.w	r1, [ip], #4
 800aef6:	dcec      	bgt.n	800aed2 <__multadd+0x12>
 800aef8:	b30e      	cbz	r6, 800af3e <__multadd+0x7e>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	42ab      	cmp	r3, r5
 800aefe:	dc19      	bgt.n	800af34 <__multadd+0x74>
 800af00:	6861      	ldr	r1, [r4, #4]
 800af02:	4638      	mov	r0, r7
 800af04:	3101      	adds	r1, #1
 800af06:	f7ff ff79 	bl	800adfc <_Balloc>
 800af0a:	4680      	mov	r8, r0
 800af0c:	b928      	cbnz	r0, 800af1a <__multadd+0x5a>
 800af0e:	4602      	mov	r2, r0
 800af10:	21ba      	movs	r1, #186	@ 0xba
 800af12:	4b0c      	ldr	r3, [pc, #48]	@ (800af44 <__multadd+0x84>)
 800af14:	480c      	ldr	r0, [pc, #48]	@ (800af48 <__multadd+0x88>)
 800af16:	f7fd fd17 	bl	8008948 <__assert_func>
 800af1a:	6922      	ldr	r2, [r4, #16]
 800af1c:	f104 010c 	add.w	r1, r4, #12
 800af20:	3202      	adds	r2, #2
 800af22:	0092      	lsls	r2, r2, #2
 800af24:	300c      	adds	r0, #12
 800af26:	f7fd fcfc 	bl	8008922 <memcpy>
 800af2a:	4621      	mov	r1, r4
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7ff ffa5 	bl	800ae7c <_Bfree>
 800af32:	4644      	mov	r4, r8
 800af34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af38:	3501      	adds	r5, #1
 800af3a:	615e      	str	r6, [r3, #20]
 800af3c:	6125      	str	r5, [r4, #16]
 800af3e:	4620      	mov	r0, r4
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	0800c830 	.word	0x0800c830
 800af48:	0800c8a1 	.word	0x0800c8a1

0800af4c <__s2b>:
 800af4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af50:	4615      	mov	r5, r2
 800af52:	2209      	movs	r2, #9
 800af54:	461f      	mov	r7, r3
 800af56:	3308      	adds	r3, #8
 800af58:	460c      	mov	r4, r1
 800af5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5e:	4606      	mov	r6, r0
 800af60:	2201      	movs	r2, #1
 800af62:	2100      	movs	r1, #0
 800af64:	429a      	cmp	r2, r3
 800af66:	db09      	blt.n	800af7c <__s2b+0x30>
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff ff47 	bl	800adfc <_Balloc>
 800af6e:	b940      	cbnz	r0, 800af82 <__s2b+0x36>
 800af70:	4602      	mov	r2, r0
 800af72:	21d3      	movs	r1, #211	@ 0xd3
 800af74:	4b18      	ldr	r3, [pc, #96]	@ (800afd8 <__s2b+0x8c>)
 800af76:	4819      	ldr	r0, [pc, #100]	@ (800afdc <__s2b+0x90>)
 800af78:	f7fd fce6 	bl	8008948 <__assert_func>
 800af7c:	0052      	lsls	r2, r2, #1
 800af7e:	3101      	adds	r1, #1
 800af80:	e7f0      	b.n	800af64 <__s2b+0x18>
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	2d09      	cmp	r5, #9
 800af86:	6143      	str	r3, [r0, #20]
 800af88:	f04f 0301 	mov.w	r3, #1
 800af8c:	6103      	str	r3, [r0, #16]
 800af8e:	dd16      	ble.n	800afbe <__s2b+0x72>
 800af90:	f104 0909 	add.w	r9, r4, #9
 800af94:	46c8      	mov	r8, r9
 800af96:	442c      	add	r4, r5
 800af98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af9c:	4601      	mov	r1, r0
 800af9e:	220a      	movs	r2, #10
 800afa0:	4630      	mov	r0, r6
 800afa2:	3b30      	subs	r3, #48	@ 0x30
 800afa4:	f7ff ff8c 	bl	800aec0 <__multadd>
 800afa8:	45a0      	cmp	r8, r4
 800afaa:	d1f5      	bne.n	800af98 <__s2b+0x4c>
 800afac:	f1a5 0408 	sub.w	r4, r5, #8
 800afb0:	444c      	add	r4, r9
 800afb2:	1b2d      	subs	r5, r5, r4
 800afb4:	1963      	adds	r3, r4, r5
 800afb6:	42bb      	cmp	r3, r7
 800afb8:	db04      	blt.n	800afc4 <__s2b+0x78>
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	2509      	movs	r5, #9
 800afc0:	340a      	adds	r4, #10
 800afc2:	e7f6      	b.n	800afb2 <__s2b+0x66>
 800afc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afc8:	4601      	mov	r1, r0
 800afca:	220a      	movs	r2, #10
 800afcc:	4630      	mov	r0, r6
 800afce:	3b30      	subs	r3, #48	@ 0x30
 800afd0:	f7ff ff76 	bl	800aec0 <__multadd>
 800afd4:	e7ee      	b.n	800afb4 <__s2b+0x68>
 800afd6:	bf00      	nop
 800afd8:	0800c830 	.word	0x0800c830
 800afdc:	0800c8a1 	.word	0x0800c8a1

0800afe0 <__hi0bits>:
 800afe0:	4603      	mov	r3, r0
 800afe2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afe6:	bf3a      	itte	cc
 800afe8:	0403      	lslcc	r3, r0, #16
 800afea:	2010      	movcc	r0, #16
 800afec:	2000      	movcs	r0, #0
 800afee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aff2:	bf3c      	itt	cc
 800aff4:	021b      	lslcc	r3, r3, #8
 800aff6:	3008      	addcc	r0, #8
 800aff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800affc:	bf3c      	itt	cc
 800affe:	011b      	lslcc	r3, r3, #4
 800b000:	3004      	addcc	r0, #4
 800b002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b006:	bf3c      	itt	cc
 800b008:	009b      	lslcc	r3, r3, #2
 800b00a:	3002      	addcc	r0, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	db05      	blt.n	800b01c <__hi0bits+0x3c>
 800b010:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b014:	f100 0001 	add.w	r0, r0, #1
 800b018:	bf08      	it	eq
 800b01a:	2020      	moveq	r0, #32
 800b01c:	4770      	bx	lr

0800b01e <__lo0bits>:
 800b01e:	6803      	ldr	r3, [r0, #0]
 800b020:	4602      	mov	r2, r0
 800b022:	f013 0007 	ands.w	r0, r3, #7
 800b026:	d00b      	beq.n	800b040 <__lo0bits+0x22>
 800b028:	07d9      	lsls	r1, r3, #31
 800b02a:	d421      	bmi.n	800b070 <__lo0bits+0x52>
 800b02c:	0798      	lsls	r0, r3, #30
 800b02e:	bf49      	itett	mi
 800b030:	085b      	lsrmi	r3, r3, #1
 800b032:	089b      	lsrpl	r3, r3, #2
 800b034:	2001      	movmi	r0, #1
 800b036:	6013      	strmi	r3, [r2, #0]
 800b038:	bf5c      	itt	pl
 800b03a:	2002      	movpl	r0, #2
 800b03c:	6013      	strpl	r3, [r2, #0]
 800b03e:	4770      	bx	lr
 800b040:	b299      	uxth	r1, r3
 800b042:	b909      	cbnz	r1, 800b048 <__lo0bits+0x2a>
 800b044:	2010      	movs	r0, #16
 800b046:	0c1b      	lsrs	r3, r3, #16
 800b048:	b2d9      	uxtb	r1, r3
 800b04a:	b909      	cbnz	r1, 800b050 <__lo0bits+0x32>
 800b04c:	3008      	adds	r0, #8
 800b04e:	0a1b      	lsrs	r3, r3, #8
 800b050:	0719      	lsls	r1, r3, #28
 800b052:	bf04      	itt	eq
 800b054:	091b      	lsreq	r3, r3, #4
 800b056:	3004      	addeq	r0, #4
 800b058:	0799      	lsls	r1, r3, #30
 800b05a:	bf04      	itt	eq
 800b05c:	089b      	lsreq	r3, r3, #2
 800b05e:	3002      	addeq	r0, #2
 800b060:	07d9      	lsls	r1, r3, #31
 800b062:	d403      	bmi.n	800b06c <__lo0bits+0x4e>
 800b064:	085b      	lsrs	r3, r3, #1
 800b066:	f100 0001 	add.w	r0, r0, #1
 800b06a:	d003      	beq.n	800b074 <__lo0bits+0x56>
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	4770      	bx	lr
 800b070:	2000      	movs	r0, #0
 800b072:	4770      	bx	lr
 800b074:	2020      	movs	r0, #32
 800b076:	4770      	bx	lr

0800b078 <__i2b>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	460c      	mov	r4, r1
 800b07c:	2101      	movs	r1, #1
 800b07e:	f7ff febd 	bl	800adfc <_Balloc>
 800b082:	4602      	mov	r2, r0
 800b084:	b928      	cbnz	r0, 800b092 <__i2b+0x1a>
 800b086:	f240 1145 	movw	r1, #325	@ 0x145
 800b08a:	4b04      	ldr	r3, [pc, #16]	@ (800b09c <__i2b+0x24>)
 800b08c:	4804      	ldr	r0, [pc, #16]	@ (800b0a0 <__i2b+0x28>)
 800b08e:	f7fd fc5b 	bl	8008948 <__assert_func>
 800b092:	2301      	movs	r3, #1
 800b094:	6144      	str	r4, [r0, #20]
 800b096:	6103      	str	r3, [r0, #16]
 800b098:	bd10      	pop	{r4, pc}
 800b09a:	bf00      	nop
 800b09c:	0800c830 	.word	0x0800c830
 800b0a0:	0800c8a1 	.word	0x0800c8a1

0800b0a4 <__multiply>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4617      	mov	r7, r2
 800b0aa:	690a      	ldr	r2, [r1, #16]
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4689      	mov	r9, r1
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	bfa2      	ittt	ge
 800b0b4:	463b      	movge	r3, r7
 800b0b6:	460f      	movge	r7, r1
 800b0b8:	4699      	movge	r9, r3
 800b0ba:	693d      	ldr	r5, [r7, #16]
 800b0bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	eb05 060a 	add.w	r6, r5, sl
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	bfb8      	it	lt
 800b0ce:	3101      	addlt	r1, #1
 800b0d0:	f7ff fe94 	bl	800adfc <_Balloc>
 800b0d4:	b930      	cbnz	r0, 800b0e4 <__multiply+0x40>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0dc:	4b40      	ldr	r3, [pc, #256]	@ (800b1e0 <__multiply+0x13c>)
 800b0de:	4841      	ldr	r0, [pc, #260]	@ (800b1e4 <__multiply+0x140>)
 800b0e0:	f7fd fc32 	bl	8008948 <__assert_func>
 800b0e4:	f100 0414 	add.w	r4, r0, #20
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b0f0:	4573      	cmp	r3, lr
 800b0f2:	d320      	bcc.n	800b136 <__multiply+0x92>
 800b0f4:	f107 0814 	add.w	r8, r7, #20
 800b0f8:	f109 0114 	add.w	r1, r9, #20
 800b0fc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b100:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	1beb      	subs	r3, r5, r7
 800b108:	3b15      	subs	r3, #21
 800b10a:	f023 0303 	bic.w	r3, r3, #3
 800b10e:	3304      	adds	r3, #4
 800b110:	3715      	adds	r7, #21
 800b112:	42bd      	cmp	r5, r7
 800b114:	bf38      	it	cc
 800b116:	2304      	movcc	r3, #4
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	9103      	str	r1, [sp, #12]
 800b11e:	428b      	cmp	r3, r1
 800b120:	d80c      	bhi.n	800b13c <__multiply+0x98>
 800b122:	2e00      	cmp	r6, #0
 800b124:	dd03      	ble.n	800b12e <__multiply+0x8a>
 800b126:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d055      	beq.n	800b1da <__multiply+0x136>
 800b12e:	6106      	str	r6, [r0, #16]
 800b130:	b005      	add	sp, #20
 800b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b136:	f843 2b04 	str.w	r2, [r3], #4
 800b13a:	e7d9      	b.n	800b0f0 <__multiply+0x4c>
 800b13c:	f8b1 a000 	ldrh.w	sl, [r1]
 800b140:	f1ba 0f00 	cmp.w	sl, #0
 800b144:	d01f      	beq.n	800b186 <__multiply+0xe2>
 800b146:	46c4      	mov	ip, r8
 800b148:	46a1      	mov	r9, r4
 800b14a:	2700      	movs	r7, #0
 800b14c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b150:	f8d9 3000 	ldr.w	r3, [r9]
 800b154:	fa1f fb82 	uxth.w	fp, r2
 800b158:	b29b      	uxth	r3, r3
 800b15a:	fb0a 330b 	mla	r3, sl, fp, r3
 800b15e:	443b      	add	r3, r7
 800b160:	f8d9 7000 	ldr.w	r7, [r9]
 800b164:	0c12      	lsrs	r2, r2, #16
 800b166:	0c3f      	lsrs	r7, r7, #16
 800b168:	fb0a 7202 	mla	r2, sl, r2, r7
 800b16c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b170:	b29b      	uxth	r3, r3
 800b172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b176:	4565      	cmp	r5, ip
 800b178:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b17c:	f849 3b04 	str.w	r3, [r9], #4
 800b180:	d8e4      	bhi.n	800b14c <__multiply+0xa8>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	50e7      	str	r7, [r4, r3]
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	3104      	adds	r1, #4
 800b18a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b18e:	f1b9 0f00 	cmp.w	r9, #0
 800b192:	d020      	beq.n	800b1d6 <__multiply+0x132>
 800b194:	4647      	mov	r7, r8
 800b196:	46a4      	mov	ip, r4
 800b198:	f04f 0a00 	mov.w	sl, #0
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	f8b7 b000 	ldrh.w	fp, [r7]
 800b1a2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	fb09 220b 	mla	r2, r9, fp, r2
 800b1ac:	4452      	add	r2, sl
 800b1ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1b2:	f84c 3b04 	str.w	r3, [ip], #4
 800b1b6:	f857 3b04 	ldr.w	r3, [r7], #4
 800b1ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1be:	f8bc 3000 	ldrh.w	r3, [ip]
 800b1c2:	42bd      	cmp	r5, r7
 800b1c4:	fb09 330a 	mla	r3, r9, sl, r3
 800b1c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b1cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1d0:	d8e5      	bhi.n	800b19e <__multiply+0xfa>
 800b1d2:	9a01      	ldr	r2, [sp, #4]
 800b1d4:	50a3      	str	r3, [r4, r2]
 800b1d6:	3404      	adds	r4, #4
 800b1d8:	e79f      	b.n	800b11a <__multiply+0x76>
 800b1da:	3e01      	subs	r6, #1
 800b1dc:	e7a1      	b.n	800b122 <__multiply+0x7e>
 800b1de:	bf00      	nop
 800b1e0:	0800c830 	.word	0x0800c830
 800b1e4:	0800c8a1 	.word	0x0800c8a1

0800b1e8 <__pow5mult>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	4615      	mov	r5, r2
 800b1ee:	f012 0203 	ands.w	r2, r2, #3
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	460e      	mov	r6, r1
 800b1f6:	d007      	beq.n	800b208 <__pow5mult+0x20>
 800b1f8:	4c25      	ldr	r4, [pc, #148]	@ (800b290 <__pow5mult+0xa8>)
 800b1fa:	3a01      	subs	r2, #1
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b202:	f7ff fe5d 	bl	800aec0 <__multadd>
 800b206:	4606      	mov	r6, r0
 800b208:	10ad      	asrs	r5, r5, #2
 800b20a:	d03d      	beq.n	800b288 <__pow5mult+0xa0>
 800b20c:	69fc      	ldr	r4, [r7, #28]
 800b20e:	b97c      	cbnz	r4, 800b230 <__pow5mult+0x48>
 800b210:	2010      	movs	r0, #16
 800b212:	f7fd fbff 	bl	8008a14 <malloc>
 800b216:	4602      	mov	r2, r0
 800b218:	61f8      	str	r0, [r7, #28]
 800b21a:	b928      	cbnz	r0, 800b228 <__pow5mult+0x40>
 800b21c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b220:	4b1c      	ldr	r3, [pc, #112]	@ (800b294 <__pow5mult+0xac>)
 800b222:	481d      	ldr	r0, [pc, #116]	@ (800b298 <__pow5mult+0xb0>)
 800b224:	f7fd fb90 	bl	8008948 <__assert_func>
 800b228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b22c:	6004      	str	r4, [r0, #0]
 800b22e:	60c4      	str	r4, [r0, #12]
 800b230:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b238:	b94c      	cbnz	r4, 800b24e <__pow5mult+0x66>
 800b23a:	f240 2171 	movw	r1, #625	@ 0x271
 800b23e:	4638      	mov	r0, r7
 800b240:	f7ff ff1a 	bl	800b078 <__i2b>
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	f8c8 0008 	str.w	r0, [r8, #8]
 800b24c:	6003      	str	r3, [r0, #0]
 800b24e:	f04f 0900 	mov.w	r9, #0
 800b252:	07eb      	lsls	r3, r5, #31
 800b254:	d50a      	bpl.n	800b26c <__pow5mult+0x84>
 800b256:	4631      	mov	r1, r6
 800b258:	4622      	mov	r2, r4
 800b25a:	4638      	mov	r0, r7
 800b25c:	f7ff ff22 	bl	800b0a4 <__multiply>
 800b260:	4680      	mov	r8, r0
 800b262:	4631      	mov	r1, r6
 800b264:	4638      	mov	r0, r7
 800b266:	f7ff fe09 	bl	800ae7c <_Bfree>
 800b26a:	4646      	mov	r6, r8
 800b26c:	106d      	asrs	r5, r5, #1
 800b26e:	d00b      	beq.n	800b288 <__pow5mult+0xa0>
 800b270:	6820      	ldr	r0, [r4, #0]
 800b272:	b938      	cbnz	r0, 800b284 <__pow5mult+0x9c>
 800b274:	4622      	mov	r2, r4
 800b276:	4621      	mov	r1, r4
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff ff13 	bl	800b0a4 <__multiply>
 800b27e:	6020      	str	r0, [r4, #0]
 800b280:	f8c0 9000 	str.w	r9, [r0]
 800b284:	4604      	mov	r4, r0
 800b286:	e7e4      	b.n	800b252 <__pow5mult+0x6a>
 800b288:	4630      	mov	r0, r6
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28e:	bf00      	nop
 800b290:	0800ca54 	.word	0x0800ca54
 800b294:	0800c71f 	.word	0x0800c71f
 800b298:	0800c8a1 	.word	0x0800c8a1

0800b29c <__lshift>:
 800b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	4691      	mov	r9, r2
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	6849      	ldr	r1, [r1, #4]
 800b2aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2b4:	f108 0601 	add.w	r6, r8, #1
 800b2b8:	42b3      	cmp	r3, r6
 800b2ba:	db0b      	blt.n	800b2d4 <__lshift+0x38>
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f7ff fd9d 	bl	800adfc <_Balloc>
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	b948      	cbnz	r0, 800b2da <__lshift+0x3e>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2cc:	4b27      	ldr	r3, [pc, #156]	@ (800b36c <__lshift+0xd0>)
 800b2ce:	4828      	ldr	r0, [pc, #160]	@ (800b370 <__lshift+0xd4>)
 800b2d0:	f7fd fb3a 	bl	8008948 <__assert_func>
 800b2d4:	3101      	adds	r1, #1
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__lshift+0x1c>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f100 0114 	add.w	r1, r0, #20
 800b2e0:	f100 0210 	add.w	r2, r0, #16
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	4553      	cmp	r3, sl
 800b2e8:	db33      	blt.n	800b352 <__lshift+0xb6>
 800b2ea:	6920      	ldr	r0, [r4, #16]
 800b2ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2f0:	f104 0314 	add.w	r3, r4, #20
 800b2f4:	f019 091f 	ands.w	r9, r9, #31
 800b2f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b300:	d02b      	beq.n	800b35a <__lshift+0xbe>
 800b302:	468a      	mov	sl, r1
 800b304:	2200      	movs	r2, #0
 800b306:	f1c9 0e20 	rsb	lr, r9, #32
 800b30a:	6818      	ldr	r0, [r3, #0]
 800b30c:	fa00 f009 	lsl.w	r0, r0, r9
 800b310:	4310      	orrs	r0, r2
 800b312:	f84a 0b04 	str.w	r0, [sl], #4
 800b316:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31a:	459c      	cmp	ip, r3
 800b31c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b320:	d8f3      	bhi.n	800b30a <__lshift+0x6e>
 800b322:	ebac 0304 	sub.w	r3, ip, r4
 800b326:	3b15      	subs	r3, #21
 800b328:	f023 0303 	bic.w	r3, r3, #3
 800b32c:	3304      	adds	r3, #4
 800b32e:	f104 0015 	add.w	r0, r4, #21
 800b332:	4560      	cmp	r0, ip
 800b334:	bf88      	it	hi
 800b336:	2304      	movhi	r3, #4
 800b338:	50ca      	str	r2, [r1, r3]
 800b33a:	b10a      	cbz	r2, 800b340 <__lshift+0xa4>
 800b33c:	f108 0602 	add.w	r6, r8, #2
 800b340:	3e01      	subs	r6, #1
 800b342:	4638      	mov	r0, r7
 800b344:	4621      	mov	r1, r4
 800b346:	612e      	str	r6, [r5, #16]
 800b348:	f7ff fd98 	bl	800ae7c <_Bfree>
 800b34c:	4628      	mov	r0, r5
 800b34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b352:	f842 0f04 	str.w	r0, [r2, #4]!
 800b356:	3301      	adds	r3, #1
 800b358:	e7c5      	b.n	800b2e6 <__lshift+0x4a>
 800b35a:	3904      	subs	r1, #4
 800b35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b360:	459c      	cmp	ip, r3
 800b362:	f841 2f04 	str.w	r2, [r1, #4]!
 800b366:	d8f9      	bhi.n	800b35c <__lshift+0xc0>
 800b368:	e7ea      	b.n	800b340 <__lshift+0xa4>
 800b36a:	bf00      	nop
 800b36c:	0800c830 	.word	0x0800c830
 800b370:	0800c8a1 	.word	0x0800c8a1

0800b374 <__mcmp>:
 800b374:	4603      	mov	r3, r0
 800b376:	690a      	ldr	r2, [r1, #16]
 800b378:	6900      	ldr	r0, [r0, #16]
 800b37a:	b530      	push	{r4, r5, lr}
 800b37c:	1a80      	subs	r0, r0, r2
 800b37e:	d10e      	bne.n	800b39e <__mcmp+0x2a>
 800b380:	3314      	adds	r3, #20
 800b382:	3114      	adds	r1, #20
 800b384:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b388:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b38c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b390:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b394:	4295      	cmp	r5, r2
 800b396:	d003      	beq.n	800b3a0 <__mcmp+0x2c>
 800b398:	d205      	bcs.n	800b3a6 <__mcmp+0x32>
 800b39a:	f04f 30ff 	mov.w	r0, #4294967295
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	d3f3      	bcc.n	800b38c <__mcmp+0x18>
 800b3a4:	e7fb      	b.n	800b39e <__mcmp+0x2a>
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	e7f9      	b.n	800b39e <__mcmp+0x2a>
	...

0800b3ac <__mdiff>:
 800b3ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4648      	mov	r0, r9
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	f7ff ffdb 	bl	800b374 <__mcmp>
 800b3be:	1e05      	subs	r5, r0, #0
 800b3c0:	d112      	bne.n	800b3e8 <__mdiff+0x3c>
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7ff fd19 	bl	800adfc <_Balloc>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	b928      	cbnz	r0, 800b3da <__mdiff+0x2e>
 800b3ce:	f240 2137 	movw	r1, #567	@ 0x237
 800b3d2:	4b3e      	ldr	r3, [pc, #248]	@ (800b4cc <__mdiff+0x120>)
 800b3d4:	483e      	ldr	r0, [pc, #248]	@ (800b4d0 <__mdiff+0x124>)
 800b3d6:	f7fd fab7 	bl	8008948 <__assert_func>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	b003      	add	sp, #12
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e8:	bfbc      	itt	lt
 800b3ea:	464b      	movlt	r3, r9
 800b3ec:	46a1      	movlt	r9, r4
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3f4:	bfba      	itte	lt
 800b3f6:	461c      	movlt	r4, r3
 800b3f8:	2501      	movlt	r5, #1
 800b3fa:	2500      	movge	r5, #0
 800b3fc:	f7ff fcfe 	bl	800adfc <_Balloc>
 800b400:	4602      	mov	r2, r0
 800b402:	b918      	cbnz	r0, 800b40c <__mdiff+0x60>
 800b404:	f240 2145 	movw	r1, #581	@ 0x245
 800b408:	4b30      	ldr	r3, [pc, #192]	@ (800b4cc <__mdiff+0x120>)
 800b40a:	e7e3      	b.n	800b3d4 <__mdiff+0x28>
 800b40c:	f100 0b14 	add.w	fp, r0, #20
 800b410:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b414:	f109 0310 	add.w	r3, r9, #16
 800b418:	60c5      	str	r5, [r0, #12]
 800b41a:	f04f 0c00 	mov.w	ip, #0
 800b41e:	f109 0514 	add.w	r5, r9, #20
 800b422:	46d9      	mov	r9, fp
 800b424:	6926      	ldr	r6, [r4, #16]
 800b426:	f104 0e14 	add.w	lr, r4, #20
 800b42a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b42e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9b01      	ldr	r3, [sp, #4]
 800b436:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b43a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b43e:	b281      	uxth	r1, r0
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	fa1f f38a 	uxth.w	r3, sl
 800b446:	1a5b      	subs	r3, r3, r1
 800b448:	0c00      	lsrs	r0, r0, #16
 800b44a:	4463      	add	r3, ip
 800b44c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b450:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b454:	b29b      	uxth	r3, r3
 800b456:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b45a:	4576      	cmp	r6, lr
 800b45c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b460:	f849 3b04 	str.w	r3, [r9], #4
 800b464:	d8e6      	bhi.n	800b434 <__mdiff+0x88>
 800b466:	1b33      	subs	r3, r6, r4
 800b468:	3b15      	subs	r3, #21
 800b46a:	f023 0303 	bic.w	r3, r3, #3
 800b46e:	3415      	adds	r4, #21
 800b470:	3304      	adds	r3, #4
 800b472:	42a6      	cmp	r6, r4
 800b474:	bf38      	it	cc
 800b476:	2304      	movcc	r3, #4
 800b478:	441d      	add	r5, r3
 800b47a:	445b      	add	r3, fp
 800b47c:	461e      	mov	r6, r3
 800b47e:	462c      	mov	r4, r5
 800b480:	4544      	cmp	r4, r8
 800b482:	d30e      	bcc.n	800b4a2 <__mdiff+0xf6>
 800b484:	f108 0103 	add.w	r1, r8, #3
 800b488:	1b49      	subs	r1, r1, r5
 800b48a:	f021 0103 	bic.w	r1, r1, #3
 800b48e:	3d03      	subs	r5, #3
 800b490:	45a8      	cmp	r8, r5
 800b492:	bf38      	it	cc
 800b494:	2100      	movcc	r1, #0
 800b496:	440b      	add	r3, r1
 800b498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b49c:	b199      	cbz	r1, 800b4c6 <__mdiff+0x11a>
 800b49e:	6117      	str	r7, [r2, #16]
 800b4a0:	e79e      	b.n	800b3e0 <__mdiff+0x34>
 800b4a2:	46e6      	mov	lr, ip
 800b4a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b4a8:	fa1f fc81 	uxth.w	ip, r1
 800b4ac:	44f4      	add	ip, lr
 800b4ae:	0c08      	lsrs	r0, r1, #16
 800b4b0:	4471      	add	r1, lr
 800b4b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4b6:	b289      	uxth	r1, r1
 800b4b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4c0:	f846 1b04 	str.w	r1, [r6], #4
 800b4c4:	e7dc      	b.n	800b480 <__mdiff+0xd4>
 800b4c6:	3f01      	subs	r7, #1
 800b4c8:	e7e6      	b.n	800b498 <__mdiff+0xec>
 800b4ca:	bf00      	nop
 800b4cc:	0800c830 	.word	0x0800c830
 800b4d0:	0800c8a1 	.word	0x0800c8a1

0800b4d4 <__ulp>:
 800b4d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b510 <__ulp+0x3c>)
 800b4d6:	400b      	ands	r3, r1
 800b4d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc08      	bgt.n	800b4f2 <__ulp+0x1e>
 800b4e0:	425b      	negs	r3, r3
 800b4e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4ea:	da04      	bge.n	800b4f6 <__ulp+0x22>
 800b4ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4f0:	4113      	asrs	r3, r2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	e008      	b.n	800b508 <__ulp+0x34>
 800b4f6:	f1a2 0314 	sub.w	r3, r2, #20
 800b4fa:	2b1e      	cmp	r3, #30
 800b4fc:	bfd6      	itet	le
 800b4fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b502:	2201      	movgt	r2, #1
 800b504:	40da      	lsrle	r2, r3
 800b506:	2300      	movs	r3, #0
 800b508:	4619      	mov	r1, r3
 800b50a:	4610      	mov	r0, r2
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	7ff00000 	.word	0x7ff00000

0800b514 <__b2d>:
 800b514:	6902      	ldr	r2, [r0, #16]
 800b516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b518:	f100 0614 	add.w	r6, r0, #20
 800b51c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b520:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b524:	4f1e      	ldr	r7, [pc, #120]	@ (800b5a0 <__b2d+0x8c>)
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff fd5a 	bl	800afe0 <__hi0bits>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f1c0 0020 	rsb	r0, r0, #32
 800b532:	2b0a      	cmp	r3, #10
 800b534:	f1a2 0504 	sub.w	r5, r2, #4
 800b538:	6008      	str	r0, [r1, #0]
 800b53a:	dc12      	bgt.n	800b562 <__b2d+0x4e>
 800b53c:	42ae      	cmp	r6, r5
 800b53e:	bf2c      	ite	cs
 800b540:	2200      	movcs	r2, #0
 800b542:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b546:	f1c3 0c0b 	rsb	ip, r3, #11
 800b54a:	3315      	adds	r3, #21
 800b54c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b550:	fa04 f303 	lsl.w	r3, r4, r3
 800b554:	fa22 f20c 	lsr.w	r2, r2, ip
 800b558:	ea4e 0107 	orr.w	r1, lr, r7
 800b55c:	431a      	orrs	r2, r3
 800b55e:	4610      	mov	r0, r2
 800b560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b562:	42ae      	cmp	r6, r5
 800b564:	bf36      	itet	cc
 800b566:	f1a2 0508 	subcc.w	r5, r2, #8
 800b56a:	2200      	movcs	r2, #0
 800b56c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b570:	3b0b      	subs	r3, #11
 800b572:	d012      	beq.n	800b59a <__b2d+0x86>
 800b574:	f1c3 0720 	rsb	r7, r3, #32
 800b578:	fa22 f107 	lsr.w	r1, r2, r7
 800b57c:	409c      	lsls	r4, r3
 800b57e:	430c      	orrs	r4, r1
 800b580:	42b5      	cmp	r5, r6
 800b582:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b586:	bf94      	ite	ls
 800b588:	2400      	movls	r4, #0
 800b58a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b58e:	409a      	lsls	r2, r3
 800b590:	40fc      	lsrs	r4, r7
 800b592:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b596:	4322      	orrs	r2, r4
 800b598:	e7e1      	b.n	800b55e <__b2d+0x4a>
 800b59a:	ea44 0107 	orr.w	r1, r4, r7
 800b59e:	e7de      	b.n	800b55e <__b2d+0x4a>
 800b5a0:	3ff00000 	.word	0x3ff00000

0800b5a4 <__d2b>:
 800b5a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4690      	mov	r8, r2
 800b5ac:	4699      	mov	r9, r3
 800b5ae:	9e08      	ldr	r6, [sp, #32]
 800b5b0:	f7ff fc24 	bl	800adfc <_Balloc>
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	b930      	cbnz	r0, 800b5c6 <__d2b+0x22>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5be:	4b23      	ldr	r3, [pc, #140]	@ (800b64c <__d2b+0xa8>)
 800b5c0:	4823      	ldr	r0, [pc, #140]	@ (800b650 <__d2b+0xac>)
 800b5c2:	f7fd f9c1 	bl	8008948 <__assert_func>
 800b5c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ce:	b10d      	cbz	r5, 800b5d4 <__d2b+0x30>
 800b5d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	f1b8 0300 	subs.w	r3, r8, #0
 800b5da:	d024      	beq.n	800b626 <__d2b+0x82>
 800b5dc:	4668      	mov	r0, sp
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	f7ff fd1d 	bl	800b01e <__lo0bits>
 800b5e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5e8:	b1d8      	cbz	r0, 800b622 <__d2b+0x7e>
 800b5ea:	f1c0 0320 	rsb	r3, r0, #32
 800b5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	40c2      	lsrs	r2, r0
 800b5f6:	6163      	str	r3, [r4, #20]
 800b5f8:	9201      	str	r2, [sp, #4]
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bf0c      	ite	eq
 800b600:	2201      	moveq	r2, #1
 800b602:	2202      	movne	r2, #2
 800b604:	61a3      	str	r3, [r4, #24]
 800b606:	6122      	str	r2, [r4, #16]
 800b608:	b1ad      	cbz	r5, 800b636 <__d2b+0x92>
 800b60a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b60e:	4405      	add	r5, r0
 800b610:	6035      	str	r5, [r6, #0]
 800b612:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b618:	6018      	str	r0, [r3, #0]
 800b61a:	4620      	mov	r0, r4
 800b61c:	b002      	add	sp, #8
 800b61e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b622:	6161      	str	r1, [r4, #20]
 800b624:	e7e9      	b.n	800b5fa <__d2b+0x56>
 800b626:	a801      	add	r0, sp, #4
 800b628:	f7ff fcf9 	bl	800b01e <__lo0bits>
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	6163      	str	r3, [r4, #20]
 800b632:	3020      	adds	r0, #32
 800b634:	e7e7      	b.n	800b606 <__d2b+0x62>
 800b636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b63a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b63e:	6030      	str	r0, [r6, #0]
 800b640:	6918      	ldr	r0, [r3, #16]
 800b642:	f7ff fccd 	bl	800afe0 <__hi0bits>
 800b646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b64a:	e7e4      	b.n	800b616 <__d2b+0x72>
 800b64c:	0800c830 	.word	0x0800c830
 800b650:	0800c8a1 	.word	0x0800c8a1

0800b654 <__ratio>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	b085      	sub	sp, #20
 800b65a:	e9cd 1000 	strd	r1, r0, [sp]
 800b65e:	a902      	add	r1, sp, #8
 800b660:	f7ff ff58 	bl	800b514 <__b2d>
 800b664:	468b      	mov	fp, r1
 800b666:	4606      	mov	r6, r0
 800b668:	460f      	mov	r7, r1
 800b66a:	9800      	ldr	r0, [sp, #0]
 800b66c:	a903      	add	r1, sp, #12
 800b66e:	f7ff ff51 	bl	800b514 <__b2d>
 800b672:	460d      	mov	r5, r1
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	4689      	mov	r9, r1
 800b678:	6919      	ldr	r1, [r3, #16]
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	4604      	mov	r4, r0
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	4630      	mov	r0, r6
 800b682:	1ac9      	subs	r1, r1, r3
 800b684:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bfcd      	iteet	gt
 800b692:	463a      	movgt	r2, r7
 800b694:	462a      	movle	r2, r5
 800b696:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b69a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b69e:	bfd8      	it	le
 800b6a0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	4659      	mov	r1, fp
 800b6aa:	f7f5 f849 	bl	8000740 <__aeabi_ddiv>
 800b6ae:	b005      	add	sp, #20
 800b6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6b4 <__copybits>:
 800b6b4:	3901      	subs	r1, #1
 800b6b6:	b570      	push	{r4, r5, r6, lr}
 800b6b8:	1149      	asrs	r1, r1, #5
 800b6ba:	6914      	ldr	r4, [r2, #16]
 800b6bc:	3101      	adds	r1, #1
 800b6be:	f102 0314 	add.w	r3, r2, #20
 800b6c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6ca:	1f05      	subs	r5, r0, #4
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d30c      	bcc.n	800b6ea <__copybits+0x36>
 800b6d0:	1aa3      	subs	r3, r4, r2
 800b6d2:	3b11      	subs	r3, #17
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	3211      	adds	r2, #17
 800b6da:	42a2      	cmp	r2, r4
 800b6dc:	bf88      	it	hi
 800b6de:	2300      	movhi	r3, #0
 800b6e0:	4418      	add	r0, r3
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4288      	cmp	r0, r1
 800b6e6:	d305      	bcc.n	800b6f4 <__copybits+0x40>
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6f2:	e7eb      	b.n	800b6cc <__copybits+0x18>
 800b6f4:	f840 3b04 	str.w	r3, [r0], #4
 800b6f8:	e7f4      	b.n	800b6e4 <__copybits+0x30>

0800b6fa <__any_on>:
 800b6fa:	f100 0214 	add.w	r2, r0, #20
 800b6fe:	6900      	ldr	r0, [r0, #16]
 800b700:	114b      	asrs	r3, r1, #5
 800b702:	4298      	cmp	r0, r3
 800b704:	b510      	push	{r4, lr}
 800b706:	db11      	blt.n	800b72c <__any_on+0x32>
 800b708:	dd0a      	ble.n	800b720 <__any_on+0x26>
 800b70a:	f011 011f 	ands.w	r1, r1, #31
 800b70e:	d007      	beq.n	800b720 <__any_on+0x26>
 800b710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b714:	fa24 f001 	lsr.w	r0, r4, r1
 800b718:	fa00 f101 	lsl.w	r1, r0, r1
 800b71c:	428c      	cmp	r4, r1
 800b71e:	d10b      	bne.n	800b738 <__any_on+0x3e>
 800b720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b724:	4293      	cmp	r3, r2
 800b726:	d803      	bhi.n	800b730 <__any_on+0x36>
 800b728:	2000      	movs	r0, #0
 800b72a:	bd10      	pop	{r4, pc}
 800b72c:	4603      	mov	r3, r0
 800b72e:	e7f7      	b.n	800b720 <__any_on+0x26>
 800b730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b734:	2900      	cmp	r1, #0
 800b736:	d0f5      	beq.n	800b724 <__any_on+0x2a>
 800b738:	2001      	movs	r0, #1
 800b73a:	e7f6      	b.n	800b72a <__any_on+0x30>

0800b73c <_realloc_r>:
 800b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b740:	4607      	mov	r7, r0
 800b742:	4614      	mov	r4, r2
 800b744:	460d      	mov	r5, r1
 800b746:	b921      	cbnz	r1, 800b752 <_realloc_r+0x16>
 800b748:	4611      	mov	r1, r2
 800b74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b74e:	f7fd b98b 	b.w	8008a68 <_malloc_r>
 800b752:	b92a      	cbnz	r2, 800b760 <_realloc_r+0x24>
 800b754:	f7fd f916 	bl	8008984 <_free_r>
 800b758:	4625      	mov	r5, r4
 800b75a:	4628      	mov	r0, r5
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	f000 fac2 	bl	800bce8 <_malloc_usable_size_r>
 800b764:	4284      	cmp	r4, r0
 800b766:	4606      	mov	r6, r0
 800b768:	d802      	bhi.n	800b770 <_realloc_r+0x34>
 800b76a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b76e:	d8f4      	bhi.n	800b75a <_realloc_r+0x1e>
 800b770:	4621      	mov	r1, r4
 800b772:	4638      	mov	r0, r7
 800b774:	f7fd f978 	bl	8008a68 <_malloc_r>
 800b778:	4680      	mov	r8, r0
 800b77a:	b908      	cbnz	r0, 800b780 <_realloc_r+0x44>
 800b77c:	4645      	mov	r5, r8
 800b77e:	e7ec      	b.n	800b75a <_realloc_r+0x1e>
 800b780:	42b4      	cmp	r4, r6
 800b782:	4622      	mov	r2, r4
 800b784:	4629      	mov	r1, r5
 800b786:	bf28      	it	cs
 800b788:	4632      	movcs	r2, r6
 800b78a:	f7fd f8ca 	bl	8008922 <memcpy>
 800b78e:	4629      	mov	r1, r5
 800b790:	4638      	mov	r0, r7
 800b792:	f7fd f8f7 	bl	8008984 <_free_r>
 800b796:	e7f1      	b.n	800b77c <_realloc_r+0x40>

0800b798 <_strtoul_l.isra.0>:
 800b798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b79c:	4686      	mov	lr, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	4e33      	ldr	r6, [pc, #204]	@ (800b870 <_strtoul_l.isra.0+0xd8>)
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7a8:	5d37      	ldrb	r7, [r6, r4]
 800b7aa:	f017 0708 	ands.w	r7, r7, #8
 800b7ae:	d1f8      	bne.n	800b7a2 <_strtoul_l.isra.0+0xa>
 800b7b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7b2:	d110      	bne.n	800b7d6 <_strtoul_l.isra.0+0x3e>
 800b7b4:	2701      	movs	r7, #1
 800b7b6:	782c      	ldrb	r4, [r5, #0]
 800b7b8:	1c85      	adds	r5, r0, #2
 800b7ba:	f033 0010 	bics.w	r0, r3, #16
 800b7be:	d115      	bne.n	800b7ec <_strtoul_l.isra.0+0x54>
 800b7c0:	2c30      	cmp	r4, #48	@ 0x30
 800b7c2:	d10d      	bne.n	800b7e0 <_strtoul_l.isra.0+0x48>
 800b7c4:	7828      	ldrb	r0, [r5, #0]
 800b7c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b7ca:	2858      	cmp	r0, #88	@ 0x58
 800b7cc:	d108      	bne.n	800b7e0 <_strtoul_l.isra.0+0x48>
 800b7ce:	786c      	ldrb	r4, [r5, #1]
 800b7d0:	3502      	adds	r5, #2
 800b7d2:	2310      	movs	r3, #16
 800b7d4:	e00a      	b.n	800b7ec <_strtoul_l.isra.0+0x54>
 800b7d6:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7d8:	bf04      	itt	eq
 800b7da:	782c      	ldrbeq	r4, [r5, #0]
 800b7dc:	1c85      	addeq	r5, r0, #2
 800b7de:	e7ec      	b.n	800b7ba <_strtoul_l.isra.0+0x22>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f6      	bne.n	800b7d2 <_strtoul_l.isra.0+0x3a>
 800b7e4:	2c30      	cmp	r4, #48	@ 0x30
 800b7e6:	bf14      	ite	ne
 800b7e8:	230a      	movne	r3, #10
 800b7ea:	2308      	moveq	r3, #8
 800b7ec:	f04f 38ff 	mov.w	r8, #4294967295
 800b7f0:	fbb8 f8f3 	udiv	r8, r8, r3
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	fb03 f908 	mul.w	r9, r3, r8
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	ea6f 0909 	mvn.w	r9, r9
 800b800:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b804:	f1bc 0f09 	cmp.w	ip, #9
 800b808:	d810      	bhi.n	800b82c <_strtoul_l.isra.0+0x94>
 800b80a:	4664      	mov	r4, ip
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	dd1e      	ble.n	800b84e <_strtoul_l.isra.0+0xb6>
 800b810:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b814:	d007      	beq.n	800b826 <_strtoul_l.isra.0+0x8e>
 800b816:	4580      	cmp	r8, r0
 800b818:	d316      	bcc.n	800b848 <_strtoul_l.isra.0+0xb0>
 800b81a:	d101      	bne.n	800b820 <_strtoul_l.isra.0+0x88>
 800b81c:	45a1      	cmp	r9, r4
 800b81e:	db13      	blt.n	800b848 <_strtoul_l.isra.0+0xb0>
 800b820:	2601      	movs	r6, #1
 800b822:	fb00 4003 	mla	r0, r0, r3, r4
 800b826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b82a:	e7e9      	b.n	800b800 <_strtoul_l.isra.0+0x68>
 800b82c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b830:	f1bc 0f19 	cmp.w	ip, #25
 800b834:	d801      	bhi.n	800b83a <_strtoul_l.isra.0+0xa2>
 800b836:	3c37      	subs	r4, #55	@ 0x37
 800b838:	e7e8      	b.n	800b80c <_strtoul_l.isra.0+0x74>
 800b83a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b83e:	f1bc 0f19 	cmp.w	ip, #25
 800b842:	d804      	bhi.n	800b84e <_strtoul_l.isra.0+0xb6>
 800b844:	3c57      	subs	r4, #87	@ 0x57
 800b846:	e7e1      	b.n	800b80c <_strtoul_l.isra.0+0x74>
 800b848:	f04f 36ff 	mov.w	r6, #4294967295
 800b84c:	e7eb      	b.n	800b826 <_strtoul_l.isra.0+0x8e>
 800b84e:	1c73      	adds	r3, r6, #1
 800b850:	d106      	bne.n	800b860 <_strtoul_l.isra.0+0xc8>
 800b852:	2322      	movs	r3, #34	@ 0x22
 800b854:	4630      	mov	r0, r6
 800b856:	f8ce 3000 	str.w	r3, [lr]
 800b85a:	b932      	cbnz	r2, 800b86a <_strtoul_l.isra.0+0xd2>
 800b85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b860:	b107      	cbz	r7, 800b864 <_strtoul_l.isra.0+0xcc>
 800b862:	4240      	negs	r0, r0
 800b864:	2a00      	cmp	r2, #0
 800b866:	d0f9      	beq.n	800b85c <_strtoul_l.isra.0+0xc4>
 800b868:	b106      	cbz	r6, 800b86c <_strtoul_l.isra.0+0xd4>
 800b86a:	1e69      	subs	r1, r5, #1
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	e7f5      	b.n	800b85c <_strtoul_l.isra.0+0xc4>
 800b870:	0800c951 	.word	0x0800c951

0800b874 <_strtoul_r>:
 800b874:	f7ff bf90 	b.w	800b798 <_strtoul_l.isra.0>

0800b878 <__ascii_wctomb>:
 800b878:	4603      	mov	r3, r0
 800b87a:	4608      	mov	r0, r1
 800b87c:	b141      	cbz	r1, 800b890 <__ascii_wctomb+0x18>
 800b87e:	2aff      	cmp	r2, #255	@ 0xff
 800b880:	d904      	bls.n	800b88c <__ascii_wctomb+0x14>
 800b882:	228a      	movs	r2, #138	@ 0x8a
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	4770      	bx	lr
 800b88c:	2001      	movs	r0, #1
 800b88e:	700a      	strb	r2, [r1, #0]
 800b890:	4770      	bx	lr

0800b892 <__sfputc_r>:
 800b892:	6893      	ldr	r3, [r2, #8]
 800b894:	b410      	push	{r4}
 800b896:	3b01      	subs	r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	6093      	str	r3, [r2, #8]
 800b89c:	da07      	bge.n	800b8ae <__sfputc_r+0x1c>
 800b89e:	6994      	ldr	r4, [r2, #24]
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	db01      	blt.n	800b8a8 <__sfputc_r+0x16>
 800b8a4:	290a      	cmp	r1, #10
 800b8a6:	d102      	bne.n	800b8ae <__sfputc_r+0x1c>
 800b8a8:	bc10      	pop	{r4}
 800b8aa:	f000 b931 	b.w	800bb10 <__swbuf_r>
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	1c58      	adds	r0, r3, #1
 800b8b2:	6010      	str	r0, [r2, #0]
 800b8b4:	7019      	strb	r1, [r3, #0]
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	bc10      	pop	{r4}
 800b8ba:	4770      	bx	lr

0800b8bc <__sfputs_r>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	4614      	mov	r4, r2
 800b8c4:	18d5      	adds	r5, r2, r3
 800b8c6:	42ac      	cmp	r4, r5
 800b8c8:	d101      	bne.n	800b8ce <__sfputs_r+0x12>
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	e007      	b.n	800b8de <__sfputs_r+0x22>
 800b8ce:	463a      	mov	r2, r7
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d6:	f7ff ffdc 	bl	800b892 <__sfputc_r>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d1f3      	bne.n	800b8c6 <__sfputs_r+0xa>
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8e0 <_vfiprintf_r>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	4698      	mov	r8, r3
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	b09d      	sub	sp, #116	@ 0x74
 800b8ee:	b118      	cbz	r0, 800b8f8 <_vfiprintf_r+0x18>
 800b8f0:	6a03      	ldr	r3, [r0, #32]
 800b8f2:	b90b      	cbnz	r3, 800b8f8 <_vfiprintf_r+0x18>
 800b8f4:	f7fc fdce 	bl	8008494 <__sinit>
 800b8f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8fa:	07d9      	lsls	r1, r3, #31
 800b8fc:	d405      	bmi.n	800b90a <_vfiprintf_r+0x2a>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	059a      	lsls	r2, r3, #22
 800b902:	d402      	bmi.n	800b90a <_vfiprintf_r+0x2a>
 800b904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b906:	f7fd f80a 	bl	800891e <__retarget_lock_acquire_recursive>
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	071b      	lsls	r3, r3, #28
 800b90e:	d501      	bpl.n	800b914 <_vfiprintf_r+0x34>
 800b910:	692b      	ldr	r3, [r5, #16]
 800b912:	b99b      	cbnz	r3, 800b93c <_vfiprintf_r+0x5c>
 800b914:	4629      	mov	r1, r5
 800b916:	4630      	mov	r0, r6
 800b918:	f000 f938 	bl	800bb8c <__swsetup_r>
 800b91c:	b170      	cbz	r0, 800b93c <_vfiprintf_r+0x5c>
 800b91e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b920:	07dc      	lsls	r4, r3, #31
 800b922:	d504      	bpl.n	800b92e <_vfiprintf_r+0x4e>
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	b01d      	add	sp, #116	@ 0x74
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	0598      	lsls	r0, r3, #22
 800b932:	d4f7      	bmi.n	800b924 <_vfiprintf_r+0x44>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7fc fff3 	bl	8008920 <__retarget_lock_release_recursive>
 800b93a:	e7f3      	b.n	800b924 <_vfiprintf_r+0x44>
 800b93c:	2300      	movs	r3, #0
 800b93e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b940:	2320      	movs	r3, #32
 800b942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b946:	2330      	movs	r3, #48	@ 0x30
 800b948:	f04f 0901 	mov.w	r9, #1
 800b94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b950:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bafc <_vfiprintf_r+0x21c>
 800b954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b958:	4623      	mov	r3, r4
 800b95a:	469a      	mov	sl, r3
 800b95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b960:	b10a      	cbz	r2, 800b966 <_vfiprintf_r+0x86>
 800b962:	2a25      	cmp	r2, #37	@ 0x25
 800b964:	d1f9      	bne.n	800b95a <_vfiprintf_r+0x7a>
 800b966:	ebba 0b04 	subs.w	fp, sl, r4
 800b96a:	d00b      	beq.n	800b984 <_vfiprintf_r+0xa4>
 800b96c:	465b      	mov	r3, fp
 800b96e:	4622      	mov	r2, r4
 800b970:	4629      	mov	r1, r5
 800b972:	4630      	mov	r0, r6
 800b974:	f7ff ffa2 	bl	800b8bc <__sfputs_r>
 800b978:	3001      	adds	r0, #1
 800b97a:	f000 80a7 	beq.w	800bacc <_vfiprintf_r+0x1ec>
 800b97e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b980:	445a      	add	r2, fp
 800b982:	9209      	str	r2, [sp, #36]	@ 0x24
 800b984:	f89a 3000 	ldrb.w	r3, [sl]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 809f 	beq.w	800bacc <_vfiprintf_r+0x1ec>
 800b98e:	2300      	movs	r3, #0
 800b990:	f04f 32ff 	mov.w	r2, #4294967295
 800b994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b998:	f10a 0a01 	add.w	sl, sl, #1
 800b99c:	9304      	str	r3, [sp, #16]
 800b99e:	9307      	str	r3, [sp, #28]
 800b9a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9a6:	4654      	mov	r4, sl
 800b9a8:	2205      	movs	r2, #5
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	4853      	ldr	r0, [pc, #332]	@ (800bafc <_vfiprintf_r+0x21c>)
 800b9b0:	f7fe febc 	bl	800a72c <memchr>
 800b9b4:	9a04      	ldr	r2, [sp, #16]
 800b9b6:	b9d8      	cbnz	r0, 800b9f0 <_vfiprintf_r+0x110>
 800b9b8:	06d1      	lsls	r1, r2, #27
 800b9ba:	bf44      	itt	mi
 800b9bc:	2320      	movmi	r3, #32
 800b9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c2:	0713      	lsls	r3, r2, #28
 800b9c4:	bf44      	itt	mi
 800b9c6:	232b      	movmi	r3, #43	@ 0x2b
 800b9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d2:	d015      	beq.n	800ba00 <_vfiprintf_r+0x120>
 800b9d4:	4654      	mov	r4, sl
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	f04f 0c0a 	mov.w	ip, #10
 800b9dc:	9a07      	ldr	r2, [sp, #28]
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e4:	3b30      	subs	r3, #48	@ 0x30
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	d94b      	bls.n	800ba82 <_vfiprintf_r+0x1a2>
 800b9ea:	b1b0      	cbz	r0, 800ba1a <_vfiprintf_r+0x13a>
 800b9ec:	9207      	str	r2, [sp, #28]
 800b9ee:	e014      	b.n	800ba1a <_vfiprintf_r+0x13a>
 800b9f0:	eba0 0308 	sub.w	r3, r0, r8
 800b9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	46a2      	mov	sl, r4
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	e7d2      	b.n	800b9a6 <_vfiprintf_r+0xc6>
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	1d19      	adds	r1, r3, #4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	9103      	str	r1, [sp, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bfbb      	ittet	lt
 800ba0c:	425b      	neglt	r3, r3
 800ba0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba12:	9307      	strge	r3, [sp, #28]
 800ba14:	9307      	strlt	r3, [sp, #28]
 800ba16:	bfb8      	it	lt
 800ba18:	9204      	strlt	r2, [sp, #16]
 800ba1a:	7823      	ldrb	r3, [r4, #0]
 800ba1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba1e:	d10a      	bne.n	800ba36 <_vfiprintf_r+0x156>
 800ba20:	7863      	ldrb	r3, [r4, #1]
 800ba22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba24:	d132      	bne.n	800ba8c <_vfiprintf_r+0x1ac>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	3402      	adds	r4, #2
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9203      	str	r2, [sp, #12]
 800ba30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bb00 <_vfiprintf_r+0x220>
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	7821      	ldrb	r1, [r4, #0]
 800ba40:	f7fe fe74 	bl	800a72c <memchr>
 800ba44:	b138      	cbz	r0, 800ba56 <_vfiprintf_r+0x176>
 800ba46:	2240      	movs	r2, #64	@ 0x40
 800ba48:	9b04      	ldr	r3, [sp, #16]
 800ba4a:	eba0 000a 	sub.w	r0, r0, sl
 800ba4e:	4082      	lsls	r2, r0
 800ba50:	4313      	orrs	r3, r2
 800ba52:	3401      	adds	r4, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5a:	2206      	movs	r2, #6
 800ba5c:	4829      	ldr	r0, [pc, #164]	@ (800bb04 <_vfiprintf_r+0x224>)
 800ba5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba62:	f7fe fe63 	bl	800a72c <memchr>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d03f      	beq.n	800baea <_vfiprintf_r+0x20a>
 800ba6a:	4b27      	ldr	r3, [pc, #156]	@ (800bb08 <_vfiprintf_r+0x228>)
 800ba6c:	bb1b      	cbnz	r3, 800bab6 <_vfiprintf_r+0x1d6>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	3307      	adds	r3, #7
 800ba72:	f023 0307 	bic.w	r3, r3, #7
 800ba76:	3308      	adds	r3, #8
 800ba78:	9303      	str	r3, [sp, #12]
 800ba7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7c:	443b      	add	r3, r7
 800ba7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba80:	e76a      	b.n	800b958 <_vfiprintf_r+0x78>
 800ba82:	460c      	mov	r4, r1
 800ba84:	2001      	movs	r0, #1
 800ba86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba8a:	e7a8      	b.n	800b9de <_vfiprintf_r+0xfe>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f04f 0c0a 	mov.w	ip, #10
 800ba92:	4619      	mov	r1, r3
 800ba94:	3401      	adds	r4, #1
 800ba96:	9305      	str	r3, [sp, #20]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9e:	3a30      	subs	r2, #48	@ 0x30
 800baa0:	2a09      	cmp	r2, #9
 800baa2:	d903      	bls.n	800baac <_vfiprintf_r+0x1cc>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0c6      	beq.n	800ba36 <_vfiprintf_r+0x156>
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	e7c4      	b.n	800ba36 <_vfiprintf_r+0x156>
 800baac:	4604      	mov	r4, r0
 800baae:	2301      	movs	r3, #1
 800bab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab4:	e7f0      	b.n	800ba98 <_vfiprintf_r+0x1b8>
 800bab6:	ab03      	add	r3, sp, #12
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	462a      	mov	r2, r5
 800babc:	4630      	mov	r0, r6
 800babe:	4b13      	ldr	r3, [pc, #76]	@ (800bb0c <_vfiprintf_r+0x22c>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	f3af 8000 	nop.w
 800bac6:	4607      	mov	r7, r0
 800bac8:	1c78      	adds	r0, r7, #1
 800baca:	d1d6      	bne.n	800ba7a <_vfiprintf_r+0x19a>
 800bacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bace:	07d9      	lsls	r1, r3, #31
 800bad0:	d405      	bmi.n	800bade <_vfiprintf_r+0x1fe>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	059a      	lsls	r2, r3, #22
 800bad6:	d402      	bmi.n	800bade <_vfiprintf_r+0x1fe>
 800bad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bada:	f7fc ff21 	bl	8008920 <__retarget_lock_release_recursive>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	065b      	lsls	r3, r3, #25
 800bae2:	f53f af1f 	bmi.w	800b924 <_vfiprintf_r+0x44>
 800bae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bae8:	e71e      	b.n	800b928 <_vfiprintf_r+0x48>
 800baea:	ab03      	add	r3, sp, #12
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	462a      	mov	r2, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	4b06      	ldr	r3, [pc, #24]	@ (800bb0c <_vfiprintf_r+0x22c>)
 800baf4:	a904      	add	r1, sp, #16
 800baf6:	f7fe fa59 	bl	8009fac <_printf_i>
 800bafa:	e7e4      	b.n	800bac6 <_vfiprintf_r+0x1e6>
 800bafc:	0800c7da 	.word	0x0800c7da
 800bb00:	0800c7e0 	.word	0x0800c7e0
 800bb04:	0800c7e4 	.word	0x0800c7e4
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	0800b8bd 	.word	0x0800b8bd

0800bb10 <__swbuf_r>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	460e      	mov	r6, r1
 800bb14:	4614      	mov	r4, r2
 800bb16:	4605      	mov	r5, r0
 800bb18:	b118      	cbz	r0, 800bb22 <__swbuf_r+0x12>
 800bb1a:	6a03      	ldr	r3, [r0, #32]
 800bb1c:	b90b      	cbnz	r3, 800bb22 <__swbuf_r+0x12>
 800bb1e:	f7fc fcb9 	bl	8008494 <__sinit>
 800bb22:	69a3      	ldr	r3, [r4, #24]
 800bb24:	60a3      	str	r3, [r4, #8]
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	071a      	lsls	r2, r3, #28
 800bb2a:	d501      	bpl.n	800bb30 <__swbuf_r+0x20>
 800bb2c:	6923      	ldr	r3, [r4, #16]
 800bb2e:	b943      	cbnz	r3, 800bb42 <__swbuf_r+0x32>
 800bb30:	4621      	mov	r1, r4
 800bb32:	4628      	mov	r0, r5
 800bb34:	f000 f82a 	bl	800bb8c <__swsetup_r>
 800bb38:	b118      	cbz	r0, 800bb42 <__swbuf_r+0x32>
 800bb3a:	f04f 37ff 	mov.w	r7, #4294967295
 800bb3e:	4638      	mov	r0, r7
 800bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	b2f6      	uxtb	r6, r6
 800bb48:	1a98      	subs	r0, r3, r2
 800bb4a:	6963      	ldr	r3, [r4, #20]
 800bb4c:	4637      	mov	r7, r6
 800bb4e:	4283      	cmp	r3, r0
 800bb50:	dc05      	bgt.n	800bb5e <__swbuf_r+0x4e>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7fe fd13 	bl	800a580 <_fflush_r>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1ed      	bne.n	800bb3a <__swbuf_r+0x2a>
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	60a3      	str	r3, [r4, #8]
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6022      	str	r2, [r4, #0]
 800bb6a:	701e      	strb	r6, [r3, #0]
 800bb6c:	6962      	ldr	r2, [r4, #20]
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d004      	beq.n	800bb7e <__swbuf_r+0x6e>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	07db      	lsls	r3, r3, #31
 800bb78:	d5e1      	bpl.n	800bb3e <__swbuf_r+0x2e>
 800bb7a:	2e0a      	cmp	r6, #10
 800bb7c:	d1df      	bne.n	800bb3e <__swbuf_r+0x2e>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f7fe fcfd 	bl	800a580 <_fflush_r>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d0d9      	beq.n	800bb3e <__swbuf_r+0x2e>
 800bb8a:	e7d6      	b.n	800bb3a <__swbuf_r+0x2a>

0800bb8c <__swsetup_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4b29      	ldr	r3, [pc, #164]	@ (800bc34 <__swsetup_r+0xa8>)
 800bb90:	4605      	mov	r5, r0
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	460c      	mov	r4, r1
 800bb96:	b118      	cbz	r0, 800bba0 <__swsetup_r+0x14>
 800bb98:	6a03      	ldr	r3, [r0, #32]
 800bb9a:	b90b      	cbnz	r3, 800bba0 <__swsetup_r+0x14>
 800bb9c:	f7fc fc7a 	bl	8008494 <__sinit>
 800bba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba4:	0719      	lsls	r1, r3, #28
 800bba6:	d422      	bmi.n	800bbee <__swsetup_r+0x62>
 800bba8:	06da      	lsls	r2, r3, #27
 800bbaa:	d407      	bmi.n	800bbbc <__swsetup_r+0x30>
 800bbac:	2209      	movs	r2, #9
 800bbae:	602a      	str	r2, [r5, #0]
 800bbb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	e033      	b.n	800bc24 <__swsetup_r+0x98>
 800bbbc:	0758      	lsls	r0, r3, #29
 800bbbe:	d512      	bpl.n	800bbe6 <__swsetup_r+0x5a>
 800bbc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbc2:	b141      	cbz	r1, 800bbd6 <__swsetup_r+0x4a>
 800bbc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	d002      	beq.n	800bbd2 <__swsetup_r+0x46>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f7fc fed9 	bl	8008984 <_free_r>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbdc:	81a3      	strh	r3, [r4, #12]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6063      	str	r3, [r4, #4]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f043 0308 	orr.w	r3, r3, #8
 800bbec:	81a3      	strh	r3, [r4, #12]
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	b94b      	cbnz	r3, 800bc06 <__swsetup_r+0x7a>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbfc:	d003      	beq.n	800bc06 <__swsetup_r+0x7a>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 f89e 	bl	800bd42 <__smakebuf_r>
 800bc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc0a:	f013 0201 	ands.w	r2, r3, #1
 800bc0e:	d00a      	beq.n	800bc26 <__swsetup_r+0x9a>
 800bc10:	2200      	movs	r2, #0
 800bc12:	60a2      	str	r2, [r4, #8]
 800bc14:	6962      	ldr	r2, [r4, #20]
 800bc16:	4252      	negs	r2, r2
 800bc18:	61a2      	str	r2, [r4, #24]
 800bc1a:	6922      	ldr	r2, [r4, #16]
 800bc1c:	b942      	cbnz	r2, 800bc30 <__swsetup_r+0xa4>
 800bc1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc22:	d1c5      	bne.n	800bbb0 <__swsetup_r+0x24>
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
 800bc26:	0799      	lsls	r1, r3, #30
 800bc28:	bf58      	it	pl
 800bc2a:	6962      	ldrpl	r2, [r4, #20]
 800bc2c:	60a2      	str	r2, [r4, #8]
 800bc2e:	e7f4      	b.n	800bc1a <__swsetup_r+0x8e>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7f7      	b.n	800bc24 <__swsetup_r+0x98>
 800bc34:	2000001c 	.word	0x2000001c

0800bc38 <_raise_r>:
 800bc38:	291f      	cmp	r1, #31
 800bc3a:	b538      	push	{r3, r4, r5, lr}
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	d904      	bls.n	800bc4c <_raise_r+0x14>
 800bc42:	2316      	movs	r3, #22
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc4e:	b112      	cbz	r2, 800bc56 <_raise_r+0x1e>
 800bc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc54:	b94b      	cbnz	r3, 800bc6a <_raise_r+0x32>
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f830 	bl	800bcbc <_getpid_r>
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4628      	mov	r0, r5
 800bc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc66:	f000 b817 	b.w	800bc98 <_kill_r>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d00a      	beq.n	800bc84 <_raise_r+0x4c>
 800bc6e:	1c59      	adds	r1, r3, #1
 800bc70:	d103      	bne.n	800bc7a <_raise_r+0x42>
 800bc72:	2316      	movs	r3, #22
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	2001      	movs	r0, #1
 800bc78:	e7e7      	b.n	800bc4a <_raise_r+0x12>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc82:	4798      	blx	r3
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7e0      	b.n	800bc4a <_raise_r+0x12>

0800bc88 <raise>:
 800bc88:	4b02      	ldr	r3, [pc, #8]	@ (800bc94 <raise+0xc>)
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	f7ff bfd3 	b.w	800bc38 <_raise_r>
 800bc92:	bf00      	nop
 800bc94:	2000001c 	.word	0x2000001c

0800bc98 <_kill_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4d06      	ldr	r5, [pc, #24]	@ (800bcb8 <_kill_r+0x20>)
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	4611      	mov	r1, r2
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	f7f6 fb1a 	bl	80022de <_kill>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d102      	bne.n	800bcb4 <_kill_r+0x1c>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b103      	cbz	r3, 800bcb4 <_kill_r+0x1c>
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20002100 	.word	0x20002100

0800bcbc <_getpid_r>:
 800bcbc:	f7f6 bb08 	b.w	80022d0 <_getpid>

0800bcc0 <_calloc_r>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	fba1 5402 	umull	r5, r4, r1, r2
 800bcc6:	b934      	cbnz	r4, 800bcd6 <_calloc_r+0x16>
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7fc fecd 	bl	8008a68 <_malloc_r>
 800bcce:	4606      	mov	r6, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <_calloc_r+0x1e>
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	220c      	movs	r2, #12
 800bcd8:	2600      	movs	r6, #0
 800bcda:	6002      	str	r2, [r0, #0]
 800bcdc:	e7f9      	b.n	800bcd2 <_calloc_r+0x12>
 800bcde:	462a      	mov	r2, r5
 800bce0:	4621      	mov	r1, r4
 800bce2:	f7fc fca0 	bl	8008626 <memset>
 800bce6:	e7f4      	b.n	800bcd2 <_calloc_r+0x12>

0800bce8 <_malloc_usable_size_r>:
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f18      	subs	r0, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfbc      	itt	lt
 800bcf2:	580b      	ldrlt	r3, [r1, r0]
 800bcf4:	18c0      	addlt	r0, r0, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <__swhatbuf_r>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	4615      	mov	r5, r2
 800bd02:	2900      	cmp	r1, #0
 800bd04:	461e      	mov	r6, r3
 800bd06:	b096      	sub	sp, #88	@ 0x58
 800bd08:	da0c      	bge.n	800bd24 <__swhatbuf_r+0x2c>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd12:	bf14      	ite	ne
 800bd14:	2340      	movne	r3, #64	@ 0x40
 800bd16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	6031      	str	r1, [r6, #0]
 800bd1e:	602b      	str	r3, [r5, #0]
 800bd20:	b016      	add	sp, #88	@ 0x58
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	466a      	mov	r2, sp
 800bd26:	f000 f849 	bl	800bdbc <_fstat_r>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	dbed      	blt.n	800bd0a <__swhatbuf_r+0x12>
 800bd2e:	9901      	ldr	r1, [sp, #4]
 800bd30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd38:	4259      	negs	r1, r3
 800bd3a:	4159      	adcs	r1, r3
 800bd3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd40:	e7eb      	b.n	800bd1a <__swhatbuf_r+0x22>

0800bd42 <__smakebuf_r>:
 800bd42:	898b      	ldrh	r3, [r1, #12]
 800bd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd46:	079d      	lsls	r5, r3, #30
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	d507      	bpl.n	800bd5e <__smakebuf_r+0x1c>
 800bd4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	6123      	str	r3, [r4, #16]
 800bd56:	2301      	movs	r3, #1
 800bd58:	6163      	str	r3, [r4, #20]
 800bd5a:	b003      	add	sp, #12
 800bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5e:	466a      	mov	r2, sp
 800bd60:	ab01      	add	r3, sp, #4
 800bd62:	f7ff ffc9 	bl	800bcf8 <__swhatbuf_r>
 800bd66:	9f00      	ldr	r7, [sp, #0]
 800bd68:	4605      	mov	r5, r0
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7fc fe7b 	bl	8008a68 <_malloc_r>
 800bd72:	b948      	cbnz	r0, 800bd88 <__smakebuf_r+0x46>
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	059a      	lsls	r2, r3, #22
 800bd7a:	d4ee      	bmi.n	800bd5a <__smakebuf_r+0x18>
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	f043 0302 	orr.w	r3, r3, #2
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	e7e2      	b.n	800bd4e <__smakebuf_r+0xc>
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd92:	81a3      	strh	r3, [r4, #12]
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	6020      	str	r0, [r4, #0]
 800bd98:	b15b      	cbz	r3, 800bdb2 <__smakebuf_r+0x70>
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda0:	f000 f81e 	bl	800bde0 <_isatty_r>
 800bda4:	b128      	cbz	r0, 800bdb2 <__smakebuf_r+0x70>
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	f043 0301 	orr.w	r3, r3, #1
 800bdb0:	81a3      	strh	r3, [r4, #12]
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	431d      	orrs	r5, r3
 800bdb6:	81a5      	strh	r5, [r4, #12]
 800bdb8:	e7cf      	b.n	800bd5a <__smakebuf_r+0x18>
	...

0800bdbc <_fstat_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4d06      	ldr	r5, [pc, #24]	@ (800bddc <_fstat_r+0x20>)
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	f7f6 fae7 	bl	800239c <_fstat>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d102      	bne.n	800bdd8 <_fstat_r+0x1c>
 800bdd2:	682b      	ldr	r3, [r5, #0]
 800bdd4:	b103      	cbz	r3, 800bdd8 <_fstat_r+0x1c>
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	bd38      	pop	{r3, r4, r5, pc}
 800bdda:	bf00      	nop
 800bddc:	20002100 	.word	0x20002100

0800bde0 <_isatty_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	2300      	movs	r3, #0
 800bde4:	4d05      	ldr	r5, [pc, #20]	@ (800bdfc <_isatty_r+0x1c>)
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	f7f6 fae5 	bl	80023ba <_isatty>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_isatty_r+0x1a>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_isatty_r+0x1a>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	20002100 	.word	0x20002100

0800be00 <_init>:
 800be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be02:	bf00      	nop
 800be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be06:	bc08      	pop	{r3}
 800be08:	469e      	mov	lr, r3
 800be0a:	4770      	bx	lr

0800be0c <_fini>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr
