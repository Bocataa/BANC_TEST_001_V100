
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08007638  08007638  00008638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007b48  08007b48  00008b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b54  08007b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007b58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e98  20000060  08007bb8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef8  08007bb8  00009ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c700  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fae  00000000  00000000  00025789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00029738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138d  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b85b  00000000  00000000  0002c38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f670  00000000  00000000  00047be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf0a  00000000  00000000  00067258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e88  00000000  00000000  001041a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007620 	.word	0x08007620

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007620 	.word	0x08007620

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__gesf2>:
 8000160:	f04f 3cff 	mov.w	ip, #4294967295
 8000164:	e006      	b.n	8000174 <__cmpsf2+0x4>
 8000166:	bf00      	nop

08000168 <__lesf2>:
 8000168:	f04f 0c01 	mov.w	ip, #1
 800016c:	e002      	b.n	8000174 <__cmpsf2+0x4>
 800016e:	bf00      	nop

08000170 <__cmpsf2>:
 8000170:	f04f 0c01 	mov.w	ip, #1
 8000174:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000178:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800017c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000180:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000184:	bf18      	it	ne
 8000186:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800018a:	d011      	beq.n	80001b0 <__cmpsf2+0x40>
 800018c:	b001      	add	sp, #4
 800018e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000192:	bf18      	it	ne
 8000194:	ea90 0f01 	teqne	r0, r1
 8000198:	bf58      	it	pl
 800019a:	ebb2 0003 	subspl.w	r0, r2, r3
 800019e:	bf88      	it	hi
 80001a0:	17c8      	asrhi	r0, r1, #31
 80001a2:	bf38      	it	cc
 80001a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80001a8:	bf18      	it	ne
 80001aa:	f040 0001 	orrne.w	r0, r0, #1
 80001ae:	4770      	bx	lr
 80001b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001b4:	d102      	bne.n	80001bc <__cmpsf2+0x4c>
 80001b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001ba:	d105      	bne.n	80001c8 <__cmpsf2+0x58>
 80001bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001c0:	d1e4      	bne.n	800018c <__cmpsf2+0x1c>
 80001c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001c6:	d0e1      	beq.n	800018c <__cmpsf2+0x1c>
 80001c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop

080001d0 <__aeabi_cfrcmple>:
 80001d0:	4684      	mov	ip, r0
 80001d2:	4608      	mov	r0, r1
 80001d4:	4661      	mov	r1, ip
 80001d6:	e7ff      	b.n	80001d8 <__aeabi_cfcmpeq>

080001d8 <__aeabi_cfcmpeq>:
 80001d8:	b50f      	push	{r0, r1, r2, r3, lr}
 80001da:	f7ff ffc9 	bl	8000170 <__cmpsf2>
 80001de:	2800      	cmp	r0, #0
 80001e0:	bf48      	it	mi
 80001e2:	f110 0f00 	cmnmi.w	r0, #0
 80001e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001e8 <__aeabi_fcmpeq>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff fff4 	bl	80001d8 <__aeabi_cfcmpeq>
 80001f0:	bf0c      	ite	eq
 80001f2:	2001      	moveq	r0, #1
 80001f4:	2000      	movne	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmplt>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffea 	bl	80001d8 <__aeabi_cfcmpeq>
 8000204:	bf34      	ite	cc
 8000206:	2001      	movcc	r0, #1
 8000208:	2000      	movcs	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmple>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffe0 	bl	80001d8 <__aeabi_cfcmpeq>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpge>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffd2 	bl	80001d0 <__aeabi_cfrcmple>
 800022c:	bf94      	ite	ls
 800022e:	2001      	movls	r0, #1
 8000230:	2000      	movhi	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <__aeabi_fcmpgt>:
 8000238:	f84d ed08 	str.w	lr, [sp, #-8]!
 800023c:	f7ff ffc8 	bl	80001d0 <__aeabi_cfrcmple>
 8000240:	bf34      	ite	cc
 8000242:	2001      	movcc	r0, #1
 8000244:	2000      	movcs	r0, #0
 8000246:	f85d fb08 	ldr.w	pc, [sp], #8
 800024a:	bf00      	nop

0800024c <StateMachineTask>:


uint8_t state = 0;
char* per_value = 0;

void StateMachineTask(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b0b4      	sub	sp, #208	@ 0xd0
 8000250:	af00      	add	r7, sp, #0
	static uint8_t action_done = 0;


	    //--------------------------- TRANSITIONS
	    switch (state) {
 8000252:	4bb3      	ldr	r3, [pc, #716]	@ (8000520 <StateMachineTask+0x2d4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b08      	cmp	r3, #8
 8000258:	f200 8147 	bhi.w	80004ea <StateMachineTask+0x29e>
 800025c:	a201      	add	r2, pc, #4	@ (adr r2, 8000264 <StateMachineTask+0x18>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000289 	.word	0x08000289
 8000268:	080002d9 	.word	0x080002d9
 800026c:	08000289 	.word	0x08000289
 8000270:	08000357 	.word	0x08000357
 8000274:	08000425 	.word	0x08000425
 8000278:	08000289 	.word	0x08000289
 800027c:	08000289 	.word	0x08000289
 8000280:	08000289 	.word	0x08000289
 8000284:	080004bd 	.word	0x080004bd
	        case 0:
	        case 2:
	        case 5:
	        case 6:
	        case 7:
	            if (HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) == GPIO_PIN_RESET) {
 8000288:	2120      	movs	r1, #32
 800028a:	48a6      	ldr	r0, [pc, #664]	@ (8000524 <StateMachineTask+0x2d8>)
 800028c:	f001 fe58 	bl	8001f40 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d109      	bne.n	80002aa <StateMachineTask+0x5e>
	                state++;
 8000296:	4ba2      	ldr	r3, [pc, #648]	@ (8000520 <StateMachineTask+0x2d4>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4ba0      	ldr	r3, [pc, #640]	@ (8000520 <StateMachineTask+0x2d4>)
 80002a0:	701a      	strb	r2, [r3, #0]
	                action_done = 0;
 80002a2:	4ba1      	ldr	r3, [pc, #644]	@ (8000528 <StateMachineTask+0x2dc>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
	            } else if (HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) == GPIO_PIN_RESET && state > 0) {
	                state--;
	                action_done = 0;
	            }
	            break;
 80002a8:	e116      	b.n	80004d8 <StateMachineTask+0x28c>
	            } else if (HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) == GPIO_PIN_RESET && state > 0) {
 80002aa:	2140      	movs	r1, #64	@ 0x40
 80002ac:	489d      	ldr	r0, [pc, #628]	@ (8000524 <StateMachineTask+0x2d8>)
 80002ae:	f001 fe47 	bl	8001f40 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	f040 810f 	bne.w	80004d8 <StateMachineTask+0x28c>
 80002ba:	4b99      	ldr	r3, [pc, #612]	@ (8000520 <StateMachineTask+0x2d4>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f000 810a 	beq.w	80004d8 <StateMachineTask+0x28c>
	                state--;
 80002c4:	4b96      	ldr	r3, [pc, #600]	@ (8000520 <StateMachineTask+0x2d4>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b94      	ldr	r3, [pc, #592]	@ (8000520 <StateMachineTask+0x2d4>)
 80002ce:	701a      	strb	r2, [r3, #0]
	                action_done = 0;
 80002d0:	4b95      	ldr	r3, [pc, #596]	@ (8000528 <StateMachineTask+0x2dc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	            break;
 80002d6:	e0ff      	b.n	80004d8 <StateMachineTask+0x28c>
	        case 1:
	            if (message_complete3) {
 80002d8:	4b94      	ldr	r3, [pc, #592]	@ (800052c <StateMachineTask+0x2e0>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	f000 80fd 	beq.w	80004dc <StateMachineTask+0x290>
	                message_complete3 = 0;  // Réinitialise le flag pour la prochaine réception
 80002e2:	4b92      	ldr	r3, [pc, #584]	@ (800052c <StateMachineTask+0x2e0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
	                // Vérifie que la longueur du message est correcte (ici 8 caractères pour le PER)
	                if (strlen((char *)rx_buffer3) == MAX_PER_LENGTH) {
 80002e8:	4891      	ldr	r0, [pc, #580]	@ (8000530 <StateMachineTask+0x2e4>)
 80002ea:	f7ff ff31 	bl	8000150 <strlen>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b07      	cmp	r3, #7
 80002f2:	d12c      	bne.n	800034e <StateMachineTask+0x102>
	                    strcpy(per_value, (char *)rx_buffer3);  // Sauvegarde la valeur reçue
 80002f4:	4b8f      	ldr	r3, [pc, #572]	@ (8000534 <StateMachineTask+0x2e8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	498d      	ldr	r1, [pc, #564]	@ (8000530 <StateMachineTask+0x2e4>)
 80002fa:	4618      	mov	r0, r3
 80002fc:	f006 fd2e 	bl	8006d5c <strcpy>
	                    char expected_response[20];
	                    sprintf(expected_response, "PER=%s", per_value);  // Crée la réponse attendue
 8000300:	4b8c      	ldr	r3, [pc, #560]	@ (8000534 <StateMachineTask+0x2e8>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000308:	498b      	ldr	r1, [pc, #556]	@ (8000538 <StateMachineTask+0x2ec>)
 800030a:	4618      	mov	r0, r3
 800030c:	f006 fc5c 	bl	8006bc8 <siprintf>
	                    // Vérifie si le début de la chaîne reçue correspond à la réponse attendue
	                    if (strstr((char *)rx_buffer1, expected_response) == (char *)rx_buffer1) {
 8000310:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000314:	4619      	mov	r1, r3
 8000316:	4889      	ldr	r0, [pc, #548]	@ (800053c <StateMachineTask+0x2f0>)
 8000318:	f006 fc80 	bl	8006c1c <strstr>
 800031c:	4603      	mov	r3, r0
 800031e:	4a87      	ldr	r2, [pc, #540]	@ (800053c <StateMachineTask+0x2f0>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d110      	bne.n	8000346 <StateMachineTask+0xfa>
	                        send_UART3("PER VALIDE --> Etape suivante\n");
 8000324:	4886      	ldr	r0, [pc, #536]	@ (8000540 <StateMachineTask+0x2f4>)
 8000326:	f000 ff9b 	bl	8001260 <send_UART3>
	                        HAL_Delay(500);  // Attente pour stabilisation
 800032a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800032e:	f001 f8bb 	bl	80014a8 <HAL_Delay>
	                        state++;  // Passe à l'étape suivante
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <StateMachineTask+0x2d4>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b79      	ldr	r3, [pc, #484]	@ (8000520 <StateMachineTask+0x2d4>)
 800033c:	701a      	strb	r2, [r3, #0]
	                        action_done = 0;  // Réinitialise l'action pour la prochaine étape
 800033e:	4b7a      	ldr	r3, [pc, #488]	@ (8000528 <StateMachineTask+0x2dc>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
	                    }
	                } else {
	                    send_UART3("Format invalide. Le PER est sur 8 digits, recommencez...\n");
	                }
	            }
	            break;
 8000344:	e0ca      	b.n	80004dc <StateMachineTask+0x290>
	                        send_UART3("Valeur differente. Entrez a nouveau:\n");
 8000346:	487f      	ldr	r0, [pc, #508]	@ (8000544 <StateMachineTask+0x2f8>)
 8000348:	f000 ff8a 	bl	8001260 <send_UART3>
	            break;
 800034c:	e0c6      	b.n	80004dc <StateMachineTask+0x290>
	                    send_UART3("Format invalide. Le PER est sur 8 digits, recommencez...\n");
 800034e:	487e      	ldr	r0, [pc, #504]	@ (8000548 <StateMachineTask+0x2fc>)
 8000350:	f000 ff86 	bl	8001260 <send_UART3>
	            break;
 8000354:	e0c2      	b.n	80004dc <StateMachineTask+0x290>
	        case 3:
	            if (message_complete1) {
 8000356:	4b7d      	ldr	r3, [pc, #500]	@ (800054c <StateMachineTask+0x300>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	f000 80c0 	beq.w	80004e0 <StateMachineTask+0x294>
	                message_complete1 = 0;
 8000360:	4b7a      	ldr	r3, [pc, #488]	@ (800054c <StateMachineTask+0x300>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
	                TrameDataSTS data = {0};
 8000366:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800036a:	226c      	movs	r2, #108	@ 0x6c
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f006 fc4c 	bl	8006c0c <memset>
	                //parse_data_STS(rx_buffer1, &data);
	                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) && (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 && data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 8000374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000378:	4975      	ldr	r1, [pc, #468]	@ (8000550 <StateMachineTask+0x304>)
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff52 	bl	8000224 <__aeabi_fcmpge>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d100      	bne.n	8000388 <StateMachineTask+0x13c>
	                    send_UART3("STS OK --> Etape suivante\n");
	                    HAL_Delay(500);
	                    state++;
	                }
	            }
	            break;
 8000386:	e0ab      	b.n	80004e0 <StateMachineTask+0x294>
	                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) && (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 && data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 8000388:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800038c:	4971      	ldr	r1, [pc, #452]	@ (8000554 <StateMachineTask+0x308>)
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff3e 	bl	8000210 <__aeabi_fcmple>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d100      	bne.n	800039c <StateMachineTask+0x150>
	            break;
 800039a:	e0a1      	b.n	80004e0 <StateMachineTask+0x294>
	                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) && (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 && data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 800039c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003a0:	496d      	ldr	r1, [pc, #436]	@ (8000558 <StateMachineTask+0x30c>)
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff3e 	bl	8000224 <__aeabi_fcmpge>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d100      	bne.n	80003b0 <StateMachineTask+0x164>
	            break;
 80003ae:	e097      	b.n	80004e0 <StateMachineTask+0x294>
	                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) && (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 && data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 80003b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003b4:	4969      	ldr	r1, [pc, #420]	@ (800055c <StateMachineTask+0x310>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff2a 	bl	8000210 <__aeabi_fcmple>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d100      	bne.n	80003c4 <StateMachineTask+0x178>
	            break;
 80003c2:	e08d      	b.n	80004e0 <StateMachineTask+0x294>
	                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) && (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 && data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 80003c4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	f000 8089 	beq.w	80004e0 <StateMachineTask+0x294>
 80003ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f000 8084 	beq.w	80004e0 <StateMachineTask+0x294>
 80003d8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d07f      	beq.n	80004e0 <StateMachineTask+0x294>
 80003e0:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d07b      	beq.n	80004e0 <StateMachineTask+0x294>
 80003e8:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d077      	beq.n	80004e0 <StateMachineTask+0x294>
 80003f0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d073      	beq.n	80004e0 <StateMachineTask+0x294>
 80003f8:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d06f      	beq.n	80004e0 <StateMachineTask+0x294>
 8000400:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000404:	2b00      	cmp	r3, #0
 8000406:	d06b      	beq.n	80004e0 <StateMachineTask+0x294>
	                    send_UART3("STS OK --> Etape suivante\n");
 8000408:	4855      	ldr	r0, [pc, #340]	@ (8000560 <StateMachineTask+0x314>)
 800040a:	f000 ff29 	bl	8001260 <send_UART3>
	                    HAL_Delay(500);
 800040e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000412:	f001 f849 	bl	80014a8 <HAL_Delay>
	                    state++;
 8000416:	4b42      	ldr	r3, [pc, #264]	@ (8000520 <StateMachineTask+0x2d4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	3301      	adds	r3, #1
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b40      	ldr	r3, [pc, #256]	@ (8000520 <StateMachineTask+0x2d4>)
 8000420:	701a      	strb	r2, [r3, #0]
	            break;
 8000422:	e05d      	b.n	80004e0 <StateMachineTask+0x294>
	        case 4:
	            if (message_complete1) {
 8000424:	4b49      	ldr	r3, [pc, #292]	@ (800054c <StateMachineTask+0x300>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d05b      	beq.n	80004e4 <StateMachineTask+0x298>
	                message_complete1 = 0;
 800042c:	4b47      	ldr	r3, [pc, #284]	@ (800054c <StateMachineTask+0x300>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	                TrameDataSTS data = {0};
 8000432:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000436:	226c      	movs	r2, #108	@ 0x6c
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f006 fbe6 	bl	8006c0c <memset>
	                //parse_data_STS(rx_buffer1, &data);
	                if (data.inps[0] == 1 && data.inps[1] == 1 && data.inps[2] == 1) {
 8000440:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000444:	2b00      	cmp	r3, #0
 8000446:	d018      	beq.n	800047a <StateMachineTask+0x22e>
 8000448:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800044c:	2b00      	cmp	r3, #0
 800044e:	d014      	beq.n	800047a <StateMachineTask+0x22e>
 8000450:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d010      	beq.n	800047a <StateMachineTask+0x22e>
	                    send_UART3("Entrees OK --> Etape suivante\n");
 8000458:	4842      	ldr	r0, [pc, #264]	@ (8000564 <StateMachineTask+0x318>)
 800045a:	f000 ff01 	bl	8001260 <send_UART3>
	                    HAL_Delay(500);
 800045e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000462:	f001 f821 	bl	80014a8 <HAL_Delay>
	                    state++;
 8000466:	4b2e      	ldr	r3, [pc, #184]	@ (8000520 <StateMachineTask+0x2d4>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b2c      	ldr	r3, [pc, #176]	@ (8000520 <StateMachineTask+0x2d4>)
 8000470:	701a      	strb	r2, [r3, #0]
	                    action_done = 0;
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <StateMachineTask+0x2dc>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
	                        sprintf(msg, "Entree num %d : %d\n", i, data.inps[i]); // On affiche l'état des entrées
	                        send_UART3(msg);
	                    }
	                }
	            }
	            break;
 8000478:	e034      	b.n	80004e4 <StateMachineTask+0x298>
	                    send_UART3("Erreur défaut entrée:");
 800047a:	483b      	ldr	r0, [pc, #236]	@ (8000568 <StateMachineTask+0x31c>)
 800047c:	f000 fef0 	bl	8001260 <send_UART3>
	                    for (int i = 0; i < 3; i++) {
 8000480:	2300      	movs	r3, #0
 8000482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000486:	e014      	b.n	80004b2 <StateMachineTask+0x266>
	                        sprintf(msg, "Entree num %d : %d\n", i, data.inps[i]); // On affiche l'état des entrées
 8000488:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 800048c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	1d38      	adds	r0, r7, #4
 8000496:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800049a:	4934      	ldr	r1, [pc, #208]	@ (800056c <StateMachineTask+0x320>)
 800049c:	f006 fb94 	bl	8006bc8 <siprintf>
	                        send_UART3(msg);
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fedc 	bl	8001260 <send_UART3>
	                    for (int i = 0; i < 3; i++) {
 80004a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80004ac:	3301      	adds	r3, #1
 80004ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80004b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	dde6      	ble.n	8000488 <StateMachineTask+0x23c>
	            break;
 80004ba:	e013      	b.n	80004e4 <StateMachineTask+0x298>
	        case 8:
	            if (HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) == GPIO_PIN_RESET) {
 80004bc:	2120      	movs	r1, #32
 80004be:	4819      	ldr	r0, [pc, #100]	@ (8000524 <StateMachineTask+0x2d8>)
 80004c0:	f001 fd3e 	bl	8001f40 <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d10e      	bne.n	80004e8 <StateMachineTask+0x29c>
	                state = 0;
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <StateMachineTask+0x2d4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
	                action_done = 0;
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <StateMachineTask+0x2dc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 80004d6:	e007      	b.n	80004e8 <StateMachineTask+0x29c>
	            break;
 80004d8:	bf00      	nop
 80004da:	e006      	b.n	80004ea <StateMachineTask+0x29e>
	            break;
 80004dc:	bf00      	nop
 80004de:	e004      	b.n	80004ea <StateMachineTask+0x29e>
	            break;
 80004e0:	bf00      	nop
 80004e2:	e002      	b.n	80004ea <StateMachineTask+0x29e>
	            break;
 80004e4:	bf00      	nop
 80004e6:	e000      	b.n	80004ea <StateMachineTask+0x29e>
	            break;
 80004e8:	bf00      	nop
	    }

	    //--------------------------- ACTIONS
	    switch (state) {
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <StateMachineTask+0x2d4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b08      	cmp	r3, #8
 80004f0:	f200 8119 	bhi.w	8000726 <StateMachineTask+0x4da>
 80004f4:	a201      	add	r2, pc, #4	@ (adr r2, 80004fc <StateMachineTask+0x2b0>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	08000571 	.word	0x08000571
 8000500:	08000595 	.word	0x08000595
 8000504:	080005fd 	.word	0x080005fd
 8000508:	08000615 	.word	0x08000615
 800050c:	08000633 	.word	0x08000633
 8000510:	08000679 	.word	0x08000679
 8000514:	08000687 	.word	0x08000687
 8000518:	0800070b 	.word	0x0800070b
 800051c:	08000713 	.word	0x08000713
 8000520:	2000007c 	.word	0x2000007c
 8000524:	40010800 	.word	0x40010800
 8000528:	20000084 	.word	0x20000084
 800052c:	2000054c 	.word	0x2000054c
 8000530:	20000550 	.word	0x20000550
 8000534:	20000080 	.word	0x20000080
 8000538:	08007638 	.word	0x08007638
 800053c:	2000049c 	.word	0x2000049c
 8000540:	08007640 	.word	0x08007640
 8000544:	08007660 	.word	0x08007660
 8000548:	08007688 	.word	0x08007688
 800054c:	20000498 	.word	0x20000498
 8000550:	41080000 	.word	0x41080000
 8000554:	41200000 	.word	0x41200000
 8000558:	41380000 	.word	0x41380000
 800055c:	41500000 	.word	0x41500000
 8000560:	080076c4 	.word	0x080076c4
 8000564:	080076e0 	.word	0x080076e0
 8000568:	08007700 	.word	0x08007700
 800056c:	08007718 	.word	0x08007718
	        case 0:
	        	HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000576:	4873      	ldr	r0, [pc, #460]	@ (8000744 <StateMachineTask+0x4f8>)
 8000578:	f001 fcf9 	bl	8001f6e <HAL_GPIO_WritePin>
	            if (!action_done) {
 800057c:	4b72      	ldr	r3, [pc, #456]	@ (8000748 <StateMachineTask+0x4fc>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	f040 80d2 	bne.w	800072a <StateMachineTask+0x4de>
	                send_UART3("Appuyer sur le bouton pour commencer\n");
 8000586:	4871      	ldr	r0, [pc, #452]	@ (800074c <StateMachineTask+0x500>)
 8000588:	f000 fe6a 	bl	8001260 <send_UART3>
	                action_done = 1;
 800058c:	4b6e      	ldr	r3, [pc, #440]	@ (8000748 <StateMachineTask+0x4fc>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8000592:	e0ca      	b.n	800072a <StateMachineTask+0x4de>
	        case 1:
	            if (!action_done) {
 8000594:	4b6c      	ldr	r3, [pc, #432]	@ (8000748 <StateMachineTask+0x4fc>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	f040 80c8 	bne.w	800072e <StateMachineTask+0x4e2>
	                send_UART3("Entrez le PER (juste la valeur sur 8 digits)\n");
 800059e:	486c      	ldr	r0, [pc, #432]	@ (8000750 <StateMachineTask+0x504>)
 80005a0:	f000 fe5e 	bl	8001260 <send_UART3>
	                if (message_complete3) {
 80005a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <StateMachineTask+0x508>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d023      	beq.n	80005f4 <StateMachineTask+0x3a8>
	                    message_complete3 = 0;
 80005ac:	4b69      	ldr	r3, [pc, #420]	@ (8000754 <StateMachineTask+0x508>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	                    if (strlen((char *)rx_buffer3) == MAX_PER_LENGTH) {
 80005b2:	4869      	ldr	r0, [pc, #420]	@ (8000758 <StateMachineTask+0x50c>)
 80005b4:	f7ff fdcc 	bl	8000150 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	d117      	bne.n	80005ee <StateMachineTask+0x3a2>
	                        strcpy(per_value, (char *)rx_buffer3);
 80005be:	4b67      	ldr	r3, [pc, #412]	@ (800075c <StateMachineTask+0x510>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4965      	ldr	r1, [pc, #404]	@ (8000758 <StateMachineTask+0x50c>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f006 fbc9 	bl	8006d5c <strcpy>
	                        char per_command[20];
	                        sprintf(per_command, "PER=%s\n", per_value);
 80005ca:	4b64      	ldr	r3, [pc, #400]	@ (800075c <StateMachineTask+0x510>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005d2:	4963      	ldr	r1, [pc, #396]	@ (8000760 <StateMachineTask+0x514>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 faf7 	bl	8006bc8 <siprintf>
	                        send_UART1(per_command);
 80005da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fdc4 	bl	800116c <send_UART1>
	                        HAL_Delay(500);
 80005e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e8:	f000 ff5e 	bl	80014a8 <HAL_Delay>
 80005ec:	e002      	b.n	80005f4 <StateMachineTask+0x3a8>
	                        //send_UART1("PER=\n"); // Pour vérifier le PER
	                    } else {
	                        send_UART3("Format invalide. Le PER est sur 8 digits, recommencez...\n");
 80005ee:	485d      	ldr	r0, [pc, #372]	@ (8000764 <StateMachineTask+0x518>)
 80005f0:	f000 fe36 	bl	8001260 <send_UART3>
	                    }
	                }
	                action_done = 1;
 80005f4:	4b54      	ldr	r3, [pc, #336]	@ (8000748 <StateMachineTask+0x4fc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 80005fa:	e098      	b.n	800072e <StateMachineTask+0x4e2>
	        case 2:
	            if (!action_done) {
 80005fc:	4b52      	ldr	r3, [pc, #328]	@ (8000748 <StateMachineTask+0x4fc>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f040 8096 	bne.w	8000732 <StateMachineTask+0x4e6>
	                send_UART3("Mettez tous les DIPs sur ON, une fois fait appuyez sur le bouton\n");
 8000606:	4858      	ldr	r0, [pc, #352]	@ (8000768 <StateMachineTask+0x51c>)
 8000608:	f000 fe2a 	bl	8001260 <send_UART3>
	                action_done = 1;
 800060c:	4b4e      	ldr	r3, [pc, #312]	@ (8000748 <StateMachineTask+0x4fc>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8000612:	e08e      	b.n	8000732 <StateMachineTask+0x4e6>
	        case 3:
	            if (!action_done) {
 8000614:	4b4c      	ldr	r3, [pc, #304]	@ (8000748 <StateMachineTask+0x4fc>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	f040 808c 	bne.w	8000736 <StateMachineTask+0x4ea>
	                send_UART3("Test STS en cours...\n");
 800061e:	4853      	ldr	r0, [pc, #332]	@ (800076c <StateMachineTask+0x520>)
 8000620:	f000 fe1e 	bl	8001260 <send_UART3>
	                send_UART1("STS\n");
 8000624:	4852      	ldr	r0, [pc, #328]	@ (8000770 <StateMachineTask+0x524>)
 8000626:	f000 fda1 	bl	800116c <send_UART1>
	                //send_UART3(rx_buffer1);
	                action_done = 1;
 800062a:	4b47      	ldr	r3, [pc, #284]	@ (8000748 <StateMachineTask+0x4fc>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8000630:	e081      	b.n	8000736 <StateMachineTask+0x4ea>
	        case 4:
	            if (!action_done) {
 8000632:	4b45      	ldr	r3, [pc, #276]	@ (8000748 <StateMachineTask+0x4fc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d17f      	bne.n	800073a <StateMachineTask+0x4ee>
	                send_UART3("Test entrees en cours...\n");
 800063a:	484e      	ldr	r0, [pc, #312]	@ (8000774 <StateMachineTask+0x528>)
 800063c:	f000 fe10 	bl	8001260 <send_UART3>
	                // Activation de toutes les entrées
	                HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000646:	483f      	ldr	r0, [pc, #252]	@ (8000744 <StateMachineTask+0x4f8>)
 8000648:	f001 fc91 	bl	8001f6e <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000652:	4849      	ldr	r0, [pc, #292]	@ (8000778 <StateMachineTask+0x52c>)
 8000654:	f001 fc8b 	bl	8001f6e <HAL_GPIO_WritePin>
	                HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2108      	movs	r1, #8
 800065c:	4839      	ldr	r0, [pc, #228]	@ (8000744 <StateMachineTask+0x4f8>)
 800065e:	f001 fc86 	bl	8001f6e <HAL_GPIO_WritePin>
	                HAL_Delay(300);
 8000662:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000666:	f000 ff1f 	bl	80014a8 <HAL_Delay>
	                send_UART1("STS\n");
 800066a:	4841      	ldr	r0, [pc, #260]	@ (8000770 <StateMachineTask+0x524>)
 800066c:	f000 fd7e 	bl	800116c <send_UART1>
	                action_done = 1;
 8000670:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <StateMachineTask+0x4fc>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8000676:	e060      	b.n	800073a <StateMachineTask+0x4ee>
	        case 5:
	            send_UART3("Test du décompteur...\n Veuillez valider en appuyant sur le BP si toutes les leds s'allument correctement et dans le bon ordre sur le décompteur");
 8000678:	4840      	ldr	r0, [pc, #256]	@ (800077c <StateMachineTask+0x530>)
 800067a:	f000 fdf1 	bl	8001260 <send_UART3>
	            send_UART1("TST=1\n");
 800067e:	4840      	ldr	r0, [pc, #256]	@ (8000780 <StateMachineTask+0x534>)
 8000680:	f000 fd74 	bl	800116c <send_UART1>
	            break;
 8000684:	e05a      	b.n	800073c <StateMachineTask+0x4f0>
	        case 6:
	            send_UART1("TST=0");
 8000686:	483f      	ldr	r0, [pc, #252]	@ (8000784 <StateMachineTask+0x538>)
 8000688:	f000 fd70 	bl	800116c <send_UART1>
	            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000692:	482c      	ldr	r0, [pc, #176]	@ (8000744 <StateMachineTask+0x4f8>)
 8000694:	f001 fc6b 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069e:	4836      	ldr	r0, [pc, #216]	@ (8000778 <StateMachineTask+0x52c>)
 80006a0:	f001 fc65 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2108      	movs	r1, #8
 80006a8:	4826      	ldr	r0, [pc, #152]	@ (8000744 <StateMachineTask+0x4f8>)
 80006aa:	f001 fc60 	bl	8001f6e <HAL_GPIO_WritePin>
	            send_UART3("Test des ampoules ...\n Vérifiez que les ampoules s'éteignent et se rallument et que le défaut sur l'écran LCD de la carte corresponde bien à la bonne ampoule");
 80006ae:	4836      	ldr	r0, [pc, #216]	@ (8000788 <StateMachineTask+0x53c>)
 80006b0:	f000 fdd6 	bl	8001260 <send_UART3>
	            HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	4822      	ldr	r0, [pc, #136]	@ (8000744 <StateMachineTask+0x4f8>)
 80006ba:	f001 fc58 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_Delay(1500);
 80006be:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006c2:	f000 fef1 	bl	80014a8 <HAL_Delay>
	            HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	481e      	ldr	r0, [pc, #120]	@ (8000744 <StateMachineTask+0x4f8>)
 80006cc:	f001 fc4f 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2140      	movs	r1, #64	@ 0x40
 80006d4:	481b      	ldr	r0, [pc, #108]	@ (8000744 <StateMachineTask+0x4f8>)
 80006d6:	f001 fc4a 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_Delay(1500);
 80006da:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006de:	f000 fee3 	bl	80014a8 <HAL_Delay>
	            HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	4817      	ldr	r0, [pc, #92]	@ (8000744 <StateMachineTask+0x4f8>)
 80006e8:	f001 fc41 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2180      	movs	r1, #128	@ 0x80
 80006f0:	4814      	ldr	r0, [pc, #80]	@ (8000744 <StateMachineTask+0x4f8>)
 80006f2:	f001 fc3c 	bl	8001f6e <HAL_GPIO_WritePin>
	            HAL_Delay(1500);
 80006f6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006fa:	f000 fed5 	bl	80014a8 <HAL_Delay>
	            HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	4810      	ldr	r0, [pc, #64]	@ (8000744 <StateMachineTask+0x4f8>)
 8000704:	f001 fc33 	bl	8001f6e <HAL_GPIO_WritePin>
	            break;
 8000708:	e018      	b.n	800073c <StateMachineTask+0x4f0>
	        case 7:
	            send_UART3("Test de l'infrarouge...\n Veuillez valider en appuyant sur le BP si la télécommande fonctionne en émission et réception");
 800070a:	4820      	ldr	r0, [pc, #128]	@ (800078c <StateMachineTask+0x540>)
 800070c:	f000 fda8 	bl	8001260 <send_UART3>
	            break;
 8000710:	e014      	b.n	800073c <StateMachineTask+0x4f0>
	        case 8:
	            HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <StateMachineTask+0x4f8>)
 800071a:	f001 fc28 	bl	8001f6e <HAL_GPIO_WritePin>
	            send_UART3("Test de l'accu...\n Veuillez vérifier que vous avez bien le message suppression batterie qui s'affiche à l'écran, si le cas validez");
 800071e:	481c      	ldr	r0, [pc, #112]	@ (8000790 <StateMachineTask+0x544>)
 8000720:	f000 fd9e 	bl	8001260 <send_UART3>
	            break;
 8000724:	e00a      	b.n	800073c <StateMachineTask+0x4f0>
	        default:
	            break;
 8000726:	bf00      	nop
 8000728:	e008      	b.n	800073c <StateMachineTask+0x4f0>
	            break;
 800072a:	bf00      	nop
 800072c:	e006      	b.n	800073c <StateMachineTask+0x4f0>
	            break;
 800072e:	bf00      	nop
 8000730:	e004      	b.n	800073c <StateMachineTask+0x4f0>
	            break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <StateMachineTask+0x4f0>
	            break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <StateMachineTask+0x4f0>
	            break;
 800073a:	bf00      	nop
	    }

}
 800073c:	bf00      	nop
 800073e:	37d0      	adds	r7, #208	@ 0xd0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010c00 	.word	0x40010c00
 8000748:	20000084 	.word	0x20000084
 800074c:	0800772c 	.word	0x0800772c
 8000750:	08007754 	.word	0x08007754
 8000754:	2000054c 	.word	0x2000054c
 8000758:	20000550 	.word	0x20000550
 800075c:	20000080 	.word	0x20000080
 8000760:	08007784 	.word	0x08007784
 8000764:	08007688 	.word	0x08007688
 8000768:	0800778c 	.word	0x0800778c
 800076c:	080077d0 	.word	0x080077d0
 8000770:	080077e8 	.word	0x080077e8
 8000774:	080077f0 	.word	0x080077f0
 8000778:	40010800 	.word	0x40010800
 800077c:	0800780c 	.word	0x0800780c
 8000780:	080078a0 	.word	0x080078a0
 8000784:	080078a8 	.word	0x080078a8
 8000788:	080078b0 	.word	0x080078b0
 800078c:	08007954 	.word	0x08007954
 8000790:	080079d0 	.word	0x080079d0

08000794 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <vApplicationGetIdleTaskMemory+0x28>)
 80007a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80007aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000088 	.word	0x20000088
 80007c0:	20000130 	.word	0x20000130

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fe3c 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f830 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f946 	bl	8000a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007d4:	f000 f8c6 	bl	8000964 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 fc98 	bl	800110c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 fcdc 	bl	8001198 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007e0:	f000 fd0a 	bl	80011f8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80007e4:	f000 f880 	bl	80008e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007e8:	f000 f8ea 	bl	80009c0 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007ec:	f003 fcca 	bl	8004184 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007f0:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <main+0x54>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <main+0x58>)
 80007f6:	f003 fd0d 	bl	8004214 <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <main+0x5c>)
 80007fe:	6013      	str	r3, [r2, #0]
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 8000800:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <main+0x60>)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <main+0x64>)
 8000806:	f003 fd05 	bl	8004214 <osThreadNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <main+0x68>)
 800080e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000810:	f003 fcda 	bl	80041c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <main+0x50>
 8000818:	08007aa0 	.word	0x08007aa0
 800081c:	08000bcb 	.word	0x08000bcb
 8000820:	200003fc 	.word	0x200003fc
 8000824:	08007ac4 	.word	0x08007ac4
 8000828:	08000bbd 	.word	0x08000bbd
 800082c:	20000400 	.word	0x20000400

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	2228      	movs	r2, #40	@ 0x28
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 f9e4 	bl	8006c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000880:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fce6 	bl	8002258 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000892:	f000 f9b3 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ff52 	bl	800275c <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008be:	f000 f99d 	bl	8000bfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008c2:	2302      	movs	r3, #2
 80008c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80008c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f902 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008da:	f000 f98f 	bl	8000bfc <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	@ 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_ADC1_Init+0x74>)
 80008fa:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <MX_ADC1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_ADC1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_ADC1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_ADC1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_ADC1_Init+0x74>)
 8000912:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000916:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_ADC1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_ADC1_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_ADC1_Init+0x74>)
 8000926:	f000 fde3 	bl	80014f0 <HAL_ADC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000930:	f000 f964 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000934:	2308      	movs	r3, #8
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000938:	2301      	movs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_ADC1_Init+0x74>)
 8000946:	f000 feab 	bl	80016a0 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000950:	f000 f954 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000330 	.word	0x20000330
 8000960:	40012400 	.word	0x40012400

08000964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <MX_I2C1_Init+0x54>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <MX_I2C1_Init+0x58>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_I2C1_Init+0x50>)
 80009a2:	f001 fb15 	bl	8001fd0 <HAL_I2C_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009ac:	f000 f926 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000360 	.word	0x20000360
 80009b8:	40005400 	.word	0x40005400
 80009bc:	000186a0 	.word	0x000186a0

080009c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <MX_TIM1_Init+0x9c>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_TIM1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_TIM1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a08:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <MX_TIM1_Init+0x98>)
 8000a0a:	f002 f91b 	bl	8002c44 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a14:	f000 f8f2 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <MX_TIM1_Init+0x98>)
 8000a26:	f002 fa9f 	bl	8002f68 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a30:	f000 f8e4 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_TIM1_Init+0x98>)
 8000a42:	f002 fc81 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a4c:	f000 f8d6 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200003b4 	.word	0x200003b4
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b49      	ldr	r3, [pc, #292]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0310 	and.w	r3, r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8c:	4b46      	ldr	r3, [pc, #280]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a45      	ldr	r2, [pc, #276]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b43      	ldr	r3, [pc, #268]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b40      	ldr	r3, [pc, #256]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <MX_GPIO_Init+0x148>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000ada:	4834      	ldr	r0, [pc, #208]	@ (8000bac <MX_GPIO_Init+0x14c>)
 8000adc:	f001 fa47 	bl	8001f6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin|LED_CEL_Pin|OUT2_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f648 0110 	movw	r1, #34832	@ 0x8810
 8000ae6:	4832      	ldr	r0, [pc, #200]	@ (8000bb0 <MX_GPIO_Init+0x150>)
 8000ae8:	f001 fa41 	bl	8001f6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000aec:	2200      	movs	r2, #0
 8000aee:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 8000af2:	4830      	ldr	r0, [pc, #192]	@ (8000bb4 <MX_GPIO_Init+0x154>)
 8000af4:	f001 fa3b 	bl	8001f6e <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|BUZZER_Pin;
 8000af8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4826      	ldr	r0, [pc, #152]	@ (8000bac <MX_GPIO_Init+0x14c>)
 8000b12:	f001 f891 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 8000b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4820      	ldr	r0, [pc, #128]	@ (8000bac <MX_GPIO_Init+0x14c>)
 8000b2c:	f001 f884 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP3_Pin|BP2_Pin|BP3_Pin
 8000b30:	23e3      	movs	r3, #227	@ 0xe3
 8000b32:	613b      	str	r3, [r7, #16]
                          |BP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	481b      	ldr	r0, [pc, #108]	@ (8000bb0 <MX_GPIO_Init+0x150>)
 8000b44:	f001 f878 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin|LED_CEL_Pin|OUT2_Pin;
 8000b48:	f648 0310 	movw	r3, #34832	@ 0x8810
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <MX_GPIO_Init+0x150>)
 8000b62:	f001 f869 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000b66:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 8000b6a:	613b      	str	r3, [r7, #16]
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <MX_GPIO_Init+0x154>)
 8000b80:	f001 f85a 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8000b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_GPIO_Init+0x158>)
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <MX_GPIO_Init+0x154>)
 8000b9a:	f001 f84d 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	10110000 	.word	0x10110000

08000bbc <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	for(;;){
		StateMachineTask();
 8000bc4:	f7ff fb42 	bl	800024c <StateMachineTask>
 8000bc8:	e7fc      	b.n	8000bc4 <StartStateMachineTask+0x8>

08000bca <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
	//HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 8000bd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd6:	f003 fbaf 	bl	8004338 <osDelay>
 8000bda:	e7fa      	b.n	8000bd2 <StartDefaultTask+0x8>

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bee:	f000 fc3f 	bl	8001470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_UART3("ERROR");
 8000c04:	4801      	ldr	r0, [pc, #4]	@ (8000c0c <Error_Handler+0x10>)
 8000c06:	f000 fb2b 	bl	8001260 <send_UART3>
 8000c0a:	e7fb      	b.n	8000c04 <Error_Handler+0x8>
 8000c0c:	08007a78 	.word	0x08007a78

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_MspInit+0x68>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f000 ff16 	bl	8001a7e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_MspInit+0x6c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_MspInit+0x6c>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	@ (8000cec <HAL_ADC_MspInit+0x6c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d121      	bne.n	8000ce4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <HAL_ADC_MspInit+0x74>)
 8000ce0:	f000 ffaa 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40012400 	.word	0x40012400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <HAL_I2C_MspInit+0x90>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d132      	bne.n	8000d7e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000d30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	2312      	movs	r3, #18
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	@ (8000d90 <HAL_I2C_MspInit+0x98>)
 8000d46:	f000 ff77 	bl	8001c38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_I2C_MspInit+0x9c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d60:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <HAL_I2C_MspInit+0x9c>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_I2C_MspInit+0x94>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40010000 	.word	0x40010000

08000d98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <HAL_TIM_Base_MspInit+0x34>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10b      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x38>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a53      	ldr	r2, [pc, #332]	@ (8000f3c <HAL_UART_MspInit+0x168>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d132      	bne.n	8000e5a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df4:	4b52      	ldr	r3, [pc, #328]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a51      	ldr	r2, [pc, #324]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b4f      	ldr	r3, [pc, #316]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a4b      	ldr	r2, [pc, #300]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8000e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4619      	mov	r1, r3
 8000e38:	4842      	ldr	r0, [pc, #264]	@ (8000f44 <HAL_UART_MspInit+0x170>)
 8000e3a:	f000 fefd 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	4619      	mov	r1, r3
 8000e52:	483c      	ldr	r0, [pc, #240]	@ (8000f44 <HAL_UART_MspInit+0x170>)
 8000e54:	f000 fef0 	bl	8001c38 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e58:	e06c      	b.n	8000f34 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f48 <HAL_UART_MspInit+0x174>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d130      	bne.n	8000ec6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e64:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a35      	ldr	r2, [pc, #212]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6e:	61d3      	str	r3, [r2, #28]
 8000e70:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 8000e94:	2304      	movs	r3, #4
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4827      	ldr	r0, [pc, #156]	@ (8000f44 <HAL_UART_MspInit+0x170>)
 8000ea8:	f000 fec6 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 8000eac:	2308      	movs	r3, #8
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4821      	ldr	r0, [pc, #132]	@ (8000f44 <HAL_UART_MspInit+0x170>)
 8000ec0:	f000 feba 	bl	8001c38 <HAL_GPIO_Init>
}
 8000ec4:	e036      	b.n	8000f34 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <HAL_UART_MspInit+0x178>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d131      	bne.n	8000f34 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eda:	61d3      	str	r3, [r2, #28]
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_UART_MspInit+0x16c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_COM_Pin;
 8000f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TX_COM_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4619      	mov	r1, r3
 8000f14:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <HAL_UART_MspInit+0x17c>)
 8000f16:	f000 fe8f 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_COM_Pin;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RX_COM_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <HAL_UART_MspInit+0x17c>)
 8000f30:	f000 fe82 	bl	8001c38 <HAL_GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	@ 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	40010c00 	.word	0x40010c00

08000f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <HAL_InitTick+0xe8>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a33      	ldr	r2, [pc, #204]	@ (800103c <HAL_InitTick+0xe8>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b31      	ldr	r3, [pc, #196]	@ (800103c <HAL_InitTick+0xe8>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f82:	f107 0210 	add.w	r2, r7, #16
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fd55 	bl	8002a3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f9c:	f001 fd26 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8000fa0:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fa2:	e004      	b.n	8000fae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fa4:	f001 fd22 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb0:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <HAL_InitTick+0xec>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0c9b      	lsrs	r3, r3, #18
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fe4:	4817      	ldr	r0, [pc, #92]	@ (8001044 <HAL_InitTick+0xf0>)
 8000fe6:	f001 fe2d 	bl	8002c44 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11b      	bne.n	8001030 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ff8:	4812      	ldr	r0, [pc, #72]	@ (8001044 <HAL_InitTick+0xf0>)
 8000ffa:	f001 fe73 	bl	8002ce4 <HAL_TIM_Base_Start_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001004:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800100c:	201c      	movs	r0, #28
 800100e:	f000 fd52 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d808      	bhi.n	800102a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	201c      	movs	r0, #28
 800101e:	f000 fd2e 	bl	8001a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <HAL_InitTick+0xf4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e002      	b.n	8001030 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001030:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001034:	4618      	mov	r0, r3
 8001036:	3738      	adds	r7, #56	@ 0x38
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	431bde83 	.word	0x431bde83
 8001044:	20000404 	.word	0x20000404
 8001048:	20000004 	.word	0x20000004

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <TIM2_IRQHandler+0x10>)
 8001086:	f001 fe7f 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000404 	.word	0x20000404

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f005 fe1e 	bl	8006d04 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20005000 	.word	0x20005000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	2000044c 	.word	0x2000044c
 80010fc:	20001ef8 	.word	0x20001ef8

08001100 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001112:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001118:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001144:	f002 f970 	bl	8003428 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f7ff fd55 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	4904      	ldr	r1, [pc, #16]	@ (8001168 <MX_USART1_UART_Init+0x5c>)
 8001156:	4802      	ldr	r0, [pc, #8]	@ (8001160 <MX_USART1_UART_Init+0x54>)
 8001158:	f002 fa41 	bl	80035de <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000450 	.word	0x20000450
 8001164:	40013800 	.word	0x40013800
 8001168:	20000499 	.word	0x20000499

0800116c <send_UART1>:



void send_UART1(const char *msg)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7fe ffeb 	bl	8000150 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <send_UART1+0x28>)
 8001186:	f002 f99f 	bl	80034c8 <HAL_UART_Transmit>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000450 	.word	0x20000450

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 800119e:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <MX_USART2_UART_Init+0x58>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4807      	ldr	r0, [pc, #28]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011d0:	f002 f92a 	bl	8003428 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f7ff fd0f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <MX_USART2_UART_Init+0x5c>)
 80011e2:	4802      	ldr	r0, [pc, #8]	@ (80011ec <MX_USART2_UART_Init+0x54>)
 80011e4:	f002 f9fb 	bl	80035de <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200005b8 	.word	0x200005b8
 80011f0:	40004400 	.word	0x40004400
 80011f4:	20000601 	.word	0x20000601

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <MX_USART3_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 8001204:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_USART3_UART_Init+0x4c>)
 8001230:	f002 f8fa 	bl	8003428 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f7ff fcdf 	bl	8000bfc <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */
  //HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
  /* USER CODE END USART3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000504 	.word	0x20000504
 8001248:	40004800 	.word	0x40004800

0800124c <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart3);  // Appel à HAL pour gérer l'interruption
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USART3_IRQHandler+0x10>)
 8001252:	f002 f9e9 	bl	8003628 <HAL_UART_IRQHandler>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000504 	.word	0x20000504

08001260 <send_UART3>:

void send_UART3(const char *msg)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ff71 	bl	8000150 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <send_UART3+0x28>)
 800127a:	f002 f925 	bl	80034c8 <HAL_UART_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000504 	.word	0x20000504

0800128c <HAL_UART_RxCpltCallback>:
}


// Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
 8001294:	2110      	movs	r1, #16
 8001296:	4844      	ldr	r0, [pc, #272]	@ (80013a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001298:	f000 fe81 	bl	8001f9e <HAL_GPIO_TogglePin>
	// RS232_418
    if (huart->Instance == USART1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a42      	ldr	r2, [pc, #264]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d124      	bne.n	80012f0 <HAL_UART_RxCpltCallback+0x64>
    {
        if (rx_char1 != '\n' && rx_index1 < RX_BUFFER1_SIZE - 1)
 80012a6:	4b42      	ldr	r3, [pc, #264]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d00f      	beq.n	80012ce <HAL_UART_RxCpltCallback+0x42>
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	2b62      	cmp	r3, #98	@ 0x62
 80012b4:	d80b      	bhi.n	80012ce <HAL_UART_RxCpltCallback+0x42>
        {
            rx_buffer1[rx_index1++] = rx_char1;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	b291      	uxth	r1, r2
 80012be:	4a3d      	ldr	r2, [pc, #244]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012c0:	8011      	strh	r1, [r2, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012c6:	7819      	ldrb	r1, [r3, #0]
 80012c8:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012ca:	5499      	strb	r1, [r3, r2]
 80012cc:	e00b      	b.n	80012e6 <HAL_UART_RxCpltCallback+0x5a>
        }
        else
        {
            rx_buffer1[rx_index1] = '\0';
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]
            message_complete1 = 1;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <HAL_UART_RxCpltCallback+0x130>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
            rx_index1 = 0;
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4931      	ldr	r1, [pc, #196]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012ea:	4835      	ldr	r0, [pc, #212]	@ (80013c0 <HAL_UART_RxCpltCallback+0x134>)
 80012ec:	f002 f977 	bl	80035de <HAL_UART_Receive_IT>
    }

    //RS232_COM
    if (huart->Instance == USART3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a33      	ldr	r2, [pc, #204]	@ (80013c4 <HAL_UART_RxCpltCallback+0x138>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d127      	bne.n	800134a <HAL_UART_RxCpltCallback+0xbe>
        {
            if (rx_char3 != '\n' && rx_index3 < RX_BUFFER3_SIZE - 1)
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <HAL_UART_RxCpltCallback+0x13c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d00f      	beq.n	8001322 <HAL_UART_RxCpltCallback+0x96>
 8001302:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	2b62      	cmp	r3, #98	@ 0x62
 8001308:	d80b      	bhi.n	8001322 <HAL_UART_RxCpltCallback+0x96>
            {
                rx_buffer3[rx_index3++] = rx_char3;
 800130a:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	b291      	uxth	r1, r2
 8001312:	4a2e      	ldr	r2, [pc, #184]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 8001314:	8011      	strh	r1, [r2, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <HAL_UART_RxCpltCallback+0x13c>)
 800131a:	7819      	ldrb	r1, [r3, #0]
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_UART_RxCpltCallback+0x144>)
 800131e:	5499      	strb	r1, [r3, r2]
 8001320:	e00b      	b.n	800133a <HAL_UART_RxCpltCallback+0xae>
            }
            else
            {
                rx_buffer3[rx_index3] = '\0';
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_UART_RxCpltCallback+0x144>)
 800132a:	2100      	movs	r1, #0
 800132c:	5499      	strb	r1, [r3, r2]
                message_complete3 = 1;
 800132e:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <HAL_UART_RxCpltCallback+0x148>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
                rx_index3 = 0;
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]
            }
            HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	4922      	ldr	r1, [pc, #136]	@ (80013c8 <HAL_UART_RxCpltCallback+0x13c>)
 800133e:	4826      	ldr	r0, [pc, #152]	@ (80013d8 <HAL_UART_RxCpltCallback+0x14c>)
 8001340:	f002 f94d 	bl	80035de <HAL_UART_Receive_IT>
            send_UART3("RECU"); // DEBUG
 8001344:	4825      	ldr	r0, [pc, #148]	@ (80013dc <HAL_UART_RxCpltCallback+0x150>)
 8001346:	f7ff ff8b 	bl	8001260 <send_UART3>
        }

    //RS485
        if (huart->Instance == USART2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <HAL_UART_RxCpltCallback+0x154>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d124      	bne.n	800139e <HAL_UART_RxCpltCallback+0x112>
            {
                if (rx_char2 != '\n' && rx_index2 < RX_BUFFER2_SIZE - 1)
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <HAL_UART_RxCpltCallback+0x158>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0a      	cmp	r3, #10
 800135a:	d00f      	beq.n	800137c <HAL_UART_RxCpltCallback+0xf0>
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <HAL_UART_RxCpltCallback+0x15c>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	2b62      	cmp	r3, #98	@ 0x62
 8001362:	d80b      	bhi.n	800137c <HAL_UART_RxCpltCallback+0xf0>
                {
                    rx_buffer2[rx_index2++] = rx_char2;
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_UART_RxCpltCallback+0x15c>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	b291      	uxth	r1, r2
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_UART_RxCpltCallback+0x15c>)
 800136e:	8011      	strh	r1, [r2, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_UART_RxCpltCallback+0x158>)
 8001374:	7819      	ldrb	r1, [r3, #0]
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_UART_RxCpltCallback+0x160>)
 8001378:	5499      	strb	r1, [r3, r2]
 800137a:	e00b      	b.n	8001394 <HAL_UART_RxCpltCallback+0x108>
                }
                else
                {
                    rx_buffer2[rx_index2] = '\0';
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <HAL_UART_RxCpltCallback+0x15c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_UART_RxCpltCallback+0x160>)
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]
                    message_complete2 = 1;
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_UART_RxCpltCallback+0x164>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
                    rx_index2 = 0;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_UART_RxCpltCallback+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
                }
                HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4913      	ldr	r1, [pc, #76]	@ (80013e4 <HAL_UART_RxCpltCallback+0x158>)
 8001398:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <HAL_UART_RxCpltCallback+0x168>)
 800139a:	f002 f920 	bl	80035de <HAL_UART_Receive_IT>
            }

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40013800 	.word	0x40013800
 80013b0:	20000499 	.word	0x20000499
 80013b4:	20000500 	.word	0x20000500
 80013b8:	2000049c 	.word	0x2000049c
 80013bc:	20000498 	.word	0x20000498
 80013c0:	20000450 	.word	0x20000450
 80013c4:	40004800 	.word	0x40004800
 80013c8:	2000054d 	.word	0x2000054d
 80013cc:	200005b4 	.word	0x200005b4
 80013d0:	20000550 	.word	0x20000550
 80013d4:	2000054c 	.word	0x2000054c
 80013d8:	20000504 	.word	0x20000504
 80013dc:	08007a80 	.word	0x08007a80
 80013e0:	40004400 	.word	0x40004400
 80013e4:	20000601 	.word	0x20000601
 80013e8:	20000668 	.word	0x20000668
 80013ec:	20000604 	.word	0x20000604
 80013f0:	20000600 	.word	0x20000600
 80013f4:	200005b8 	.word	0x200005b8

080013f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff fe82 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480b      	ldr	r0, [pc, #44]	@ (800142c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fe:	490c      	ldr	r1, [pc, #48]	@ (8001430 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001414:	4c09      	ldr	r4, [pc, #36]	@ (800143c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f005 fc75 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001426:	f7ff f9cd 	bl	80007c4 <main>
  bx lr
 800142a:	4770      	bx	lr
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001434:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 8001438:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800143c:	20001ef8 	.word	0x20001ef8

08001440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_2_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_Init+0x28>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_Init+0x28>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 fb07 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f7ff fd7a 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fbd6 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000008 	.word	0x20000008
 8001490:	2000066c 	.word	0x2000066c

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	2000066c 	.word	0x2000066c

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff0 	bl	8001494 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffe0 	bl	8001494 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0be      	b.n	8001690 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fba6 	bl	8000c80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f9ab 	bl	8001890 <ADC_ConversionStop_Disable>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 8099 	bne.w	800167e <HAL_ADC_Init+0x18e>
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 8095 	bne.w	800167e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001558:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800155c:	f023 0302 	bic.w	r3, r3, #2
 8001560:	f043 0202 	orr.w	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001570:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7b1b      	ldrb	r3, [r3, #12]
 8001576:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001578:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	4313      	orrs	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001588:	d003      	beq.n	8001592 <HAL_ADC_Init+0xa2>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <HAL_ADC_Init+0xa8>
 8001592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001596:	e000      	b.n	800159a <HAL_ADC_Init+0xaa>
 8001598:	2300      	movs	r3, #0
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7d1b      	ldrb	r3, [r3, #20]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d119      	bne.n	80015dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	035a      	lsls	r2, r3, #13
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	e00b      	b.n	80015dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_ADC_Init+0x1a8>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	430b      	orrs	r3, r1
 8001602:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800160c:	d003      	beq.n	8001616 <HAL_ADC_Init+0x126>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d104      	bne.n	8001620 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	3b01      	subs	r3, #1
 800161c:	051b      	lsls	r3, r3, #20
 800161e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	430a      	orrs	r2, r1
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_ADC_Init+0x1ac>)
 800163c:	4013      	ands	r3, r2
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	d10b      	bne.n	800165c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800165a:	e018      	b.n	800168e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	f023 0312 	bic.w	r3, r3, #18
 8001664:	f043 0210 	orr.w	r2, r3, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800167c:	e007      	b.n	800168e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	ffe1f7fd 	.word	0xffe1f7fd
 800169c:	ff1f0efe 	.word	0xff1f0efe

080016a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x20>
 80016bc:	2302      	movs	r3, #2
 80016be:	e0dc      	b.n	800187a <HAL_ADC_ConfigChannel+0x1da>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d81c      	bhi.n	800170a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b05      	subs	r3, #5
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b05      	subs	r3, #5
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34
 8001708:	e03c      	b.n	8001784 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b0c      	cmp	r3, #12
 8001710:	d81c      	bhi.n	800174c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b23      	subs	r3, #35	@ 0x23
 8001724:	221f      	movs	r2, #31
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	4019      	ands	r1, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b23      	subs	r3, #35	@ 0x23
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	@ 0x30
 800174a:	e01b      	b.n	8001784 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b41      	subs	r3, #65	@ 0x41
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	4019      	ands	r1, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b41      	subs	r3, #65	@ 0x41
 8001778:	fa00 f203 	lsl.w	r2, r0, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d91c      	bls.n	80017c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68d9      	ldr	r1, [r3, #12]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	3b1e      	subs	r3, #30
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4019      	ands	r1, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6898      	ldr	r0, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	3b1e      	subs	r3, #30
 80017b8:	fa00 f203 	lsl.w	r2, r0, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	e019      	b.n	80017fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6919      	ldr	r1, [r3, #16]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	2207      	movs	r2, #7
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4019      	ands	r1, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6898      	ldr	r0, [r3, #8]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d003      	beq.n	800180a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001806:	2b11      	cmp	r3, #17
 8001808:	d132      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_ADC_ConfigChannel+0x1e4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d125      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d126      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001830:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b10      	cmp	r3, #16
 8001838:	d11a      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_ADC_ConfigChannel+0x1e8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <HAL_ADC_ConfigChannel+0x1ec>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9a      	lsrs	r2, r3, #18
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001850:	e002      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3b01      	subs	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f9      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x1b2>
 800185e:	e007      	b.n	8001870 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	f043 0220 	orr.w	r2, r3, #32
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012400 	.word	0x40012400
 8001888:	20000000 	.word	0x20000000
 800188c:	431bde83 	.word	0x431bde83

08001890 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12e      	bne.n	8001908 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ba:	f7ff fdeb 	bl	8001494 <HAL_GetTick>
 80018be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c0:	e01b      	b.n	80018fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018c2:	f7ff fde7 	bl	8001494 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d914      	bls.n	80018fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d10d      	bne.n	80018fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e007      	b.n	800190a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d0dc      	beq.n	80018c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4906      	ldr	r1, [pc, #24]	@ (80019ac <__NVIC_EnableIRQ+0x34>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff4f 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff64 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ffb2 	bl	8001a04 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff81 	bl	80019b0 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff57 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d008      	beq.n	8001afc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e020      	b.n	8001b3e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2204      	movs	r2, #4
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e051      	b.n	8001c10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_DMA_Abort_IT+0xd4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d029      	beq.n	8001bea <HAL_DMA_Abort_IT+0xa2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <HAL_DMA_Abort_IT+0xd8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <HAL_DMA_Abort_IT+0x9e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <HAL_DMA_Abort_IT+0xdc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01a      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x98>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <HAL_DMA_Abort_IT+0xe0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d012      	beq.n	8001bda <HAL_DMA_Abort_IT+0x92>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c2c <HAL_DMA_Abort_IT+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x8c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c30 <HAL_DMA_Abort_IT+0xe8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d102      	bne.n	8001bce <HAL_DMA_Abort_IT+0x86>
 8001bc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bcc:	e00e      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001bce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bd2:	e00b      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001bd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd8:	e008      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	e005      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be4:	e002      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001be6:	2310      	movs	r3, #16
 8001be8:	e000      	b.n	8001bec <HAL_DMA_Abort_IT+0xa4>
 8001bea:	2301      	movs	r3, #1
 8001bec:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <HAL_DMA_Abort_IT+0xec>)
 8001bee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
    } 
  }
  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020008 	.word	0x40020008
 8001c20:	4002001c 	.word	0x4002001c
 8001c24:	40020030 	.word	0x40020030
 8001c28:	40020044 	.word	0x40020044
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	4002006c 	.word	0x4002006c
 8001c34:	40020000 	.word	0x40020000

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b08b      	sub	sp, #44	@ 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e169      	b.n	8001f20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8158 	bne.w	8001f1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c74:	4a98      	ldr	r2, [pc, #608]	@ (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d875      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c7a:	4a98      	ldr	r2, [pc, #608]	@ (8001edc <HAL_GPIO_Init+0x2a4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d058      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c80:	4a96      	ldr	r2, [pc, #600]	@ (8001edc <HAL_GPIO_Init+0x2a4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d86f      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c86:	4a96      	ldr	r2, [pc, #600]	@ (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d052      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a94      	ldr	r2, [pc, #592]	@ (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d869      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c92:	4a94      	ldr	r2, [pc, #592]	@ (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d04c      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c98:	4a92      	ldr	r2, [pc, #584]	@ (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d863      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c9e:	4a92      	ldr	r2, [pc, #584]	@ (8001ee8 <HAL_GPIO_Init+0x2b0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d046      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a90      	ldr	r2, [pc, #576]	@ (8001ee8 <HAL_GPIO_Init+0x2b0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d85d      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d82a      	bhi.n	8001d04 <HAL_GPIO_Init+0xcc>
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d859      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <HAL_GPIO_Init+0x80>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001d33 	.word	0x08001d33
 8001cbc:	08001d0d 	.word	0x08001d0d
 8001cc0:	08001d1f 	.word	0x08001d1f
 8001cc4:	08001d61 	.word	0x08001d61
 8001cc8:	08001d67 	.word	0x08001d67
 8001ccc:	08001d67 	.word	0x08001d67
 8001cd0:	08001d67 	.word	0x08001d67
 8001cd4:	08001d67 	.word	0x08001d67
 8001cd8:	08001d67 	.word	0x08001d67
 8001cdc:	08001d67 	.word	0x08001d67
 8001ce0:	08001d67 	.word	0x08001d67
 8001ce4:	08001d67 	.word	0x08001d67
 8001ce8:	08001d67 	.word	0x08001d67
 8001cec:	08001d67 	.word	0x08001d67
 8001cf0:	08001d67 	.word	0x08001d67
 8001cf4:	08001d67 	.word	0x08001d67
 8001cf8:	08001d67 	.word	0x08001d67
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d29 	.word	0x08001d29
 8001d04:	4a79      	ldr	r2, [pc, #484]	@ (8001eec <HAL_GPIO_Init+0x2b4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d0a:	e02c      	b.n	8001d66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e029      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e024      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	3308      	adds	r3, #8
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e01f      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	330c      	adds	r3, #12
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e01a      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e013      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	611a      	str	r2, [r3, #16]
          break;
 8001d52:	e009      	b.n	8001d68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d54:	2308      	movs	r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	615a      	str	r2, [r3, #20]
          break;
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          break;
 8001d66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2bff      	cmp	r3, #255	@ 0xff
 8001d6c:	d801      	bhi.n	8001d72 <HAL_GPIO_Init+0x13a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_Init+0x13e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	@ 0xff
 8001d7c:	d802      	bhi.n	8001d84 <HAL_GPIO_Init+0x14c>
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x152>
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	3b08      	subs	r3, #8
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	210f      	movs	r1, #15
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b1 	beq.w	8001f1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd0:	4a48      	ldr	r2, [pc, #288]	@ (8001ef4 <HAL_GPIO_Init+0x2bc>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a40      	ldr	r2, [pc, #256]	@ (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_GPIO_Init+0x1ec>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001efc <HAL_GPIO_Init+0x2c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00d      	beq.n	8001e20 <HAL_GPIO_Init+0x1e8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3e      	ldr	r2, [pc, #248]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d007      	beq.n	8001e1c <HAL_GPIO_Init+0x1e4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f04 <HAL_GPIO_Init+0x2cc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_GPIO_Init+0x1e0>
 8001e14:	2303      	movs	r3, #3
 8001e16:	e006      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e004      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e24:	2300      	movs	r3, #0
 8001e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e28:	f002 0203 	and.w	r2, r2, #3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e36:	492f      	ldr	r1, [pc, #188]	@ (8001ef4 <HAL_GPIO_Init+0x2bc>)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	492c      	ldr	r1, [pc, #176]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4928      	ldr	r1, [pc, #160]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4922      	ldr	r1, [pc, #136]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	491e      	ldr	r1, [pc, #120]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4918      	ldr	r1, [pc, #96]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4914      	ldr	r1, [pc, #80]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d021      	beq.n	8001f0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e021      	b.n	8001f1a <HAL_GPIO_Init+0x2e2>
 8001ed6:	bf00      	nop
 8001ed8:	10320000 	.word	0x10320000
 8001edc:	10310000 	.word	0x10310000
 8001ee0:	10220000 	.word	0x10220000
 8001ee4:	10210000 	.word	0x10210000
 8001ee8:	10120000 	.word	0x10120000
 8001eec:	10110000 	.word	0x10110000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	40010800 	.word	0x40010800
 8001efc:	40010c00 	.word	0x40010c00
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40011400 	.word	0x40011400
 8001f08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	4909      	ldr	r1, [pc, #36]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f47f ae8e 	bne.w	8001c4c <HAL_GPIO_Init+0x14>
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	372c      	adds	r7, #44	@ 0x2c
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	807b      	strh	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7e:	787b      	ldrb	r3, [r7, #1]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e12b      	b.n	800223a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fe7e 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	@ 0x24
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002034:	f000 fcda 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a81      	ldr	r2, [pc, #516]	@ (8002244 <HAL_I2C_Init+0x274>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d807      	bhi.n	8002054 <HAL_I2C_Init+0x84>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a80      	ldr	r2, [pc, #512]	@ (8002248 <HAL_I2C_Init+0x278>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e006      	b.n	8002062 <HAL_I2C_Init+0x92>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a7d      	ldr	r2, [pc, #500]	@ (800224c <HAL_I2C_Init+0x27c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0e7      	b.n	800223a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a78      	ldr	r2, [pc, #480]	@ (8002250 <HAL_I2C_Init+0x280>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a6a      	ldr	r2, [pc, #424]	@ (8002244 <HAL_I2C_Init+0x274>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d802      	bhi.n	80020a4 <HAL_I2C_Init+0xd4>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	e009      	b.n	80020b8 <HAL_I2C_Init+0xe8>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a69      	ldr	r2, [pc, #420]	@ (8002254 <HAL_I2C_Init+0x284>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	3301      	adds	r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	495c      	ldr	r1, [pc, #368]	@ (8002244 <HAL_I2C_Init+0x274>)
 80020d4:	428b      	cmp	r3, r1
 80020d6:	d819      	bhi.n	800210c <HAL_I2C_Init+0x13c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e59      	subs	r1, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020ec:	400b      	ands	r3, r1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_I2C_Init+0x138>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e59      	subs	r1, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	e051      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002108:	2304      	movs	r3, #4
 800210a:	e04f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <HAL_I2C_Init+0x168>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e012      	b.n	800215e <HAL_I2C_Init+0x18e>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x196>
 8002162:	2301      	movs	r3, #1
 8002164:	e022      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <HAL_I2C_Init+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e58      	subs	r0, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800218a:	e00f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	0099      	lsls	r1, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	6809      	ldr	r1, [r1, #0]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6911      	ldr	r1, [r2, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	000186a0 	.word	0x000186a0
 8002248:	001e847f 	.word	0x001e847f
 800224c:	003d08ff 	.word	0x003d08ff
 8002250:	431bde83 	.word	0x431bde83
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e272      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8087 	beq.w	8002386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b92      	ldr	r3, [pc, #584]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002284:	4b8f      	ldr	r3, [pc, #572]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d112      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
 8002290:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229c:	d10b      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229e:	4b89      	ldr	r3, [pc, #548]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d06c      	beq.n	8002384 <HAL_RCC_OscConfig+0x12c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d168      	bne.n	8002384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e24c      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x76>
 80022c0:	4b80      	ldr	r3, [pc, #512]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7f      	ldr	r2, [pc, #508]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7a      	ldr	r2, [pc, #488]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b78      	ldr	r3, [pc, #480]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0xbc>
 80022fa:	4b72      	ldr	r3, [pc, #456]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6f      	ldr	r3, [pc, #444]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 8002314:	4b6b      	ldr	r3, [pc, #428]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6a      	ldr	r2, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b68      	ldr	r3, [pc, #416]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff f8ae 	bl	8001494 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff f8aa 	bl	8001494 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	@ 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e200      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b5d      	ldr	r3, [pc, #372]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xe4>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff f89a 	bl	8001494 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f896 	bl	8001494 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1ec      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b53      	ldr	r3, [pc, #332]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x10c>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002392:	4b4c      	ldr	r3, [pc, #304]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239e:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
 80023aa:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b43      	ldr	r3, [pc, #268]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1c0      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4939      	ldr	r1, [pc, #228]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff f84f 	bl	8001494 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff f84b 	bl	8001494 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1a1      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4927      	ldr	r1, [pc, #156]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <HAL_RCC_OscConfig+0x270>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f82e 	bl	8001494 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff f82a 	bl	8001494 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e180      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d03a      	beq.n	80024dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <HAL_RCC_OscConfig+0x274>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7ff f80e 	bl	8001494 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7ff f80a 	bl	8001494 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e160      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f000 fafe 	bl	8002a9c <RCC_Delay>
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_RCC_OscConfig+0x274>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fff4 	bl	8001494 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e00f      	b.n	80024d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fff0 	bl	8001494 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e146      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	42420000 	.word	0x42420000
 80024cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b92      	ldr	r3, [pc, #584]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e9      	bne.n	80024b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a6 	beq.w	8002636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b8b      	ldr	r3, [pc, #556]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b88      	ldr	r3, [pc, #544]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a87      	ldr	r2, [pc, #540]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b85      	ldr	r3, [pc, #532]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b82      	ldr	r3, [pc, #520]	@ (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7e      	ldr	r2, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe ffb1 	bl	8001494 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe ffad 	bl	8001494 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	@ 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e103      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b75      	ldr	r3, [pc, #468]	@ (8002720 <HAL_RCC_OscConfig+0x4c8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x312>
 800255c:	4b6f      	ldr	r3, [pc, #444]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a6e      	ldr	r2, [pc, #440]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x334>
 8002572:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a69      	ldr	r2, [pc, #420]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b67      	ldr	r3, [pc, #412]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a66      	ldr	r2, [pc, #408]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x356>
 8002594:	4b61      	ldr	r3, [pc, #388]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a60      	ldr	r2, [pc, #384]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a5d      	ldr	r2, [pc, #372]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 80025ae:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a5a      	ldr	r2, [pc, #360]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	4b58      	ldr	r3, [pc, #352]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a57      	ldr	r2, [pc, #348]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe ff61 	bl	8001494 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe ff5d 	bl	8001494 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0b1      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b4b      	ldr	r3, [pc, #300]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x37e>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe ff4b 	bl	8001494 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe ff47 	bl	8001494 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e09b      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a3b      	ldr	r2, [pc, #236]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8087 	beq.w	800274e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d061      	beq.n	8002710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d146      	bne.n	80026e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff1b 	bl	8001494 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe ff17 	bl	8001494 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e06d      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	4b29      	ldr	r3, [pc, #164]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4921      	ldr	r1, [pc, #132]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a19      	ldr	r1, [r3, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	430b      	orrs	r3, r1
 80026ae:	491b      	ldr	r1, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe feeb 	bl	8001494 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fee7 	bl	8001494 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e03d      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46a>
 80026e0:	e035      	b.n	800274e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fed4 	bl	8001494 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fed0 	bl	8001494 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e026      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x498>
 800270e:	e01e      	b.n	800274e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e019      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_OscConfig+0x500>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0d0      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b6a      	ldr	r3, [pc, #424]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b67      	ldr	r3, [pc, #412]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4965      	ldr	r1, [pc, #404]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b63      	ldr	r3, [pc, #396]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b8      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b8:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a58      	ldr	r2, [pc, #352]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d0:	4b53      	ldr	r3, [pc, #332]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a52      	ldr	r2, [pc, #328]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b50      	ldr	r3, [pc, #320]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	494d      	ldr	r1, [pc, #308]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d040      	beq.n	800287c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b47      	ldr	r3, [pc, #284]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d115      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b41      	ldr	r3, [pc, #260]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e073      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06b      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4936      	ldr	r1, [pc, #216]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe fe22 	bl	8001494 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe fe1e 	bl	8001494 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e053      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b2d      	ldr	r3, [pc, #180]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b27      	ldr	r3, [pc, #156]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d210      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b24      	ldr	r3, [pc, #144]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4922      	ldr	r1, [pc, #136]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e032      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4916      	ldr	r1, [pc, #88]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d6:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	490e      	ldr	r1, [pc, #56]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ea:	f000 f821 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490a      	ldr	r1, [pc, #40]	@ (8002924 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1cc>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1d0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fb22 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	08007ae8 	.word	0x08007ae8
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800294a:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b04      	cmp	r3, #4
 8002958:	d002      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x30>
 800295a:	2b08      	cmp	r3, #8
 800295c:	d003      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x36>
 800295e:	e027      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002962:	613b      	str	r3, [r7, #16]
      break;
 8002964:	e027      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0c9b      	lsrs	r3, r3, #18
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0c5b      	lsrs	r3, r3, #17
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	4a11      	ldr	r2, [pc, #68]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002992:	fb03 f202 	mul.w	r2, r3, r2
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e004      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	613b      	str	r3, [r7, #16]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029b2:	613b      	str	r3, [r7, #16]
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	693b      	ldr	r3, [r7, #16]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	08007b00 	.word	0x08007b00
 80029d0:	08007b10 	.word	0x08007b10
 80029d4:	003d0900 	.word	0x003d0900

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b02      	ldr	r3, [pc, #8]	@ (80029e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	20000000 	.word	0x20000000

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f0:	f7ff fff2 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	@ (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08007af8 	.word	0x08007af8

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0adb      	lsrs	r3, r3, #11
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	@ (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08007af8 	.word	0x08007af8

08002a3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	220f      	movs	r2, #15
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_RCC_GetClockConfig+0x58>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_RCC_GetClockConfig+0x58>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_GetClockConfig+0x58>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_RCC_GetClockConfig+0x58>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40022000 	.word	0x40022000

08002a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <RCC_Delay+0x34>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <RCC_Delay+0x38>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0a5b      	lsrs	r3, r3, #9
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab8:	bf00      	nop
  }
  while (Delay --);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	60fa      	str	r2, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <RCC_Delay+0x1c>
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d07d      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b4c      	ldr	r3, [pc, #304]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a4b      	ldr	r2, [pc, #300]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b46      	ldr	r3, [pc, #280]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d118      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2c:	4b43      	ldr	r3, [pc, #268]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b38:	f7fe fcac 	bl	8001494 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	e008      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7fe fca8 	bl	8001494 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06d      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b5e:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02e      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d027      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b86:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b92:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d014      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fc77 	bl	8001494 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fc73 	bl	8001494 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e036      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4917      	ldr	r1, [pc, #92]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	490b      	ldr	r1, [pc, #44]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4904      	ldr	r1, [pc, #16]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	42420440 	.word	0x42420440

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e041      	b.n	8002cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f894 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f000 fa5c 	bl	8003140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d001      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03a      	b.n	8002d72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_TIM_Base_Start_IT+0x98>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x58>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d010      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0202 	mvn.w	r2, #2
 8002dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f998 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f98b 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f99a 	bl	800311a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f972 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f965 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f974 	bl	800311a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0208 	mvn.w	r2, #8
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f94c 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f93f 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f94e 	bl	800311a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f926 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f919 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f928 	bl	800311a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0201 	mvn.w	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fe74 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa7f 	bl	8003416 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8f8 	bl	800312c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0220 	mvn.w	r2, #32
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa52 	bl	8003404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0b4      	b.n	80030ee <HAL_TIM_ConfigClockSource+0x186>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbc:	d03e      	beq.n	800303c <HAL_TIM_ConfigClockSource+0xd4>
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc2:	f200 8087 	bhi.w	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fca:	f000 8086 	beq.w	80030da <HAL_TIM_ConfigClockSource+0x172>
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d87f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d01a      	beq.n	800300e <HAL_TIM_ConfigClockSource+0xa6>
 8002fd8:	2b70      	cmp	r3, #112	@ 0x70
 8002fda:	d87b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d050      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x11a>
 8002fe0:	2b60      	cmp	r3, #96	@ 0x60
 8002fe2:	d877      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b50      	cmp	r3, #80	@ 0x50
 8002fe6:	d03c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xfa>
 8002fe8:	2b50      	cmp	r3, #80	@ 0x50
 8002fea:	d873      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d058      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x13a>
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	d86f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d064      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff8:	2b30      	cmp	r3, #48	@ 0x30
 8002ffa:	d86b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d060      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d867      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05c      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b10      	cmp	r3, #16
 800300a:	d05a      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	e062      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301e:	f000 f974 	bl	800330a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	609a      	str	r2, [r3, #8]
      break;
 800303a:	e04f      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800304c:	f000 f95d 	bl	800330a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e03c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f8d4 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2150      	movs	r1, #80	@ 0x50
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f92b 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8003080:	e02c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308e:	461a      	mov	r2, r3
 8003090:	f000 f8f2 	bl	8003278 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2160      	movs	r1, #96	@ 0x60
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f91b 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e01c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 f8b4 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2140      	movs	r1, #64	@ 0x40
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f90b 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e00c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f000 f902 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030d2:	e003      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e000      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
	...

08003140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2f      	ldr	r2, [pc, #188]	@ (8003210 <TIM_Base_SetConfig+0xd0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2c      	ldr	r2, [pc, #176]	@ (8003214 <TIM_Base_SetConfig+0xd4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <TIM_Base_SetConfig+0xd8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <TIM_Base_SetConfig+0xd0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1f      	ldr	r2, [pc, #124]	@ (8003214 <TIM_Base_SetConfig+0xd4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <TIM_Base_SetConfig+0xd8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <TIM_Base_SetConfig+0xd0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
  }
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 030a 	bic.w	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0210 	bic.w	r2, r3, #16
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	031b      	lsls	r3, r3, #12
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f043 0307 	orr.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330a:	b480      	push	{r7}
 800330c:	b087      	sub	sp, #28
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003324:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	021a      	lsls	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	431a      	orrs	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	609a      	str	r2, [r3, #8]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800335c:	2302      	movs	r3, #2
 800335e:	e046      	b.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a16      	ldr	r2, [pc, #88]	@ (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d009      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a10      	ldr	r2, [pc, #64]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10c      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e042      	b.n	80034c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fcc0 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	@ 0x24
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800346a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fdb7 	bl	8003fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d175      	bne.n	80035d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Transmit+0x2c>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e06e      	b.n	80035d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	@ 0x21
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003506:	f7fd ffc5 	bl	8001494 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003520:	d108      	bne.n	8003534 <HAL_UART_Transmit+0x6c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e003      	b.n	800353c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800353c:	e02e      	b.n	800359c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2180      	movs	r1, #128	@ 0x80
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb1c 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e03a      	b.n	80035d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	3302      	adds	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	e007      	b.n	800358e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1cb      	bne.n	800353e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2140      	movs	r1, #64	@ 0x40
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fae8 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e006      	b.n	80035d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d112      	bne.n	800361e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_UART_Receive_IT+0x26>
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e00b      	b.n	8003620 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	461a      	mov	r2, r3
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb0f 	bl	8003c38 <UART_Start_Receive_IT>
 800361a:	4603      	mov	r3, r0
 800361c:	e000      	b.n	8003620 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ba      	sub	sp, #232	@ 0xe8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_UART_IRQHandler+0x66>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fbec 	bl	8003e64 <UART_Receive_IT>
      return;
 800368c:	e25b      	b.n	8003b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800368e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80de 	beq.w	8003854 <HAL_UART_IRQHandler+0x22c>
 8003698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80d1 	beq.w	8003854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xae>
 80036be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_UART_IRQHandler+0xd2>
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f043 0202 	orr.w	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xf6>
 8003706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_UART_IRQHandler+0x126>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f043 0208 	orr.w	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 81f2 	beq.w	8003b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_UART_IRQHandler+0x14e>
 8003764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb77 	bl	8003e64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <HAL_UART_IRQHandler+0x17a>
 800379a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04f      	beq.n	8003842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa81 	bl	8003caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d041      	beq.n	800383a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3314      	adds	r3, #20
 80037bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1d9      	bne.n	80037b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d013      	beq.n	8003832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a08 <HAL_UART_IRQHandler+0x3e0>)
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f996 	bl	8001b48 <HAL_DMA_Abort_IT>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800382c:	4610      	mov	r0, r2
 800382e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e00e      	b.n	8003850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f993 	bl	8003b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e00a      	b.n	8003850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f98f 	bl	8003b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	e006      	b.n	8003850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f98b 	bl	8003b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800384e:	e175      	b.n	8003b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	bf00      	nop
    return;
 8003852:	e173      	b.n	8003b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 814f 	bne.w	8003afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8148 	beq.w	8003afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8141 	beq.w	8003afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80b6 	beq.w	8003a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8145 	beq.w	8003b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038be:	429a      	cmp	r2, r3
 80038c0:	f080 813e 	bcs.w	8003b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	f000 8088 	beq.w	80039e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003904:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003910:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800391c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1d9      	bne.n	80038d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003948:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800394c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003950:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800395a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e1      	bne.n	8003924 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003984:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003986:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800398a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e3      	bne.n	80039a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe f875 	bl	8001ad2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8b6 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a04:	e09c      	b.n	8003b40 <HAL_UART_IRQHandler+0x518>
 8003a06:	bf00      	nop
 8003a08:	08003d6f 	.word	0x08003d6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808e 	beq.w	8003b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8089 	beq.w	8003b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e3      	bne.n	8003a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	623b      	str	r3, [r7, #32]
   return(result);
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e3      	bne.n	8003a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0310 	bic.w	r3, r3, #16
 8003ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ad4:	61fa      	str	r2, [r7, #28]
 8003ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	69b9      	ldr	r1, [r7, #24]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e3      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f83b 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003afa:	e023      	b.n	8003b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_IRQHandler+0x4f4>
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f93e 	bl	8003d96 <UART_Transmit_IT>
    return;
 8003b1a:	e014      	b.n	8003b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <HAL_UART_IRQHandler+0x51e>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f97d 	bl	8003e34 <UART_EndTransmit_IT>
    return;
 8003b3a:	e004      	b.n	8003b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b3c:	bf00      	nop
 8003b3e:	e002      	b.n	8003b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b40:	bf00      	nop
 8003b42:	e000      	b.n	8003b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b44:	bf00      	nop
  }
}
 8003b46:	37e8      	adds	r7, #232	@ 0xe8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	e03b      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d037      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fd fc78 	bl	8001494 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e03a      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d020      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d01d      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d116      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f856 	bl	8003caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2208      	movs	r2, #8
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e00f      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d0b4      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2222      	movs	r2, #34	@ 0x22
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b095      	sub	sp, #84	@ 0x54
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3314      	adds	r3, #20
 8003cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d119      	bne.n	8003d56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d42:	61ba      	str	r2, [r7, #24]
 8003d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6979      	ldr	r1, [r7, #20]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d64:	bf00      	nop
 8003d66:	3754      	adds	r7, #84	@ 0x54
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fee8 	bl	8003b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b21      	cmp	r3, #33	@ 0x21
 8003da8:	d13e      	bne.n	8003e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db2:	d114      	bne.n	8003dde <UART_Transmit_IT+0x48>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d110      	bne.n	8003dde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	1c9a      	adds	r2, r3, #2
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]
 8003ddc:	e008      	b.n	8003df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6211      	str	r1, [r2, #32]
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe79 	bl	8003b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	@ 0x30
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b22      	cmp	r3, #34	@ 0x22
 8003e76:	f040 80ae 	bne.w	8003fd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e82:	d117      	bne.n	8003eb4 <UART_Receive_IT+0x50>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d113      	bne.n	8003eb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eb2:	e026      	b.n	8003f02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec6:	d007      	beq.n	8003ed8 <UART_Receive_IT+0x74>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <UART_Receive_IT+0x82>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e008      	b.n	8003ef8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d15d      	bne.n	8003fd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0220 	bic.w	r2, r2, #32
 8003f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d135      	bne.n	8003fc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	613b      	str	r3, [r7, #16]
   return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f023 0310 	bic.w	r3, r3, #16
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f82:	623a      	str	r2, [r7, #32]
 8003f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	69f9      	ldr	r1, [r7, #28]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d10a      	bne.n	8003fba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fdd5 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 8003fc6:	e002      	b.n	8003fce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fd f95f 	bl	800128c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e002      	b.n	8003fd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3730      	adds	r7, #48	@ 0x30
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800401a:	f023 030c 	bic.w	r3, r3, #12
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	430b      	orrs	r3, r1
 8004026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2c      	ldr	r2, [pc, #176]	@ (80040f4 <UART_SetConfig+0x114>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fce4 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	e002      	b.n	8004056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fccc 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	4a22      	ldr	r2, [pc, #136]	@ (80040f8 <UART_SetConfig+0x118>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	0119      	lsls	r1, r3, #4
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009a      	lsls	r2, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fbb2 f2f3 	udiv	r2, r2, r3
 800408c:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <UART_SetConfig+0x118>)
 800408e:	fba3 0302 	umull	r0, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2064      	movs	r0, #100	@ 0x64
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	3332      	adds	r3, #50	@ 0x32
 80040a0:	4a15      	ldr	r2, [pc, #84]	@ (80040f8 <UART_SetConfig+0x118>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040ac:	4419      	add	r1, r3
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <UART_SetConfig+0x118>)
 80040c6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2064      	movs	r0, #100	@ 0x64
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	3332      	adds	r3, #50	@ 0x32
 80040d8:	4a07      	ldr	r2, [pc, #28]	@ (80040f8 <UART_SetConfig+0x118>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	440a      	add	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40013800 	.word	0x40013800
 80040f8:	51eb851f 	.word	0x51eb851f

080040fc <__NVIC_SetPriority>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	@ (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	@ (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <SysTick_Handler+0x1c>)
 8004156:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004158:	f001 fd20 	bl	8005b9c <xTaskGetSchedulerState>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004162:	f002 fac1 	bl	80066e8 <xPortSysTickHandler>
  }
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	e000e010 	.word	0xe000e010

08004170 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004174:	2100      	movs	r1, #0
 8004176:	f06f 0004 	mvn.w	r0, #4
 800417a:	f7ff ffbf 	bl	80040fc <__NVIC_SetPriority>
#endif
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418a:	f3ef 8305 	mrs	r3, IPSR
 800418e:	603b      	str	r3, [r7, #0]
  return(result);
 8004190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004196:	f06f 0305 	mvn.w	r3, #5
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e00c      	b.n	80041b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <osKernelInitialize+0x40>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <osKernelInitialize+0x40>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e002      	b.n	80041b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041b8:	687b      	ldr	r3, [r7, #4]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	20000670 	.word	0x20000670

080041c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ce:	f3ef 8305 	mrs	r3, IPSR
 80041d2:	603b      	str	r3, [r7, #0]
  return(result);
 80041d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80041da:	f06f 0305 	mvn.w	r3, #5
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e010      	b.n	8004204 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <osKernelStart+0x48>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d109      	bne.n	80041fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041ea:	f7ff ffc1 	bl	8004170 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <osKernelStart+0x48>)
 80041f0:	2202      	movs	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041f4:	f001 f872 	bl	80052dc <vTaskStartScheduler>
      stat = osOK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e002      	b.n	8004204 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004204:	687b      	ldr	r3, [r7, #4]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000670 	.word	0x20000670

08004214 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	@ 0x38
 8004218:	af04      	add	r7, sp, #16
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004224:	f3ef 8305 	mrs	r3, IPSR
 8004228:	617b      	str	r3, [r7, #20]
  return(result);
 800422a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800422c:	2b00      	cmp	r3, #0
 800422e:	d17e      	bne.n	800432e <osThreadNew+0x11a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d07b      	beq.n	800432e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800423a:	2318      	movs	r3, #24
 800423c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d045      	beq.n	80042da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <osThreadNew+0x48>
        name = attr->name;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <osThreadNew+0x6e>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b38      	cmp	r3, #56	@ 0x38
 8004274:	d805      	bhi.n	8004282 <osThreadNew+0x6e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <osThreadNew+0x72>
        return (NULL);
 8004282:	2300      	movs	r3, #0
 8004284:	e054      	b.n	8004330 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <osThreadNew+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80042a4:	d90a      	bls.n	80042bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <osThreadNew+0xa8>
        mem = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e010      	b.n	80042de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10c      	bne.n	80042de <osThreadNew+0xca>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <osThreadNew+0xca>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <osThreadNew+0xca>
          mem = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	e001      	b.n	80042de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d110      	bne.n	8004306 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ec:	9202      	str	r2, [sp, #8]
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6a3a      	ldr	r2, [r7, #32]
 80042f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fdfa 	bl	8004ef4 <xTaskCreateStatic>
 8004300:	4603      	mov	r3, r0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e013      	b.n	800432e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d110      	bne.n	800432e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	b29a      	uxth	r2, r3
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fe48 	bl	8004fb4 <xTaskCreate>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <osThreadNew+0x11a>
            hTask = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800432e:	693b      	ldr	r3, [r7, #16]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3728      	adds	r7, #40	@ 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004340:	f3ef 8305 	mrs	r3, IPSR
 8004344:	60bb      	str	r3, [r7, #8]
  return(result);
 8004346:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <osDelay+0x1c>
    stat = osErrorISR;
 800434c:	f06f 0305 	mvn.w	r3, #5
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e007      	b.n	8004364 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <osDelay+0x2c>
      vTaskDelay(ticks);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 ff86 	bl	8005270 <vTaskDelay>
    }
  }

  return (stat);
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a07      	ldr	r2, [pc, #28]	@ (800439c <vApplicationGetTimerTaskMemory+0x2c>)
 8004380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a06      	ldr	r2, [pc, #24]	@ (80043a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000674 	.word	0x20000674
 80043a0:	2000071c 	.word	0x2000071c

080043a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f103 0208 	add.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d103      	bne.n	8004460 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	e00c      	b.n	800447a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3308      	adds	r3, #8
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e002      	b.n	800446e <vListInsert+0x2e>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d2f6      	bcs.n	8004468 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6852      	ldr	r2, [r2, #4]
 80044d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d103      	bne.n	80044e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
	...

08004504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004530:	f002 f85c 	bl	80065ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	68f9      	ldr	r1, [r7, #12]
 800453e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004560:	3b01      	subs	r3, #1
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	22ff      	movs	r2, #255	@ 0xff
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	22ff      	movs	r2, #255	@ 0xff
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d114      	bne.n	80045b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01a      	beq.n	80045c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3310      	adds	r3, #16
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f93c 	bl	8005810 <xTaskRemoveFromEventList>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800459e:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <xQueueGenericReset+0xd0>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	e009      	b.n	80045c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3310      	adds	r3, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fef5 	bl	80043a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3324      	adds	r3, #36	@ 0x24
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fef0 	bl	80043a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045c4:	f002 f842 	bl	800664c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045c8:	2301      	movs	r3, #1
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	@ 0x38
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <xQueueGenericCreateStatic+0x56>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <xQueueGenericCreateStatic+0x5a>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <xQueueGenericCreateStatic+0x5c>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <xQueueGenericCreateStatic+0x84>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <xQueueGenericCreateStatic+0x88>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <xQueueGenericCreateStatic+0x8a>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	61fb      	str	r3, [r7, #28]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800467e:	2350      	movs	r3, #80	@ 0x50
 8004680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b50      	cmp	r3, #80	@ 0x50
 8004686:	d00b      	beq.n	80046a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	61bb      	str	r3, [r7, #24]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f805 	bl	80046d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3730      	adds	r7, #48	@ 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e002      	b.n	80046f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004700:	2101      	movs	r1, #1
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f7ff fefe 	bl	8004504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08e      	sub	sp, #56	@ 0x38
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004726:	2300      	movs	r3, #0
 8004728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <xQueueGenericSend+0x34>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <xQueueGenericSend+0x42>
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <xQueueGenericSend+0x46>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericSend+0x48>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueGenericSend+0x64>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d103      	bne.n	800478a <xQueueGenericSend+0x72>
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <xQueueGenericSend+0x76>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueGenericSend+0x78>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <xQueueGenericSend+0x94>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	623b      	str	r3, [r7, #32]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ac:	f001 f9f6 	bl	8005b9c <xTaskGetSchedulerState>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <xQueueGenericSend+0xa4>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <xQueueGenericSend+0xa8>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <xQueueGenericSend+0xaa>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <xQueueGenericSend+0xc6>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	61fb      	str	r3, [r7, #28]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047de:	f001 ff05 	bl	80065ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <xQueueGenericSend+0xdc>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d129      	bne.n	8004848 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047fa:	f000 fa0f 	bl	8004c1c <prvCopyDataToQueue>
 80047fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	3324      	adds	r3, #36	@ 0x24
 800480c:	4618      	mov	r0, r3
 800480e:	f000 ffff 	bl	8005810 <xTaskRemoveFromEventList>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004818:	4b3f      	ldr	r3, [pc, #252]	@ (8004918 <xQueueGenericSend+0x200>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	e00a      	b.n	8004840 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004830:	4b39      	ldr	r3, [pc, #228]	@ (8004918 <xQueueGenericSend+0x200>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004840:	f001 ff04 	bl	800664c <vPortExitCritical>
				return pdPASS;
 8004844:	2301      	movs	r3, #1
 8004846:	e063      	b.n	8004910 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800484e:	f001 fefd 	bl	800664c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004852:	2300      	movs	r3, #0
 8004854:	e05c      	b.n	8004910 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f839 	bl	80058d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800486a:	f001 feef 	bl	800664c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800486e:	f000 fda5 	bl	80053bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004872:	f001 febb 	bl	80065ec <vPortEnterCritical>
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800487c:	b25b      	sxtb	r3, r3
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d103      	bne.n	800488c <xQueueGenericSend+0x174>
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004892:	b25b      	sxtb	r3, r3
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d103      	bne.n	80048a2 <xQueueGenericSend+0x18a>
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048a2:	f001 fed3 	bl	800664c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048a6:	1d3a      	adds	r2, r7, #4
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f828 	bl	8005904 <xTaskCheckForTimeOut>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d124      	bne.n	8004904 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048bc:	f000 faa6 	bl	8004e0c <prvIsQueueFull>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	3310      	adds	r3, #16
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4611      	mov	r1, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 ff4c 	bl	800576c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d6:	f000 fa31 	bl	8004d3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048da:	f000 fd7d 	bl	80053d8 <xTaskResumeAll>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f af7c 	bne.w	80047de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <xQueueGenericSend+0x200>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	e772      	b.n	80047de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048fa:	f000 fa1f 	bl	8004d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048fe:	f000 fd6b 	bl	80053d8 <xTaskResumeAll>
 8004902:	e76c      	b.n	80047de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004906:	f000 fa19 	bl	8004d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800490a:	f000 fd65 	bl	80053d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800490e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004910:	4618      	mov	r0, r3
 8004912:	3738      	adds	r7, #56	@ 0x38
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b090      	sub	sp, #64	@ 0x40
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <xQueueGenericSendFromISR+0x3e>
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <xQueueGenericSendFromISR+0x42>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGenericSendFromISR+0x44>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d103      	bne.n	800498a <xQueueGenericSendFromISR+0x6e>
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <xQueueGenericSendFromISR+0x72>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <xQueueGenericSendFromISR+0x74>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	623b      	str	r3, [r7, #32]
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ac:	f001 fee0 	bl	8006770 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049b0:	f3ef 8211 	mrs	r2, BASEPRI
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	61fa      	str	r2, [r7, #28]
 80049c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <xQueueGenericSendFromISR+0xc2>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d12f      	bne.n	8004a3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049f4:	f000 f912 	bl	8004c1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d112      	bne.n	8004a28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0c:	3324      	adds	r3, #36	@ 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fefe 	bl	8005810 <xTaskRemoveFromEventList>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00e      	beq.n	8004a38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e007      	b.n	8004a38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	b25a      	sxtb	r2, r3
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a3c:	e001      	b.n	8004a42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3740      	adds	r7, #64	@ 0x40
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	@ 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <xQueueReceive+0x32>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	623b      	str	r3, [r7, #32]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <xQueueReceive+0x40>
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <xQueueReceive+0x44>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <xQueueReceive+0x46>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <xQueueReceive+0x62>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61fb      	str	r3, [r7, #28]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aba:	f001 f86f 	bl	8005b9c <xTaskGetSchedulerState>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xQueueReceive+0x72>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueReceive+0x76>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueReceive+0x78>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <xQueueReceive+0x94>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61bb      	str	r3, [r7, #24]
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	e7fd      	b.n	8004ae8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aec:	f001 fd7e 	bl	80065ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01f      	beq.n	8004b3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b00:	f000 f8f6 	bl	8004cf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1e5a      	subs	r2, r3, #1
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	3310      	adds	r3, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fe79 	bl	8005810 <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b24:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <xQueueReceive+0x1c0>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b34:	f001 fd8a 	bl	800664c <vPortExitCritical>
				return pdPASS;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e069      	b.n	8004c10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b42:	f001 fd83 	bl	800664c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e062      	b.n	8004c10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 febf 	bl	80058d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b5e:	f001 fd75 	bl	800664c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b62:	f000 fc2b 	bl	80053bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b66:	f001 fd41 	bl	80065ec <vPortEnterCritical>
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d103      	bne.n	8004b80 <xQueueReceive+0x128>
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d103      	bne.n	8004b96 <xQueueReceive+0x13e>
 8004b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b96:	f001 fd59 	bl	800664c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b9a:	1d3a      	adds	r2, r7, #4
 8004b9c:	f107 0310 	add.w	r3, r7, #16
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 feae 	bl	8005904 <xTaskCheckForTimeOut>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d123      	bne.n	8004bf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb0:	f000 f916 	bl	8004de0 <prvIsQueueEmpty>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d017      	beq.n	8004bea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	3324      	adds	r3, #36	@ 0x24
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fdd2 	bl	800576c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bca:	f000 f8b7 	bl	8004d3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bce:	f000 fc03 	bl	80053d8 <xTaskResumeAll>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d189      	bne.n	8004aec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <xQueueReceive+0x1c0>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	e780      	b.n	8004aec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bec:	f000 f8a6 	bl	8004d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf0:	f000 fbf2 	bl	80053d8 <xTaskResumeAll>
 8004bf4:	e77a      	b.n	8004aec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bf8:	f000 f8a0 	bl	8004d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bfc:	f000 fbec 	bl	80053d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c02:	f000 f8ed 	bl	8004de0 <prvIsQueueEmpty>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f43f af6f 	beq.w	8004aec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3730      	adds	r7, #48	@ 0x30
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14d      	bne.n	8004cde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ffc6 	bl	8005bd8 <xTaskPriorityDisinherit>
 8004c4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	e043      	b.n	8004cde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d119      	bne.n	8004c90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6858      	ldr	r0, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	461a      	mov	r2, r3
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	f002 f880 	bl	8006d6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d32b      	bcc.n	8004cde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	e026      	b.n	8004cde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68d8      	ldr	r0, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	f002 f866 	bl	8006d6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	425b      	negs	r3, r3
 8004caa:	441a      	add	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d207      	bcs.n	8004ccc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d105      	bne.n	8004cde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ce6:	697b      	ldr	r3, [r7, #20]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d303      	bcc.n	8004d24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68d9      	ldr	r1, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f002 f81c 	bl	8006d6c <memcpy>
	}
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d44:	f001 fc52 	bl	80065ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d50:	e011      	b.n	8004d76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3324      	adds	r3, #36	@ 0x24
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd56 	bl	8005810 <xTaskRemoveFromEventList>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d6a:	f000 fe2f 	bl	80059cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dce9      	bgt.n	8004d52 <prvUnlockQueue+0x16>
 8004d7e:	e000      	b.n	8004d82 <prvUnlockQueue+0x46>
					break;
 8004d80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	22ff      	movs	r2, #255	@ 0xff
 8004d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d8a:	f001 fc5f 	bl	800664c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d8e:	f001 fc2d 	bl	80065ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d9a:	e011      	b.n	8004dc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d012      	beq.n	8004dca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3310      	adds	r3, #16
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fd31 	bl	8005810 <xTaskRemoveFromEventList>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004db4:	f000 fe0a 	bl	80059cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db8:	7bbb      	ldrb	r3, [r7, #14]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dce9      	bgt.n	8004d9c <prvUnlockQueue+0x60>
 8004dc8:	e000      	b.n	8004dcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	22ff      	movs	r2, #255	@ 0xff
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004dd4:	f001 fc3a 	bl	800664c <vPortExitCritical>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de8:	f001 fc00 	bl	80065ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e001      	b.n	8004dfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dfe:	f001 fc25 	bl	800664c <vPortExitCritical>

	return xReturn;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e14:	f001 fbea 	bl	80065ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d102      	bne.n	8004e2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e001      	b.n	8004e2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e2e:	f001 fc0d 	bl	800664c <vPortExitCritical>

	return xReturn;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e014      	b.n	8004e76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e88 <vQueueAddToRegistry+0x4c>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e58:	490b      	ldr	r1, [pc, #44]	@ (8004e88 <vQueueAddToRegistry+0x4c>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e62:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <vQueueAddToRegistry+0x4c>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e6e:	e006      	b.n	8004e7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b07      	cmp	r3, #7
 8004e7a:	d9e7      	bls.n	8004e4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	20000b1c 	.word	0x20000b1c

08004e8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e9c:	f001 fba6 	bl	80065ec <vPortEnterCritical>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d103      	bne.n	8004eb6 <vQueueWaitForMessageRestricted+0x2a>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d103      	bne.n	8004ecc <vQueueWaitForMessageRestricted+0x40>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ecc:	f001 fbbe 	bl	800664c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3324      	adds	r3, #36	@ 0x24
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fc69 	bl	80057b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f7ff ff28 	bl	8004d3c <prvUnlockQueue>
	}
 8004eec:	bf00      	nop
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	@ 0x38
 8004ef8:	af04      	add	r7, sp, #16
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	623b      	str	r3, [r7, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61fb      	str	r3, [r7, #28]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f3e:	23a8      	movs	r3, #168	@ 0xa8
 8004f40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2ba8      	cmp	r3, #168	@ 0xa8
 8004f46:	d00b      	beq.n	8004f60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	61bb      	str	r3, [r7, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	e7fd      	b.n	8004f5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <xTaskCreateStatic+0xb2>
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f80:	2300      	movs	r3, #0
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f851 	bl	8005040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fa0:	f000 f8f6 	bl	8005190 <prvAddNewTaskToReadyList>
 8004fa4:	e001      	b.n	8004faa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004faa:	697b      	ldr	r3, [r7, #20]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3728      	adds	r7, #40	@ 0x28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	@ 0x30
 8004fb8:	af04      	add	r7, sp, #16
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fc11 	bl	80067f0 <pvPortMalloc>
 8004fce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fd6:	20a8      	movs	r0, #168	@ 0xa8
 8004fd8:	f001 fc0a 	bl	80067f0 <pvPortMalloc>
 8004fdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fea:	e005      	b.n	8004ff8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fec:	6978      	ldr	r0, [r7, #20]
 8004fee:	f001 fccd 	bl	800698c <vPortFree>
 8004ff2:	e001      	b.n	8004ff8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	2300      	movs	r3, #0
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f80f 	bl	8005040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005022:	69f8      	ldr	r0, [r7, #28]
 8005024:	f000 f8b4 	bl	8005190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005028:	2301      	movs	r3, #1
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e002      	b.n	8005034 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005034:	69bb      	ldr	r3, [r7, #24]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	461a      	mov	r2, r3
 8005058:	21a5      	movs	r1, #165	@ 0xa5
 800505a:	f001 fdd7 	bl	8006c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005068:	3b01      	subs	r3, #1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	617b      	str	r3, [r7, #20]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01f      	beq.n	80050e0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e012      	b.n	80050cc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	7819      	ldrb	r1, [r3, #0]
 80050ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	3334      	adds	r3, #52	@ 0x34
 80050b6:	460a      	mov	r2, r1
 80050b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d9e9      	bls.n	80050a6 <prvInitialiseNewTask+0x66>
 80050d2:	e000      	b.n	80050d6 <prvInitialiseNewTask+0x96>
			{
				break;
 80050d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050de:	e003      	b.n	80050e8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b37      	cmp	r3, #55	@ 0x37
 80050ec:	d901      	bls.n	80050f2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050ee:	2337      	movs	r3, #55	@ 0x37
 80050f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	2200      	movs	r2, #0
 8005102:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f96a 	bl	80043e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	3318      	adds	r3, #24
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f965 	bl	80043e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800511c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	2200      	movs	r2, #0
 800513a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	3354      	adds	r3, #84	@ 0x54
 8005142:	224c      	movs	r2, #76	@ 0x4c
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f001 fd60 	bl	8006c0c <memset>
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	4a0d      	ldr	r2, [pc, #52]	@ (8005184 <prvInitialiseNewTask+0x144>)
 8005150:	659a      	str	r2, [r3, #88]	@ 0x58
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	4a0c      	ldr	r2, [pc, #48]	@ (8005188 <prvInitialiseNewTask+0x148>)
 8005156:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	4a0c      	ldr	r2, [pc, #48]	@ (800518c <prvInitialiseNewTask+0x14c>)
 800515c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	69b8      	ldr	r0, [r7, #24]
 8005164:	f001 f954 	bl	8006410 <pxPortInitialiseStack>
 8005168:	4602      	mov	r2, r0
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800517a:	bf00      	nop
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20001db0 	.word	0x20001db0
 8005188:	20001e18 	.word	0x20001e18
 800518c:	20001e80 	.word	0x20001e80

08005190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005198:	f001 fa28 	bl	80065ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800519c:	4b2d      	ldr	r3, [pc, #180]	@ (8005254 <prvAddNewTaskToReadyList+0xc4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005254 <prvAddNewTaskToReadyList+0xc4>)
 80051a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005258 <prvAddNewTaskToReadyList+0xc8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005258 <prvAddNewTaskToReadyList+0xc8>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b4:	4b27      	ldr	r3, [pc, #156]	@ (8005254 <prvAddNewTaskToReadyList+0xc4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d110      	bne.n	80051de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051bc:	f000 fc2a 	bl	8005a14 <prvInitialiseTaskLists>
 80051c0:	e00d      	b.n	80051de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051c2:	4b26      	ldr	r3, [pc, #152]	@ (800525c <prvAddNewTaskToReadyList+0xcc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051ca:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <prvAddNewTaskToReadyList+0xc8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d802      	bhi.n	80051de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <prvAddNewTaskToReadyList+0xc8>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051de:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <prvAddNewTaskToReadyList+0xd0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <prvAddNewTaskToReadyList+0xd0>)
 80051e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <prvAddNewTaskToReadyList+0xd0>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <prvAddNewTaskToReadyList+0xd4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d903      	bls.n	8005204 <prvAddNewTaskToReadyList+0x74>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <prvAddNewTaskToReadyList+0xd4>)
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <prvAddNewTaskToReadyList+0xd8>)
 8005212:	441a      	add	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7ff f8ed 	bl	80043fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005220:	f001 fa14 	bl	800664c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005224:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <prvAddNewTaskToReadyList+0xcc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <prvAddNewTaskToReadyList+0xc8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	429a      	cmp	r2, r3
 8005238:	d207      	bcs.n	800524a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800523a:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <prvAddNewTaskToReadyList+0xdc>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20001030 	.word	0x20001030
 8005258:	20000b5c 	.word	0x20000b5c
 800525c:	2000103c 	.word	0x2000103c
 8005260:	2000104c 	.word	0x2000104c
 8005264:	20001038 	.word	0x20001038
 8005268:	20000b60 	.word	0x20000b60
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d018      	beq.n	80052b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005282:	4b14      	ldr	r3, [pc, #80]	@ (80052d4 <vTaskDelay+0x64>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <vTaskDelay+0x32>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60bb      	str	r3, [r7, #8]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052a2:	f000 f88b 	bl	80053bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052a6:	2100      	movs	r1, #0
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fd05 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052ae:	f000 f893 	bl	80053d8 <xTaskResumeAll>
 80052b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d107      	bne.n	80052ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052ba:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <vTaskDelay+0x68>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20001058 	.word	0x20001058
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ea:	463a      	mov	r2, r7
 80052ec:	1d39      	adds	r1, r7, #4
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb fa4e 	bl	8000794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	9202      	str	r2, [sp, #8]
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	2300      	movs	r3, #0
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	2300      	movs	r3, #0
 8005308:	460a      	mov	r2, r1
 800530a:	4924      	ldr	r1, [pc, #144]	@ (800539c <vTaskStartScheduler+0xc0>)
 800530c:	4824      	ldr	r0, [pc, #144]	@ (80053a0 <vTaskStartScheduler+0xc4>)
 800530e:	f7ff fdf1 	bl	8004ef4 <xTaskCreateStatic>
 8005312:	4603      	mov	r3, r0
 8005314:	4a23      	ldr	r2, [pc, #140]	@ (80053a4 <vTaskStartScheduler+0xc8>)
 8005316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005318:	4b22      	ldr	r3, [pc, #136]	@ (80053a4 <vTaskStartScheduler+0xc8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005320:	2301      	movs	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e001      	b.n	800532a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d102      	bne.n	8005336 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005330:	f000 fd16 	bl	8005d60 <xTimerCreateTimerTask>
 8005334:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11b      	bne.n	8005374 <vTaskStartScheduler+0x98>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	613b      	str	r3, [r7, #16]
}
 800534e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005350:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <vTaskStartScheduler+0xcc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3354      	adds	r3, #84	@ 0x54
 8005356:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <vTaskStartScheduler+0xd0>)
 8005358:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800535a:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <vTaskStartScheduler+0xd4>)
 800535c:	f04f 32ff 	mov.w	r2, #4294967295
 8005360:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005362:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <vTaskStartScheduler+0xd8>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <vTaskStartScheduler+0xdc>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800536e:	f001 f8cb 	bl	8006508 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005372:	e00f      	b.n	8005394 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d10b      	bne.n	8005394 <vTaskStartScheduler+0xb8>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60fb      	str	r3, [r7, #12]
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <vTaskStartScheduler+0xb4>
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	08007a88 	.word	0x08007a88
 80053a0:	080059e5 	.word	0x080059e5
 80053a4:	20001054 	.word	0x20001054
 80053a8:	20000b5c 	.word	0x20000b5c
 80053ac:	20000010 	.word	0x20000010
 80053b0:	20001050 	.word	0x20001050
 80053b4:	2000103c 	.word	0x2000103c
 80053b8:	20001034 	.word	0x20001034

080053bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053c0:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <vTaskSuspendAll+0x18>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a03      	ldr	r2, [pc, #12]	@ (80053d4 <vTaskSuspendAll+0x18>)
 80053c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053ca:	bf00      	nop
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20001058 	.word	0x20001058

080053d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053e6:	4b42      	ldr	r3, [pc, #264]	@ (80054f0 <xTaskResumeAll+0x118>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <xTaskResumeAll+0x2e>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	603b      	str	r3, [r7, #0]
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005406:	f001 f8f1 	bl	80065ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <xTaskResumeAll+0x118>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	4a37      	ldr	r2, [pc, #220]	@ (80054f0 <xTaskResumeAll+0x118>)
 8005412:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005414:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <xTaskResumeAll+0x118>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d162      	bne.n	80054e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800541c:	4b35      	ldr	r3, [pc, #212]	@ (80054f4 <xTaskResumeAll+0x11c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d05e      	beq.n	80054e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005424:	e02f      	b.n	8005486 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005426:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <xTaskResumeAll+0x120>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3318      	adds	r3, #24
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f83c 	bl	80044b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3304      	adds	r3, #4
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f837 	bl	80044b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b2d      	ldr	r3, [pc, #180]	@ (80054fc <xTaskResumeAll+0x124>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d903      	bls.n	8005456 <xTaskResumeAll+0x7e>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <xTaskResumeAll+0x124>)
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <xTaskResumeAll+0x128>)
 8005464:	441a      	add	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fe ffc4 	bl	80043fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005476:	4b23      	ldr	r3, [pc, #140]	@ (8005504 <xTaskResumeAll+0x12c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005480:	4b21      	ldr	r3, [pc, #132]	@ (8005508 <xTaskResumeAll+0x130>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005486:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <xTaskResumeAll+0x120>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1cb      	bne.n	8005426 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005494:	f000 fb62 	bl	8005b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005498:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <xTaskResumeAll+0x134>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054a4:	f000 f844 	bl	8005530 <xTaskIncrementTick>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80054ae:	4b16      	ldr	r3, [pc, #88]	@ (8005508 <xTaskResumeAll+0x130>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f1      	bne.n	80054a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <xTaskResumeAll+0x134>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054c6:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <xTaskResumeAll+0x130>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <xTaskResumeAll+0x138>)
 80054d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054e2:	f001 f8b3 	bl	800664c <vPortExitCritical>

	return xAlreadyYielded;
 80054e6:	68bb      	ldr	r3, [r7, #8]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20001058 	.word	0x20001058
 80054f4:	20001030 	.word	0x20001030
 80054f8:	20000ff0 	.word	0x20000ff0
 80054fc:	20001038 	.word	0x20001038
 8005500:	20000b60 	.word	0x20000b60
 8005504:	20000b5c 	.word	0x20000b5c
 8005508:	20001044 	.word	0x20001044
 800550c:	20001040 	.word	0x20001040
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800551a:	4b04      	ldr	r3, [pc, #16]	@ (800552c <xTaskGetTickCount+0x18>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005520:	687b      	ldr	r3, [r7, #4]
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	20001034 	.word	0x20001034

08005530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800553a:	4b4f      	ldr	r3, [pc, #316]	@ (8005678 <xTaskIncrementTick+0x148>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f040 8090 	bne.w	8005664 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005544:	4b4d      	ldr	r3, [pc, #308]	@ (800567c <xTaskIncrementTick+0x14c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800554c:	4a4b      	ldr	r2, [pc, #300]	@ (800567c <xTaskIncrementTick+0x14c>)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d121      	bne.n	800559c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005558:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <xTaskIncrementTick+0x150>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	603b      	str	r3, [r7, #0]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <xTaskIncrementTick+0x46>
 800557a:	4b41      	ldr	r3, [pc, #260]	@ (8005680 <xTaskIncrementTick+0x150>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	4b40      	ldr	r3, [pc, #256]	@ (8005684 <xTaskIncrementTick+0x154>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a3e      	ldr	r2, [pc, #248]	@ (8005680 <xTaskIncrementTick+0x150>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4a3e      	ldr	r2, [pc, #248]	@ (8005684 <xTaskIncrementTick+0x154>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <xTaskIncrementTick+0x158>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a3c      	ldr	r2, [pc, #240]	@ (8005688 <xTaskIncrementTick+0x158>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	f000 fae0 	bl	8005b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800559c:	4b3b      	ldr	r3, [pc, #236]	@ (800568c <xTaskIncrementTick+0x15c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d349      	bcc.n	800563a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	4b36      	ldr	r3, [pc, #216]	@ (8005680 <xTaskIncrementTick+0x150>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <xTaskIncrementTick+0x15c>)
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	601a      	str	r2, [r3, #0]
					break;
 80055b8:	e03f      	b.n	800563a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ba:	4b31      	ldr	r3, [pc, #196]	@ (8005680 <xTaskIncrementTick+0x150>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d203      	bcs.n	80055da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055d2:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <xTaskIncrementTick+0x15c>)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055d8:	e02f      	b.n	800563a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe ff66 	bl	80044b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	3318      	adds	r3, #24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe ff5d 	bl	80044b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fa:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <xTaskIncrementTick+0x160>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d903      	bls.n	800560a <xTaskIncrementTick+0xda>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <xTaskIncrementTick+0x160>)
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <xTaskIncrementTick+0x164>)
 8005618:	441a      	add	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fe feea 	bl	80043fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562a:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <xTaskIncrementTick+0x168>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d3b8      	bcc.n	80055a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005638:	e7b5      	b.n	80055a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <xTaskIncrementTick+0x168>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	4914      	ldr	r1, [pc, #80]	@ (8005694 <xTaskIncrementTick+0x164>)
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d901      	bls.n	8005656 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005656:	4b11      	ldr	r3, [pc, #68]	@ (800569c <xTaskIncrementTick+0x16c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e004      	b.n	800566e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005664:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <xTaskIncrementTick+0x170>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	4a0d      	ldr	r2, [pc, #52]	@ (80056a0 <xTaskIncrementTick+0x170>)
 800566c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20001058 	.word	0x20001058
 800567c:	20001034 	.word	0x20001034
 8005680:	20000fe8 	.word	0x20000fe8
 8005684:	20000fec 	.word	0x20000fec
 8005688:	20001048 	.word	0x20001048
 800568c:	20001050 	.word	0x20001050
 8005690:	20001038 	.word	0x20001038
 8005694:	20000b60 	.word	0x20000b60
 8005698:	20000b5c 	.word	0x20000b5c
 800569c:	20001044 	.word	0x20001044
 80056a0:	20001040 	.word	0x20001040

080056a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005754 <vTaskSwitchContext+0xb0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056b2:	4b29      	ldr	r3, [pc, #164]	@ (8005758 <vTaskSwitchContext+0xb4>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056b8:	e047      	b.n	800574a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80056ba:	4b27      	ldr	r3, [pc, #156]	@ (8005758 <vTaskSwitchContext+0xb4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	4b26      	ldr	r3, [pc, #152]	@ (800575c <vTaskSwitchContext+0xb8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e011      	b.n	80056ec <vTaskSwitchContext+0x48>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <vTaskSwitchContext+0x3e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	491c      	ldr	r1, [pc, #112]	@ (8005760 <vTaskSwitchContext+0xbc>)
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0e3      	beq.n	80056c8 <vTaskSwitchContext+0x24>
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <vTaskSwitchContext+0xbc>)
 800570c:	4413      	add	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3308      	adds	r3, #8
 8005722:	429a      	cmp	r2, r3
 8005724:	d104      	bne.n	8005730 <vTaskSwitchContext+0x8c>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	4a0b      	ldr	r2, [pc, #44]	@ (8005764 <vTaskSwitchContext+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4a08      	ldr	r2, [pc, #32]	@ (800575c <vTaskSwitchContext+0xb8>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005740:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <vTaskSwitchContext+0xc0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3354      	adds	r3, #84	@ 0x54
 8005746:	4a08      	ldr	r2, [pc, #32]	@ (8005768 <vTaskSwitchContext+0xc4>)
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20001058 	.word	0x20001058
 8005758:	20001044 	.word	0x20001044
 800575c:	20001038 	.word	0x20001038
 8005760:	20000b60 	.word	0x20000b60
 8005764:	20000b5c 	.word	0x20000b5c
 8005768:	20000010 	.word	0x20000010

0800576c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005794:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <vTaskPlaceOnEventList+0x48>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3318      	adds	r3, #24
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fe fe4f 	bl	8004440 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057a2:	2101      	movs	r1, #1
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f000 fa87 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000b5c 	.word	0x20000b5c

080057b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	617b      	str	r3, [r7, #20]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057e2:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <vTaskPlaceOnEventListRestricted+0x54>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4619      	mov	r1, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7fe fe05 	bl	80043fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f000 fa5a 	bl	8005cb8 <prvAddCurrentTaskToDelayedList>
	}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000b5c 	.word	0x20000b5c

08005810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60fb      	str	r3, [r7, #12]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fe34 	bl	80044b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005848:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <xTaskRemoveFromEventList+0xb0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11d      	bne.n	800588c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fe2b 	bl	80044b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585e:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <xTaskRemoveFromEventList+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <xTaskRemoveFromEventList+0x5e>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <xTaskRemoveFromEventList+0xb4>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a13      	ldr	r2, [pc, #76]	@ (80058c8 <xTaskRemoveFromEventList+0xb8>)
 800587c:	441a      	add	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7fe fdb8 	bl	80043fa <vListInsertEnd>
 800588a:	e005      	b.n	8005898 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3318      	adds	r3, #24
 8005890:	4619      	mov	r1, r3
 8005892:	480e      	ldr	r0, [pc, #56]	@ (80058cc <xTaskRemoveFromEventList+0xbc>)
 8005894:	f7fe fdb1 	bl	80043fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589c:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <xTaskRemoveFromEventList+0xc0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d905      	bls.n	80058b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <xTaskRemoveFromEventList+0xc4>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e001      	b.n	80058b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058b6:	697b      	ldr	r3, [r7, #20]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20001058 	.word	0x20001058
 80058c4:	20001038 	.word	0x20001038
 80058c8:	20000b60 	.word	0x20000b60
 80058cc:	20000ff0 	.word	0x20000ff0
 80058d0:	20000b5c 	.word	0x20000b5c
 80058d4:	20001044 	.word	0x20001044

080058d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <vTaskInternalSetTimeOutState+0x24>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058e8:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <vTaskInternalSetTimeOutState+0x28>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20001048 	.word	0x20001048
 8005900:	20001034 	.word	0x20001034

08005904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	613b      	str	r3, [r7, #16]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800594a:	f000 fe4f 	bl	80065ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800594e:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <xTaskCheckForTimeOut+0xc0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d102      	bne.n	800596e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e023      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <xTaskCheckForTimeOut+0xc4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d007      	beq.n	800598a <xTaskCheckForTimeOut+0x86>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e015      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	429a      	cmp	r2, r3
 8005992:	d20b      	bcs.n	80059ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ff99 	bl	80058d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e004      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059b6:	f000 fe49 	bl	800664c <vPortExitCritical>

	return xReturn;
 80059ba:	69fb      	ldr	r3, [r7, #28]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20001034 	.word	0x20001034
 80059c8:	20001048 	.word	0x20001048

080059cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <vTaskMissedYield+0x14>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20001044 	.word	0x20001044

080059e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059ec:	f000 f852 	bl	8005a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <prvIdleTask+0x28>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d9f9      	bls.n	80059ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <prvIdleTask+0x2c>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a08:	e7f0      	b.n	80059ec <prvIdleTask+0x8>
 8005a0a:	bf00      	nop
 8005a0c:	20000b60 	.word	0x20000b60
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	e00c      	b.n	8005a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a12      	ldr	r2, [pc, #72]	@ (8005a74 <prvInitialiseTaskLists+0x60>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fcb8 	bl	80043a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3301      	adds	r3, #1
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b37      	cmp	r3, #55	@ 0x37
 8005a3e:	d9ef      	bls.n	8005a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a40:	480d      	ldr	r0, [pc, #52]	@ (8005a78 <prvInitialiseTaskLists+0x64>)
 8005a42:	f7fe fcaf 	bl	80043a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a46:	480d      	ldr	r0, [pc, #52]	@ (8005a7c <prvInitialiseTaskLists+0x68>)
 8005a48:	f7fe fcac 	bl	80043a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a4c:	480c      	ldr	r0, [pc, #48]	@ (8005a80 <prvInitialiseTaskLists+0x6c>)
 8005a4e:	f7fe fca9 	bl	80043a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a52:	480c      	ldr	r0, [pc, #48]	@ (8005a84 <prvInitialiseTaskLists+0x70>)
 8005a54:	f7fe fca6 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a58:	480b      	ldr	r0, [pc, #44]	@ (8005a88 <prvInitialiseTaskLists+0x74>)
 8005a5a:	f7fe fca3 	bl	80043a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <prvInitialiseTaskLists+0x78>)
 8005a60:	4a05      	ldr	r2, [pc, #20]	@ (8005a78 <prvInitialiseTaskLists+0x64>)
 8005a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <prvInitialiseTaskLists+0x7c>)
 8005a66:	4a05      	ldr	r2, [pc, #20]	@ (8005a7c <prvInitialiseTaskLists+0x68>)
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000b60 	.word	0x20000b60
 8005a78:	20000fc0 	.word	0x20000fc0
 8005a7c:	20000fd4 	.word	0x20000fd4
 8005a80:	20000ff0 	.word	0x20000ff0
 8005a84:	20001004 	.word	0x20001004
 8005a88:	2000101c 	.word	0x2000101c
 8005a8c:	20000fe8 	.word	0x20000fe8
 8005a90:	20000fec 	.word	0x20000fec

08005a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a9a:	e019      	b.n	8005ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a9c:	f000 fda6 	bl	80065ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <prvCheckTasksWaitingTermination+0x50>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fcff 	bl	80044b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <prvCheckTasksWaitingTermination+0x54>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae8 <prvCheckTasksWaitingTermination+0x54>)
 8005aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ac6:	f000 fdc1 	bl	800664c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f810 	bl	8005af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e1      	bne.n	8005a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20001004 	.word	0x20001004
 8005ae8:	20001030 	.word	0x20001030
 8005aec:	20001018 	.word	0x20001018

08005af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3354      	adds	r3, #84	@ 0x54
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f8a3 	bl	8006c48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ff3b 	bl	800698c <vPortFree>
				vPortFree( pxTCB );
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 ff38 	bl	800698c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b1c:	e019      	b.n	8005b52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d103      	bne.n	8005b30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 ff2f 	bl	800698c <vPortFree>
	}
 8005b2e:	e010      	b.n	8005b52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d00b      	beq.n	8005b52 <prvDeleteTCB+0x62>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60fb      	str	r3, [r7, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <prvDeleteTCB+0x5e>
	}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b74:	e008      	b.n	8005b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a04      	ldr	r2, [pc, #16]	@ (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000fe8 	.word	0x20000fe8
 8005b98:	20001050 	.word	0x20001050

08005b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <xTaskGetSchedulerState+0x34>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005baa:	2301      	movs	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e008      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb0:	4b08      	ldr	r3, [pc, #32]	@ (8005bd4 <xTaskGetSchedulerState+0x38>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e001      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bc2:	687b      	ldr	r3, [r7, #4]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	2000103c 	.word	0x2000103c
 8005bd4:	20001058 	.word	0x20001058

08005bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d058      	beq.n	8005ca0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bee:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <xTaskPriorityDisinherit+0xd4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d00b      	beq.n	8005c10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60bb      	str	r3, [r7, #8]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d02c      	beq.n	8005ca0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d128      	bne.n	8005ca0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fc2c 	bl	80044b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c70:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <xTaskPriorityDisinherit+0xd8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d903      	bls.n	8005c80 <xTaskPriorityDisinherit+0xa8>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb0 <xTaskPriorityDisinherit+0xd8>)
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <xTaskPriorityDisinherit+0xdc>)
 8005c8e:	441a      	add	r2, r3
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7fe fbaf 	bl	80043fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ca0:	697b      	ldr	r3, [r7, #20]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000b5c 	.word	0x20000b5c
 8005cb0:	20001038 	.word	0x20001038
 8005cb4:	20000b60 	.word	0x20000b60

08005cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cc2:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc8:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fbee 	bl	80044b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d10a      	bne.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4819      	ldr	r0, [pc, #100]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cec:	f7fe fb85 	bl	80043fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cf0:	e026      	b.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cfa:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d209      	bcs.n	8005d1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0a:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7fe fb92 	bl	8004440 <vListInsert>
}
 8005d1c:	e010      	b.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe fb88 	bl	8004440 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d30:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d202      	bcs.n	8005d40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20001034 	.word	0x20001034
 8005d4c:	20000b5c 	.word	0x20000b5c
 8005d50:	2000101c 	.word	0x2000101c
 8005d54:	20000fec 	.word	0x20000fec
 8005d58:	20000fe8 	.word	0x20000fe8
 8005d5c:	20001050 	.word	0x20001050

08005d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	@ 0x28
 8005d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d6a:	f000 fb11 	bl	8006390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005de4 <xTimerCreateTimerTask+0x84>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d021      	beq.n	8005dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d7e:	1d3a      	adds	r2, r7, #4
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe faf1 	bl	8004370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	2302      	movs	r3, #2
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	460a      	mov	r2, r1
 8005da0:	4911      	ldr	r1, [pc, #68]	@ (8005de8 <xTimerCreateTimerTask+0x88>)
 8005da2:	4812      	ldr	r0, [pc, #72]	@ (8005dec <xTimerCreateTimerTask+0x8c>)
 8005da4:	f7ff f8a6 	bl	8004ef4 <xTaskCreateStatic>
 8005da8:	4603      	mov	r3, r0
 8005daa:	4a11      	ldr	r2, [pc, #68]	@ (8005df0 <xTimerCreateTimerTask+0x90>)
 8005dac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dae:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <xTimerCreateTimerTask+0x90>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005dd8:	697b      	ldr	r3, [r7, #20]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000108c 	.word	0x2000108c
 8005de8:	08007a90 	.word	0x08007a90
 8005dec:	08005f2d 	.word	0x08005f2d
 8005df0:	20001090 	.word	0x20001090

08005df4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	@ 0x28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	623b      	str	r3, [r7, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e24:	4b19      	ldr	r3, [pc, #100]	@ (8005e8c <xTimerGenericCommand+0x98>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02a      	beq.n	8005e82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	dc18      	bgt.n	8005e70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e3e:	f7ff fead 	bl	8005b9c <xTaskGetSchedulerState>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d109      	bne.n	8005e5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <xTimerGenericCommand+0x98>)
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	f107 0110 	add.w	r1, r7, #16
 8005e50:	2300      	movs	r3, #0
 8005e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e54:	f7fe fc60 	bl	8004718 <xQueueGenericSend>
 8005e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e5a:	e012      	b.n	8005e82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <xTimerGenericCommand+0x98>)
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	f107 0110 	add.w	r1, r7, #16
 8005e64:	2300      	movs	r3, #0
 8005e66:	2200      	movs	r2, #0
 8005e68:	f7fe fc56 	bl	8004718 <xQueueGenericSend>
 8005e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e6e:	e008      	b.n	8005e82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e70:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <xTimerGenericCommand+0x98>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	f107 0110 	add.w	r1, r7, #16
 8005e78:	2300      	movs	r3, #0
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	f7fe fd4e 	bl	800491c <xQueueGenericSendFromISR>
 8005e80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3728      	adds	r7, #40	@ 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	2000108c 	.word	0x2000108c

08005e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9a:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <prvProcessExpiredTimer+0x98>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe fb01 	bl	80044b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d023      	beq.n	8005f04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	18d1      	adds	r1, r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f000 f8d3 	bl	8006074 <prvInsertTimerInActiveList>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	2100      	movs	r1, #0
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f7ff ff88 	bl	8005df4 <xTimerGenericCommand>
 8005ee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d114      	bne.n	8005f16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	60fb      	str	r3, [r7, #12]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	6978      	ldr	r0, [r7, #20]
 8005f1c:	4798      	blx	r3
}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20001084 	.word	0x20001084

08005f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f859 	bl	8005ff0 <prvGetNextExpireTime>
 8005f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4619      	mov	r1, r3
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f805 	bl	8005f54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f4a:	f000 f8d5 	bl	80060f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f4e:	bf00      	nop
 8005f50:	e7f0      	b.n	8005f34 <prvTimerTask+0x8>
	...

08005f54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f5e:	f7ff fa2d 	bl	80053bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f864 	bl	8006034 <prvSampleTimeNow>
 8005f6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d130      	bne.n	8005fd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <prvProcessTimerOrBlockTask+0x3c>
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d806      	bhi.n	8005f90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f82:	f7ff fa29 	bl	80053d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff81 	bl	8005e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f8e:	e024      	b.n	8005fda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f96:	4b13      	ldr	r3, [pc, #76]	@ (8005fe4 <prvProcessTimerOrBlockTask+0x90>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <prvProcessTimerOrBlockTask+0x50>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <prvProcessTimerOrBlockTask+0x52>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe8 <prvProcessTimerOrBlockTask+0x94>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f7fe ff69 	bl	8004e8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fba:	f7ff fa0d 	bl	80053d8 <xTaskResumeAll>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <prvProcessTimerOrBlockTask+0x98>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
}
 8005fd4:	e001      	b.n	8005fda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fd6:	f7ff f9ff 	bl	80053d8 <xTaskResumeAll>
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20001088 	.word	0x20001088
 8005fe8:	2000108c 	.word	0x2000108c
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <prvGetNextExpireTime+0x40>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <prvGetNextExpireTime+0x16>
 8006002:	2201      	movs	r2, #1
 8006004:	e000      	b.n	8006008 <prvGetNextExpireTime+0x18>
 8006006:	2200      	movs	r2, #0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006014:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <prvGetNextExpireTime+0x40>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e001      	b.n	8006024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	20001084 	.word	0x20001084

08006034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800603c:	f7ff fa6a 	bl	8005514 <xTaskGetTickCount>
 8006040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006042:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <prvSampleTimeNow+0x3c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d205      	bcs.n	8006058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800604c:	f000 f93a 	bl	80062c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e002      	b.n	800605e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800605e:	4a04      	ldr	r2, [pc, #16]	@ (8006070 <prvSampleTimeNow+0x3c>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006064:	68fb      	ldr	r3, [r7, #12]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20001094 	.word	0x20001094

08006074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d812      	bhi.n	80060c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d302      	bcc.n	80060ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e01b      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <prvInsertTimerInActiveList+0x7c>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe f9c1 	bl	8004440 <vListInsert>
 80060be:	e012      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d206      	bcs.n	80060d6 <prvInsertTimerInActiveList+0x62>
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e007      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060d6:	4b07      	ldr	r3, [pc, #28]	@ (80060f4 <prvInsertTimerInActiveList+0x80>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7fe f9ad 	bl	8004440 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060e6:	697b      	ldr	r3, [r7, #20]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20001088 	.word	0x20001088
 80060f4:	20001084 	.word	0x20001084

080060f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	@ 0x38
 80060fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060fe:	e0ce      	b.n	800629e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	da19      	bge.n	800613a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	3304      	adds	r3, #4
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61fb      	str	r3, [r7, #28]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006130:	6850      	ldr	r0, [r2, #4]
 8006132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006134:	6892      	ldr	r2, [r2, #8]
 8006136:	4611      	mov	r1, r2
 8006138:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f2c0 80ae 	blt.w	800629e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	3304      	adds	r3, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe f9ac 	bl	80044b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006158:	463b      	mov	r3, r7
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ff6a 	bl	8006034 <prvSampleTimeNow>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b09      	cmp	r3, #9
 8006166:	f200 8097 	bhi.w	8006298 <prvProcessReceivedCommands+0x1a0>
 800616a:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <prvProcessReceivedCommands+0x78>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006199 	.word	0x08006199
 8006174:	08006199 	.word	0x08006199
 8006178:	08006199 	.word	0x08006199
 800617c:	0800620f 	.word	0x0800620f
 8006180:	08006223 	.word	0x08006223
 8006184:	0800626f 	.word	0x0800626f
 8006188:	08006199 	.word	0x08006199
 800618c:	08006199 	.word	0x08006199
 8006190:	0800620f 	.word	0x0800620f
 8006194:	08006223 	.word	0x08006223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	18d1      	adds	r1, r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b8:	f7ff ff5c 	bl	8006074 <prvInsertTimerInActiveList>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d06c      	beq.n	800629c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d061      	beq.n	800629c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	441a      	add	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ea:	f7ff fe03 	bl	8005df4 <xTimerGenericCommand>
 80061ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d152      	bne.n	800629c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	61bb      	str	r3, [r7, #24]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006220:	e03d      	b.n	800629e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	b2da      	uxtb	r2, r3
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	617b      	str	r3, [r7, #20]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	18d1      	adds	r1, r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006268:	f7ff ff04 	bl	8006074 <prvInsertTimerInActiveList>
					break;
 800626c:	e017      	b.n	800629e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800627c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800627e:	f000 fb85 	bl	800698c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006282:	e00c      	b.n	800629e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	b2da      	uxtb	r2, r3
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006296:	e002      	b.n	800629e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <prvProcessReceivedCommands+0x1a6>
					break;
 800629c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800629e:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <prvProcessReceivedCommands+0x1c8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	1d39      	adds	r1, r7, #4
 80062a4:	2200      	movs	r2, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fbd6 	bl	8004a58 <xQueueReceive>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f47f af26 	bne.w	8006100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	3730      	adds	r7, #48	@ 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000108c 	.word	0x2000108c

080062c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ca:	e049      	b.n	8006360 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe f8e3 	bl	80044b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02f      	beq.n	8006360 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	d90e      	bls.n	8006330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800631e:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe f889 	bl	8004440 <vListInsert>
 800632e:	e017      	b.n	8006360 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	2100      	movs	r1, #0
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fd5a 	bl	8005df4 <xTimerGenericCommand>
 8006340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	603b      	str	r3, [r7, #0]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006360:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1b0      	bne.n	80062cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800636a:	4b07      	ldr	r3, [pc, #28]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006370:	4b06      	ldr	r3, [pc, #24]	@ (800638c <prvSwitchTimerLists+0xc8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a04      	ldr	r2, [pc, #16]	@ (8006388 <prvSwitchTimerLists+0xc4>)
 8006376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006378:	4a04      	ldr	r2, [pc, #16]	@ (800638c <prvSwitchTimerLists+0xc8>)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6013      	str	r3, [r2, #0]
}
 800637e:	bf00      	nop
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20001084 	.word	0x20001084
 800638c:	20001088 	.word	0x20001088

08006390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006396:	f000 f929 	bl	80065ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800639a:	4b15      	ldr	r3, [pc, #84]	@ (80063f0 <prvCheckForValidListAndQueue+0x60>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d120      	bne.n	80063e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063a2:	4814      	ldr	r0, [pc, #80]	@ (80063f4 <prvCheckForValidListAndQueue+0x64>)
 80063a4:	f7fd fffe 	bl	80043a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063a8:	4813      	ldr	r0, [pc, #76]	@ (80063f8 <prvCheckForValidListAndQueue+0x68>)
 80063aa:	f7fd fffb 	bl	80043a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063ae:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <prvCheckForValidListAndQueue+0x6c>)
 80063b0:	4a10      	ldr	r2, [pc, #64]	@ (80063f4 <prvCheckForValidListAndQueue+0x64>)
 80063b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063b4:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <prvCheckForValidListAndQueue+0x70>)
 80063b6:	4a10      	ldr	r2, [pc, #64]	@ (80063f8 <prvCheckForValidListAndQueue+0x68>)
 80063b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063ba:	2300      	movs	r3, #0
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4b11      	ldr	r3, [pc, #68]	@ (8006404 <prvCheckForValidListAndQueue+0x74>)
 80063c0:	4a11      	ldr	r2, [pc, #68]	@ (8006408 <prvCheckForValidListAndQueue+0x78>)
 80063c2:	2110      	movs	r1, #16
 80063c4:	200a      	movs	r0, #10
 80063c6:	f7fe f907 	bl	80045d8 <xQueueGenericCreateStatic>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4a08      	ldr	r2, [pc, #32]	@ (80063f0 <prvCheckForValidListAndQueue+0x60>)
 80063ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063d0:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <prvCheckForValidListAndQueue+0x60>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <prvCheckForValidListAndQueue+0x60>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	490b      	ldr	r1, [pc, #44]	@ (800640c <prvCheckForValidListAndQueue+0x7c>)
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fd2c 	bl	8004e3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e4:	f000 f932 	bl	800664c <vPortExitCritical>
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000108c 	.word	0x2000108c
 80063f4:	2000105c 	.word	0x2000105c
 80063f8:	20001070 	.word	0x20001070
 80063fc:	20001084 	.word	0x20001084
 8006400:	20001088 	.word	0x20001088
 8006404:	20001138 	.word	0x20001138
 8006408:	20001098 	.word	0x20001098
 800640c:	08007a98 	.word	0x08007a98

08006410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b04      	subs	r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b04      	subs	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b04      	subs	r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006440:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <pxPortInitialiseStack+0x54>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b14      	subs	r3, #20
 800644a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b20      	subs	r3, #32
 8006456:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	08006469 	.word	0x08006469

08006468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <prvTaskExitError+0x54>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d00b      	beq.n	8006494 <prvTaskExitError+0x2c>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60fb      	str	r3, [r7, #12]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <prvTaskExitError+0x28>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60bb      	str	r3, [r7, #8]
}
 80064a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064a8:	bf00      	nop
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0fc      	beq.n	80064aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064c0:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <pxCurrentTCBConst2>)
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	6808      	ldr	r0, [r1, #0]
 80064c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064ca:	f380 8809 	msr	PSP, r0
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8811 	msr	BASEPRI, r0
 80064da:	f04e 0e0d 	orr.w	lr, lr, #13
 80064de:	4770      	bx	lr

080064e0 <pxCurrentTCBConst2>:
 80064e0:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop

080064e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064e8:	4806      	ldr	r0, [pc, #24]	@ (8006504 <prvPortStartFirstTask+0x1c>)
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f380 8808 	msr	MSP, r0
 80064f2:	b662      	cpsie	i
 80064f4:	b661      	cpsie	f
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	df00      	svc	0
 8006500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006502:	bf00      	nop
 8006504:	e000ed08 	.word	0xe000ed08

08006508 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800650e:	4b32      	ldr	r3, [pc, #200]	@ (80065d8 <xPortStartScheduler+0xd0>)
 8006510:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	@ 0xff
 800651e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b2a      	ldr	r3, [pc, #168]	@ (80065dc <xPortStartScheduler+0xd4>)
 8006534:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006536:	4b2a      	ldr	r3, [pc, #168]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006538:	2207      	movs	r2, #7
 800653a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653c:	e009      	b.n	8006552 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800653e:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	4a26      	ldr	r2, [pc, #152]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006546:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d0ef      	beq.n	800653e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800655e:	4b20      	ldr	r3, [pc, #128]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1c3 0307 	rsb	r3, r3, #7
 8006566:	2b04      	cmp	r3, #4
 8006568:	d00b      	beq.n	8006582 <xPortStartScheduler+0x7a>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60bb      	str	r3, [r7, #8]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006582:	4b17      	ldr	r3, [pc, #92]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <xPortStartScheduler+0xd8>)
 800658a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800658c:	4b14      	ldr	r3, [pc, #80]	@ (80065e0 <xPortStartScheduler+0xd8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006594:	4a12      	ldr	r2, [pc, #72]	@ (80065e0 <xPortStartScheduler+0xd8>)
 8006596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065a0:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <xPortStartScheduler+0xdc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a0f      	ldr	r2, [pc, #60]	@ (80065e4 <xPortStartScheduler+0xdc>)
 80065a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065ac:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <xPortStartScheduler+0xdc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0c      	ldr	r2, [pc, #48]	@ (80065e4 <xPortStartScheduler+0xdc>)
 80065b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065b8:	f000 f8b8 	bl	800672c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <xPortStartScheduler+0xe0>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065c2:	f7ff ff91 	bl	80064e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065c6:	f7ff f86d 	bl	80056a4 <vTaskSwitchContext>
	prvTaskExitError();
 80065ca:	f7ff ff4d 	bl	8006468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000e400 	.word	0xe000e400
 80065dc:	20001188 	.word	0x20001188
 80065e0:	2000118c 	.word	0x2000118c
 80065e4:	e000ed20 	.word	0xe000ed20
 80065e8:	2000000c 	.word	0x2000000c

080065ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	607b      	str	r3, [r7, #4]
}
 8006604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006606:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <vPortEnterCritical+0x58>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a0d      	ldr	r2, [pc, #52]	@ (8006644 <vPortEnterCritical+0x58>)
 800660e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006610:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <vPortEnterCritical+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d110      	bne.n	800663a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006618:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <vPortEnterCritical+0x5c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <vPortEnterCritical+0x4e>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	603b      	str	r3, [r7, #0]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <vPortEnterCritical+0x4a>
	}
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	2000000c 	.word	0x2000000c
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006652:	4b12      	ldr	r3, [pc, #72]	@ (800669c <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <vPortExitCritical+0x26>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	607b      	str	r3, [r7, #4]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006672:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3b01      	subs	r3, #1
 8006678:	4a08      	ldr	r2, [pc, #32]	@ (800669c <vPortExitCritical+0x50>)
 800667a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800667c:	4b07      	ldr	r3, [pc, #28]	@ (800669c <vPortExitCritical+0x50>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d105      	bne.n	8006690 <vPortExitCritical+0x44>
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f383 8811 	msr	BASEPRI, r3
}
 800668e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000000c 	.word	0x2000000c

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b0d      	ldr	r3, [pc, #52]	@ (80066e0 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066b0:	6010      	str	r0, [r2, #0]
 80066b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066ba:	f380 8811 	msr	BASEPRI, r0
 80066be:	f7fe fff1 	bl	80056a4 <vTaskSwitchContext>
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	6808      	ldr	r0, [r1, #0]
 80066d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066d6:	f380 8809 	msr	PSP, r0
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	4770      	bx	lr

080066e0 <pxCurrentTCBConst>:
 80066e0:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006702:	f7fe ff15 	bl	8005530 <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800670c:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <xPortSysTickHandler+0x40>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f383 8811 	msr	BASEPRI, r3
}
 800671e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <vPortSetupTimerInterrupt+0x30>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673c:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <vPortSetupTimerInterrupt+0x38>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a09      	ldr	r2, [pc, #36]	@ (8006768 <vPortSetupTimerInterrupt+0x3c>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	4a08      	ldr	r2, [pc, #32]	@ (800676c <vPortSetupTimerInterrupt+0x40>)
 800674a:	3b01      	subs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674e:	4b03      	ldr	r3, [pc, #12]	@ (800675c <vPortSetupTimerInterrupt+0x30>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr
 800675c:	e000e010 	.word	0xe000e010
 8006760:	e000e018 	.word	0xe000e018
 8006764:	20000000 	.word	0x20000000
 8006768:	10624dd3 	.word	0x10624dd3
 800676c:	e000e014 	.word	0xe000e014

08006770 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006776:	f3ef 8305 	mrs	r3, IPSR
 800677a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d915      	bls.n	80067ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006782:	4a17      	ldr	r2, [pc, #92]	@ (80067e0 <vPortValidateInterruptPriority+0x70>)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800678c:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <vPortValidateInterruptPriority+0x74>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	7afa      	ldrb	r2, [r7, #11]
 8006792:	429a      	cmp	r2, r3
 8006794:	d20b      	bcs.n	80067ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	607b      	str	r3, [r7, #4]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ae:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <vPortValidateInterruptPriority+0x78>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <vPortValidateInterruptPriority+0x7c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d90b      	bls.n	80067d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <vPortValidateInterruptPriority+0x62>
	}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	e000e3f0 	.word	0xe000e3f0
 80067e4:	20001188 	.word	0x20001188
 80067e8:	e000ed0c 	.word	0xe000ed0c
 80067ec:	2000118c 	.word	0x2000118c

080067f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	@ 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067fc:	f7fe fdde 	bl	80053bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006800:	4b5c      	ldr	r3, [pc, #368]	@ (8006974 <pvPortMalloc+0x184>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006808:	f000 f924 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800680c:	4b5a      	ldr	r3, [pc, #360]	@ (8006978 <pvPortMalloc+0x188>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 8095 	bne.w	8006944 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01e      	beq.n	800685e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006820:	2208      	movs	r2, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d015      	beq.n	800685e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f023 0307 	bic.w	r3, r3, #7
 8006838:	3308      	adds	r3, #8
 800683a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <pvPortMalloc+0x6e>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	617b      	str	r3, [r7, #20]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d06f      	beq.n	8006944 <pvPortMalloc+0x154>
 8006864:	4b45      	ldr	r3, [pc, #276]	@ (800697c <pvPortMalloc+0x18c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d86a      	bhi.n	8006944 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800686e:	4b44      	ldr	r3, [pc, #272]	@ (8006980 <pvPortMalloc+0x190>)
 8006870:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006872:	4b43      	ldr	r3, [pc, #268]	@ (8006980 <pvPortMalloc+0x190>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006878:	e004      	b.n	8006884 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d903      	bls.n	8006896 <pvPortMalloc+0xa6>
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f1      	bne.n	800687a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006896:	4b37      	ldr	r3, [pc, #220]	@ (8006974 <pvPortMalloc+0x184>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689c:	429a      	cmp	r2, r3
 800689e:	d051      	beq.n	8006944 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2208      	movs	r2, #8
 80068a6:	4413      	add	r3, r2
 80068a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	1ad2      	subs	r2, r2, r3
 80068ba:	2308      	movs	r3, #8
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	429a      	cmp	r2, r3
 80068c0:	d920      	bls.n	8006904 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <pvPortMalloc+0xfc>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	613b      	str	r3, [r7, #16]
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	e7fd      	b.n	80068e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068fe:	69b8      	ldr	r0, [r7, #24]
 8006900:	f000 f90a 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <pvPortMalloc+0x18c>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <pvPortMalloc+0x18c>)
 8006910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006912:	4b1a      	ldr	r3, [pc, #104]	@ (800697c <pvPortMalloc+0x18c>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <pvPortMalloc+0x194>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d203      	bcs.n	8006926 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800691e:	4b17      	ldr	r3, [pc, #92]	@ (800697c <pvPortMalloc+0x18c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <pvPortMalloc+0x194>)
 8006924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <pvPortMalloc+0x188>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	431a      	orrs	r2, r3
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693a:	4b13      	ldr	r3, [pc, #76]	@ (8006988 <pvPortMalloc+0x198>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3301      	adds	r3, #1
 8006940:	4a11      	ldr	r2, [pc, #68]	@ (8006988 <pvPortMalloc+0x198>)
 8006942:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006944:	f7fe fd48 	bl	80053d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <pvPortMalloc+0x17a>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <pvPortMalloc+0x176>
	return pvReturn;
 800696a:	69fb      	ldr	r3, [r7, #28]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3728      	adds	r7, #40	@ 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20001d98 	.word	0x20001d98
 8006978:	20001dac 	.word	0x20001dac
 800697c:	20001d9c 	.word	0x20001d9c
 8006980:	20001d90 	.word	0x20001d90
 8006984:	20001da0 	.word	0x20001da0
 8006988:	20001da4 	.word	0x20001da4

0800698c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04f      	beq.n	8006a3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800699e:	2308      	movs	r3, #8
 80069a0:	425b      	negs	r3, r3
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4b25      	ldr	r3, [pc, #148]	@ (8006a48 <vPortFree+0xbc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <vPortFree+0x46>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	60fb      	str	r3, [r7, #12]
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00b      	beq.n	80069f2 <vPortFree+0x66>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60bb      	str	r3, [r7, #8]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <vPortFree+0xbc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <vPortFree+0xbc>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe fcd0 	bl	80053bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortFree+0xc0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <vPortFree+0xc0>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <vPortFree+0xc4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	@ (8006a50 <vPortFree+0xc4>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fccd 	bl	80053d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20001dac 	.word	0x20001dac
 8006a4c:	20001d9c 	.word	0x20001d9c
 8006a50:	20001da8 	.word	0x20001da8

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	@ (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	@ (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	@ (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	@ (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20001190 	.word	0x20001190
 8006b04:	20001d90 	.word	0x20001d90
 8006b08:	20001d98 	.word	0x20001d98
 8006b0c:	20001da0 	.word	0x20001da0
 8006b10:	20001d9c 	.word	0x20001d9c
 8006b14:	20001dac 	.word	0x20001dac

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b27      	ldr	r3, [pc, #156]	@ (8006bc0 <prvInsertBlockIntoFreeList+0xa8>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	20001d90 	.word	0x20001d90
 8006bc4:	20001d98 	.word	0x20001d98

08006bc8 <siprintf>:
 8006bc8:	b40e      	push	{r1, r2, r3}
 8006bca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	2400      	movs	r4, #0
 8006bd2:	b09d      	sub	sp, #116	@ 0x74
 8006bd4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006bd6:	9002      	str	r0, [sp, #8]
 8006bd8:	9006      	str	r0, [sp, #24]
 8006bda:	9107      	str	r1, [sp, #28]
 8006bdc:	9104      	str	r1, [sp, #16]
 8006bde:	4809      	ldr	r0, [pc, #36]	@ (8006c04 <siprintf+0x3c>)
 8006be0:	4909      	ldr	r1, [pc, #36]	@ (8006c08 <siprintf+0x40>)
 8006be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be6:	9105      	str	r1, [sp, #20]
 8006be8:	6800      	ldr	r0, [r0, #0]
 8006bea:	a902      	add	r1, sp, #8
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006bf0:	f000 fa1c 	bl	800702c <_svfiprintf_r>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	701c      	strb	r4, [r3, #0]
 8006bf8:	b01d      	add	sp, #116	@ 0x74
 8006bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfe:	b003      	add	sp, #12
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000010 	.word	0x20000010
 8006c08:	ffff0208 	.word	0xffff0208

08006c0c <memset>:
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4402      	add	r2, r0
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d100      	bne.n	8006c16 <memset+0xa>
 8006c14:	4770      	bx	lr
 8006c16:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1a:	e7f9      	b.n	8006c10 <memset+0x4>

08006c1c <strstr>:
 8006c1c:	780a      	ldrb	r2, [r1, #0]
 8006c1e:	b570      	push	{r4, r5, r6, lr}
 8006c20:	b96a      	cbnz	r2, 8006c3e <strstr+0x22>
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d109      	bne.n	8006c3c <strstr+0x20>
 8006c28:	460c      	mov	r4, r1
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f6      	beq.n	8006c22 <strstr+0x6>
 8006c34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006c38:	429e      	cmp	r6, r3
 8006c3a:	d0f7      	beq.n	8006c2c <strstr+0x10>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	7803      	ldrb	r3, [r0, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1ef      	bne.n	8006c24 <strstr+0x8>
 8006c44:	4618      	mov	r0, r3
 8006c46:	e7ec      	b.n	8006c22 <strstr+0x6>

08006c48 <_reclaim_reent>:
 8006c48:	4b2d      	ldr	r3, [pc, #180]	@ (8006d00 <_reclaim_reent+0xb8>)
 8006c4a:	b570      	push	{r4, r5, r6, lr}
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4283      	cmp	r3, r0
 8006c52:	d053      	beq.n	8006cfc <_reclaim_reent+0xb4>
 8006c54:	69c3      	ldr	r3, [r0, #28]
 8006c56:	b31b      	cbz	r3, 8006ca0 <_reclaim_reent+0x58>
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	b163      	cbz	r3, 8006c76 <_reclaim_reent+0x2e>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	69e3      	ldr	r3, [r4, #28]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	5959      	ldr	r1, [r3, r5]
 8006c64:	b9b1      	cbnz	r1, 8006c94 <_reclaim_reent+0x4c>
 8006c66:	3504      	adds	r5, #4
 8006c68:	2d80      	cmp	r5, #128	@ 0x80
 8006c6a:	d1f8      	bne.n	8006c5e <_reclaim_reent+0x16>
 8006c6c:	69e3      	ldr	r3, [r4, #28]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	68d9      	ldr	r1, [r3, #12]
 8006c72:	f000 f889 	bl	8006d88 <_free_r>
 8006c76:	69e3      	ldr	r3, [r4, #28]
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b111      	cbz	r1, 8006c82 <_reclaim_reent+0x3a>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 f883 	bl	8006d88 <_free_r>
 8006c82:	69e3      	ldr	r3, [r4, #28]
 8006c84:	689d      	ldr	r5, [r3, #8]
 8006c86:	b15d      	cbz	r5, 8006ca0 <_reclaim_reent+0x58>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	682d      	ldr	r5, [r5, #0]
 8006c8e:	f000 f87b 	bl	8006d88 <_free_r>
 8006c92:	e7f8      	b.n	8006c86 <_reclaim_reent+0x3e>
 8006c94:	680e      	ldr	r6, [r1, #0]
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f876 	bl	8006d88 <_free_r>
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	e7e1      	b.n	8006c64 <_reclaim_reent+0x1c>
 8006ca0:	6961      	ldr	r1, [r4, #20]
 8006ca2:	b111      	cbz	r1, 8006caa <_reclaim_reent+0x62>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f86f 	bl	8006d88 <_free_r>
 8006caa:	69e1      	ldr	r1, [r4, #28]
 8006cac:	b111      	cbz	r1, 8006cb4 <_reclaim_reent+0x6c>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f86a 	bl	8006d88 <_free_r>
 8006cb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cb6:	b111      	cbz	r1, 8006cbe <_reclaim_reent+0x76>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f865 	bl	8006d88 <_free_r>
 8006cbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cc0:	b111      	cbz	r1, 8006cc8 <_reclaim_reent+0x80>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f860 	bl	8006d88 <_free_r>
 8006cc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cca:	b111      	cbz	r1, 8006cd2 <_reclaim_reent+0x8a>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f85b 	bl	8006d88 <_free_r>
 8006cd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006cd4:	b111      	cbz	r1, 8006cdc <_reclaim_reent+0x94>
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f000 f856 	bl	8006d88 <_free_r>
 8006cdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006cde:	b111      	cbz	r1, 8006ce6 <_reclaim_reent+0x9e>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 f851 	bl	8006d88 <_free_r>
 8006ce6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006ce8:	b111      	cbz	r1, 8006cf0 <_reclaim_reent+0xa8>
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 f84c 	bl	8006d88 <_free_r>
 8006cf0:	6a23      	ldr	r3, [r4, #32]
 8006cf2:	b11b      	cbz	r3, 8006cfc <_reclaim_reent+0xb4>
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cfa:	4718      	bx	r3
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000010 	.word	0x20000010

08006d04 <__errno>:
 8006d04:	4b01      	ldr	r3, [pc, #4]	@ (8006d0c <__errno+0x8>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000010 	.word	0x20000010

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	2600      	movs	r6, #0
 8006d14:	4d0c      	ldr	r5, [pc, #48]	@ (8006d48 <__libc_init_array+0x38>)
 8006d16:	4c0d      	ldr	r4, [pc, #52]	@ (8006d4c <__libc_init_array+0x3c>)
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	f000 fc7e 	bl	8007620 <_init>
 8006d24:	2600      	movs	r6, #0
 8006d26:	4d0a      	ldr	r5, [pc, #40]	@ (8006d50 <__libc_init_array+0x40>)
 8006d28:	4c0a      	ldr	r4, [pc, #40]	@ (8006d54 <__libc_init_array+0x44>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	08007b50 	.word	0x08007b50
 8006d4c:	08007b50 	.word	0x08007b50
 8006d50:	08007b50 	.word	0x08007b50
 8006d54:	08007b54 	.word	0x08007b54

08006d58 <__retarget_lock_acquire_recursive>:
 8006d58:	4770      	bx	lr

08006d5a <__retarget_lock_release_recursive>:
 8006d5a:	4770      	bx	lr

08006d5c <strcpy>:
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d62:	f803 2b01 	strb.w	r2, [r3], #1
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	d1f9      	bne.n	8006d5e <strcpy+0x2>
 8006d6a:	4770      	bx	lr

08006d6c <memcpy>:
 8006d6c:	440a      	add	r2, r1
 8006d6e:	4291      	cmp	r1, r2
 8006d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d74:	d100      	bne.n	8006d78 <memcpy+0xc>
 8006d76:	4770      	bx	lr
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d84:	d1f9      	bne.n	8006d7a <memcpy+0xe>
 8006d86:	bd10      	pop	{r4, pc}

08006d88 <_free_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d040      	beq.n	8006e12 <_free_r+0x8a>
 8006d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d94:	1f0c      	subs	r4, r1, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfb8      	it	lt
 8006d9a:	18e4      	addlt	r4, r4, r3
 8006d9c:	f000 f8de 	bl	8006f5c <__malloc_lock>
 8006da0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <_free_r+0x8c>)
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x2c>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db0:	f000 b8da 	b.w	8006f68 <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x42>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1809      	addeq	r1, r1, r0
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x1e>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x4c>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x42>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1850      	adds	r0, r2, r1
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x6c>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	4401      	add	r1, r0
 8006de0:	1850      	adds	r0, r2, r1
 8006de2:	4283      	cmp	r3, r0
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x22>
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4408      	add	r0, r1
 8006dee:	6010      	str	r0, [r2, #0]
 8006df0:	6053      	str	r3, [r2, #4]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x22>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x74>
 8006df6:	230c      	movs	r3, #12
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x22>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	1821      	adds	r1, r4, r0
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf01      	itttt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	1809      	addeq	r1, r1, r0
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6054      	str	r4, [r2, #4]
 8006e10:	e7cb      	b.n	8006daa <_free_r+0x22>
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20001ef4 	.word	0x20001ef4

08006e18 <sbrk_aligned>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e58 <sbrk_aligned+0x40>)
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	6831      	ldr	r1, [r6, #0]
 8006e20:	4605      	mov	r5, r0
 8006e22:	b911      	cbnz	r1, 8006e2a <sbrk_aligned+0x12>
 8006e24:	f000 fba8 	bl	8007578 <_sbrk_r>
 8006e28:	6030      	str	r0, [r6, #0]
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fba3 	bl	8007578 <_sbrk_r>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	d103      	bne.n	8006e3e <sbrk_aligned+0x26>
 8006e36:	f04f 34ff 	mov.w	r4, #4294967295
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
 8006e3e:	1cc4      	adds	r4, r0, #3
 8006e40:	f024 0403 	bic.w	r4, r4, #3
 8006e44:	42a0      	cmp	r0, r4
 8006e46:	d0f8      	beq.n	8006e3a <sbrk_aligned+0x22>
 8006e48:	1a21      	subs	r1, r4, r0
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 fb94 	bl	8007578 <_sbrk_r>
 8006e50:	3001      	adds	r0, #1
 8006e52:	d1f2      	bne.n	8006e3a <sbrk_aligned+0x22>
 8006e54:	e7ef      	b.n	8006e36 <sbrk_aligned+0x1e>
 8006e56:	bf00      	nop
 8006e58:	20001ef0 	.word	0x20001ef0

08006e5c <_malloc_r>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	1ccd      	adds	r5, r1, #3
 8006e62:	f025 0503 	bic.w	r5, r5, #3
 8006e66:	3508      	adds	r5, #8
 8006e68:	2d0c      	cmp	r5, #12
 8006e6a:	bf38      	it	cc
 8006e6c:	250c      	movcc	r5, #12
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	4606      	mov	r6, r0
 8006e72:	db01      	blt.n	8006e78 <_malloc_r+0x1c>
 8006e74:	42a9      	cmp	r1, r5
 8006e76:	d904      	bls.n	8006e82 <_malloc_r+0x26>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f58 <_malloc_r+0xfc>
 8006e86:	f000 f869 	bl	8006f5c <__malloc_lock>
 8006e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8e:	461c      	mov	r4, r3
 8006e90:	bb44      	cbnz	r4, 8006ee4 <_malloc_r+0x88>
 8006e92:	4629      	mov	r1, r5
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7ff ffbf 	bl	8006e18 <sbrk_aligned>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	d158      	bne.n	8006f52 <_malloc_r+0xf6>
 8006ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea4:	4627      	mov	r7, r4
 8006ea6:	2f00      	cmp	r7, #0
 8006ea8:	d143      	bne.n	8006f32 <_malloc_r+0xd6>
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	d04b      	beq.n	8006f46 <_malloc_r+0xea>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	eb04 0903 	add.w	r9, r4, r3
 8006eb8:	f000 fb5e 	bl	8007578 <_sbrk_r>
 8006ebc:	4581      	cmp	r9, r0
 8006ebe:	d142      	bne.n	8006f46 <_malloc_r+0xea>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	1a6d      	subs	r5, r5, r1
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7ff ffa6 	bl	8006e18 <sbrk_aligned>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d03a      	beq.n	8006f46 <_malloc_r+0xea>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	442b      	add	r3, r5
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	bb62      	cbnz	r2, 8006f38 <_malloc_r+0xdc>
 8006ede:	f8c8 7000 	str.w	r7, [r8]
 8006ee2:	e00f      	b.n	8006f04 <_malloc_r+0xa8>
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	1b52      	subs	r2, r2, r5
 8006ee8:	d420      	bmi.n	8006f2c <_malloc_r+0xd0>
 8006eea:	2a0b      	cmp	r2, #11
 8006eec:	d917      	bls.n	8006f1e <_malloc_r+0xc2>
 8006eee:	1961      	adds	r1, r4, r5
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	6025      	str	r5, [r4, #0]
 8006ef4:	bf18      	it	ne
 8006ef6:	6059      	strne	r1, [r3, #4]
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	bf08      	it	eq
 8006efc:	f8c8 1000 	streq.w	r1, [r8]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4630      	mov	r0, r6
 8006f06:	f000 f82f 	bl	8006f68 <__malloc_unlock>
 8006f0a:	f104 000b 	add.w	r0, r4, #11
 8006f0e:	1d23      	adds	r3, r4, #4
 8006f10:	f020 0007 	bic.w	r0, r0, #7
 8006f14:	1ac2      	subs	r2, r0, r3
 8006f16:	bf1c      	itt	ne
 8006f18:	1a1b      	subne	r3, r3, r0
 8006f1a:	50a3      	strne	r3, [r4, r2]
 8006f1c:	e7af      	b.n	8006e7e <_malloc_r+0x22>
 8006f1e:	6862      	ldr	r2, [r4, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	bf0c      	ite	eq
 8006f24:	f8c8 2000 	streq.w	r2, [r8]
 8006f28:	605a      	strne	r2, [r3, #4]
 8006f2a:	e7eb      	b.n	8006f04 <_malloc_r+0xa8>
 8006f2c:	4623      	mov	r3, r4
 8006f2e:	6864      	ldr	r4, [r4, #4]
 8006f30:	e7ae      	b.n	8006e90 <_malloc_r+0x34>
 8006f32:	463c      	mov	r4, r7
 8006f34:	687f      	ldr	r7, [r7, #4]
 8006f36:	e7b6      	b.n	8006ea6 <_malloc_r+0x4a>
 8006f38:	461a      	mov	r2, r3
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d1fb      	bne.n	8006f38 <_malloc_r+0xdc>
 8006f40:	2300      	movs	r3, #0
 8006f42:	6053      	str	r3, [r2, #4]
 8006f44:	e7de      	b.n	8006f04 <_malloc_r+0xa8>
 8006f46:	230c      	movs	r3, #12
 8006f48:	4630      	mov	r0, r6
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	f000 f80c 	bl	8006f68 <__malloc_unlock>
 8006f50:	e794      	b.n	8006e7c <_malloc_r+0x20>
 8006f52:	6005      	str	r5, [r0, #0]
 8006f54:	e7d6      	b.n	8006f04 <_malloc_r+0xa8>
 8006f56:	bf00      	nop
 8006f58:	20001ef4 	.word	0x20001ef4

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	@ (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f7ff befb 	b.w	8006d58 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	20001eec 	.word	0x20001eec

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	@ (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f7ff bef6 	b.w	8006d5a <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	20001eec 	.word	0x20001eec

08006f74 <__ssputs_r>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	461f      	mov	r7, r3
 8006f7a:	688e      	ldr	r6, [r1, #8]
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	42be      	cmp	r6, r7
 8006f80:	460c      	mov	r4, r1
 8006f82:	4690      	mov	r8, r2
 8006f84:	680b      	ldr	r3, [r1, #0]
 8006f86:	d82d      	bhi.n	8006fe4 <__ssputs_r+0x70>
 8006f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f90:	d026      	beq.n	8006fe0 <__ssputs_r+0x6c>
 8006f92:	6965      	ldr	r5, [r4, #20]
 8006f94:	6909      	ldr	r1, [r1, #16]
 8006f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f9a:	eba3 0901 	sub.w	r9, r3, r1
 8006f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa2:	1c7b      	adds	r3, r7, #1
 8006fa4:	444b      	add	r3, r9
 8006fa6:	106d      	asrs	r5, r5, #1
 8006fa8:	429d      	cmp	r5, r3
 8006faa:	bf38      	it	cc
 8006fac:	461d      	movcc	r5, r3
 8006fae:	0553      	lsls	r3, r2, #21
 8006fb0:	d527      	bpl.n	8007002 <__ssputs_r+0x8e>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f7ff ff52 	bl	8006e5c <_malloc_r>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	b360      	cbz	r0, 8007016 <__ssputs_r+0xa2>
 8006fbc:	464a      	mov	r2, r9
 8006fbe:	6921      	ldr	r1, [r4, #16]
 8006fc0:	f7ff fed4 	bl	8006d6c <memcpy>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	6126      	str	r6, [r4, #16]
 8006fd2:	444e      	add	r6, r9
 8006fd4:	6026      	str	r6, [r4, #0]
 8006fd6:	463e      	mov	r6, r7
 8006fd8:	6165      	str	r5, [r4, #20]
 8006fda:	eba5 0509 	sub.w	r5, r5, r9
 8006fde:	60a5      	str	r5, [r4, #8]
 8006fe0:	42be      	cmp	r6, r7
 8006fe2:	d900      	bls.n	8006fe6 <__ssputs_r+0x72>
 8006fe4:	463e      	mov	r6, r7
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	4641      	mov	r1, r8
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	f000 faaa 	bl	8007544 <memmove>
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	1b9b      	subs	r3, r3, r6
 8006ff6:	60a3      	str	r3, [r4, #8]
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	4433      	add	r3, r6
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	462a      	mov	r2, r5
 8007004:	f000 fad6 	bl	80075b4 <_realloc_r>
 8007008:	4606      	mov	r6, r0
 800700a:	2800      	cmp	r0, #0
 800700c:	d1e0      	bne.n	8006fd0 <__ssputs_r+0x5c>
 800700e:	4650      	mov	r0, sl
 8007010:	6921      	ldr	r1, [r4, #16]
 8007012:	f7ff feb9 	bl	8006d88 <_free_r>
 8007016:	230c      	movs	r3, #12
 8007018:	f8ca 3000 	str.w	r3, [sl]
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f04f 30ff 	mov.w	r0, #4294967295
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	e7e9      	b.n	8006ffe <__ssputs_r+0x8a>
	...

0800702c <_svfiprintf_r>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	4698      	mov	r8, r3
 8007032:	898b      	ldrh	r3, [r1, #12]
 8007034:	4607      	mov	r7, r0
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	460d      	mov	r5, r1
 800703a:	4614      	mov	r4, r2
 800703c:	b09d      	sub	sp, #116	@ 0x74
 800703e:	d510      	bpl.n	8007062 <_svfiprintf_r+0x36>
 8007040:	690b      	ldr	r3, [r1, #16]
 8007042:	b973      	cbnz	r3, 8007062 <_svfiprintf_r+0x36>
 8007044:	2140      	movs	r1, #64	@ 0x40
 8007046:	f7ff ff09 	bl	8006e5c <_malloc_r>
 800704a:	6028      	str	r0, [r5, #0]
 800704c:	6128      	str	r0, [r5, #16]
 800704e:	b930      	cbnz	r0, 800705e <_svfiprintf_r+0x32>
 8007050:	230c      	movs	r3, #12
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	b01d      	add	sp, #116	@ 0x74
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	2340      	movs	r3, #64	@ 0x40
 8007060:	616b      	str	r3, [r5, #20]
 8007062:	2300      	movs	r3, #0
 8007064:	9309      	str	r3, [sp, #36]	@ 0x24
 8007066:	2320      	movs	r3, #32
 8007068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800706c:	2330      	movs	r3, #48	@ 0x30
 800706e:	f04f 0901 	mov.w	r9, #1
 8007072:	f8cd 800c 	str.w	r8, [sp, #12]
 8007076:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007210 <_svfiprintf_r+0x1e4>
 800707a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800707e:	4623      	mov	r3, r4
 8007080:	469a      	mov	sl, r3
 8007082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007086:	b10a      	cbz	r2, 800708c <_svfiprintf_r+0x60>
 8007088:	2a25      	cmp	r2, #37	@ 0x25
 800708a:	d1f9      	bne.n	8007080 <_svfiprintf_r+0x54>
 800708c:	ebba 0b04 	subs.w	fp, sl, r4
 8007090:	d00b      	beq.n	80070aa <_svfiprintf_r+0x7e>
 8007092:	465b      	mov	r3, fp
 8007094:	4622      	mov	r2, r4
 8007096:	4629      	mov	r1, r5
 8007098:	4638      	mov	r0, r7
 800709a:	f7ff ff6b 	bl	8006f74 <__ssputs_r>
 800709e:	3001      	adds	r0, #1
 80070a0:	f000 80a7 	beq.w	80071f2 <_svfiprintf_r+0x1c6>
 80070a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a6:	445a      	add	r2, fp
 80070a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070aa:	f89a 3000 	ldrb.w	r3, [sl]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 809f 	beq.w	80071f2 <_svfiprintf_r+0x1c6>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070be:	f10a 0a01 	add.w	sl, sl, #1
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	9307      	str	r3, [sp, #28]
 80070c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80070cc:	4654      	mov	r4, sl
 80070ce:	2205      	movs	r2, #5
 80070d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d4:	484e      	ldr	r0, [pc, #312]	@ (8007210 <_svfiprintf_r+0x1e4>)
 80070d6:	f000 fa5f 	bl	8007598 <memchr>
 80070da:	9a04      	ldr	r2, [sp, #16]
 80070dc:	b9d8      	cbnz	r0, 8007116 <_svfiprintf_r+0xea>
 80070de:	06d0      	lsls	r0, r2, #27
 80070e0:	bf44      	itt	mi
 80070e2:	2320      	movmi	r3, #32
 80070e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e8:	0711      	lsls	r1, r2, #28
 80070ea:	bf44      	itt	mi
 80070ec:	232b      	movmi	r3, #43	@ 0x2b
 80070ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f8:	d015      	beq.n	8007126 <_svfiprintf_r+0xfa>
 80070fa:	4654      	mov	r4, sl
 80070fc:	2000      	movs	r0, #0
 80070fe:	f04f 0c0a 	mov.w	ip, #10
 8007102:	9a07      	ldr	r2, [sp, #28]
 8007104:	4621      	mov	r1, r4
 8007106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710a:	3b30      	subs	r3, #48	@ 0x30
 800710c:	2b09      	cmp	r3, #9
 800710e:	d94b      	bls.n	80071a8 <_svfiprintf_r+0x17c>
 8007110:	b1b0      	cbz	r0, 8007140 <_svfiprintf_r+0x114>
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	e014      	b.n	8007140 <_svfiprintf_r+0x114>
 8007116:	eba0 0308 	sub.w	r3, r0, r8
 800711a:	fa09 f303 	lsl.w	r3, r9, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	46a2      	mov	sl, r4
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	e7d2      	b.n	80070cc <_svfiprintf_r+0xa0>
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	1d19      	adds	r1, r3, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	9103      	str	r1, [sp, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	bfbb      	ittet	lt
 8007132:	425b      	neglt	r3, r3
 8007134:	f042 0202 	orrlt.w	r2, r2, #2
 8007138:	9307      	strge	r3, [sp, #28]
 800713a:	9307      	strlt	r3, [sp, #28]
 800713c:	bfb8      	it	lt
 800713e:	9204      	strlt	r2, [sp, #16]
 8007140:	7823      	ldrb	r3, [r4, #0]
 8007142:	2b2e      	cmp	r3, #46	@ 0x2e
 8007144:	d10a      	bne.n	800715c <_svfiprintf_r+0x130>
 8007146:	7863      	ldrb	r3, [r4, #1]
 8007148:	2b2a      	cmp	r3, #42	@ 0x2a
 800714a:	d132      	bne.n	80071b2 <_svfiprintf_r+0x186>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	3402      	adds	r4, #2
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007214 <_svfiprintf_r+0x1e8>
 8007160:	2203      	movs	r2, #3
 8007162:	4650      	mov	r0, sl
 8007164:	7821      	ldrb	r1, [r4, #0]
 8007166:	f000 fa17 	bl	8007598 <memchr>
 800716a:	b138      	cbz	r0, 800717c <_svfiprintf_r+0x150>
 800716c:	2240      	movs	r2, #64	@ 0x40
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	eba0 000a 	sub.w	r0, r0, sl
 8007174:	4082      	lsls	r2, r0
 8007176:	4313      	orrs	r3, r2
 8007178:	3401      	adds	r4, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007180:	2206      	movs	r2, #6
 8007182:	4825      	ldr	r0, [pc, #148]	@ (8007218 <_svfiprintf_r+0x1ec>)
 8007184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007188:	f000 fa06 	bl	8007598 <memchr>
 800718c:	2800      	cmp	r0, #0
 800718e:	d036      	beq.n	80071fe <_svfiprintf_r+0x1d2>
 8007190:	4b22      	ldr	r3, [pc, #136]	@ (800721c <_svfiprintf_r+0x1f0>)
 8007192:	bb1b      	cbnz	r3, 80071dc <_svfiprintf_r+0x1b0>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	3307      	adds	r3, #7
 8007198:	f023 0307 	bic.w	r3, r3, #7
 800719c:	3308      	adds	r3, #8
 800719e:	9303      	str	r3, [sp, #12]
 80071a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a2:	4433      	add	r3, r6
 80071a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a6:	e76a      	b.n	800707e <_svfiprintf_r+0x52>
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b0:	e7a8      	b.n	8007104 <_svfiprintf_r+0xd8>
 80071b2:	2300      	movs	r3, #0
 80071b4:	f04f 0c0a 	mov.w	ip, #10
 80071b8:	4619      	mov	r1, r3
 80071ba:	3401      	adds	r4, #1
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	4620      	mov	r0, r4
 80071c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c4:	3a30      	subs	r2, #48	@ 0x30
 80071c6:	2a09      	cmp	r2, #9
 80071c8:	d903      	bls.n	80071d2 <_svfiprintf_r+0x1a6>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c6      	beq.n	800715c <_svfiprintf_r+0x130>
 80071ce:	9105      	str	r1, [sp, #20]
 80071d0:	e7c4      	b.n	800715c <_svfiprintf_r+0x130>
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071da:	e7f0      	b.n	80071be <_svfiprintf_r+0x192>
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007220 <_svfiprintf_r+0x1f4>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	f3af 8000 	nop.w
 80071ec:	1c42      	adds	r2, r0, #1
 80071ee:	4606      	mov	r6, r0
 80071f0:	d1d6      	bne.n	80071a0 <_svfiprintf_r+0x174>
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	065b      	lsls	r3, r3, #25
 80071f6:	f53f af2d 	bmi.w	8007054 <_svfiprintf_r+0x28>
 80071fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071fc:	e72c      	b.n	8007058 <_svfiprintf_r+0x2c>
 80071fe:	ab03      	add	r3, sp, #12
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	462a      	mov	r2, r5
 8007204:	4638      	mov	r0, r7
 8007206:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <_svfiprintf_r+0x1f4>)
 8007208:	a904      	add	r1, sp, #16
 800720a:	f000 f87d 	bl	8007308 <_printf_i>
 800720e:	e7ed      	b.n	80071ec <_svfiprintf_r+0x1c0>
 8007210:	08007b12 	.word	0x08007b12
 8007214:	08007b18 	.word	0x08007b18
 8007218:	08007b1c 	.word	0x08007b1c
 800721c:	00000000 	.word	0x00000000
 8007220:	08006f75 	.word	0x08006f75

08007224 <_printf_common>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	4616      	mov	r6, r2
 800722a:	4698      	mov	r8, r3
 800722c:	688a      	ldr	r2, [r1, #8]
 800722e:	690b      	ldr	r3, [r1, #16]
 8007230:	4607      	mov	r7, r0
 8007232:	4293      	cmp	r3, r2
 8007234:	bfb8      	it	lt
 8007236:	4613      	movlt	r3, r2
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800723e:	460c      	mov	r4, r1
 8007240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007244:	b10a      	cbz	r2, 800724a <_printf_common+0x26>
 8007246:	3301      	adds	r3, #1
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	0699      	lsls	r1, r3, #26
 800724e:	bf42      	ittt	mi
 8007250:	6833      	ldrmi	r3, [r6, #0]
 8007252:	3302      	addmi	r3, #2
 8007254:	6033      	strmi	r3, [r6, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	f015 0506 	ands.w	r5, r5, #6
 800725c:	d106      	bne.n	800726c <_printf_common+0x48>
 800725e:	f104 0a19 	add.w	sl, r4, #25
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	6832      	ldr	r2, [r6, #0]
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	42ab      	cmp	r3, r5
 800726a:	dc2b      	bgt.n	80072c4 <_printf_common+0xa0>
 800726c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	3b00      	subs	r3, #0
 8007274:	bf18      	it	ne
 8007276:	2301      	movne	r3, #1
 8007278:	0692      	lsls	r2, r2, #26
 800727a:	d430      	bmi.n	80072de <_printf_common+0xba>
 800727c:	4641      	mov	r1, r8
 800727e:	4638      	mov	r0, r7
 8007280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007284:	47c8      	blx	r9
 8007286:	3001      	adds	r0, #1
 8007288:	d023      	beq.n	80072d2 <_printf_common+0xae>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	f003 0306 	and.w	r3, r3, #6
 8007292:	2b04      	cmp	r3, #4
 8007294:	bf14      	ite	ne
 8007296:	2500      	movne	r5, #0
 8007298:	6833      	ldreq	r3, [r6, #0]
 800729a:	f04f 0600 	mov.w	r6, #0
 800729e:	bf08      	it	eq
 80072a0:	68e5      	ldreq	r5, [r4, #12]
 80072a2:	f104 041a 	add.w	r4, r4, #26
 80072a6:	bf08      	it	eq
 80072a8:	1aed      	subeq	r5, r5, r3
 80072aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072ae:	bf08      	it	eq
 80072b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b4:	4293      	cmp	r3, r2
 80072b6:	bfc4      	itt	gt
 80072b8:	1a9b      	subgt	r3, r3, r2
 80072ba:	18ed      	addgt	r5, r5, r3
 80072bc:	42b5      	cmp	r5, r6
 80072be:	d11a      	bne.n	80072f6 <_printf_common+0xd2>
 80072c0:	2000      	movs	r0, #0
 80072c2:	e008      	b.n	80072d6 <_printf_common+0xb2>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4652      	mov	r2, sl
 80072c8:	4641      	mov	r1, r8
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c8      	blx	r9
 80072ce:	3001      	adds	r0, #1
 80072d0:	d103      	bne.n	80072da <_printf_common+0xb6>
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	3501      	adds	r5, #1
 80072dc:	e7c1      	b.n	8007262 <_printf_common+0x3e>
 80072de:	2030      	movs	r0, #48	@ 0x30
 80072e0:	18e1      	adds	r1, r4, r3
 80072e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072ec:	4422      	add	r2, r4
 80072ee:	3302      	adds	r3, #2
 80072f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072f4:	e7c2      	b.n	800727c <_printf_common+0x58>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4622      	mov	r2, r4
 80072fa:	4641      	mov	r1, r8
 80072fc:	4638      	mov	r0, r7
 80072fe:	47c8      	blx	r9
 8007300:	3001      	adds	r0, #1
 8007302:	d0e6      	beq.n	80072d2 <_printf_common+0xae>
 8007304:	3601      	adds	r6, #1
 8007306:	e7d9      	b.n	80072bc <_printf_common+0x98>

08007308 <_printf_i>:
 8007308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	7e0f      	ldrb	r7, [r1, #24]
 800730e:	4691      	mov	r9, r2
 8007310:	2f78      	cmp	r7, #120	@ 0x78
 8007312:	4680      	mov	r8, r0
 8007314:	460c      	mov	r4, r1
 8007316:	469a      	mov	sl, r3
 8007318:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800731a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800731e:	d807      	bhi.n	8007330 <_printf_i+0x28>
 8007320:	2f62      	cmp	r7, #98	@ 0x62
 8007322:	d80a      	bhi.n	800733a <_printf_i+0x32>
 8007324:	2f00      	cmp	r7, #0
 8007326:	f000 80d1 	beq.w	80074cc <_printf_i+0x1c4>
 800732a:	2f58      	cmp	r7, #88	@ 0x58
 800732c:	f000 80b8 	beq.w	80074a0 <_printf_i+0x198>
 8007330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007338:	e03a      	b.n	80073b0 <_printf_i+0xa8>
 800733a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800733e:	2b15      	cmp	r3, #21
 8007340:	d8f6      	bhi.n	8007330 <_printf_i+0x28>
 8007342:	a101      	add	r1, pc, #4	@ (adr r1, 8007348 <_printf_i+0x40>)
 8007344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073b5 	.word	0x080073b5
 8007350:	08007331 	.word	0x08007331
 8007354:	08007331 	.word	0x08007331
 8007358:	08007331 	.word	0x08007331
 800735c:	08007331 	.word	0x08007331
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007331 	.word	0x08007331
 8007368:	08007331 	.word	0x08007331
 800736c:	08007331 	.word	0x08007331
 8007370:	08007331 	.word	0x08007331
 8007374:	080074b3 	.word	0x080074b3
 8007378:	080073df 	.word	0x080073df
 800737c:	0800746d 	.word	0x0800746d
 8007380:	08007331 	.word	0x08007331
 8007384:	08007331 	.word	0x08007331
 8007388:	080074d5 	.word	0x080074d5
 800738c:	08007331 	.word	0x08007331
 8007390:	080073df 	.word	0x080073df
 8007394:	08007331 	.word	0x08007331
 8007398:	08007331 	.word	0x08007331
 800739c:	08007475 	.word	0x08007475
 80073a0:	6833      	ldr	r3, [r6, #0]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6032      	str	r2, [r6, #0]
 80073a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073b0:	2301      	movs	r3, #1
 80073b2:	e09c      	b.n	80074ee <_printf_i+0x1e6>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	1d19      	adds	r1, r3, #4
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	0606      	lsls	r6, r0, #24
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0xbc>
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	e003      	b.n	80073cc <_printf_i+0xc4>
 80073c4:	0645      	lsls	r5, r0, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0xb8>
 80073c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xd0>
 80073d0:	232d      	movs	r3, #45	@ 0x2d
 80073d2:	426d      	negs	r5, r5
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d8:	230a      	movs	r3, #10
 80073da:	4858      	ldr	r0, [pc, #352]	@ (800753c <_printf_i+0x234>)
 80073dc:	e011      	b.n	8007402 <_printf_i+0xfa>
 80073de:	6821      	ldr	r1, [r4, #0]
 80073e0:	6833      	ldr	r3, [r6, #0]
 80073e2:	0608      	lsls	r0, r1, #24
 80073e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80073e8:	d402      	bmi.n	80073f0 <_printf_i+0xe8>
 80073ea:	0649      	lsls	r1, r1, #25
 80073ec:	bf48      	it	mi
 80073ee:	b2ad      	uxthmi	r5, r5
 80073f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80073f2:	6033      	str	r3, [r6, #0]
 80073f4:	bf14      	ite	ne
 80073f6:	230a      	movne	r3, #10
 80073f8:	2308      	moveq	r3, #8
 80073fa:	4850      	ldr	r0, [pc, #320]	@ (800753c <_printf_i+0x234>)
 80073fc:	2100      	movs	r1, #0
 80073fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007402:	6866      	ldr	r6, [r4, #4]
 8007404:	2e00      	cmp	r6, #0
 8007406:	60a6      	str	r6, [r4, #8]
 8007408:	db05      	blt.n	8007416 <_printf_i+0x10e>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	432e      	orrs	r6, r5
 800740e:	f021 0104 	bic.w	r1, r1, #4
 8007412:	6021      	str	r1, [r4, #0]
 8007414:	d04b      	beq.n	80074ae <_printf_i+0x1a6>
 8007416:	4616      	mov	r6, r2
 8007418:	fbb5 f1f3 	udiv	r1, r5, r3
 800741c:	fb03 5711 	mls	r7, r3, r1, r5
 8007420:	5dc7      	ldrb	r7, [r0, r7]
 8007422:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007426:	462f      	mov	r7, r5
 8007428:	42bb      	cmp	r3, r7
 800742a:	460d      	mov	r5, r1
 800742c:	d9f4      	bls.n	8007418 <_printf_i+0x110>
 800742e:	2b08      	cmp	r3, #8
 8007430:	d10b      	bne.n	800744a <_printf_i+0x142>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	07df      	lsls	r7, r3, #31
 8007436:	d508      	bpl.n	800744a <_printf_i+0x142>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	6861      	ldr	r1, [r4, #4]
 800743c:	4299      	cmp	r1, r3
 800743e:	bfde      	ittt	le
 8007440:	2330      	movle	r3, #48	@ 0x30
 8007442:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007446:	f106 36ff 	addle.w	r6, r6, #4294967295
 800744a:	1b92      	subs	r2, r2, r6
 800744c:	6122      	str	r2, [r4, #16]
 800744e:	464b      	mov	r3, r9
 8007450:	4621      	mov	r1, r4
 8007452:	4640      	mov	r0, r8
 8007454:	f8cd a000 	str.w	sl, [sp]
 8007458:	aa03      	add	r2, sp, #12
 800745a:	f7ff fee3 	bl	8007224 <_printf_common>
 800745e:	3001      	adds	r0, #1
 8007460:	d14a      	bne.n	80074f8 <_printf_i+0x1f0>
 8007462:	f04f 30ff 	mov.w	r0, #4294967295
 8007466:	b004      	add	sp, #16
 8007468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	2778      	movs	r7, #120	@ 0x78
 8007476:	4832      	ldr	r0, [pc, #200]	@ (8007540 <_printf_i+0x238>)
 8007478:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	6831      	ldr	r1, [r6, #0]
 8007480:	061f      	lsls	r7, r3, #24
 8007482:	f851 5b04 	ldr.w	r5, [r1], #4
 8007486:	d402      	bmi.n	800748e <_printf_i+0x186>
 8007488:	065f      	lsls	r7, r3, #25
 800748a:	bf48      	it	mi
 800748c:	b2ad      	uxthmi	r5, r5
 800748e:	6031      	str	r1, [r6, #0]
 8007490:	07d9      	lsls	r1, r3, #31
 8007492:	bf44      	itt	mi
 8007494:	f043 0320 	orrmi.w	r3, r3, #32
 8007498:	6023      	strmi	r3, [r4, #0]
 800749a:	b11d      	cbz	r5, 80074a4 <_printf_i+0x19c>
 800749c:	2310      	movs	r3, #16
 800749e:	e7ad      	b.n	80073fc <_printf_i+0xf4>
 80074a0:	4826      	ldr	r0, [pc, #152]	@ (800753c <_printf_i+0x234>)
 80074a2:	e7e9      	b.n	8007478 <_printf_i+0x170>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	f023 0320 	bic.w	r3, r3, #32
 80074aa:	6023      	str	r3, [r4, #0]
 80074ac:	e7f6      	b.n	800749c <_printf_i+0x194>
 80074ae:	4616      	mov	r6, r2
 80074b0:	e7bd      	b.n	800742e <_printf_i+0x126>
 80074b2:	6833      	ldr	r3, [r6, #0]
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1d18      	adds	r0, r3, #4
 80074b8:	6961      	ldr	r1, [r4, #20]
 80074ba:	6030      	str	r0, [r6, #0]
 80074bc:	062e      	lsls	r6, r5, #24
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	d501      	bpl.n	80074c6 <_printf_i+0x1be>
 80074c2:	6019      	str	r1, [r3, #0]
 80074c4:	e002      	b.n	80074cc <_printf_i+0x1c4>
 80074c6:	0668      	lsls	r0, r5, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0x1ba>
 80074ca:	8019      	strh	r1, [r3, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	4616      	mov	r6, r2
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	e7bc      	b.n	800744e <_printf_i+0x146>
 80074d4:	6833      	ldr	r3, [r6, #0]
 80074d6:	2100      	movs	r1, #0
 80074d8:	1d1a      	adds	r2, r3, #4
 80074da:	6032      	str	r2, [r6, #0]
 80074dc:	681e      	ldr	r6, [r3, #0]
 80074de:	6862      	ldr	r2, [r4, #4]
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f859 	bl	8007598 <memchr>
 80074e6:	b108      	cbz	r0, 80074ec <_printf_i+0x1e4>
 80074e8:	1b80      	subs	r0, r0, r6
 80074ea:	6060      	str	r0, [r4, #4]
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	2300      	movs	r3, #0
 80074f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074f6:	e7aa      	b.n	800744e <_printf_i+0x146>
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	47d0      	blx	sl
 8007502:	3001      	adds	r0, #1
 8007504:	d0ad      	beq.n	8007462 <_printf_i+0x15a>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	079b      	lsls	r3, r3, #30
 800750a:	d413      	bmi.n	8007534 <_printf_i+0x22c>
 800750c:	68e0      	ldr	r0, [r4, #12]
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	4298      	cmp	r0, r3
 8007512:	bfb8      	it	lt
 8007514:	4618      	movlt	r0, r3
 8007516:	e7a6      	b.n	8007466 <_printf_i+0x15e>
 8007518:	2301      	movs	r3, #1
 800751a:	4632      	mov	r2, r6
 800751c:	4649      	mov	r1, r9
 800751e:	4640      	mov	r0, r8
 8007520:	47d0      	blx	sl
 8007522:	3001      	adds	r0, #1
 8007524:	d09d      	beq.n	8007462 <_printf_i+0x15a>
 8007526:	3501      	adds	r5, #1
 8007528:	68e3      	ldr	r3, [r4, #12]
 800752a:	9903      	ldr	r1, [sp, #12]
 800752c:	1a5b      	subs	r3, r3, r1
 800752e:	42ab      	cmp	r3, r5
 8007530:	dcf2      	bgt.n	8007518 <_printf_i+0x210>
 8007532:	e7eb      	b.n	800750c <_printf_i+0x204>
 8007534:	2500      	movs	r5, #0
 8007536:	f104 0619 	add.w	r6, r4, #25
 800753a:	e7f5      	b.n	8007528 <_printf_i+0x220>
 800753c:	08007b23 	.word	0x08007b23
 8007540:	08007b34 	.word	0x08007b34

08007544 <memmove>:
 8007544:	4288      	cmp	r0, r1
 8007546:	b510      	push	{r4, lr}
 8007548:	eb01 0402 	add.w	r4, r1, r2
 800754c:	d902      	bls.n	8007554 <memmove+0x10>
 800754e:	4284      	cmp	r4, r0
 8007550:	4623      	mov	r3, r4
 8007552:	d807      	bhi.n	8007564 <memmove+0x20>
 8007554:	1e43      	subs	r3, r0, #1
 8007556:	42a1      	cmp	r1, r4
 8007558:	d008      	beq.n	800756c <memmove+0x28>
 800755a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007562:	e7f8      	b.n	8007556 <memmove+0x12>
 8007564:	4601      	mov	r1, r0
 8007566:	4402      	add	r2, r0
 8007568:	428a      	cmp	r2, r1
 800756a:	d100      	bne.n	800756e <memmove+0x2a>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007576:	e7f7      	b.n	8007568 <memmove+0x24>

08007578 <_sbrk_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4d05      	ldr	r5, [pc, #20]	@ (8007594 <_sbrk_r+0x1c>)
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 fd86 	bl	8001094 <_sbrk>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_sbrk_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_sbrk_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20001ee8 	.word	0x20001ee8

08007598 <memchr>:
 8007598:	4603      	mov	r3, r0
 800759a:	b510      	push	{r4, lr}
 800759c:	b2c9      	uxtb	r1, r1
 800759e:	4402      	add	r2, r0
 80075a0:	4293      	cmp	r3, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	d101      	bne.n	80075aa <memchr+0x12>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e003      	b.n	80075b2 <memchr+0x1a>
 80075aa:	7804      	ldrb	r4, [r0, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	428c      	cmp	r4, r1
 80075b0:	d1f6      	bne.n	80075a0 <memchr+0x8>
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <_realloc_r>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	4607      	mov	r7, r0
 80075ba:	4614      	mov	r4, r2
 80075bc:	460d      	mov	r5, r1
 80075be:	b921      	cbnz	r1, 80075ca <_realloc_r+0x16>
 80075c0:	4611      	mov	r1, r2
 80075c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	f7ff bc49 	b.w	8006e5c <_malloc_r>
 80075ca:	b92a      	cbnz	r2, 80075d8 <_realloc_r+0x24>
 80075cc:	f7ff fbdc 	bl	8006d88 <_free_r>
 80075d0:	4625      	mov	r5, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	f000 f81a 	bl	8007610 <_malloc_usable_size_r>
 80075dc:	4284      	cmp	r4, r0
 80075de:	4606      	mov	r6, r0
 80075e0:	d802      	bhi.n	80075e8 <_realloc_r+0x34>
 80075e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075e6:	d8f4      	bhi.n	80075d2 <_realloc_r+0x1e>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff fc36 	bl	8006e5c <_malloc_r>
 80075f0:	4680      	mov	r8, r0
 80075f2:	b908      	cbnz	r0, 80075f8 <_realloc_r+0x44>
 80075f4:	4645      	mov	r5, r8
 80075f6:	e7ec      	b.n	80075d2 <_realloc_r+0x1e>
 80075f8:	42b4      	cmp	r4, r6
 80075fa:	4622      	mov	r2, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	bf28      	it	cs
 8007600:	4632      	movcs	r2, r6
 8007602:	f7ff fbb3 	bl	8006d6c <memcpy>
 8007606:	4629      	mov	r1, r5
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff fbbd 	bl	8006d88 <_free_r>
 800760e:	e7f1      	b.n	80075f4 <_realloc_r+0x40>

08007610 <_malloc_usable_size_r>:
 8007610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007614:	1f18      	subs	r0, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfbc      	itt	lt
 800761a:	580b      	ldrlt	r3, [r1, r0]
 800761c:	18c0      	addlt	r0, r0, r3
 800761e:	4770      	bx	lr

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
