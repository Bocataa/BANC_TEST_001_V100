
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005b5c  08005b5c  00006b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c1c  08005c1c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c24  08005c24  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c24  08005c24  00006c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c28  08005c28  00006c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000060  08005c8c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d9c  08005c8c  00007d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bda8  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc7  00000000  00000000  00022e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f2  00000000  00000000  00028330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b34c  00000000  00000000  00029622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de63  00000000  00000000  0004496e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c9e9  00000000  00000000  000627d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006908  00000000  00000000  000ff200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00105b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b44 	.word	0x08005b44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005b44 	.word	0x08005b44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <StateMachineTask>:
}*/

uint8_t state = 0;
char* per_value = 0;

void StateMachineTask(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	b0a6      	sub	sp, #152	@ 0x98
 8000164:	af00      	add	r7, sp, #0
	static uint8_t action_done = 0;

	while(1){
		if (HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) == GPIO_PIN_RESET) {
 8000166:	2120      	movs	r1, #32
 8000168:	4806      	ldr	r0, [pc, #24]	@ (8000184 <StateMachineTask+0x24>)
 800016a:	f001 fa11 	bl	8001590 <HAL_GPIO_ReadPin>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d1f8      	bne.n	8000166 <StateMachineTask+0x6>
			                send_UART2("HELLO WORLD");
 8000174:	4804      	ldr	r0, [pc, #16]	@ (8000188 <StateMachineTask+0x28>)
 8000176:	f000 fce1 	bl	8000b3c <send_UART2>
			                send_UART3("OKKKK");
 800017a:	4804      	ldr	r0, [pc, #16]	@ (800018c <StateMachineTask+0x2c>)
 800017c:	f000 fd24 	bl	8000bc8 <send_UART3>
		if (HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) == GPIO_PIN_RESET) {
 8000180:	e7f1      	b.n	8000166 <StateMachineTask+0x6>
 8000182:	bf00      	nop
 8000184:	40010800 	.word	0x40010800
 8000188:	08005b5c 	.word	0x08005b5c
 800018c:	08005b68 	.word	0x08005b68

08000190 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4a06      	ldr	r2, [pc, #24]	@ (80001b8 <vApplicationGetIdleTaskMemory+0x28>)
 80001a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	4a05      	ldr	r2, [pc, #20]	@ (80001bc <vApplicationGetIdleTaskMemory+0x2c>)
 80001a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2280      	movs	r2, #128	@ 0x80
 80001ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ae:	bf00      	nop
 80001b0:	3714      	adds	r7, #20
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	20000124 	.word	0x20000124

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f000 fd3c 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f830 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001cc:	f000 f946 	bl	800045c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d0:	f000 f8c6 	bl	8000360 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001d4:	f000 fc5e 	bl	8000a94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 fc86 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001dc:	f000 fcca 	bl	8000b74 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80001e0:	f000 f880 	bl	80002e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e4:	f000 f8ea 	bl	80003bc <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e8:	f002 fe96 	bl	8002f18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ec:	4a09      	ldr	r2, [pc, #36]	@ (8000214 <main+0x54>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4809      	ldr	r0, [pc, #36]	@ (8000218 <main+0x58>)
 80001f2:	f002 fed9 	bl	8002fa8 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a08      	ldr	r2, [pc, #32]	@ (800021c <main+0x5c>)
 80001fa:	6013      	str	r3, [r2, #0]
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 80001fc:	4a08      	ldr	r2, [pc, #32]	@ (8000220 <main+0x60>)
 80001fe:	2100      	movs	r1, #0
 8000200:	4808      	ldr	r0, [pc, #32]	@ (8000224 <main+0x64>)
 8000202:	f002 fed1 	bl	8002fa8 <osThreadNew>
 8000206:	4603      	mov	r3, r0
 8000208:	4a07      	ldr	r2, [pc, #28]	@ (8000228 <main+0x68>)
 800020a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800020c:	f002 fea6 	bl	8002f5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0x50>
 8000214:	08005ba8 	.word	0x08005ba8
 8000218:	080005c7 	.word	0x080005c7
 800021c:	200003f0 	.word	0x200003f0
 8000220:	08005bcc 	.word	0x08005bcc
 8000224:	080005b9 	.word	0x080005b9
 8000228:	200003f4 	.word	0x200003f4

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b094      	sub	sp, #80	@ 0x50
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000236:	2228      	movs	r2, #40	@ 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f005 fb94 	bl	8005968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000278:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800027c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000282:	4618      	mov	r0, r3
 8000284:	f001 faf8 	bl	8001878 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028e:	f000 f9b2 	bl	80005f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fd64 	bl	8001d7c <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ba:	f000 f99c 	bl	80005f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002be:	2302      	movs	r3, #2
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80002c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 ff14 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002d6:	f000 f98e 	bl	80005f6 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	@ 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_ADC1_Init+0x74>)
 80002f6:	4a19      	ldr	r2, [pc, #100]	@ (800035c <MX_ADC1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fa:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <MX_ADC1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <MX_ADC1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000306:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <MX_ADC1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <MX_ADC1_Init+0x74>)
 800030e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000312:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_ADC1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_ADC1_Init+0x74>)
 800031c:	2201      	movs	r2, #1
 800031e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000320:	480d      	ldr	r0, [pc, #52]	@ (8000358 <MX_ADC1_Init+0x74>)
 8000322:	f000 fcbf 	bl	8000ca4 <HAL_ADC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800032c:	f000 f963 	bl	80005f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000330:	2308      	movs	r3, #8
 8000332:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000334:	2301      	movs	r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_ADC1_Init+0x74>)
 8000342:	f000 fd87 	bl	8000e54 <HAL_ADC_ConfigChannel>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800034c:	f000 f953 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000324 	.word	0x20000324
 800035c:	40012400 	.word	0x40012400

08000360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000366:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <MX_I2C1_Init+0x54>)
 8000368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800036a:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_I2C1_Init+0x50>)
 800036c:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <MX_I2C1_Init+0x58>)
 800036e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <MX_I2C1_Init+0x50>)
 800037e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_I2C1_Init+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	@ (80003b0 <MX_I2C1_Init+0x50>)
 800039e:	f001 f927 	bl	80015f0 <HAL_I2C_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003a8:	f000 f925 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000354 	.word	0x20000354
 80003b4:	40005400 	.word	0x40005400
 80003b8:	000186a0 	.word	0x000186a0

080003bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003da:	4a1f      	ldr	r2, [pc, #124]	@ (8000458 <MX_TIM1_Init+0x9c>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f8:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <MX_TIM1_Init+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_TIM1_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000404:	4813      	ldr	r0, [pc, #76]	@ (8000454 <MX_TIM1_Init+0x98>)
 8000406:	f001 ff2d 	bl	8002264 <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000410:	f000 f8f1 	bl	80005f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	4619      	mov	r1, r3
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <MX_TIM1_Init+0x98>)
 8000422:	f002 f8b1 	bl	8002588 <HAL_TIM_ConfigClockSource>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800042c:	f000 f8e3 	bl	80005f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_TIM1_Init+0x98>)
 800043e:	f002 fa93 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000448:	f000 f8d5 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200003a8 	.word	0x200003a8
 8000458:	40012c00 	.word	0x40012c00

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b4c      	ldr	r3, [pc, #304]	@ (80005a4 <MX_GPIO_Init+0x148>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a4b      	ldr	r2, [pc, #300]	@ (80005a4 <MX_GPIO_Init+0x148>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b49      	ldr	r3, [pc, #292]	@ (80005a4 <MX_GPIO_Init+0x148>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b46      	ldr	r3, [pc, #280]	@ (80005a4 <MX_GPIO_Init+0x148>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a45      	ldr	r2, [pc, #276]	@ (80005a4 <MX_GPIO_Init+0x148>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b43      	ldr	r3, [pc, #268]	@ (80005a4 <MX_GPIO_Init+0x148>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b40      	ldr	r3, [pc, #256]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a3f      	ldr	r2, [pc, #252]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b3d      	ldr	r3, [pc, #244]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b3a      	ldr	r3, [pc, #232]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a39      	ldr	r2, [pc, #228]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b37      	ldr	r3, [pc, #220]	@ (80005a4 <MX_GPIO_Init+0x148>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80004d6:	4834      	ldr	r0, [pc, #208]	@ (80005a8 <MX_GPIO_Init+0x14c>)
 80004d8:	f001 f871 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin|LED_CEL_Pin|OUT2_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f648 0110 	movw	r1, #34832	@ 0x8810
 80004e2:	4832      	ldr	r0, [pc, #200]	@ (80005ac <MX_GPIO_Init+0x150>)
 80004e4:	f001 f86b 	bl	80015be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 80004e8:	2200      	movs	r2, #0
 80004ea:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 80004ee:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <MX_GPIO_Init+0x154>)
 80004f0:	f001 f865 	bl	80015be <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|BUZZER_Pin;
 80004f4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4826      	ldr	r0, [pc, #152]	@ (80005a8 <MX_GPIO_Init+0x14c>)
 800050e:	f000 febb 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 8000512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4820      	ldr	r0, [pc, #128]	@ (80005a8 <MX_GPIO_Init+0x14c>)
 8000528:	f000 feae 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP3_Pin|BP2_Pin|BP3_Pin
 800052c:	23e3      	movs	r3, #227	@ 0xe3
 800052e:	613b      	str	r3, [r7, #16]
                          |BP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	481b      	ldr	r0, [pc, #108]	@ (80005ac <MX_GPIO_Init+0x150>)
 8000540:	f000 fea2 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin|LED_CEL_Pin|OUT2_Pin;
 8000544:	f648 0310 	movw	r3, #34832	@ 0x8810
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4813      	ldr	r0, [pc, #76]	@ (80005ac <MX_GPIO_Init+0x150>)
 800055e:	f000 fe93 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000562:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 8000566:	613b      	str	r3, [r7, #16]
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	480d      	ldr	r0, [pc, #52]	@ (80005b0 <MX_GPIO_Init+0x154>)
 800057c:	f000 fe84 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8000580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000586:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <MX_GPIO_Init+0x158>)
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <MX_GPIO_Init+0x154>)
 8000596:	f000 fe77 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	10110000 	.word	0x10110000

080005b8 <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	for(;;){
		StateMachineTask();
 80005c0:	f7ff fdce 	bl	8000160 <StateMachineTask>
 80005c4:	e7fc      	b.n	80005c0 <StartStateMachineTask+0x8>

080005c6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
	//HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d2:	f002 fd7b 	bl	80030cc <osDelay>
 80005d6:	e7fa      	b.n	80005ce <StartDefaultTask+0x8>

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80005ea:	f000 fb3f 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fa:	b672      	cpsid	i
}
 80005fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <Error_Handler+0x8>
	...

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <HAL_MspInit+0x68>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <HAL_MspInit+0x68>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <HAL_MspInit+0x68>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_MspInit+0x68>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a11      	ldr	r2, [pc, #68]	@ (800066c <HAL_MspInit+0x68>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <HAL_MspInit+0x68>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	210f      	movs	r1, #15
 800063e:	f06f 0001 	mvn.w	r0, #1
 8000642:	f000 fdf6 	bl	8001232 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_MspInit+0x6c>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_MspInit+0x6c>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <HAL_ADC_MspInit+0x6c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d121      	bne.n	80006d8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 800069a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <HAL_ADC_MspInit+0x70>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c8:	2303      	movs	r3, #3
 80006ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <HAL_ADC_MspInit+0x74>)
 80006d4:	f000 fdd8 	bl	8001288 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40012400 	.word	0x40012400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <HAL_I2C_MspInit+0x90>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d132      	bne.n	8000772 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000724:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072a:	2312      	movs	r3, #18
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4812      	ldr	r0, [pc, #72]	@ (8000784 <HAL_I2C_MspInit+0x98>)
 800073a:	f000 fda5 	bl	8001288 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_I2C_MspInit+0x9c>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
 8000744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000746:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
 800074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
 8000754:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <HAL_I2C_MspInit+0x9c>)
 8000756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000758:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_I2C_MspInit+0x94>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	@ 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a09      	ldr	r2, [pc, #36]	@ (80007c0 <HAL_TIM_Base_MspInit+0x34>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d10b      	bne.n	80007b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a53      	ldr	r2, [pc, #332]	@ (8000930 <HAL_UART_MspInit+0x168>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d132      	bne.n	800084e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e8:	4b52      	ldr	r3, [pc, #328]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a51      	ldr	r2, [pc, #324]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b4c      	ldr	r3, [pc, #304]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a4b      	ldr	r2, [pc, #300]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b49      	ldr	r3, [pc, #292]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8000818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	4619      	mov	r1, r3
 800082c:	4842      	ldr	r0, [pc, #264]	@ (8000938 <HAL_UART_MspInit+0x170>)
 800082e:	f000 fd2b 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 8000832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	483c      	ldr	r0, [pc, #240]	@ (8000938 <HAL_UART_MspInit+0x170>)
 8000848:	f000 fd1e 	bl	8001288 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800084c:	e06c      	b.n	8000928 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a3a      	ldr	r2, [pc, #232]	@ (800093c <HAL_UART_MspInit+0x174>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d130      	bne.n	80008ba <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000858:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a35      	ldr	r2, [pc, #212]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b33      	ldr	r3, [pc, #204]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b30      	ldr	r3, [pc, #192]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a2f      	ldr	r2, [pc, #188]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 8000888:	2304      	movs	r3, #4
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4619      	mov	r1, r3
 800089a:	4827      	ldr	r0, [pc, #156]	@ (8000938 <HAL_UART_MspInit+0x170>)
 800089c:	f000 fcf4 	bl	8001288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4619      	mov	r1, r3
 80008b2:	4821      	ldr	r0, [pc, #132]	@ (8000938 <HAL_UART_MspInit+0x170>)
 80008b4:	f000 fce8 	bl	8001288 <HAL_GPIO_Init>
}
 80008b8:	e036      	b.n	8000928 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <HAL_UART_MspInit+0x178>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d131      	bne.n	8000928 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_UART_MspInit+0x16c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_COM_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TX_COM_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4619      	mov	r1, r3
 8000908:	480e      	ldr	r0, [pc, #56]	@ (8000944 <HAL_UART_MspInit+0x17c>)
 800090a:	f000 fcbd 	bl	8001288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_COM_Pin;
 800090e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RX_COM_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4619      	mov	r1, r3
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <HAL_UART_MspInit+0x17c>)
 8000924:	f000 fcb0 	bl	8001288 <HAL_GPIO_Init>
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	@ 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	40010800 	.word	0x40010800
 800093c:	40004400 	.word	0x40004400
 8000940:	40004800 	.word	0x40004800
 8000944:	40010c00 	.word	0x40010c00

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800095e:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <HAL_InitTick+0xe8>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a33      	ldr	r2, [pc, #204]	@ (8000a30 <HAL_InitTick+0xe8>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <HAL_InitTick+0xe8>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000976:	f107 0210 	add.w	r2, r7, #16
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fb6b 	bl	800205c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098c:	2b00      	cmp	r3, #0
 800098e:	d103      	bne.n	8000998 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000990:	f001 fb3c 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8000994:	6378      	str	r0, [r7, #52]	@ 0x34
 8000996:	e004      	b.n	80009a2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000998:	f001 fb38 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 800099c:	4603      	mov	r3, r0
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a4:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <HAL_InitTick+0xec>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0c9b      	lsrs	r3, r3, #18
 80009ac:	3b01      	subs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009d8:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009da:	f001 fc43 	bl	8002264 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009ec:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <HAL_InitTick+0xf0>)
 80009ee:	f001 fc89 	bl	8002304 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a00:	201c      	movs	r0, #28
 8000a02:	f000 fc32 	bl	800126a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 fc0e 	bl	8001232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_InitTick+0xf4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3738      	adds	r7, #56	@ 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	200003f8 	.word	0x200003f8
 8000a3c:	20000004 	.word	0x20000004

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <TIM2_IRQHandler+0x10>)
 8000a7a:	f001 fc95 	bl	80023a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200003f8 	.word	0x200003f8

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART1_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000acc:	f001 ffbc 	bl	8002a48 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f7ff fd8e 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000440 	.word	0x20000440
 8000ae4:	40013800 	.word	0x40013800

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f001 ff92 	bl	8002a48 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff fd64 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200004d0 	.word	0x200004d0
 8000b38:	40004400 	.word	0x40004400

08000b3c <send_UART2>:
{
    HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
}

void send_UART2(const char *msg)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RTS_485_GPIO_Port, RTS_485_Pin, GPIO_PIN_SET); // DEBUG
 8000b44:	2201      	movs	r2, #1
 8000b46:	2110      	movs	r1, #16
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <send_UART2+0x30>)
 8000b4a:	f000 fd38 	bl	80015be <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fafe 	bl	8000150 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <send_UART2+0x34>)
 8000b60:	f001 ffc2 	bl	8002ae8 <HAL_UART_Transmit>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	200004d0 	.word	0x200004d0

08000b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_USART3_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000bac:	f001 ff4c 	bl	8002a48 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f7ff fd1e 	bl	80005f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000488 	.word	0x20000488
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <send_UART3>:
{
    HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
}

void send_UART3(const char *msg)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fabd 	bl	8000150 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <send_UART3+0x28>)
 8000be2:	f001 ff81 	bl	8002ae8 <HAL_UART_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000488 	.word	0x20000488

08000bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf4:	f7ff ff48 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bfa:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c10:	4c09      	ldr	r4, [pc, #36]	@ (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f004 ff09 	bl	8005a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff facd 	bl	80001c0 <main>
  bx lr
 8000c26:	4770      	bx	lr
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c30:	08005c2c 	.word	0x08005c2c
  ldr r2, =_sbss
 8000c34:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c38:	20001d9c 	.word	0x20001d9c

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_Init+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <HAL_Init+0x28>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 fae3 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fe76 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fcd2 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000518 	.word	0x20000518

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000518 	.word	0x20000518

08000ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0be      	b.n	8000e44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fcc6 	bl	8000674 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f9ab 	bl	8001044 <ADC_ConversionStop_Disable>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8099 	bne.w	8000e32 <HAL_ADC_Init+0x18e>
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8095 	bne.w	8000e32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d10:	f023 0302 	bic.w	r3, r3, #2
 8000d14:	f043 0202 	orr.w	r2, r3, #2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d3c:	d003      	beq.n	8000d46 <HAL_ADC_Init+0xa2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d102      	bne.n	8000d4c <HAL_ADC_Init+0xa8>
 8000d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d4a:	e000      	b.n	8000d4e <HAL_ADC_Init+0xaa>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7d1b      	ldrb	r3, [r3, #20]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d119      	bne.n	8000d90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d109      	bne.n	8000d78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	035a      	lsls	r2, r3, #13
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e00b      	b.n	8000d90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7c:	f043 0220 	orr.w	r2, r3, #32
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	f043 0201 	orr.w	r2, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <HAL_ADC_Init+0x1a8>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc0:	d003      	beq.n	8000dca <HAL_ADC_Init+0x126>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	051b      	lsls	r3, r3, #20
 8000dd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dda:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_ADC_Init+0x1ac>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10b      	bne.n	8000e10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0201 	orr.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0e:	e018      	b.n	8000e42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	f023 0312 	bic.w	r3, r3, #18
 8000e18:	f043 0210 	orr.w	r2, r3, #16
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	f043 0201 	orr.w	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	e007      	b.n	8000e42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e36:	f043 0210 	orr.w	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e50:	ff1f0efe 	.word	0xff1f0efe

08000e54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x20>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e0dc      	b.n	800102e <HAL_ADC_ConfigChannel+0x1da>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d81c      	bhi.n	8000ebe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b05      	subs	r3, #5
 8000e96:	221f      	movs	r2, #31
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4019      	ands	r1, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	3b05      	subs	r3, #5
 8000eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ebc:	e03c      	b.n	8000f38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	d81c      	bhi.n	8000f00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3b23      	subs	r3, #35	@ 0x23
 8000ed8:	221f      	movs	r2, #31
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4019      	ands	r1, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	3b23      	subs	r3, #35	@ 0x23
 8000ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000efe:	e01b      	b.n	8000f38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b41      	subs	r3, #65	@ 0x41
 8000f12:	221f      	movs	r2, #31
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4019      	ands	r1, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b41      	subs	r3, #65	@ 0x41
 8000f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b09      	cmp	r3, #9
 8000f3e:	d91c      	bls.n	8000f7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68d9      	ldr	r1, [r3, #12]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b1e      	subs	r3, #30
 8000f52:	2207      	movs	r2, #7
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4019      	ands	r1, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6898      	ldr	r0, [r3, #8]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b1e      	subs	r3, #30
 8000f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	e019      	b.n	8000fae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6919      	ldr	r1, [r3, #16]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4019      	ands	r1, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b10      	cmp	r3, #16
 8000fb4:	d003      	beq.n	8000fbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fba:	2b11      	cmp	r3, #17
 8000fbc:	d132      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d125      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d126      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000fe4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d11a      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9a      	lsrs	r2, r3, #18
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001004:	e002      	b.n	800100c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3b01      	subs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_ADC_ConfigChannel+0x1b2>
 8001012:	e007      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001018:	f043 0220 	orr.w	r2, r3, #32
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40012400 	.word	0x40012400
 800103c:	20000000 	.word	0x20000000
 8001040:	431bde83 	.word	0x431bde83

08001044 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d12e      	bne.n	80010bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800106e:	f7ff fe0f 	bl	8000c90 <HAL_GetTick>
 8001072:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001074:	e01b      	b.n	80010ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001076:	f7ff fe0b 	bl	8000c90 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d914      	bls.n	80010ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10d      	bne.n	80010ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e007      	b.n	80010be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d0dc      	beq.n	8001076 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4906      	ldr	r1, [pc, #24]	@ (8001160 <__NVIC_EnableIRQ+0x34>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff4f 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff64 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ffb2 	bl	80011b8 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff81 	bl	8001164 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff57 	bl	800112c <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	@ 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e169      	b.n	8001570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8158 	bne.w	800156a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a9a      	ldr	r2, [pc, #616]	@ (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d05e      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012c4:	4a98      	ldr	r2, [pc, #608]	@ (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d875      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ca:	4a98      	ldr	r2, [pc, #608]	@ (800152c <HAL_GPIO_Init+0x2a4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d058      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012d0:	4a96      	ldr	r2, [pc, #600]	@ (800152c <HAL_GPIO_Init+0x2a4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d86f      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012d6:	4a96      	ldr	r2, [pc, #600]	@ (8001530 <HAL_GPIO_Init+0x2a8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d052      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012dc:	4a94      	ldr	r2, [pc, #592]	@ (8001530 <HAL_GPIO_Init+0x2a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d869      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012e2:	4a94      	ldr	r2, [pc, #592]	@ (8001534 <HAL_GPIO_Init+0x2ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04c      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012e8:	4a92      	ldr	r2, [pc, #584]	@ (8001534 <HAL_GPIO_Init+0x2ac>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d863      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ee:	4a92      	ldr	r2, [pc, #584]	@ (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d046      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012f4:	4a90      	ldr	r2, [pc, #576]	@ (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d85d      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d82a      	bhi.n	8001354 <HAL_GPIO_Init+0xcc>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d859      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 8001302:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <HAL_GPIO_Init+0x80>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001383 	.word	0x08001383
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
 8001314:	080013b1 	.word	0x080013b1
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013b7 	.word	0x080013b7
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013b7 	.word	0x080013b7
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013b7 	.word	0x080013b7
 800133c:	080013b7 	.word	0x080013b7
 8001340:	080013b7 	.word	0x080013b7
 8001344:	080013b7 	.word	0x080013b7
 8001348:	080013b7 	.word	0x080013b7
 800134c:	08001365 	.word	0x08001365
 8001350:	08001379 	.word	0x08001379
 8001354:	4a79      	ldr	r2, [pc, #484]	@ (800153c <HAL_GPIO_Init+0x2b4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135a:	e02c      	b.n	80013b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e029      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	3304      	adds	r3, #4
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e024      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e01f      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	330c      	adds	r3, #12
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e01a      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138a:	2304      	movs	r3, #4
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e013      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	611a      	str	r2, [r3, #16]
          break;
 80013a2:	e009      	b.n	80013b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	615a      	str	r2, [r3, #20]
          break;
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          break;
 80013b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	@ 0xff
 80013bc:	d801      	bhi.n	80013c2 <HAL_GPIO_Init+0x13a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_Init+0x13e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	@ 0xff
 80013cc:	d802      	bhi.n	80013d4 <HAL_GPIO_Init+0x14c>
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x152>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	3b08      	subs	r3, #8
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	210f      	movs	r1, #15
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b1 	beq.w	800156a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a4c      	ldr	r2, [pc, #304]	@ (8001540 <HAL_GPIO_Init+0x2b8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001420:	4a48      	ldr	r2, [pc, #288]	@ (8001544 <HAL_GPIO_Init+0x2bc>)
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a40      	ldr	r2, [pc, #256]	@ (8001548 <HAL_GPIO_Init+0x2c0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3f      	ldr	r2, [pc, #252]	@ (800154c <HAL_GPIO_Init+0x2c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3e      	ldr	r2, [pc, #248]	@ (8001550 <HAL_GPIO_Init+0x2c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001464:	2303      	movs	r3, #3
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001468:	2304      	movs	r3, #4
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001474:	2300      	movs	r3, #0
 8001476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001486:	492f      	ldr	r1, [pc, #188]	@ (8001544 <HAL_GPIO_Init+0x2bc>)
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	492c      	ldr	r1, [pc, #176]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4928      	ldr	r1, [pc, #160]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c8:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	4922      	ldr	r1, [pc, #136]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	491e      	ldr	r1, [pc, #120]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4918      	ldr	r1, [pc, #96]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4914      	ldr	r1, [pc, #80]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	490e      	ldr	r1, [pc, #56]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e021      	b.n	800156a <HAL_GPIO_Init+0x2e2>
 8001526:	bf00      	nop
 8001528:	10320000 	.word	0x10320000
 800152c:	10310000 	.word	0x10310000
 8001530:	10220000 	.word	0x10220000
 8001534:	10210000 	.word	0x10210000
 8001538:	10120000 	.word	0x10120000
 800153c:	10110000 	.word	0x10110000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011000 	.word	0x40011000
 8001554:	40011400 	.word	0x40011400
 8001558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_GPIO_Init+0x304>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4909      	ldr	r1, [pc, #36]	@ (800158c <HAL_GPIO_Init+0x304>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f ae8e 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	@ 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ce:	787b      	ldrb	r3, [r7, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015da:	e003      	b.n	80015e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12b      	b.n	800185a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff f868 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f000 fcda 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a81      	ldr	r2, [pc, #516]	@ (8001864 <HAL_I2C_Init+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a80      	ldr	r2, [pc, #512]	@ (8001868 <HAL_I2C_Init+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a7d      	ldr	r2, [pc, #500]	@ (800186c <HAL_I2C_Init+0x27c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a78      	ldr	r2, [pc, #480]	@ (8001870 <HAL_I2C_Init+0x280>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001864 <HAL_I2C_Init+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a69      	ldr	r2, [pc, #420]	@ (8001874 <HAL_I2C_Init+0x284>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	495c      	ldr	r1, [pc, #368]	@ (8001864 <HAL_I2C_Init+0x274>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d819      	bhi.n	800172c <HAL_I2C_Init+0x13c>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800170c:	400b      	ands	r3, r1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_Init+0x138>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	e051      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x168>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x18e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x196>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e272      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001898:	4b92      	ldr	r3, [pc, #584]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d00c      	beq.n	80018be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d112      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
 80018b0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b89      	ldr	r3, [pc, #548]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x12c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e24c      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x76>
 80018e0:	4b80      	ldr	r3, [pc, #512]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b78      	ldr	r3, [pc, #480]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a77      	ldr	r2, [pc, #476]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xbc>
 800191a:	4b72      	ldr	r3, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a71      	ldr	r2, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001934:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a67      	ldr	r2, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f99c 	bl	8000c90 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f998 	bl	8000c90 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e200      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe4>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff f988 	bl	8000c90 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f984 	bl	8000c90 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1ec      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x10c>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
 80019ca:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d116      	bne.n	8001a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e1c0      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4939      	ldr	r1, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	e03a      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff f93d 	bl	8000c90 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f939 	bl	8000c90 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1a1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4927      	ldr	r1, [pc, #156]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_RCC_OscConfig+0x270>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f91c 	bl	8000c90 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f918 	bl	8000c90 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e180      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d03a      	beq.n	8001afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff f8fc 	bl	8000c90 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f8f8 	bl	8000c90 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e160      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fafe 	bl	80020bc <RCC_Delay>
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_RCC_OscConfig+0x274>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f8e2 	bl	8000c90 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	e00f      	b.n	8001af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f8de 	bl	8000c90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e146      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	42420000 	.word	0x42420000
 8001aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	4b92      	ldr	r3, [pc, #584]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e9      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80a6 	beq.w	8001c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b88      	ldr	r3, [pc, #544]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a87      	ldr	r2, [pc, #540]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b85      	ldr	r3, [pc, #532]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b82      	ldr	r3, [pc, #520]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7e      	ldr	r2, [pc, #504]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f89f 	bl	8000c90 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff f89b 	bl	8000c90 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e103      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x4c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x312>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6e      	ldr	r2, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e02d      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x334>
 8001b92:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a69      	ldr	r2, [pc, #420]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	e01c      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10c      	bne.n	8001bce <HAL_RCC_OscConfig+0x356>
 8001bb4:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCC_OscConfig+0x36e>
 8001bce:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b58      	ldr	r3, [pc, #352]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d015      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff f84f 	bl	8000c90 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff f84b 	bl	8000c90 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0b1      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ee      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x37e>
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f839 	bl	8000c90 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff f835 	bl	8000c90 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e09b      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ee      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d061      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d146      	bne.n	8001d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f809 	bl	8000c90 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f805 	bl	8000c90 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e06d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001caa:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4921      	ldr	r1, [pc, #132]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a19      	ldr	r1, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	491b      	ldr	r1, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe ffd9 	bl	8000c90 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe ffd5 	bl	8000c90 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e03d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
 8001d00:	e035      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ffc2 	bl	8000c90 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe ffbe 	bl	8000c90 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e026      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x498>
 8001d2e:	e01e      	b.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e019      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x500>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0d0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4965      	ldr	r1, [pc, #404]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e073      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4936      	ldr	r1, [pc, #216]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7fe ff10 	bl	8000c90 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7fe ff0c 	bl	8000c90 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e053      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d210      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4922      	ldr	r1, [pc, #136]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_RCC_ClockConfig+0x1cc>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1d0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fd0c 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08005bf0 	.word	0x08005bf0
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7e:	e027      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e027      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	4a17      	ldr	r2, [pc, #92]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0c5b      	lsrs	r3, r3, #17
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e004      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	08005c08 	.word	0x08005c08
 8001ff0:	08005c18 	.word	0x08005c18
 8001ff4:	003d0900 	.word	0x003d0900

08001ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000000 	.word	0x20000000

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff2 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	08005c00 	.word	0x08005c00

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0adb      	lsrs	r3, r3, #11
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	08005c00 	.word	0x08005c00

0800205c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	220f      	movs	r2, #15
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002078:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <HAL_RCC_GetClockConfig+0x58>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40022000 	.word	0x40022000

080020bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <RCC_Delay+0x34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <RCC_Delay+0x38>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a5b      	lsrs	r3, r3, #9
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d8:	bf00      	nop
  }
  while (Delay --);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <RCC_Delay+0x1c>
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000000 	.word	0x20000000
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d07d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002118:	4b4f      	ldr	r3, [pc, #316]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b4c      	ldr	r3, [pc, #304]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a4b      	ldr	r2, [pc, #300]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d118      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214c:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a42      	ldr	r2, [pc, #264]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002158:	f7fe fd9a 	bl	8000c90 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	e008      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fd96 	bl	8000c90 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	@ 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e06d      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02e      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d027      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021b2:	4a29      	ldr	r2, [pc, #164]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d014      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fd65 	bl	8000c90 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fd61 	bl	8000c90 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e036      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4917      	ldr	r1, [pc, #92]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	490b      	ldr	r1, [pc, #44]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420440 	.word	0x42420440

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fa7e 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fa5c 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e03a      	b.n	8002392 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_TIM_Base_Start_IT+0x98>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002346:	d009      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x58>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e007      	b.n	8002390 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800

080023a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0202 	mvn.w	r2, #2
 80023dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f998 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f98b 	bl	8002716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f99a 	bl	800273a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d020      	beq.n	8002458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0204 	mvn.w	r2, #4
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f972 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f965 	bl	8002716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f974 	bl	800273a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0208 	mvn.w	r2, #8
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f94c 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f93f 	bl	8002716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f94e 	bl	800273a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0210 	mvn.w	r2, #16
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2208      	movs	r2, #8
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f926 	bl	8002728 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f919 	bl	8002716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f928 	bl	800273a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0201 	mvn.w	r2, #1
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f862 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa7f 	bl	8002a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8f8 	bl	800274c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0220 	mvn.w	r2, #32
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa52 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_TIM_ConfigClockSource+0x1c>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e0b4      	b.n	800270e <HAL_TIM_ConfigClockSource+0x186>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025dc:	d03e      	beq.n	800265c <HAL_TIM_ConfigClockSource+0xd4>
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e2:	f200 8087 	bhi.w	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ea:	f000 8086 	beq.w	80026fa <HAL_TIM_ConfigClockSource+0x172>
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f2:	d87f      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b70      	cmp	r3, #112	@ 0x70
 80025f6:	d01a      	beq.n	800262e <HAL_TIM_ConfigClockSource+0xa6>
 80025f8:	2b70      	cmp	r3, #112	@ 0x70
 80025fa:	d87b      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b60      	cmp	r3, #96	@ 0x60
 80025fe:	d050      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002600:	2b60      	cmp	r3, #96	@ 0x60
 8002602:	d877      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b50      	cmp	r3, #80	@ 0x50
 8002606:	d03c      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0xfa>
 8002608:	2b50      	cmp	r3, #80	@ 0x50
 800260a:	d873      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b40      	cmp	r3, #64	@ 0x40
 800260e:	d058      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002610:	2b40      	cmp	r3, #64	@ 0x40
 8002612:	d86f      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b30      	cmp	r3, #48	@ 0x30
 8002616:	d064      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002618:	2b30      	cmp	r3, #48	@ 0x30
 800261a:	d86b      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b20      	cmp	r3, #32
 800261e:	d060      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	2b20      	cmp	r3, #32
 8002622:	d867      	bhi.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05c      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002628:	2b10      	cmp	r3, #16
 800262a:	d05a      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x15a>
 800262c:	e062      	b.n	80026f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800263e:	f000 f974 	bl	800292a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	609a      	str	r2, [r3, #8]
      break;
 800265a:	e04f      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	f000 f95d 	bl	800292a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800267e:	609a      	str	r2, [r3, #8]
      break;
 8002680:	e03c      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800268e:	461a      	mov	r2, r3
 8002690:	f000 f8d4 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2150      	movs	r1, #80	@ 0x50
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f92b 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e02c      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f8f2 	bl	8002898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2160      	movs	r1, #96	@ 0x60
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f91b 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e01c      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8b4 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2140      	movs	r1, #64	@ 0x40
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f90b 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e00c      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f000 f902 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80026f2:	e003      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e000      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00b      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277e:	d007      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <TIM_Base_SetConfig+0xd4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <TIM_Base_SetConfig+0xd8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d108      	bne.n	80027a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a22      	ldr	r2, [pc, #136]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <TIM_Base_SetConfig+0xd4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002838 <TIM_Base_SetConfig+0xd8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f023 030a 	bic.w	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0210 	bic.w	r2, r3, #16
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	031b      	lsls	r3, r3, #12
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	621a      	str	r2, [r3, #32]
}
 80028ec:	bf00      	nop
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	f043 0307 	orr.w	r3, r3, #7
 8002918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	431a      	orrs	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4313      	orrs	r3, r2
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800297c:	2302      	movs	r3, #2
 800297e:	e046      	b.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d009      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a12      	ldr	r2, [pc, #72]	@ (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a10      	ldr	r2, [pc, #64]	@ (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10c      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e042      	b.n	8002ae0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd feaa 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f971 	bl	8002d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d175      	bne.n	8002bf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_UART_Transmit+0x2c>
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e06e      	b.n	8002bf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	@ 0x21
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b26:	f7fe f8b3 	bl	8000c90 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b40:	d108      	bne.n	8002b54 <HAL_UART_Transmit+0x6c>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e003      	b.n	8002b5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b5c:	e02e      	b.n	8002bbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f848 	bl	8002bfe <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e03a      	b.n	8002bf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e007      	b.n	8002bae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1cb      	bne.n	8002b5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2140      	movs	r1, #64	@ 0x40
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f814 	bl	8002bfe <UART_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e006      	b.n	8002bf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	e03b      	b.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d037      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c18:	f7fe f83a 	bl	8000c90 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e03a      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d023      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b80      	cmp	r3, #128	@ 0x80
 8002c44:	d020      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d01d      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d116      	bne.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f81d 	bl	8002cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e00f      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d0b4      	beq.n	8002c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b095      	sub	sp, #84	@ 0x54
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e5      	bne.n	8002cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3314      	adds	r3, #20
 8002cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d119      	bne.n	8002d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 0310 	bic.w	r3, r3, #16
 8002d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d48:	61ba      	str	r2, [r7, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	613b      	str	r3, [r7, #16]
   return(result);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e5      	bne.n	8002d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d6a:	bf00      	nop
 8002d6c:	3754      	adds	r7, #84	@ 0x54
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002dae:	f023 030c 	bic.w	r3, r3, #12
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <UART_SetConfig+0x114>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ddc:	f7ff f92a 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	e002      	b.n	8002dea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002de4:	f7ff f912 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002de8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	4a22      	ldr	r2, [pc, #136]	@ (8002e8c <UART_SetConfig+0x118>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	0119      	lsls	r1, r3, #4
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009a      	lsls	r2, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e20:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <UART_SetConfig+0x118>)
 8002e22:	fba3 0302 	umull	r0, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2064      	movs	r0, #100	@ 0x64
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	@ 0x32
 8002e34:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <UART_SetConfig+0x118>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e40:	4419      	add	r1, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009a      	lsls	r2, r3, #2
 8002e4c:	441a      	add	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <UART_SetConfig+0x118>)
 8002e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2064      	movs	r0, #100	@ 0x64
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	3332      	adds	r3, #50	@ 0x32
 8002e6c:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	51eb851f 	.word	0x51eb851f

08002e90 <__NVIC_SetPriority>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	@ (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	@ (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SysTick_Handler+0x1c>)
 8002eea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002eec:	f001 fd20 	bl	8004930 <xTaskGetSchedulerState>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ef6:	f002 fac7 	bl	8005488 <xPortSysTickHandler>
  }
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f06f 0004 	mvn.w	r0, #4
 8002f0e:	f7ff ffbf 	bl	8002e90 <__NVIC_SetPriority>
#endif
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f1e:	f3ef 8305 	mrs	r3, IPSR
 8002f22:	603b      	str	r3, [r7, #0]
  return(result);
 8002f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f2a:	f06f 0305 	mvn.w	r3, #5
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	e00c      	b.n	8002f4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <osKernelInitialize+0x40>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <osKernelInitialize+0x40>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e002      	b.n	8002f4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	2000051c 	.word	0x2000051c

08002f5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f62:	f3ef 8305 	mrs	r3, IPSR
 8002f66:	603b      	str	r3, [r7, #0]
  return(result);
 8002f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f6e:	f06f 0305 	mvn.w	r3, #5
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	e010      	b.n	8002f98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <osKernelStart+0x48>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d109      	bne.n	8002f92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f7e:	f7ff ffc1 	bl	8002f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <osKernelStart+0x48>)
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f88:	f001 f872 	bl	8004070 <vTaskStartScheduler>
      stat = osOK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	e002      	b.n	8002f98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f98:	687b      	ldr	r3, [r7, #4]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000051c 	.word	0x2000051c

08002fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	@ 0x38
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb8:	f3ef 8305 	mrs	r3, IPSR
 8002fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8002fbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d17e      	bne.n	80030c2 <osThreadNew+0x11a>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d07b      	beq.n	80030c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002fce:	2318      	movs	r3, #24
 8002fd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d045      	beq.n	800306e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <osThreadNew+0x48>
        name = attr->name;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <osThreadNew+0x6e>
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b38      	cmp	r3, #56	@ 0x38
 8003008:	d805      	bhi.n	8003016 <osThreadNew+0x6e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <osThreadNew+0x72>
        return (NULL);
 8003016:	2300      	movs	r3, #0
 8003018:	e054      	b.n	80030c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00e      	beq.n	8003050 <osThreadNew+0xa8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2ba7      	cmp	r3, #167	@ 0xa7
 8003038:	d90a      	bls.n	8003050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <osThreadNew+0xa8>
        mem = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e010      	b.n	8003072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10c      	bne.n	8003072 <osThreadNew+0xca>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <osThreadNew+0xca>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <osThreadNew+0xca>
          mem = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e001      	b.n	8003072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d110      	bne.n	800309a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003080:	9202      	str	r2, [sp, #8]
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6a3a      	ldr	r2, [r7, #32]
 800308c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fdfa 	bl	8003c88 <xTaskCreateStatic>
 8003094:	4603      	mov	r3, r0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e013      	b.n	80030c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d110      	bne.n	80030c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fe48 	bl	8003d48 <xTaskCreate>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <osThreadNew+0x11a>
            hTask = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030c2:	693b      	ldr	r3, [r7, #16]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3728      	adds	r7, #40	@ 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d4:	f3ef 8305 	mrs	r3, IPSR
 80030d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80030da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <osDelay+0x1c>
    stat = osErrorISR;
 80030e0:	f06f 0305 	mvn.w	r3, #5
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e007      	b.n	80030f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 ff86 	bl	8004004 <vTaskDelay>
    }
  }

  return (stat);
 80030f8:	68fb      	ldr	r3, [r7, #12]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <vApplicationGetTimerTaskMemory+0x2c>)
 8003114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4a06      	ldr	r2, [pc, #24]	@ (8003134 <vApplicationGetTimerTaskMemory+0x30>)
 800311a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000520 	.word	0x20000520
 8003134:	200005c8 	.word	0x200005c8

08003138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f103 0208 	add.w	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f103 0208 	add.w	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 0208 	add.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e00c      	b.n	800320e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3308      	adds	r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e002      	b.n	8003202 <vListInsert+0x2e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d2f6      	bcs.n	80031fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d103      	bne.n	8003278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

08003298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032c4:	f002 f862 	bl	800538c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	441a      	add	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	3b01      	subs	r3, #1
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	22ff      	movs	r2, #255	@ 0xff
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	22ff      	movs	r2, #255	@ 0xff
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d114      	bne.n	8003344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3310      	adds	r3, #16
 8003326:	4618      	mov	r0, r3
 8003328:	f001 f93c 	bl	80045a4 <xTaskRemoveFromEventList>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <xQueueGenericReset+0xd0>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	e009      	b.n	8003358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3310      	adds	r3, #16
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fef5 	bl	8003138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3324      	adds	r3, #36	@ 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fef0 	bl	8003138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003358:	f002 f848 	bl	80053ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	@ 0x38
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	e7fd      	b.n	80033b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <xQueueGenericCreateStatic+0x56>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <xQueueGenericCreateStatic+0x5a>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericCreateStatic+0x5c>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <xQueueGenericCreateStatic+0x84>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <xQueueGenericCreateStatic+0x88>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <xQueueGenericCreateStatic+0x8a>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	61fb      	str	r3, [r7, #28]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003412:	2350      	movs	r3, #80	@ 0x50
 8003414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b50      	cmp	r3, #80	@ 0x50
 800341a:	d00b      	beq.n	8003434 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	61bb      	str	r3, [r7, #24]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003434:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003448:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f805 	bl	8003466 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800345e:	4618      	mov	r0, r3
 8003460:	3730      	adds	r7, #48	@ 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e002      	b.n	8003488 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003494:	2101      	movs	r1, #1
 8003496:	69b8      	ldr	r0, [r7, #24]
 8003498:	f7ff fefe 	bl	8003298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	@ 0x38
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <xQueueGenericSend+0x34>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <xQueueGenericSend+0x42>
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <xQueueGenericSend+0x46>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueGenericSend+0x48>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueGenericSend+0x64>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x72>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <xQueueGenericSend+0x76>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSend+0x78>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <xQueueGenericSend+0x94>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003540:	f001 f9f6 	bl	8004930 <xTaskGetSchedulerState>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <xQueueGenericSend+0xa4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <xQueueGenericSend+0xa8>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <xQueueGenericSend+0xaa>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <xQueueGenericSend+0xc6>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	61fb      	str	r3, [r7, #28]
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003572:	f001 ff0b 	bl	800538c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <xQueueGenericSend+0xdc>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d129      	bne.n	80035dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800358e:	f000 fa0f 	bl	80039b0 <prvCopyDataToQueue>
 8003592:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3324      	adds	r3, #36	@ 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 ffff 	bl	80045a4 <xTaskRemoveFromEventList>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035ac:	4b3f      	ldr	r3, [pc, #252]	@ (80036ac <xQueueGenericSend+0x200>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	e00a      	b.n	80035d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <xQueueGenericSend+0x200>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035d4:	f001 ff0a 	bl	80053ec <vPortExitCritical>
				return pdPASS;
 80035d8:	2301      	movs	r3, #1
 80035da:	e063      	b.n	80036a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035e2:	f001 ff03 	bl	80053ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e05c      	b.n	80036a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f839 	bl	800466c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035fe:	f001 fef5 	bl	80053ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003602:	f000 fda5 	bl	8004150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003606:	f001 fec1 	bl	800538c <vPortEnterCritical>
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003610:	b25b      	sxtb	r3, r3
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <xQueueGenericSend+0x174>
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003626:	b25b      	sxtb	r3, r3
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d103      	bne.n	8003636 <xQueueGenericSend+0x18a>
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003636:	f001 fed9 	bl	80053ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800363a:	1d3a      	adds	r2, r7, #4
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f828 	bl	8004698 <xTaskCheckForTimeOut>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d124      	bne.n	8003698 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800364e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003650:	f000 faa6 	bl	8003ba0 <prvIsQueueFull>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	3310      	adds	r3, #16
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f000 ff4c 	bl	8004500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800366a:	f000 fa31 	bl	8003ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800366e:	f000 fd7d 	bl	800416c <xTaskResumeAll>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f af7c 	bne.w	8003572 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <xQueueGenericSend+0x200>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	e772      	b.n	8003572 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800368c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800368e:	f000 fa1f 	bl	8003ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003692:	f000 fd6b 	bl	800416c <xTaskResumeAll>
 8003696:	e76c      	b.n	8003572 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369a:	f000 fa19 	bl	8003ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800369e:	f000 fd65 	bl	800416c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3738      	adds	r7, #56	@ 0x38
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b090      	sub	sp, #64	@ 0x40
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <xQueueGenericSendFromISR+0x3e>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericSendFromISR+0x42>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericSendFromISR+0x44>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d103      	bne.n	800371e <xQueueGenericSendFromISR+0x6e>
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <xQueueGenericSendFromISR+0x72>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSendFromISR+0x74>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003740:	f001 fee6 	bl	8005510 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003744:	f3ef 8211 	mrs	r2, BASEPRI
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800375c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800375e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <xQueueGenericSendFromISR+0xc2>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d12f      	bne.n	80037d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003788:	f000 f912 	bl	80039b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800378c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d112      	bne.n	80037bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	3324      	adds	r3, #36	@ 0x24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fefe 	bl	80045a4 <xTaskRemoveFromEventList>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e007      	b.n	80037cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037cc:	2301      	movs	r3, #1
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80037d0:	e001      	b.n	80037d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	@ 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	@ 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <xQueueReceive+0x32>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	623b      	str	r3, [r7, #32]
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <xQueueReceive+0x40>
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <xQueueReceive+0x44>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <xQueueReceive+0x46>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <xQueueReceive+0x62>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	61fb      	str	r3, [r7, #28]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384e:	f001 f86f 	bl	8004930 <xTaskGetSchedulerState>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <xQueueReceive+0x72>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <xQueueReceive+0x76>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <xQueueReceive+0x78>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <xQueueReceive+0x94>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61bb      	str	r3, [r7, #24]
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003880:	f001 fd84 	bl	800538c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01f      	beq.n	80038d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003894:	f000 f8f6 	bl	8003a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	1e5a      	subs	r2, r3, #1
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00f      	beq.n	80038c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	3310      	adds	r3, #16
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fe79 	bl	80045a4 <xTaskRemoveFromEventList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038b8:	4b3c      	ldr	r3, [pc, #240]	@ (80039ac <xQueueReceive+0x1c0>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038c8:	f001 fd90 	bl	80053ec <vPortExitCritical>
				return pdPASS;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e069      	b.n	80039a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038d6:	f001 fd89 	bl	80053ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038da:	2300      	movs	r3, #0
 80038dc:	e062      	b.n	80039a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 febf 	bl	800466c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038f2:	f001 fd7b 	bl	80053ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038f6:	f000 fc2b 	bl	8004150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038fa:	f001 fd47 	bl	800538c <vPortEnterCritical>
 80038fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003904:	b25b      	sxtb	r3, r3
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d103      	bne.n	8003914 <xQueueReceive+0x128>
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800391a:	b25b      	sxtb	r3, r3
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d103      	bne.n	800392a <xQueueReceive+0x13e>
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800392a:	f001 fd5f 	bl	80053ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800392e:	1d3a      	adds	r2, r7, #4
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f000 feae 	bl	8004698 <xTaskCheckForTimeOut>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d123      	bne.n	800398a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003944:	f000 f916 	bl	8003b74 <prvIsQueueEmpty>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	3324      	adds	r3, #36	@ 0x24
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdd2 	bl	8004500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800395c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800395e:	f000 f8b7 	bl	8003ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003962:	f000 fc03 	bl	800416c <xTaskResumeAll>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d189      	bne.n	8003880 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <xQueueReceive+0x1c0>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	e780      	b.n	8003880 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800397e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003980:	f000 f8a6 	bl	8003ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003984:	f000 fbf2 	bl	800416c <xTaskResumeAll>
 8003988:	e77a      	b.n	8003880 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800398a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800398c:	f000 f8a0 	bl	8003ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003990:	f000 fbec 	bl	800416c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003996:	f000 f8ed 	bl	8003b74 <prvIsQueueEmpty>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	f43f af6f 	beq.w	8003880 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3730      	adds	r7, #48	@ 0x30
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d14d      	bne.n	8003a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ffc6 	bl	800496c <xTaskPriorityDisinherit>
 80039e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e043      	b.n	8003a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d119      	bne.n	8003a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6858      	ldr	r0, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	461a      	mov	r2, r3
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	f002 f840 	bl	8005a80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	441a      	add	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d32b      	bcc.n	8003a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	e026      	b.n	8003a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68d8      	ldr	r0, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	f002 f826 	bl	8005a80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	425b      	negs	r3, r3
 8003a3e:	441a      	add	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d207      	bcs.n	8003a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	425b      	negs	r3, r3
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d105      	bne.n	8003a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a7a:	697b      	ldr	r3, [r7, #20]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d303      	bcc.n	8003ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68d9      	ldr	r1, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	f001 ffdc 	bl	8005a80 <memcpy>
	}
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ad8:	f001 fc58 	bl	800538c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ae4:	e011      	b.n	8003b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d012      	beq.n	8003b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3324      	adds	r3, #36	@ 0x24
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fd56 	bl	80045a4 <xTaskRemoveFromEventList>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003afe:	f000 fe2f 	bl	8004760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	dce9      	bgt.n	8003ae6 <prvUnlockQueue+0x16>
 8003b12:	e000      	b.n	8003b16 <prvUnlockQueue+0x46>
					break;
 8003b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	22ff      	movs	r2, #255	@ 0xff
 8003b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b1e:	f001 fc65 	bl	80053ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b22:	f001 fc33 	bl	800538c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b2e:	e011      	b.n	8003b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d012      	beq.n	8003b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fd31 	bl	80045a4 <xTaskRemoveFromEventList>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b48:	f000 fe0a 	bl	8004760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b4c:	7bbb      	ldrb	r3, [r7, #14]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dce9      	bgt.n	8003b30 <prvUnlockQueue+0x60>
 8003b5c:	e000      	b.n	8003b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	22ff      	movs	r2, #255	@ 0xff
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b68:	f001 fc40 	bl	80053ec <vPortExitCritical>
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b7c:	f001 fc06 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e001      	b.n	8003b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b92:	f001 fc2b 	bl	80053ec <vPortExitCritical>

	return xReturn;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ba8:	f001 fbf0 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d102      	bne.n	8003bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e001      	b.n	8003bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bc2:	f001 fc13 	bl	80053ec <vPortExitCritical>

	return xReturn;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e014      	b.n	8003c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003be0:	4a0e      	ldr	r2, [pc, #56]	@ (8003c1c <vQueueAddToRegistry+0x4c>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bec:	490b      	ldr	r1, [pc, #44]	@ (8003c1c <vQueueAddToRegistry+0x4c>)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bf6:	4a09      	ldr	r2, [pc, #36]	@ (8003c1c <vQueueAddToRegistry+0x4c>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c02:	e006      	b.n	8003c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b07      	cmp	r3, #7
 8003c0e:	d9e7      	bls.n	8003be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	200009c8 	.word	0x200009c8

08003c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c30:	f001 fbac 	bl	800538c <vPortEnterCritical>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c3a:	b25b      	sxtb	r3, r3
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d103      	bne.n	8003c4a <vQueueWaitForMessageRestricted+0x2a>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c50:	b25b      	sxtb	r3, r3
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d103      	bne.n	8003c60 <vQueueWaitForMessageRestricted+0x40>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c60:	f001 fbc4 	bl	80053ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3324      	adds	r3, #36	@ 0x24
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fc69 	bl	800454c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff28 	bl	8003ad0 <prvUnlockQueue>
	}
 8003c80:	bf00      	nop
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	623b      	str	r3, [r7, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61fb      	str	r3, [r7, #28]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cd2:	23a8      	movs	r3, #168	@ 0xa8
 8003cd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2ba8      	cmp	r3, #168	@ 0xa8
 8003cda:	d00b      	beq.n	8003cf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61bb      	str	r3, [r7, #24]
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01e      	beq.n	8003d3a <xTaskCreateStatic+0xb2>
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01b      	beq.n	8003d3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d14:	2300      	movs	r3, #0
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f851 	bl	8003dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d34:	f000 f8f6 	bl	8003f24 <prvAddNewTaskToReadyList>
 8003d38:	e001      	b.n	8003d3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
	}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	@ 0x30
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 fc17 	bl	8005590 <pvPortMalloc>
 8003d62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d6a:	20a8      	movs	r0, #168	@ 0xa8
 8003d6c:	f001 fc10 	bl	8005590 <pvPortMalloc>
 8003d70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d7e:	e005      	b.n	8003d8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f001 fcd3 	bl	800572c <vPortFree>
 8003d86:	e001      	b.n	8003d8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d017      	beq.n	8003dc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	9302      	str	r3, [sp, #8]
 8003da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f80f 	bl	8003dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db6:	69f8      	ldr	r0, [r7, #28]
 8003db8:	f000 f8b4 	bl	8003f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e002      	b.n	8003dc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
	}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	21a5      	movs	r1, #165	@ 0xa5
 8003dee:	f001 fdbb 	bl	8005968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01f      	beq.n	8003e74 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	e012      	b.n	8003e60 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	3334      	adds	r3, #52	@ 0x34
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d006      	beq.n	8003e68 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d9e9      	bls.n	8003e3a <prvInitialiseNewTask+0x66>
 8003e66:	e000      	b.n	8003e6a <prvInitialiseNewTask+0x96>
			{
				break;
 8003e68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e72:	e003      	b.n	8003e7c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	2b37      	cmp	r3, #55	@ 0x37
 8003e80:	d901      	bls.n	8003e86 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e82:	2337      	movs	r3, #55	@ 0x37
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f96a 	bl	8003176 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f965 	bl	8003176 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	3354      	adds	r3, #84	@ 0x54
 8003ed6:	224c      	movs	r2, #76	@ 0x4c
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fd44 	bl	8005968 <memset>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f18 <prvInitialiseNewTask+0x144>)
 8003ee4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f1c <prvInitialiseNewTask+0x148>)
 8003eea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	4a0c      	ldr	r2, [pc, #48]	@ (8003f20 <prvInitialiseNewTask+0x14c>)
 8003ef0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68f9      	ldr	r1, [r7, #12]
 8003ef6:	69b8      	ldr	r0, [r7, #24]
 8003ef8:	f001 f954 	bl	80051a4 <pxPortInitialiseStack>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20001c5c 	.word	0x20001c5c
 8003f1c:	20001cc4 	.word	0x20001cc4
 8003f20:	20001d2c 	.word	0x20001d2c

08003f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f2c:	f001 fa2e 	bl	800538c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f30:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f42:	4a2a      	ldr	r2, [pc, #168]	@ (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f48:	4b27      	ldr	r3, [pc, #156]	@ (8003fe8 <prvAddNewTaskToReadyList+0xc4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d110      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f50:	f000 fc2a 	bl	80047a8 <prvInitialiseTaskLists>
 8003f54:	e00d      	b.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f56:	4b26      	ldr	r3, [pc, #152]	@ (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f5e:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d802      	bhi.n	8003f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f72:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <prvAddNewTaskToReadyList+0xd0>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <prvAddNewTaskToReadyList+0xd4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d903      	bls.n	8003f98 <prvAddNewTaskToReadyList+0x74>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	4a18      	ldr	r2, [pc, #96]	@ (8003ff8 <prvAddNewTaskToReadyList+0xd4>)
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <prvAddNewTaskToReadyList+0xd8>)
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7ff f8ed 	bl	800318e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fb4:	f001 fa1a 	bl	80053ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <prvAddNewTaskToReadyList+0xcc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <prvAddNewTaskToReadyList+0xc8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d207      	bcs.n	8003fde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fce:	4b0c      	ldr	r3, [pc, #48]	@ (8004000 <prvAddNewTaskToReadyList+0xdc>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000edc 	.word	0x20000edc
 8003fec:	20000a08 	.word	0x20000a08
 8003ff0:	20000ee8 	.word	0x20000ee8
 8003ff4:	20000ef8 	.word	0x20000ef8
 8003ff8:	20000ee4 	.word	0x20000ee4
 8003ffc:	20000a0c 	.word	0x20000a0c
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d018      	beq.n	8004048 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <vTaskDelay+0x64>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <vTaskDelay+0x32>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004036:	f000 f88b 	bl	8004150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800403a:	2100      	movs	r1, #0
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fd05 	bl	8004a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004042:	f000 f893 	bl	800416c <xTaskResumeAll>
 8004046:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800404e:	4b07      	ldr	r3, [pc, #28]	@ (800406c <vTaskDelay+0x68>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000f04 	.word	0x20000f04
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800407e:	463a      	mov	r2, r7
 8004080:	1d39      	adds	r1, r7, #4
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc f882 	bl	8000190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	9202      	str	r2, [sp, #8]
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	460a      	mov	r2, r1
 800409e:	4924      	ldr	r1, [pc, #144]	@ (8004130 <vTaskStartScheduler+0xc0>)
 80040a0:	4824      	ldr	r0, [pc, #144]	@ (8004134 <vTaskStartScheduler+0xc4>)
 80040a2:	f7ff fdf1 	bl	8003c88 <xTaskCreateStatic>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a23      	ldr	r2, [pc, #140]	@ (8004138 <vTaskStartScheduler+0xc8>)
 80040aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040ac:	4b22      	ldr	r3, [pc, #136]	@ (8004138 <vTaskStartScheduler+0xc8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040b4:	2301      	movs	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e001      	b.n	80040be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040c4:	f000 fd16 	bl	8004af4 <xTimerCreateTimerTask>
 80040c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d11b      	bne.n	8004108 <vTaskStartScheduler+0x98>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	613b      	str	r3, [r7, #16]
}
 80040e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040e4:	4b15      	ldr	r3, [pc, #84]	@ (800413c <vTaskStartScheduler+0xcc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3354      	adds	r3, #84	@ 0x54
 80040ea:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <vTaskStartScheduler+0xd0>)
 80040ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <vTaskStartScheduler+0xd4>)
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040f6:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <vTaskStartScheduler+0xd8>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040fc:	4b13      	ldr	r3, [pc, #76]	@ (800414c <vTaskStartScheduler+0xdc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004102:	f001 f8d1 	bl	80052a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004106:	e00f      	b.n	8004128 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d10b      	bne.n	8004128 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <vTaskStartScheduler+0xb4>
}
 8004128:	bf00      	nop
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	08005b90 	.word	0x08005b90
 8004134:	08004779 	.word	0x08004779
 8004138:	20000f00 	.word	0x20000f00
 800413c:	20000a08 	.word	0x20000a08
 8004140:	20000010 	.word	0x20000010
 8004144:	20000efc 	.word	0x20000efc
 8004148:	20000ee8 	.word	0x20000ee8
 800414c:	20000ee0 	.word	0x20000ee0

08004150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <vTaskSuspendAll+0x18>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a03      	ldr	r2, [pc, #12]	@ (8004168 <vTaskSuspendAll+0x18>)
 800415c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000f04 	.word	0x20000f04

0800416c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800417a:	4b42      	ldr	r3, [pc, #264]	@ (8004284 <xTaskResumeAll+0x118>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <xTaskResumeAll+0x2e>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	603b      	str	r3, [r7, #0]
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800419a:	f001 f8f7 	bl	800538c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800419e:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <xTaskResumeAll+0x118>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	4a37      	ldr	r2, [pc, #220]	@ (8004284 <xTaskResumeAll+0x118>)
 80041a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a8:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <xTaskResumeAll+0x118>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d162      	bne.n	8004276 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041b0:	4b35      	ldr	r3, [pc, #212]	@ (8004288 <xTaskResumeAll+0x11c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05e      	beq.n	8004276 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041b8:	e02f      	b.n	800421a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ba:	4b34      	ldr	r3, [pc, #208]	@ (800428c <xTaskResumeAll+0x120>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3318      	adds	r3, #24
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f83c 	bl	8003244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff f837 	bl	8003244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4b2d      	ldr	r3, [pc, #180]	@ (8004290 <xTaskResumeAll+0x124>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <xTaskResumeAll+0x7e>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004290 <xTaskResumeAll+0x124>)
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a27      	ldr	r2, [pc, #156]	@ (8004294 <xTaskResumeAll+0x128>)
 80041f8:	441a      	add	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fe ffc4 	bl	800318e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420a:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <xTaskResumeAll+0x12c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004214:	4b21      	ldr	r3, [pc, #132]	@ (800429c <xTaskResumeAll+0x130>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <xTaskResumeAll+0x120>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1cb      	bne.n	80041ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004228:	f000 fb62 	bl	80048f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800422c:	4b1c      	ldr	r3, [pc, #112]	@ (80042a0 <xTaskResumeAll+0x134>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004238:	f000 f844 	bl	80042c4 <xTaskIncrementTick>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004242:	4b16      	ldr	r3, [pc, #88]	@ (800429c <xTaskResumeAll+0x130>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f1      	bne.n	8004238 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <xTaskResumeAll+0x134>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800425a:	4b10      	ldr	r3, [pc, #64]	@ (800429c <xTaskResumeAll+0x130>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004262:	2301      	movs	r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004266:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <xTaskResumeAll+0x138>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004276:	f001 f8b9 	bl	80053ec <vPortExitCritical>

	return xAlreadyYielded;
 800427a:	68bb      	ldr	r3, [r7, #8]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000f04 	.word	0x20000f04
 8004288:	20000edc 	.word	0x20000edc
 800428c:	20000e9c 	.word	0x20000e9c
 8004290:	20000ee4 	.word	0x20000ee4
 8004294:	20000a0c 	.word	0x20000a0c
 8004298:	20000a08 	.word	0x20000a08
 800429c:	20000ef0 	.word	0x20000ef0
 80042a0:	20000eec 	.word	0x20000eec
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042ae:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <xTaskGetTickCount+0x18>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042b4:	687b      	ldr	r3, [r7, #4]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	20000ee0 	.word	0x20000ee0

080042c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ce:	4b4f      	ldr	r3, [pc, #316]	@ (800440c <xTaskIncrementTick+0x148>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 8090 	bne.w	80043f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004410 <xTaskIncrementTick+0x14c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004410 <xTaskIncrementTick+0x14c>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d121      	bne.n	8004330 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042ec:	4b49      	ldr	r3, [pc, #292]	@ (8004414 <xTaskIncrementTick+0x150>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <xTaskIncrementTick+0x4a>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	603b      	str	r3, [r7, #0]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xTaskIncrementTick+0x46>
 800430e:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <xTaskIncrementTick+0x150>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <xTaskIncrementTick+0x154>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3e      	ldr	r2, [pc, #248]	@ (8004414 <xTaskIncrementTick+0x150>)
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4a3e      	ldr	r2, [pc, #248]	@ (8004418 <xTaskIncrementTick+0x154>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b3e      	ldr	r3, [pc, #248]	@ (800441c <xTaskIncrementTick+0x158>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a3c      	ldr	r2, [pc, #240]	@ (800441c <xTaskIncrementTick+0x158>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	f000 fae0 	bl	80048f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <xTaskIncrementTick+0x15c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	429a      	cmp	r2, r3
 8004338:	d349      	bcc.n	80043ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433a:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <xTaskIncrementTick+0x150>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004344:	4b36      	ldr	r3, [pc, #216]	@ (8004420 <xTaskIncrementTick+0x15c>)
 8004346:	f04f 32ff 	mov.w	r2, #4294967295
 800434a:	601a      	str	r2, [r3, #0]
					break;
 800434c:	e03f      	b.n	80043ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <xTaskIncrementTick+0x150>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d203      	bcs.n	800436e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004366:	4a2e      	ldr	r2, [pc, #184]	@ (8004420 <xTaskIncrementTick+0x15c>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800436c:	e02f      	b.n	80043ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3304      	adds	r3, #4
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe ff66 	bl	8003244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3318      	adds	r3, #24
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ff5d 	bl	8003244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <xTaskIncrementTick+0x160>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d903      	bls.n	800439e <xTaskIncrementTick+0xda>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <xTaskIncrementTick+0x160>)
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <xTaskIncrementTick+0x164>)
 80043ac:	441a      	add	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe feea 	bl	800318e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <xTaskIncrementTick+0x168>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d3b8      	bcc.n	800433a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043cc:	e7b5      	b.n	800433a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043ce:	4b17      	ldr	r3, [pc, #92]	@ (800442c <xTaskIncrementTick+0x168>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4914      	ldr	r1, [pc, #80]	@ (8004428 <xTaskIncrementTick+0x164>)
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d901      	bls.n	80043ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043ea:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <xTaskIncrementTick+0x16c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e004      	b.n	8004402 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <xTaskIncrementTick+0x170>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004434 <xTaskIncrementTick+0x170>)
 8004400:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004402:	697b      	ldr	r3, [r7, #20]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000f04 	.word	0x20000f04
 8004410:	20000ee0 	.word	0x20000ee0
 8004414:	20000e94 	.word	0x20000e94
 8004418:	20000e98 	.word	0x20000e98
 800441c:	20000ef4 	.word	0x20000ef4
 8004420:	20000efc 	.word	0x20000efc
 8004424:	20000ee4 	.word	0x20000ee4
 8004428:	20000a0c 	.word	0x20000a0c
 800442c:	20000a08 	.word	0x20000a08
 8004430:	20000ef0 	.word	0x20000ef0
 8004434:	20000eec 	.word	0x20000eec

08004438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800443e:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <vTaskSwitchContext+0xb0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004446:	4b29      	ldr	r3, [pc, #164]	@ (80044ec <vTaskSwitchContext+0xb4>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800444c:	e047      	b.n	80044de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800444e:	4b27      	ldr	r3, [pc, #156]	@ (80044ec <vTaskSwitchContext+0xb4>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004454:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <vTaskSwitchContext+0xb8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e011      	b.n	8004480 <vTaskSwitchContext+0x48>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <vTaskSwitchContext+0x42>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vTaskSwitchContext+0x3e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b01      	subs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	491c      	ldr	r1, [pc, #112]	@ (80044f4 <vTaskSwitchContext+0xbc>)
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0e3      	beq.n	800445c <vTaskSwitchContext+0x24>
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <vTaskSwitchContext+0xbc>)
 80044a0:	4413      	add	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3308      	adds	r3, #8
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d104      	bne.n	80044c4 <vTaskSwitchContext+0x8c>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4a0b      	ldr	r2, [pc, #44]	@ (80044f8 <vTaskSwitchContext+0xc0>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <vTaskSwitchContext+0xb8>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <vTaskSwitchContext+0xc0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3354      	adds	r3, #84	@ 0x54
 80044da:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <vTaskSwitchContext+0xc4>)
 80044dc:	6013      	str	r3, [r2, #0]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000f04 	.word	0x20000f04
 80044ec:	20000ef0 	.word	0x20000ef0
 80044f0:	20000ee4 	.word	0x20000ee4
 80044f4:	20000a0c 	.word	0x20000a0c
 80044f8:	20000a08 	.word	0x20000a08
 80044fc:	20000010 	.word	0x20000010

08004500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004528:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <vTaskPlaceOnEventList+0x48>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3318      	adds	r3, #24
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fe fe4f 	bl	80031d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004536:	2101      	movs	r1, #1
 8004538:	6838      	ldr	r0, [r7, #0]
 800453a:	f000 fa87 	bl	8004a4c <prvAddCurrentTaskToDelayedList>
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000a08 	.word	0x20000a08

0800454c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	617b      	str	r3, [r7, #20]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004576:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3318      	adds	r3, #24
 800457c:	4619      	mov	r1, r3
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7fe fe05 	bl	800318e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f000 fa5a 	bl	8004a4c <prvAddCurrentTaskToDelayedList>
	}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000a08 	.word	0x20000a08

080045a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60fb      	str	r3, [r7, #12]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3318      	adds	r3, #24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fe34 	bl	8003244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <xTaskRemoveFromEventList+0xb0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fe2b 	bl	8003244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <xTaskRemoveFromEventList+0xb4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d903      	bls.n	8004602 <xTaskRemoveFromEventList+0x5e>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <xTaskRemoveFromEventList+0xb4>)
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <xTaskRemoveFromEventList+0xb8>)
 8004610:	441a      	add	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe fdb8 	bl	800318e <vListInsertEnd>
 800461e:	e005      	b.n	800462c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3318      	adds	r3, #24
 8004624:	4619      	mov	r1, r3
 8004626:	480e      	ldr	r0, [pc, #56]	@ (8004660 <xTaskRemoveFromEventList+0xbc>)
 8004628:	f7fe fdb1 	bl	800318e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <xTaskRemoveFromEventList+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	429a      	cmp	r2, r3
 8004638:	d905      	bls.n	8004646 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <xTaskRemoveFromEventList+0xc4>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e001      	b.n	800464a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800464a:	697b      	ldr	r3, [r7, #20]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000f04 	.word	0x20000f04
 8004658:	20000ee4 	.word	0x20000ee4
 800465c:	20000a0c 	.word	0x20000a0c
 8004660:	20000e9c 	.word	0x20000e9c
 8004664:	20000a08 	.word	0x20000a08
 8004668:	20000ef0 	.word	0x20000ef0

0800466c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004674:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <vTaskInternalSetTimeOutState+0x24>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <vTaskInternalSetTimeOutState+0x28>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20000ef4 	.word	0x20000ef4
 8004694:	20000ee0 	.word	0x20000ee0

08004698 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	613b      	str	r3, [r7, #16]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	60fb      	str	r3, [r7, #12]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046de:	f000 fe55 	bl	800538c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <xTaskCheckForTimeOut+0xc0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d102      	bne.n	8004702 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	e023      	b.n	800474a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <xTaskCheckForTimeOut+0xc4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d007      	beq.n	800471e <xTaskCheckForTimeOut+0x86>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	429a      	cmp	r2, r3
 8004716:	d302      	bcc.n	800471e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e015      	b.n	800474a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	429a      	cmp	r2, r3
 8004726:	d20b      	bcs.n	8004740 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff99 	bl	800466c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e004      	b.n	800474a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800474a:	f000 fe4f 	bl	80053ec <vPortExitCritical>

	return xReturn;
 800474e:	69fb      	ldr	r3, [r7, #28]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000ee0 	.word	0x20000ee0
 800475c:	20000ef4 	.word	0x20000ef4

08004760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004764:	4b03      	ldr	r3, [pc, #12]	@ (8004774 <vTaskMissedYield+0x14>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000ef0 	.word	0x20000ef0

08004778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004780:	f000 f852 	bl	8004828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <prvIdleTask+0x28>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d9f9      	bls.n	8004780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <prvIdleTask+0x2c>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800479c:	e7f0      	b.n	8004780 <prvIdleTask+0x8>
 800479e:	bf00      	nop
 80047a0:	20000a0c 	.word	0x20000a0c
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	e00c      	b.n	80047ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a12      	ldr	r2, [pc, #72]	@ (8004808 <prvInitialiseTaskLists+0x60>)
 80047c0:	4413      	add	r3, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fcb8 	bl	8003138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3301      	adds	r3, #1
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b37      	cmp	r3, #55	@ 0x37
 80047d2:	d9ef      	bls.n	80047b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047d4:	480d      	ldr	r0, [pc, #52]	@ (800480c <prvInitialiseTaskLists+0x64>)
 80047d6:	f7fe fcaf 	bl	8003138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047da:	480d      	ldr	r0, [pc, #52]	@ (8004810 <prvInitialiseTaskLists+0x68>)
 80047dc:	f7fe fcac 	bl	8003138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047e0:	480c      	ldr	r0, [pc, #48]	@ (8004814 <prvInitialiseTaskLists+0x6c>)
 80047e2:	f7fe fca9 	bl	8003138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047e6:	480c      	ldr	r0, [pc, #48]	@ (8004818 <prvInitialiseTaskLists+0x70>)
 80047e8:	f7fe fca6 	bl	8003138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047ec:	480b      	ldr	r0, [pc, #44]	@ (800481c <prvInitialiseTaskLists+0x74>)
 80047ee:	f7fe fca3 	bl	8003138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <prvInitialiseTaskLists+0x78>)
 80047f4:	4a05      	ldr	r2, [pc, #20]	@ (800480c <prvInitialiseTaskLists+0x64>)
 80047f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <prvInitialiseTaskLists+0x7c>)
 80047fa:	4a05      	ldr	r2, [pc, #20]	@ (8004810 <prvInitialiseTaskLists+0x68>)
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000a0c 	.word	0x20000a0c
 800480c:	20000e6c 	.word	0x20000e6c
 8004810:	20000e80 	.word	0x20000e80
 8004814:	20000e9c 	.word	0x20000e9c
 8004818:	20000eb0 	.word	0x20000eb0
 800481c:	20000ec8 	.word	0x20000ec8
 8004820:	20000e94 	.word	0x20000e94
 8004824:	20000e98 	.word	0x20000e98

08004828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800482e:	e019      	b.n	8004864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004830:	f000 fdac 	bl	800538c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004834:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <prvCheckTasksWaitingTermination+0x50>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fcff 	bl	8003244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <prvCheckTasksWaitingTermination+0x54>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	4a0b      	ldr	r2, [pc, #44]	@ (800487c <prvCheckTasksWaitingTermination+0x54>)
 800484e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004850:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <prvCheckTasksWaitingTermination+0x58>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3b01      	subs	r3, #1
 8004856:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <prvCheckTasksWaitingTermination+0x58>)
 8004858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800485a:	f000 fdc7 	bl	80053ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f810 	bl	8004884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <prvCheckTasksWaitingTermination+0x58>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e1      	bne.n	8004830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000eb0 	.word	0x20000eb0
 800487c:	20000edc 	.word	0x20000edc
 8004880:	20000ec4 	.word	0x20000ec4

08004884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3354      	adds	r3, #84	@ 0x54
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f871 	bl	8005978 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800489c:	2b00      	cmp	r3, #0
 800489e:	d108      	bne.n	80048b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff41 	bl	800572c <vPortFree>
				vPortFree( pxTCB );
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 ff3e 	bl	800572c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048b0:	e019      	b.n	80048e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d103      	bne.n	80048c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 ff35 	bl	800572c <vPortFree>
	}
 80048c2:	e010      	b.n	80048e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d00b      	beq.n	80048e6 <prvDeleteTCB+0x62>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <prvDeleteTCB+0x5e>
	}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <prvResetNextTaskUnblockTime+0x38>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <prvResetNextTaskUnblockTime+0x3c>)
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004908:	e008      	b.n	800491c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490a:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <prvResetNextTaskUnblockTime+0x38>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a04      	ldr	r2, [pc, #16]	@ (800492c <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000e94 	.word	0x20000e94
 800492c:	20000efc 	.word	0x20000efc

08004930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <xTaskGetSchedulerState+0x34>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800493e:	2301      	movs	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	e008      	b.n	8004956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004944:	4b08      	ldr	r3, [pc, #32]	@ (8004968 <xTaskGetSchedulerState+0x38>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800494c:	2302      	movs	r3, #2
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	e001      	b.n	8004956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004956:	687b      	ldr	r3, [r7, #4]
	}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000ee8 	.word	0x20000ee8
 8004968:	20000f04 	.word	0x20000f04

0800496c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d058      	beq.n	8004a34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004982:	4b2f      	ldr	r3, [pc, #188]	@ (8004a40 <xTaskPriorityDisinherit+0xd4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d00b      	beq.n	80049a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60bb      	str	r3, [r7, #8]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d02c      	beq.n	8004a34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d128      	bne.n	8004a34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fc2c 	bl	8003244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a04:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <xTaskPriorityDisinherit+0xd8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <xTaskPriorityDisinherit+0xa8>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4a0c      	ldr	r2, [pc, #48]	@ (8004a44 <xTaskPriorityDisinherit+0xd8>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <xTaskPriorityDisinherit+0xdc>)
 8004a22:	441a      	add	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7fe fbaf 	bl	800318e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a34:	697b      	ldr	r3, [r7, #20]
	}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000a08 	.word	0x20000a08
 8004a44:	20000ee4 	.word	0x20000ee4
 8004a48:	20000a0c 	.word	0x20000a0c

08004a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a56:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x90>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe fbee 	bl	8003244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d10a      	bne.n	8004a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4819      	ldr	r0, [pc, #100]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a80:	f7fe fb85 	bl	800318e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a84:	e026      	b.n	8004ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d209      	bcs.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fe fb92 	bl	80031d4 <vListInsert>
}
 8004ab0:	e010      	b.n	8004ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fb88 	bl	80031d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d202      	bcs.n	8004ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ace:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6013      	str	r3, [r2, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000ee0 	.word	0x20000ee0
 8004ae0:	20000a08 	.word	0x20000a08
 8004ae4:	20000ec8 	.word	0x20000ec8
 8004ae8:	20000e98 	.word	0x20000e98
 8004aec:	20000e94 	.word	0x20000e94
 8004af0:	20000efc 	.word	0x20000efc

08004af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	@ 0x28
 8004af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004afe:	f000 fb11 	bl	8005124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b02:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <xTimerCreateTimerTask+0x84>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d021      	beq.n	8004b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b12:	1d3a      	adds	r2, r7, #4
 8004b14:	f107 0108 	add.w	r1, r7, #8
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe faf1 	bl	8003104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	9202      	str	r2, [sp, #8]
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	460a      	mov	r2, r1
 8004b34:	4911      	ldr	r1, [pc, #68]	@ (8004b7c <xTimerCreateTimerTask+0x88>)
 8004b36:	4812      	ldr	r0, [pc, #72]	@ (8004b80 <xTimerCreateTimerTask+0x8c>)
 8004b38:	f7ff f8a6 	bl	8003c88 <xTaskCreateStatic>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4a11      	ldr	r2, [pc, #68]	@ (8004b84 <xTimerCreateTimerTask+0x90>)
 8004b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <xTimerCreateTimerTask+0x90>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	613b      	str	r3, [r7, #16]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b6c:	697b      	ldr	r3, [r7, #20]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000f38 	.word	0x20000f38
 8004b7c:	08005b98 	.word	0x08005b98
 8004b80:	08004cc1 	.word	0x08004cc1
 8004b84:	20000f3c 	.word	0x20000f3c

08004b88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	623b      	str	r3, [r7, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bb8:	4b19      	ldr	r3, [pc, #100]	@ (8004c20 <xTimerGenericCommand+0x98>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02a      	beq.n	8004c16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	dc18      	bgt.n	8004c04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bd2:	f7ff fead 	bl	8004930 <xTaskGetSchedulerState>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d109      	bne.n	8004bf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <xTimerGenericCommand+0x98>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f107 0110 	add.w	r1, r7, #16
 8004be4:	2300      	movs	r3, #0
 8004be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be8:	f7fe fc60 	bl	80034ac <xQueueGenericSend>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bee:	e012      	b.n	8004c16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <xTimerGenericCommand+0x98>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	f107 0110 	add.w	r1, r7, #16
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f7fe fc56 	bl	80034ac <xQueueGenericSend>
 8004c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c02:	e008      	b.n	8004c16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c04:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <xTimerGenericCommand+0x98>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	f107 0110 	add.w	r1, r7, #16
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	f7fe fd4e 	bl	80036b0 <xQueueGenericSendFromISR>
 8004c14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3728      	adds	r7, #40	@ 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000f38 	.word	0x20000f38

08004c24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2e:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <prvProcessExpiredTimer+0x98>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fb01 	bl	8003244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	18d1      	adds	r1, r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	6978      	ldr	r0, [r7, #20]
 8004c5e:	f000 f8d3 	bl	8004e08 <prvInsertTimerInActiveList>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d020      	beq.n	8004caa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	2100      	movs	r1, #0
 8004c72:	6978      	ldr	r0, [r7, #20]
 8004c74:	f7ff ff88 	bl	8004b88 <xTimerGenericCommand>
 8004c78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d114      	bne.n	8004caa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	6978      	ldr	r0, [r7, #20]
 8004cb0:	4798      	blx	r3
}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000f30 	.word	0x20000f30

08004cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f859 	bl	8004d84 <prvGetNextExpireTime>
 8004cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f805 	bl	8004ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cde:	f000 f8d5 	bl	8004e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ce2:	bf00      	nop
 8004ce4:	e7f0      	b.n	8004cc8 <prvTimerTask+0x8>
	...

08004ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cf2:	f7ff fa2d 	bl	8004150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f864 	bl	8004dc8 <prvSampleTimeNow>
 8004d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d130      	bne.n	8004d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <prvProcessTimerOrBlockTask+0x3c>
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d806      	bhi.n	8004d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d16:	f7ff fa29 	bl	800416c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff81 	bl	8004c24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d22:	e024      	b.n	8004d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d008      	beq.n	8004d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d2a:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <prvProcessTimerOrBlockTask+0x90>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <prvProcessTimerOrBlockTask+0x50>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <prvProcessTimerOrBlockTask+0x52>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d7c <prvProcessTimerOrBlockTask+0x94>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f7fe ff69 	bl	8003c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d4e:	f7ff fa0d 	bl	800416c <xTaskResumeAll>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <prvProcessTimerOrBlockTask+0x98>)
 8004d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	f3bf 8f6f 	isb	sy
}
 8004d68:	e001      	b.n	8004d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d6a:	f7ff f9ff 	bl	800416c <xTaskResumeAll>
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000f34 	.word	0x20000f34
 8004d7c:	20000f38 	.word	0x20000f38
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <prvGetNextExpireTime+0x40>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <prvGetNextExpireTime+0x16>
 8004d96:	2201      	movs	r2, #1
 8004d98:	e000      	b.n	8004d9c <prvGetNextExpireTime+0x18>
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <prvGetNextExpireTime+0x40>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e001      	b.n	8004db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20000f30 	.word	0x20000f30

08004dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dd0:	f7ff fa6a 	bl	80042a8 <xTaskGetTickCount>
 8004dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <prvSampleTimeNow+0x3c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d205      	bcs.n	8004dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004de0:	f000 f93a 	bl	8005058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e002      	b.n	8004df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004df2:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <prvSampleTimeNow+0x3c>)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004df8:	68fb      	ldr	r3, [r7, #12]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000f40 	.word	0x20000f40

08004e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d812      	bhi.n	8004e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e01b      	b.n	8004e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <prvInsertTimerInActiveList+0x7c>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7fe f9c1 	bl	80031d4 <vListInsert>
 8004e52:	e012      	b.n	8004e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d206      	bcs.n	8004e6a <prvInsertTimerInActiveList+0x62>
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e007      	b.n	8004e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <prvInsertTimerInActiveList+0x80>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f7fe f9ad 	bl	80031d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e7a:	697b      	ldr	r3, [r7, #20]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000f34 	.word	0x20000f34
 8004e88:	20000f30 	.word	0x20000f30

08004e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	@ 0x38
 8004e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e92:	e0ce      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da19      	bge.n	8004ece <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	61fb      	str	r3, [r7, #28]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec4:	6850      	ldr	r0, [r2, #4]
 8004ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f2c0 80ae 	blt.w	8005032 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f9ac 	bl	8003244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eec:	463b      	mov	r3, r7
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ff6a 	bl	8004dc8 <prvSampleTimeNow>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b09      	cmp	r3, #9
 8004efa:	f200 8097 	bhi.w	800502c <prvProcessReceivedCommands+0x1a0>
 8004efe:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <prvProcessReceivedCommands+0x78>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f2d 	.word	0x08004f2d
 8004f10:	08004fa3 	.word	0x08004fa3
 8004f14:	08004fb7 	.word	0x08004fb7
 8004f18:	08005003 	.word	0x08005003
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f2d 	.word	0x08004f2d
 8004f24:	08004fa3 	.word	0x08004fa3
 8004f28:	08004fb7 	.word	0x08004fb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	18d1      	adds	r1, r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4c:	f7ff ff5c 	bl	8004e08 <prvInsertTimerInActiveList>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d06c      	beq.n	8005030 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d061      	beq.n	8005030 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	441a      	add	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f7e:	f7ff fe03 	bl	8004b88 <xTimerGenericCommand>
 8004f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d152      	bne.n	8005030 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	61bb      	str	r3, [r7, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fb4:	e03d      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	617b      	str	r3, [r7, #20]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	18d1      	adds	r1, r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ffc:	f7ff ff04 	bl	8004e08 <prvInsertTimerInActiveList>
					break;
 8005000:	e017      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005012:	f000 fb8b 	bl	800572c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005016:	e00c      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800502a:	e002      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <prvProcessReceivedCommands+0x1a6>
					break;
 8005030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005032:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <prvProcessReceivedCommands+0x1c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1d39      	adds	r1, r7, #4
 8005038:	2200      	movs	r2, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fbd6 	bl	80037ec <xQueueReceive>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	f47f af26 	bne.w	8004e94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	3730      	adds	r7, #48	@ 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000f38 	.word	0x20000f38

08005058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800505e:	e049      	b.n	80050f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005060:	4b2e      	ldr	r3, [pc, #184]	@ (800511c <prvSwitchTimerLists+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506a:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <prvSwitchTimerLists+0xc4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3304      	adds	r3, #4
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe f8e3 	bl	8003244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02f      	beq.n	80050f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d90e      	bls.n	80050c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <prvSwitchTimerLists+0xc4>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f7fe f889 	bl	80031d4 <vListInsert>
 80050c2:	e017      	b.n	80050f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050c4:	2300      	movs	r3, #0
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	2100      	movs	r1, #0
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff fd5a 	bl	8004b88 <xTimerGenericCommand>
 80050d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	603b      	str	r3, [r7, #0]
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050f4:	4b09      	ldr	r3, [pc, #36]	@ (800511c <prvSwitchTimerLists+0xc4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1b0      	bne.n	8005060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050fe:	4b07      	ldr	r3, [pc, #28]	@ (800511c <prvSwitchTimerLists+0xc4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005104:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <prvSwitchTimerLists+0xc8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a04      	ldr	r2, [pc, #16]	@ (800511c <prvSwitchTimerLists+0xc4>)
 800510a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <prvSwitchTimerLists+0xc8>)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6013      	str	r3, [r2, #0]
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000f30 	.word	0x20000f30
 8005120:	20000f34 	.word	0x20000f34

08005124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800512a:	f000 f92f 	bl	800538c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800512e:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <prvCheckForValidListAndQueue+0x60>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d120      	bne.n	8005178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005136:	4814      	ldr	r0, [pc, #80]	@ (8005188 <prvCheckForValidListAndQueue+0x64>)
 8005138:	f7fd fffe 	bl	8003138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800513c:	4813      	ldr	r0, [pc, #76]	@ (800518c <prvCheckForValidListAndQueue+0x68>)
 800513e:	f7fd fffb 	bl	8003138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005142:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <prvCheckForValidListAndQueue+0x6c>)
 8005144:	4a10      	ldr	r2, [pc, #64]	@ (8005188 <prvCheckForValidListAndQueue+0x64>)
 8005146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005148:	4b12      	ldr	r3, [pc, #72]	@ (8005194 <prvCheckForValidListAndQueue+0x70>)
 800514a:	4a10      	ldr	r2, [pc, #64]	@ (800518c <prvCheckForValidListAndQueue+0x68>)
 800514c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <prvCheckForValidListAndQueue+0x74>)
 8005154:	4a11      	ldr	r2, [pc, #68]	@ (800519c <prvCheckForValidListAndQueue+0x78>)
 8005156:	2110      	movs	r1, #16
 8005158:	200a      	movs	r0, #10
 800515a:	f7fe f907 	bl	800336c <xQueueGenericCreateStatic>
 800515e:	4603      	mov	r3, r0
 8005160:	4a08      	ldr	r2, [pc, #32]	@ (8005184 <prvCheckForValidListAndQueue+0x60>)
 8005162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <prvCheckForValidListAndQueue+0x60>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <prvCheckForValidListAndQueue+0x60>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	490b      	ldr	r1, [pc, #44]	@ (80051a0 <prvCheckForValidListAndQueue+0x7c>)
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fd2c 	bl	8003bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005178:	f000 f938 	bl	80053ec <vPortExitCritical>
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000f38 	.word	0x20000f38
 8005188:	20000f08 	.word	0x20000f08
 800518c:	20000f1c 	.word	0x20000f1c
 8005190:	20000f30 	.word	0x20000f30
 8005194:	20000f34 	.word	0x20000f34
 8005198:	20000fe4 	.word	0x20000fe4
 800519c:	20000f44 	.word	0x20000f44
 80051a0:	08005ba0 	.word	0x08005ba0

080051a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b04      	subs	r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b04      	subs	r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0201 	bic.w	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051d4:	4a08      	ldr	r2, [pc, #32]	@ (80051f8 <pxPortInitialiseStack+0x54>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b14      	subs	r3, #20
 80051de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b20      	subs	r3, #32
 80051ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	080051fd 	.word	0x080051fd

080051fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <prvTaskExitError+0x54>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d00b      	beq.n	8005228 <prvTaskExitError+0x2c>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60fb      	str	r3, [r7, #12]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <prvTaskExitError+0x28>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60bb      	str	r3, [r7, #8]
}
 800523a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800523c:	bf00      	nop
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0fc      	beq.n	800523e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	2000000c 	.word	0x2000000c
	...

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	f04e 0e0d 	orr.w	lr, lr, #13
 800527e:	4770      	bx	lr

08005280 <pxCurrentTCBConst2>:
 8005280:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005288:	4806      	ldr	r0, [pc, #24]	@ (80052a4 <prvPortStartFirstTask+0x1c>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	b662      	cpsie	i
 8005294:	b661      	cpsie	f
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	df00      	svc	0
 80052a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052a2:	bf00      	nop
 80052a4:	e000ed08 	.word	0xe000ed08

080052a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ae:	4b32      	ldr	r3, [pc, #200]	@ (8005378 <xPortStartScheduler+0xd0>)
 80052b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	22ff      	movs	r2, #255	@ 0xff
 80052be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <xPortStartScheduler+0xd4>)
 80052d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005380 <xPortStartScheduler+0xd8>)
 80052d8:	2207      	movs	r2, #7
 80052da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052dc:	e009      	b.n	80052f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052de:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <xPortStartScheduler+0xd8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	4a26      	ldr	r2, [pc, #152]	@ (8005380 <xPortStartScheduler+0xd8>)
 80052e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	d0ef      	beq.n	80052de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052fe:	4b20      	ldr	r3, [pc, #128]	@ (8005380 <xPortStartScheduler+0xd8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f1c3 0307 	rsb	r3, r3, #7
 8005306:	2b04      	cmp	r3, #4
 8005308:	d00b      	beq.n	8005322 <xPortStartScheduler+0x7a>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60bb      	str	r3, [r7, #8]
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005322:	4b17      	ldr	r3, [pc, #92]	@ (8005380 <xPortStartScheduler+0xd8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	4a15      	ldr	r2, [pc, #84]	@ (8005380 <xPortStartScheduler+0xd8>)
 800532a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800532c:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <xPortStartScheduler+0xd8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005334:	4a12      	ldr	r2, [pc, #72]	@ (8005380 <xPortStartScheduler+0xd8>)
 8005336:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005340:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <xPortStartScheduler+0xdc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0f      	ldr	r2, [pc, #60]	@ (8005384 <xPortStartScheduler+0xdc>)
 8005346:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800534a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800534c:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <xPortStartScheduler+0xdc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <xPortStartScheduler+0xdc>)
 8005352:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005356:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005358:	f000 f8b8 	bl	80054cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <xPortStartScheduler+0xe0>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005362:	f7ff ff91 	bl	8005288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005366:	f7ff f867 	bl	8004438 <vTaskSwitchContext>
	prvTaskExitError();
 800536a:	f7ff ff47 	bl	80051fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000e400 	.word	0xe000e400
 800537c:	20001034 	.word	0x20001034
 8005380:	20001038 	.word	0x20001038
 8005384:	e000ed20 	.word	0xe000ed20
 8005388:	2000000c 	.word	0x2000000c

0800538c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	607b      	str	r3, [r7, #4]
}
 80053a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053a6:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <vPortEnterCritical+0x58>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3301      	adds	r3, #1
 80053ac:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <vPortEnterCritical+0x58>)
 80053ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053b0:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <vPortEnterCritical+0x58>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d110      	bne.n	80053da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <vPortEnterCritical+0x5c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <vPortEnterCritical+0x4e>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	603b      	str	r3, [r7, #0]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <vPortEnterCritical+0x4a>
	}
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053f2:	4b12      	ldr	r3, [pc, #72]	@ (800543c <vPortExitCritical+0x50>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <vPortExitCritical+0x26>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	607b      	str	r3, [r7, #4]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3b01      	subs	r3, #1
 8005418:	4a08      	ldr	r2, [pc, #32]	@ (800543c <vPortExitCritical+0x50>)
 800541a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800541c:	4b07      	ldr	r3, [pc, #28]	@ (800543c <vPortExitCritical+0x50>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <vPortExitCritical+0x44>
 8005424:	2300      	movs	r3, #0
 8005426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f383 8811 	msr	BASEPRI, r3
}
 800542e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005450:	6010      	str	r0, [r2, #0]
 8005452:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005456:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800545a:	f380 8811 	msr	BASEPRI, r0
 800545e:	f7fe ffeb 	bl	8004438 <vTaskSwitchContext>
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005476:	f380 8809 	msr	PSP, r0
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	4770      	bx	lr

08005480 <pxCurrentTCBConst>:
 8005480:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054a2:	f7fe ff0f 	bl	80042c4 <xTaskIncrementTick>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <xPortSysTickHandler+0x40>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
}
 80054be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <vPortSetupTimerInterrupt+0x30>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <vPortSetupTimerInterrupt+0x34>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <vPortSetupTimerInterrupt+0x38>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <vPortSetupTimerInterrupt+0x3c>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	099b      	lsrs	r3, r3, #6
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <vPortSetupTimerInterrupt+0x40>)
 80054ea:	3b01      	subs	r3, #1
 80054ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ee:	4b03      	ldr	r3, [pc, #12]	@ (80054fc <vPortSetupTimerInterrupt+0x30>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	e000e010 	.word	0xe000e010
 8005500:	e000e018 	.word	0xe000e018
 8005504:	20000000 	.word	0x20000000
 8005508:	10624dd3 	.word	0x10624dd3
 800550c:	e000e014 	.word	0xe000e014

08005510 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005516:	f3ef 8305 	mrs	r3, IPSR
 800551a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d915      	bls.n	800554e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005522:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <vPortValidateInterruptPriority+0x70>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800552c:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <vPortValidateInterruptPriority+0x74>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	7afa      	ldrb	r2, [r7, #11]
 8005532:	429a      	cmp	r2, r3
 8005534:	d20b      	bcs.n	800554e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	607b      	str	r3, [r7, #4]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800554e:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <vPortValidateInterruptPriority+0x78>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <vPortValidateInterruptPriority+0x7c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d90b      	bls.n	8005576 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	603b      	str	r3, [r7, #0]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <vPortValidateInterruptPriority+0x62>
	}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	e000e3f0 	.word	0xe000e3f0
 8005584:	20001034 	.word	0x20001034
 8005588:	e000ed0c 	.word	0xe000ed0c
 800558c:	20001038 	.word	0x20001038

08005590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	@ 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800559c:	f7fe fdd8 	bl	8004150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005714 <pvPortMalloc+0x184>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a8:	f000 f924 	bl	80057f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005718 <pvPortMalloc+0x188>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8095 	bne.w	80056e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01e      	beq.n	80055fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d015      	beq.n	80055fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f023 0307 	bic.w	r3, r3, #7
 80055d8:	3308      	adds	r3, #8
 80055da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <pvPortMalloc+0x6e>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617b      	str	r3, [r7, #20]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d06f      	beq.n	80056e4 <pvPortMalloc+0x154>
 8005604:	4b45      	ldr	r3, [pc, #276]	@ (800571c <pvPortMalloc+0x18c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d86a      	bhi.n	80056e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800560e:	4b44      	ldr	r3, [pc, #272]	@ (8005720 <pvPortMalloc+0x190>)
 8005610:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005612:	4b43      	ldr	r3, [pc, #268]	@ (8005720 <pvPortMalloc+0x190>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005618:	e004      	b.n	8005624 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d903      	bls.n	8005636 <pvPortMalloc+0xa6>
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f1      	bne.n	800561a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005636:	4b37      	ldr	r3, [pc, #220]	@ (8005714 <pvPortMalloc+0x184>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800563c:	429a      	cmp	r2, r3
 800563e:	d051      	beq.n	80056e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2208      	movs	r2, #8
 8005646:	4413      	add	r3, r2
 8005648:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	1ad2      	subs	r2, r2, r3
 800565a:	2308      	movs	r3, #8
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	d920      	bls.n	80056a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <pvPortMalloc+0xfc>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	613b      	str	r3, [r7, #16]
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800569e:	69b8      	ldr	r0, [r7, #24]
 80056a0:	f000 f90a 	bl	80058b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056a4:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <pvPortMalloc+0x18c>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <pvPortMalloc+0x18c>)
 80056b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056b2:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <pvPortMalloc+0x18c>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005724 <pvPortMalloc+0x194>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d203      	bcs.n	80056c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056be:	4b17      	ldr	r3, [pc, #92]	@ (800571c <pvPortMalloc+0x18c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a18      	ldr	r2, [pc, #96]	@ (8005724 <pvPortMalloc+0x194>)
 80056c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <pvPortMalloc+0x188>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056da:	4b13      	ldr	r3, [pc, #76]	@ (8005728 <pvPortMalloc+0x198>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	4a11      	ldr	r2, [pc, #68]	@ (8005728 <pvPortMalloc+0x198>)
 80056e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056e4:	f7fe fd42 	bl	800416c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <pvPortMalloc+0x17a>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <pvPortMalloc+0x176>
	return pvReturn;
 800570a:	69fb      	ldr	r3, [r7, #28]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3728      	adds	r7, #40	@ 0x28
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20001c44 	.word	0x20001c44
 8005718:	20001c58 	.word	0x20001c58
 800571c:	20001c48 	.word	0x20001c48
 8005720:	20001c3c 	.word	0x20001c3c
 8005724:	20001c4c 	.word	0x20001c4c
 8005728:	20001c50 	.word	0x20001c50

0800572c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d04f      	beq.n	80057de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800573e:	2308      	movs	r3, #8
 8005740:	425b      	negs	r3, r3
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b25      	ldr	r3, [pc, #148]	@ (80057e8 <vPortFree+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <vPortFree+0x46>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60fb      	str	r3, [r7, #12]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <vPortFree+0x66>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	60bb      	str	r3, [r7, #8]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	4b14      	ldr	r3, [pc, #80]	@ (80057e8 <vPortFree+0xbc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01e      	beq.n	80057de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11a      	bne.n	80057de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <vPortFree+0xbc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057b8:	f7fe fcca 	bl	8004150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <vPortFree+0xc0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4413      	add	r3, r2
 80057c6:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <vPortFree+0xc0>)
 80057c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ca:	6938      	ldr	r0, [r7, #16]
 80057cc:	f000 f874 	bl	80058b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057d0:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <vPortFree+0xc4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	4a06      	ldr	r2, [pc, #24]	@ (80057f0 <vPortFree+0xc4>)
 80057d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057da:	f7fe fcc7 	bl	800416c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20001c58 	.word	0x20001c58
 80057ec:	20001c48 	.word	0x20001c48
 80057f0:	20001c54 	.word	0x20001c54

080057f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80057fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005800:	4b27      	ldr	r3, [pc, #156]	@ (80058a0 <prvHeapInit+0xac>)
 8005802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3307      	adds	r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <prvHeapInit+0xac>)
 8005824:	4413      	add	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800582c:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <prvHeapInit+0xb0>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005832:	4b1c      	ldr	r3, [pc, #112]	@ (80058a4 <prvHeapInit+0xb0>)
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005840:	2208      	movs	r2, #8
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <prvHeapInit+0xb4>)
 8005854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005856:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <prvHeapInit+0xb4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800585e:	4b12      	ldr	r3, [pc, #72]	@ (80058a8 <prvHeapInit+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <prvHeapInit+0xb4>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <prvHeapInit+0xb8>)
 8005882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a09      	ldr	r2, [pc, #36]	@ (80058b0 <prvHeapInit+0xbc>)
 800588a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800588c:	4b09      	ldr	r3, [pc, #36]	@ (80058b4 <prvHeapInit+0xc0>)
 800588e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000103c 	.word	0x2000103c
 80058a4:	20001c3c 	.word	0x20001c3c
 80058a8:	20001c44 	.word	0x20001c44
 80058ac:	20001c4c 	.word	0x20001c4c
 80058b0:	20001c48 	.word	0x20001c48
 80058b4:	20001c58 	.word	0x20001c58

080058b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058c0:	4b27      	ldr	r3, [pc, #156]	@ (8005960 <prvInsertBlockIntoFreeList+0xa8>)
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e002      	b.n	80058cc <prvInsertBlockIntoFreeList+0x14>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d8f7      	bhi.n	80058c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d108      	bne.n	80058fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	441a      	add	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d118      	bne.n	8005940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b14      	ldr	r3, [pc, #80]	@ (8005964 <prvInsertBlockIntoFreeList+0xac>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d00d      	beq.n	8005936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e008      	b.n	8005948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <prvInsertBlockIntoFreeList+0xac>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e003      	b.n	8005948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d002      	beq.n	8005956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr
 8005960:	20001c3c 	.word	0x20001c3c
 8005964:	20001c44 	.word	0x20001c44

08005968 <memset>:
 8005968:	4603      	mov	r3, r0
 800596a:	4402      	add	r2, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	d100      	bne.n	8005972 <memset+0xa>
 8005970:	4770      	bx	lr
 8005972:	f803 1b01 	strb.w	r1, [r3], #1
 8005976:	e7f9      	b.n	800596c <memset+0x4>

08005978 <_reclaim_reent>:
 8005978:	4b2d      	ldr	r3, [pc, #180]	@ (8005a30 <_reclaim_reent+0xb8>)
 800597a:	b570      	push	{r4, r5, r6, lr}
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4604      	mov	r4, r0
 8005980:	4283      	cmp	r3, r0
 8005982:	d053      	beq.n	8005a2c <_reclaim_reent+0xb4>
 8005984:	69c3      	ldr	r3, [r0, #28]
 8005986:	b31b      	cbz	r3, 80059d0 <_reclaim_reent+0x58>
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	b163      	cbz	r3, 80059a6 <_reclaim_reent+0x2e>
 800598c:	2500      	movs	r5, #0
 800598e:	69e3      	ldr	r3, [r4, #28]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	5959      	ldr	r1, [r3, r5]
 8005994:	b9b1      	cbnz	r1, 80059c4 <_reclaim_reent+0x4c>
 8005996:	3504      	adds	r5, #4
 8005998:	2d80      	cmp	r5, #128	@ 0x80
 800599a:	d1f8      	bne.n	800598e <_reclaim_reent+0x16>
 800599c:	69e3      	ldr	r3, [r4, #28]
 800599e:	4620      	mov	r0, r4
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	f000 f87b 	bl	8005a9c <_free_r>
 80059a6:	69e3      	ldr	r3, [r4, #28]
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	b111      	cbz	r1, 80059b2 <_reclaim_reent+0x3a>
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 f875 	bl	8005a9c <_free_r>
 80059b2:	69e3      	ldr	r3, [r4, #28]
 80059b4:	689d      	ldr	r5, [r3, #8]
 80059b6:	b15d      	cbz	r5, 80059d0 <_reclaim_reent+0x58>
 80059b8:	4629      	mov	r1, r5
 80059ba:	4620      	mov	r0, r4
 80059bc:	682d      	ldr	r5, [r5, #0]
 80059be:	f000 f86d 	bl	8005a9c <_free_r>
 80059c2:	e7f8      	b.n	80059b6 <_reclaim_reent+0x3e>
 80059c4:	680e      	ldr	r6, [r1, #0]
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f868 	bl	8005a9c <_free_r>
 80059cc:	4631      	mov	r1, r6
 80059ce:	e7e1      	b.n	8005994 <_reclaim_reent+0x1c>
 80059d0:	6961      	ldr	r1, [r4, #20]
 80059d2:	b111      	cbz	r1, 80059da <_reclaim_reent+0x62>
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 f861 	bl	8005a9c <_free_r>
 80059da:	69e1      	ldr	r1, [r4, #28]
 80059dc:	b111      	cbz	r1, 80059e4 <_reclaim_reent+0x6c>
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 f85c 	bl	8005a9c <_free_r>
 80059e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059e6:	b111      	cbz	r1, 80059ee <_reclaim_reent+0x76>
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 f857 	bl	8005a9c <_free_r>
 80059ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059f0:	b111      	cbz	r1, 80059f8 <_reclaim_reent+0x80>
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 f852 	bl	8005a9c <_free_r>
 80059f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059fa:	b111      	cbz	r1, 8005a02 <_reclaim_reent+0x8a>
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 f84d 	bl	8005a9c <_free_r>
 8005a02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a04:	b111      	cbz	r1, 8005a0c <_reclaim_reent+0x94>
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f848 	bl	8005a9c <_free_r>
 8005a0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a0e:	b111      	cbz	r1, 8005a16 <_reclaim_reent+0x9e>
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 f843 	bl	8005a9c <_free_r>
 8005a16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a18:	b111      	cbz	r1, 8005a20 <_reclaim_reent+0xa8>
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 f83e 	bl	8005a9c <_free_r>
 8005a20:	6a23      	ldr	r3, [r4, #32]
 8005a22:	b11b      	cbz	r3, 8005a2c <_reclaim_reent+0xb4>
 8005a24:	4620      	mov	r0, r4
 8005a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a2a:	4718      	bx	r3
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000010 	.word	0x20000010

08005a34 <__libc_init_array>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	2600      	movs	r6, #0
 8005a38:	4d0c      	ldr	r5, [pc, #48]	@ (8005a6c <__libc_init_array+0x38>)
 8005a3a:	4c0d      	ldr	r4, [pc, #52]	@ (8005a70 <__libc_init_array+0x3c>)
 8005a3c:	1b64      	subs	r4, r4, r5
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	42a6      	cmp	r6, r4
 8005a42:	d109      	bne.n	8005a58 <__libc_init_array+0x24>
 8005a44:	f000 f87e 	bl	8005b44 <_init>
 8005a48:	2600      	movs	r6, #0
 8005a4a:	4d0a      	ldr	r5, [pc, #40]	@ (8005a74 <__libc_init_array+0x40>)
 8005a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8005a78 <__libc_init_array+0x44>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	42a6      	cmp	r6, r4
 8005a54:	d105      	bne.n	8005a62 <__libc_init_array+0x2e>
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5c:	4798      	blx	r3
 8005a5e:	3601      	adds	r6, #1
 8005a60:	e7ee      	b.n	8005a40 <__libc_init_array+0xc>
 8005a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a66:	4798      	blx	r3
 8005a68:	3601      	adds	r6, #1
 8005a6a:	e7f2      	b.n	8005a52 <__libc_init_array+0x1e>
 8005a6c:	08005c24 	.word	0x08005c24
 8005a70:	08005c24 	.word	0x08005c24
 8005a74:	08005c24 	.word	0x08005c24
 8005a78:	08005c28 	.word	0x08005c28

08005a7c <__retarget_lock_acquire_recursive>:
 8005a7c:	4770      	bx	lr

08005a7e <__retarget_lock_release_recursive>:
 8005a7e:	4770      	bx	lr

08005a80 <memcpy>:
 8005a80:	440a      	add	r2, r1
 8005a82:	4291      	cmp	r1, r2
 8005a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a88:	d100      	bne.n	8005a8c <memcpy+0xc>
 8005a8a:	4770      	bx	lr
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	4291      	cmp	r1, r2
 8005a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a98:	d1f9      	bne.n	8005a8e <memcpy+0xe>
 8005a9a:	bd10      	pop	{r4, pc}

08005a9c <_free_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	d040      	beq.n	8005b26 <_free_r+0x8a>
 8005aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa8:	1f0c      	subs	r4, r1, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bfb8      	it	lt
 8005aae:	18e4      	addlt	r4, r4, r3
 8005ab0:	f000 f83c 	bl	8005b2c <__malloc_lock>
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b28 <_free_r+0x8c>)
 8005ab6:	6813      	ldr	r3, [r2, #0]
 8005ab8:	b933      	cbnz	r3, 8005ac8 <_free_r+0x2c>
 8005aba:	6063      	str	r3, [r4, #4]
 8005abc:	6014      	str	r4, [r2, #0]
 8005abe:	4628      	mov	r0, r5
 8005ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac4:	f000 b838 	b.w	8005b38 <__malloc_unlock>
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d908      	bls.n	8005ade <_free_r+0x42>
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	1821      	adds	r1, r4, r0
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	bf01      	itttt	eq
 8005ad4:	6819      	ldreq	r1, [r3, #0]
 8005ad6:	685b      	ldreq	r3, [r3, #4]
 8005ad8:	1809      	addeq	r1, r1, r0
 8005ada:	6021      	streq	r1, [r4, #0]
 8005adc:	e7ed      	b.n	8005aba <_free_r+0x1e>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	b10b      	cbz	r3, 8005ae8 <_free_r+0x4c>
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	d9fa      	bls.n	8005ade <_free_r+0x42>
 8005ae8:	6811      	ldr	r1, [r2, #0]
 8005aea:	1850      	adds	r0, r2, r1
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d10b      	bne.n	8005b08 <_free_r+0x6c>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	4401      	add	r1, r0
 8005af4:	1850      	adds	r0, r2, r1
 8005af6:	4283      	cmp	r3, r0
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	d1e0      	bne.n	8005abe <_free_r+0x22>
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4408      	add	r0, r1
 8005b02:	6010      	str	r0, [r2, #0]
 8005b04:	6053      	str	r3, [r2, #4]
 8005b06:	e7da      	b.n	8005abe <_free_r+0x22>
 8005b08:	d902      	bls.n	8005b10 <_free_r+0x74>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	e7d6      	b.n	8005abe <_free_r+0x22>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	1821      	adds	r1, r4, r0
 8005b14:	428b      	cmp	r3, r1
 8005b16:	bf01      	itttt	eq
 8005b18:	6819      	ldreq	r1, [r3, #0]
 8005b1a:	685b      	ldreq	r3, [r3, #4]
 8005b1c:	1809      	addeq	r1, r1, r0
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6054      	str	r4, [r2, #4]
 8005b24:	e7cb      	b.n	8005abe <_free_r+0x22>
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20001d98 	.word	0x20001d98

08005b2c <__malloc_lock>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__malloc_lock+0x8>)
 8005b2e:	f7ff bfa5 	b.w	8005a7c <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	20001d94 	.word	0x20001d94

08005b38 <__malloc_unlock>:
 8005b38:	4801      	ldr	r0, [pc, #4]	@ (8005b40 <__malloc_unlock+0x8>)
 8005b3a:	f7ff bfa0 	b.w	8005a7e <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20001d94 	.word	0x20001d94

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
