
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080077d0  080077d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d40  08007d40  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d48  08007d48  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f34  20000060  08007db0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f94  08007db0  00009f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c23d  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e92  00000000  00000000  000252c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00029158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139b  00000000  00000000  0002aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4ec  00000000  00000000  0002bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edb1  00000000  00000000  0004729f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ceb7  00000000  00000000  00066050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea0  00000000  00000000  00102f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00109dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080077b8 	.word	0x080077b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080077b8 	.word	0x080077b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__gesf2>:
 8000160:	f04f 3cff 	mov.w	ip, #4294967295
 8000164:	e006      	b.n	8000174 <__cmpsf2+0x4>
 8000166:	bf00      	nop

08000168 <__lesf2>:
 8000168:	f04f 0c01 	mov.w	ip, #1
 800016c:	e002      	b.n	8000174 <__cmpsf2+0x4>
 800016e:	bf00      	nop

08000170 <__cmpsf2>:
 8000170:	f04f 0c01 	mov.w	ip, #1
 8000174:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000178:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800017c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000180:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000184:	bf18      	it	ne
 8000186:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800018a:	d011      	beq.n	80001b0 <__cmpsf2+0x40>
 800018c:	b001      	add	sp, #4
 800018e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000192:	bf18      	it	ne
 8000194:	ea90 0f01 	teqne	r0, r1
 8000198:	bf58      	it	pl
 800019a:	ebb2 0003 	subspl.w	r0, r2, r3
 800019e:	bf88      	it	hi
 80001a0:	17c8      	asrhi	r0, r1, #31
 80001a2:	bf38      	it	cc
 80001a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80001a8:	bf18      	it	ne
 80001aa:	f040 0001 	orrne.w	r0, r0, #1
 80001ae:	4770      	bx	lr
 80001b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001b4:	d102      	bne.n	80001bc <__cmpsf2+0x4c>
 80001b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001ba:	d105      	bne.n	80001c8 <__cmpsf2+0x58>
 80001bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001c0:	d1e4      	bne.n	800018c <__cmpsf2+0x1c>
 80001c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001c6:	d0e1      	beq.n	800018c <__cmpsf2+0x1c>
 80001c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop

080001d0 <__aeabi_cfrcmple>:
 80001d0:	4684      	mov	ip, r0
 80001d2:	4608      	mov	r0, r1
 80001d4:	4661      	mov	r1, ip
 80001d6:	e7ff      	b.n	80001d8 <__aeabi_cfcmpeq>

080001d8 <__aeabi_cfcmpeq>:
 80001d8:	b50f      	push	{r0, r1, r2, r3, lr}
 80001da:	f7ff ffc9 	bl	8000170 <__cmpsf2>
 80001de:	2800      	cmp	r0, #0
 80001e0:	bf48      	it	mi
 80001e2:	f110 0f00 	cmnmi.w	r0, #0
 80001e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001e8 <__aeabi_fcmpeq>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff fff4 	bl	80001d8 <__aeabi_cfcmpeq>
 80001f0:	bf0c      	ite	eq
 80001f2:	2001      	moveq	r0, #1
 80001f4:	2000      	movne	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmplt>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffea 	bl	80001d8 <__aeabi_cfcmpeq>
 8000204:	bf34      	ite	cc
 8000206:	2001      	movcc	r0, #1
 8000208:	2000      	movcs	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmple>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffe0 	bl	80001d8 <__aeabi_cfcmpeq>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpge>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffd2 	bl	80001d0 <__aeabi_cfrcmple>
 800022c:	bf94      	ite	ls
 800022e:	2001      	movls	r0, #1
 8000230:	2000      	movhi	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <__aeabi_fcmpgt>:
 8000238:	f84d ed08 	str.w	lr, [sp, #-8]!
 800023c:	f7ff ffc8 	bl	80001d0 <__aeabi_cfrcmple>
 8000240:	bf34      	ite	cc
 8000242:	2001      	movcc	r0, #1
 8000244:	2000      	movcs	r0, #0
 8000246:	f85d fb08 	ldr.w	pc, [sp], #8
 800024a:	bf00      	nop

0800024c <StateMachineTask>:


uint8_t state = 0;
char per_value[MAX_PER_LENGTH+1];

void StateMachineTask(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b0be      	sub	sp, #248	@ 0xf8
 8000250:	af00      	add	r7, sp, #0
    static uint8_t action_done = 0;

    //--------------------------- TRANSITIONS
    switch (state) {
 8000252:	4bb1      	ldr	r3, [pc, #708]	@ (8000518 <StateMachineTask+0x2cc>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b08      	cmp	r3, #8
 8000258:	f200 8144 	bhi.w	80004e4 <StateMachineTask+0x298>
 800025c:	a201      	add	r2, pc, #4	@ (adr r2, 8000264 <StateMachineTask+0x18>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000289 	.word	0x08000289
 8000268:	080002d9 	.word	0x080002d9
 800026c:	0800032f 	.word	0x0800032f
 8000270:	0800034b 	.word	0x0800034b
 8000274:	0800041b 	.word	0x0800041b
 8000278:	08000289 	.word	0x08000289
 800027c:	08000289 	.word	0x08000289
 8000280:	08000289 	.word	0x08000289
 8000284:	080004b3 	.word	0x080004b3
        case 0:
        case 5:
        case 6:
        case 7:
            if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin)) {
 8000288:	2120      	movs	r1, #32
 800028a:	48a4      	ldr	r0, [pc, #656]	@ (800051c <StateMachineTask+0x2d0>)
 800028c:	f001 fefa 	bl	8002084 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d109      	bne.n	80002aa <StateMachineTask+0x5e>
                state++;
 8000296:	4ba0      	ldr	r3, [pc, #640]	@ (8000518 <StateMachineTask+0x2cc>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b9e      	ldr	r3, [pc, #632]	@ (8000518 <StateMachineTask+0x2cc>)
 80002a0:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 80002a2:	4b9f      	ldr	r3, [pc, #636]	@ (8000520 <StateMachineTask+0x2d4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
            } else if (!HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) && state > 0) {
                state--;
                action_done = 0;
            }
            break;
 80002a8:	e111      	b.n	80004ce <StateMachineTask+0x282>
            } else if (!HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) && state > 0) {
 80002aa:	2140      	movs	r1, #64	@ 0x40
 80002ac:	489b      	ldr	r0, [pc, #620]	@ (800051c <StateMachineTask+0x2d0>)
 80002ae:	f001 fee9 	bl	8002084 <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	f040 810a 	bne.w	80004ce <StateMachineTask+0x282>
 80002ba:	4b97      	ldr	r3, [pc, #604]	@ (8000518 <StateMachineTask+0x2cc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f000 8105 	beq.w	80004ce <StateMachineTask+0x282>
                state--;
 80002c4:	4b94      	ldr	r3, [pc, #592]	@ (8000518 <StateMachineTask+0x2cc>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b92      	ldr	r3, [pc, #584]	@ (8000518 <StateMachineTask+0x2cc>)
 80002ce:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 80002d0:	4b93      	ldr	r3, [pc, #588]	@ (8000520 <StateMachineTask+0x2d4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
            break;
 80002d6:	e0fa      	b.n	80004ce <StateMachineTask+0x282>
        case 1:
            Check_UART1_Timeout(); // Permer de vérifier si on a fini de recevoir le message et retoure message_complete1
 80002d8:	f001 f908 	bl	80014ec <Check_UART1_Timeout>

            if (message_complete1) {
 80002dc:	4b91      	ldr	r3, [pc, #580]	@ (8000524 <StateMachineTask+0x2d8>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	f000 80f6 	beq.w	80004d2 <StateMachineTask+0x286>
                message_complete1 = 0;
 80002e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000524 <StateMachineTask+0x2d8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]

                char expected[20];
                sprintf(expected, "PER = %s", per_value);
 80002ec:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80002f0:	4a8d      	ldr	r2, [pc, #564]	@ (8000528 <StateMachineTask+0x2dc>)
 80002f2:	498e      	ldr	r1, [pc, #568]	@ (800052c <StateMachineTask+0x2e0>)
 80002f4:	4618      	mov	r0, r3
 80002f6:	f006 fd27 	bl	8006d48 <siprintf>

                if (strstr((char*)rx_buffer1, expected) != NULL) {
 80002fa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80002fe:	4619      	mov	r1, r3
 8000300:	488b      	ldr	r0, [pc, #556]	@ (8000530 <StateMachineTask+0x2e4>)
 8000302:	f006 fd5e 	bl	8006dc2 <strstr>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00c      	beq.n	8000326 <StateMachineTask+0xda>
                    send_UART3("PER VALIDE --> Étape suivante\n");
 800030c:	4889      	ldr	r0, [pc, #548]	@ (8000534 <StateMachineTask+0x2e8>)
 800030e:	f001 f81f 	bl	8001350 <send_UART3>
                    //memset(rx_buffer1, 0, RX_BUFFER1_SIZE ); // On reset notre buffer par sécurité
                    state++;
 8000312:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <StateMachineTask+0x2cc>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b7f      	ldr	r3, [pc, #508]	@ (8000518 <StateMachineTask+0x2cc>)
 800031c:	701a      	strb	r2, [r3, #0]
                    action_done = 0;
 800031e:	4b80      	ldr	r3, [pc, #512]	@ (8000520 <StateMachineTask+0x2d4>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
                } else {
                    send_UART3("Valeur différente. Entrez à nouveau le PER :\n");
                }
            }
            break;
 8000324:	e0d5      	b.n	80004d2 <StateMachineTask+0x286>
                    send_UART3("Valeur différente. Entrez à nouveau le PER :\n");
 8000326:	4884      	ldr	r0, [pc, #528]	@ (8000538 <StateMachineTask+0x2ec>)
 8000328:	f001 f812 	bl	8001350 <send_UART3>
            break;
 800032c:	e0d1      	b.n	80004d2 <StateMachineTask+0x286>


        case 2:
        	Check_UART1_Timeout(); // Permer de vérifier si on a fini de recevoir le message et retoure message_complete1
 800032e:	f001 f8dd 	bl	80014ec <Check_UART1_Timeout>

        	if(message_complete1){
 8000332:	4b7c      	ldr	r3, [pc, #496]	@ (8000524 <StateMachineTask+0x2d8>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	f000 80cd 	beq.w	80004d6 <StateMachineTask+0x28a>
        		message_complete1 = 0;
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <StateMachineTask+0x2d8>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]

        		send_UART3((char*)rx_buffer1); //DEBUG
 8000342:	487b      	ldr	r0, [pc, #492]	@ (8000530 <StateMachineTask+0x2e4>)
 8000344:	f001 f804 	bl	8001350 <send_UART3>

        	}
        	break;
 8000348:	e0c5      	b.n	80004d6 <StateMachineTask+0x28a>

        case 3:
            if (message_complete1) {
 800034a:	4b76      	ldr	r3, [pc, #472]	@ (8000524 <StateMachineTask+0x2d8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	f000 80c3 	beq.w	80004da <StateMachineTask+0x28e>
                message_complete1 = 0;
 8000354:	4b73      	ldr	r3, [pc, #460]	@ (8000524 <StateMachineTask+0x2d8>)
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
                TrameDataSTS data = {0};
 800035a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800035e:	226c      	movs	r2, #108	@ 0x6c
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f006 fd12 	bl	8006d8c <memset>
                //parse_data_STS(rx_buffer1, &data);
                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) &&
 8000368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800036c:	4973      	ldr	r1, [pc, #460]	@ (800053c <StateMachineTask+0x2f0>)
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff58 	bl	8000224 <__aeabi_fcmpge>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d100      	bne.n	800037c <StateMachineTask+0x130>
                    send_UART3("STS OK --> Etape suivante\n");
                    HAL_Delay(500);
                    state++;
                }
            }
            break;
 800037a:	e0ae      	b.n	80004da <StateMachineTask+0x28e>
                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) &&
 800037c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000380:	496f      	ldr	r1, [pc, #444]	@ (8000540 <StateMachineTask+0x2f4>)
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff44 	bl	8000210 <__aeabi_fcmple>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d100      	bne.n	8000390 <StateMachineTask+0x144>
            break;
 800038e:	e0a4      	b.n	80004da <StateMachineTask+0x28e>
                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) &&
 8000390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000394:	496b      	ldr	r1, [pc, #428]	@ (8000544 <StateMachineTask+0x2f8>)
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff44 	bl	8000224 <__aeabi_fcmpge>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d100      	bne.n	80003a4 <StateMachineTask+0x158>
            break;
 80003a2:	e09a      	b.n	80004da <StateMachineTask+0x28e>
                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) &&
 80003a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003a8:	4967      	ldr	r1, [pc, #412]	@ (8000548 <StateMachineTask+0x2fc>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff30 	bl	8000210 <__aeabi_fcmple>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d100      	bne.n	80003b8 <StateMachineTask+0x16c>
            break;
 80003b6:	e090      	b.n	80004da <StateMachineTask+0x28e>
                    (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 &&
 80003b8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
                if ((data.acc >= 8.5 && data.acc <= 10) && (data.bat >= 11.5 && data.bat <= 13) &&
 80003bc:	2b00      	cmp	r3, #0
 80003be:	f000 808c 	beq.w	80004da <StateMachineTask+0x28e>
                    (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 &&
 80003c2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f000 8087 	beq.w	80004da <StateMachineTask+0x28e>
 80003cc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	f000 8082 	beq.w	80004da <StateMachineTask+0x28e>
 80003d6:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d07d      	beq.n	80004da <StateMachineTask+0x28e>
                     data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 80003de:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
                    (data.dips[0] == 1 && data.dips[1] == 1 && data.dips[2] == 1 && data.dips[3] == 1 &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d079      	beq.n	80004da <StateMachineTask+0x28e>
                     data.dips[4] == 1 && data.dips[5] == 1 && data.dips[6] == 1 && data.dips[7] == 1)) {
 80003e6:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d075      	beq.n	80004da <StateMachineTask+0x28e>
 80003ee:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d071      	beq.n	80004da <StateMachineTask+0x28e>
 80003f6:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d06d      	beq.n	80004da <StateMachineTask+0x28e>
                    send_UART3("STS OK --> Etape suivante\n");
 80003fe:	4853      	ldr	r0, [pc, #332]	@ (800054c <StateMachineTask+0x300>)
 8000400:	f000 ffa6 	bl	8001350 <send_UART3>
                    HAL_Delay(500);
 8000404:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000408:	f001 f8f0 	bl	80015ec <HAL_Delay>
                    state++;
 800040c:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <StateMachineTask+0x2cc>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b40      	ldr	r3, [pc, #256]	@ (8000518 <StateMachineTask+0x2cc>)
 8000416:	701a      	strb	r2, [r3, #0]
            break;
 8000418:	e05f      	b.n	80004da <StateMachineTask+0x28e>

        case 4:
            if (message_complete1) {
 800041a:	4b42      	ldr	r3, [pc, #264]	@ (8000524 <StateMachineTask+0x2d8>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d05d      	beq.n	80004de <StateMachineTask+0x292>
                message_complete1 = 0;
 8000422:	4b40      	ldr	r3, [pc, #256]	@ (8000524 <StateMachineTask+0x2d8>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
                TrameDataSTS data = {0};
 8000428:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800042c:	226c      	movs	r2, #108	@ 0x6c
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f006 fcab 	bl	8006d8c <memset>
                //parse_data_STS(rx_buffer1, &data);
                if (data.inps[0] == 1 && data.inps[1] == 1 && data.inps[2] == 1) {
 8000436:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800043a:	2b00      	cmp	r3, #0
 800043c:	d018      	beq.n	8000470 <StateMachineTask+0x224>
 800043e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000442:	2b00      	cmp	r3, #0
 8000444:	d014      	beq.n	8000470 <StateMachineTask+0x224>
 8000446:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d010      	beq.n	8000470 <StateMachineTask+0x224>
                    send_UART3("Entrees OK --> Etape suivante\n");
 800044e:	4840      	ldr	r0, [pc, #256]	@ (8000550 <StateMachineTask+0x304>)
 8000450:	f000 ff7e 	bl	8001350 <send_UART3>
                    osDelay(500);
 8000454:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000458:	f004 f810 	bl	800447c <osDelay>
                    state++;
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <StateMachineTask+0x2cc>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <StateMachineTask+0x2cc>)
 8000466:	701a      	strb	r2, [r3, #0]
                    action_done = 0;
 8000468:	4b2d      	ldr	r3, [pc, #180]	@ (8000520 <StateMachineTask+0x2d4>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
                        sprintf(msg, "Entree num %d : %d\n", i, data.inps[i]); // On affiche l'état des entrées
                        send_UART3(msg);
                    }
                }
            }
            break;
 800046e:	e036      	b.n	80004de <StateMachineTask+0x292>
                    send_UART3("Erreur défaut entrée:");
 8000470:	4838      	ldr	r0, [pc, #224]	@ (8000554 <StateMachineTask+0x308>)
 8000472:	f000 ff6d 	bl	8001350 <send_UART3>
                    for (int i = 0; i < 3; i++) {
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800047c:	e014      	b.n	80004a8 <StateMachineTask+0x25c>
                        sprintf(msg, "Entree num %d : %d\n", i, data.inps[i]); // On affiche l'état des entrées
 800047e:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 8000482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	1d38      	adds	r0, r7, #4
 800048c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000490:	4931      	ldr	r1, [pc, #196]	@ (8000558 <StateMachineTask+0x30c>)
 8000492:	f006 fc59 	bl	8006d48 <siprintf>
                        send_UART3(msg);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4618      	mov	r0, r3
 800049a:	f000 ff59 	bl	8001350 <send_UART3>
                    for (int i = 0; i < 3; i++) {
 800049e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80004a2:	3301      	adds	r3, #1
 80004a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80004a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	dde6      	ble.n	800047e <StateMachineTask+0x232>
            break;
 80004b0:	e015      	b.n	80004de <StateMachineTask+0x292>

        case 8:
            if (HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) == GPIO_PIN_RESET) {
 80004b2:	2120      	movs	r1, #32
 80004b4:	4819      	ldr	r0, [pc, #100]	@ (800051c <StateMachineTask+0x2d0>)
 80004b6:	f001 fde5 	bl	8002084 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d110      	bne.n	80004e2 <StateMachineTask+0x296>
                state = 0;
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <StateMachineTask+0x2cc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <StateMachineTask+0x2d4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 80004cc:	e009      	b.n	80004e2 <StateMachineTask+0x296>
            break;
 80004ce:	bf00      	nop
 80004d0:	e008      	b.n	80004e4 <StateMachineTask+0x298>
            break;
 80004d2:	bf00      	nop
 80004d4:	e006      	b.n	80004e4 <StateMachineTask+0x298>
        	break;
 80004d6:	bf00      	nop
 80004d8:	e004      	b.n	80004e4 <StateMachineTask+0x298>
            break;
 80004da:	bf00      	nop
 80004dc:	e002      	b.n	80004e4 <StateMachineTask+0x298>
            break;
 80004de:	bf00      	nop
 80004e0:	e000      	b.n	80004e4 <StateMachineTask+0x298>
            break;
 80004e2:	bf00      	nop
    }

    //--------------------------- ACTIONS
    switch (state) {
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <StateMachineTask+0x2cc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	f200 8169 	bhi.w	80007c0 <StateMachineTask+0x574>
 80004ee:	a201      	add	r2, pc, #4	@ (adr r2, 80004f4 <StateMachineTask+0x2a8>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	0800055d 	.word	0x0800055d
 80004f8:	0800058d 	.word	0x0800058d
 80004fc:	08000689 	.word	0x08000689
 8000500:	080006ad 	.word	0x080006ad
 8000504:	080006c5 	.word	0x080006c5
 8000508:	08000713 	.word	0x08000713
 800050c:	08000721 	.word	0x08000721
 8000510:	080007a5 	.word	0x080007a5
 8000514:	080007ad 	.word	0x080007ad
 8000518:	2000007c 	.word	0x2000007c
 800051c:	40010800 	.word	0x40010800
 8000520:	20000089 	.word	0x20000089
 8000524:	200001f4 	.word	0x200001f4
 8000528:	20000080 	.word	0x20000080
 800052c:	080077d0 	.word	0x080077d0
 8000530:	200001f8 	.word	0x200001f8
 8000534:	080077dc 	.word	0x080077dc
 8000538:	080077fc 	.word	0x080077fc
 800053c:	41080000 	.word	0x41080000
 8000540:	41200000 	.word	0x41200000
 8000544:	41380000 	.word	0x41380000
 8000548:	41500000 	.word	0x41500000
 800054c:	08007830 	.word	0x08007830
 8000550:	0800784c 	.word	0x0800784c
 8000554:	0800786c 	.word	0x0800786c
 8000558:	08007884 	.word	0x08007884
        case 0:
            HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000562:	489f      	ldr	r0, [pc, #636]	@ (80007e0 <StateMachineTask+0x594>)
 8000564:	f001 fda5 	bl	80020b2 <HAL_GPIO_WritePin>
            if (!action_done) {
 8000568:	4b9e      	ldr	r3, [pc, #632]	@ (80007e4 <StateMachineTask+0x598>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	f040 8129 	bne.w	80007c4 <StateMachineTask+0x578>
                send_UART3("ETAPE 0\n");
 8000572:	489d      	ldr	r0, [pc, #628]	@ (80007e8 <StateMachineTask+0x59c>)
 8000574:	f000 feec 	bl	8001350 <send_UART3>
                osDelay(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f003 ff7f 	bl	800447c <osDelay>
                send_UART3("Appuyer sur le bouton pour commencer\n");
 800057e:	489b      	ldr	r0, [pc, #620]	@ (80007ec <StateMachineTask+0x5a0>)
 8000580:	f000 fee6 	bl	8001350 <send_UART3>
                action_done = 1;
 8000584:	4b97      	ldr	r3, [pc, #604]	@ (80007e4 <StateMachineTask+0x598>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
            }
            break;
 800058a:	e11b      	b.n	80007c4 <StateMachineTask+0x578>
        case 1:
            if (!action_done) {
 800058c:	4b95      	ldr	r3, [pc, #596]	@ (80007e4 <StateMachineTask+0x598>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d105      	bne.n	80005a0 <StateMachineTask+0x354>
                send_UART3("Entrez le PER (juste la valeur sur 8 digits)\n");
 8000594:	4896      	ldr	r0, [pc, #600]	@ (80007f0 <StateMachineTask+0x5a4>)
 8000596:	f000 fedb 	bl	8001350 <send_UART3>
                action_done = 1;
 800059a:	4b92      	ldr	r3, [pc, #584]	@ (80007e4 <StateMachineTask+0x598>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
            }

            if (message_complete3) {
 80005a0:	4b94      	ldr	r3, [pc, #592]	@ (80007f4 <StateMachineTask+0x5a8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 810f 	beq.w	80007c8 <StateMachineTask+0x57c>
                            message_complete3 = 0;
 80005aa:	4b92      	ldr	r3, [pc, #584]	@ (80007f4 <StateMachineTask+0x5a8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
                            // Nettoyer la chaîne des caractères \r et \n
                                char cleaned_buffer[20];
                                int i = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                                // Copier les caractères sauf \r et \n
                                for (int j = 0; j < strlen((char*)rx_buffer3); j++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80005bc:	e020      	b.n	8000600 <StateMachineTask+0x3b4>
                                    if (rx_buffer3[j] != '\r' && rx_buffer3[j] != '\n') {
 80005be:	4a8e      	ldr	r2, [pc, #568]	@ (80007f8 <StateMachineTask+0x5ac>)
 80005c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b0d      	cmp	r3, #13
 80005ca:	d014      	beq.n	80005f6 <StateMachineTask+0x3aa>
 80005cc:	4a8a      	ldr	r2, [pc, #552]	@ (80007f8 <StateMachineTask+0x5ac>)
 80005ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	d00d      	beq.n	80005f6 <StateMachineTask+0x3aa>
                                        cleaned_buffer[i++] = rx_buffer3[j];
 80005da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80005e4:	4984      	ldr	r1, [pc, #528]	@ (80007f8 <StateMachineTask+0x5ac>)
 80005e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80005ea:	440a      	add	r2, r1
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	33f8      	adds	r3, #248	@ 0xf8
 80005f0:	443b      	add	r3, r7
 80005f2:	f803 2c34 	strb.w	r2, [r3, #-52]
                                for (int j = 0; j < strlen((char*)rx_buffer3); j++) {
 80005f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80005fa:	3301      	adds	r3, #1
 80005fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000600:	487d      	ldr	r0, [pc, #500]	@ (80007f8 <StateMachineTask+0x5ac>)
 8000602:	f7ff fda5 	bl	8000150 <strlen>
 8000606:	4602      	mov	r2, r0
 8000608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800060c:	429a      	cmp	r2, r3
 800060e:	d8d6      	bhi.n	80005be <StateMachineTask+0x372>
                                    }
                                }
                                cleaned_buffer[i] = '\0';  // Terminer la chaîne propre
 8000610:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8000614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000618:	4413      	add	r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]

                                // Vérifier la longueur après nettoyage
                                if (strlen(cleaned_buffer) == MAX_PER_LENGTH) {
 800061e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fd94 	bl	8000150 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	2b08      	cmp	r3, #8
 800062c:	d128      	bne.n	8000680 <StateMachineTask+0x434>
                                    strncpy(per_value, cleaned_buffer, MAX_PER_LENGTH);
 800062e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000632:	2208      	movs	r2, #8
 8000634:	4619      	mov	r1, r3
 8000636:	4871      	ldr	r0, [pc, #452]	@ (80007fc <StateMachineTask+0x5b0>)
 8000638:	f006 fbb0 	bl	8006d9c <strncpy>

                                    char cmd[30];
                                    sprintf(cmd, "PER=%s\r", per_value);
 800063c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000640:	4a6e      	ldr	r2, [pc, #440]	@ (80007fc <StateMachineTask+0x5b0>)
 8000642:	496f      	ldr	r1, [pc, #444]	@ (8000800 <StateMachineTask+0x5b4>)
 8000644:	4618      	mov	r0, r3
 8000646:	f006 fb7f 	bl	8006d48 <siprintf>
                                    send_UART1(cmd);
 800064a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fe08 	bl	8001264 <send_UART1>
                                    osDelay(10);
 8000654:	200a      	movs	r0, #10
 8000656:	f003 ff11 	bl	800447c <osDelay>
                                    send_UART1(cmd);
 800065a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fe00 	bl	8001264 <send_UART1>
                                    send_UART3("PER envoyé. Attente confirmation…\n");
 8000664:	4867      	ldr	r0, [pc, #412]	@ (8000804 <StateMachineTask+0x5b8>)
 8000666:	f000 fe73 	bl	8001350 <send_UART3>
                                    osDelay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066e:	f003 ff05 	bl	800447c <osDelay>
                                    send_UART1("PER\r");
 8000672:	4865      	ldr	r0, [pc, #404]	@ (8000808 <StateMachineTask+0x5bc>)
 8000674:	f000 fdf6 	bl	8001264 <send_UART1>
                                    osDelay(50);
 8000678:	2032      	movs	r0, #50	@ 0x32
 800067a:	f003 feff 	bl	800447c <osDelay>
                                } else {
                                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\n");
                            }
                        }
            break;
 800067e:	e0a3      	b.n	80007c8 <StateMachineTask+0x57c>
                                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\n");
 8000680:	4862      	ldr	r0, [pc, #392]	@ (800080c <StateMachineTask+0x5c0>)
 8000682:	f000 fe65 	bl	8001350 <send_UART3>
            break;
 8000686:	e09f      	b.n	80007c8 <StateMachineTask+0x57c>

        case 2:
            if (!action_done) {
 8000688:	4b56      	ldr	r3, [pc, #344]	@ (80007e4 <StateMachineTask+0x598>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	f040 809d 	bne.w	80007cc <StateMachineTask+0x580>
                send_UART3("ETAPE 2\n");
 8000692:	485f      	ldr	r0, [pc, #380]	@ (8000810 <StateMachineTask+0x5c4>)
 8000694:	f000 fe5c 	bl	8001350 <send_UART3>
                send_UART3("Mettez tous les DIPs sur ON, une fois fait appuyez sur le bouton\n");
 8000698:	485e      	ldr	r0, [pc, #376]	@ (8000814 <StateMachineTask+0x5c8>)
 800069a:	f000 fe59 	bl	8001350 <send_UART3>
                send_UART1("STS\r");
 800069e:	485e      	ldr	r0, [pc, #376]	@ (8000818 <StateMachineTask+0x5cc>)
 80006a0:	f000 fde0 	bl	8001264 <send_UART1>
                action_done = 1;
 80006a4:	4b4f      	ldr	r3, [pc, #316]	@ (80007e4 <StateMachineTask+0x598>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80006aa:	e08f      	b.n	80007cc <StateMachineTask+0x580>
        case 3:
            if (!action_done) {
 80006ac:	4b4d      	ldr	r3, [pc, #308]	@ (80007e4 <StateMachineTask+0x598>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	f040 808d 	bne.w	80007d0 <StateMachineTask+0x584>
                send_UART3("Test STS en cours...\n");
 80006b6:	4859      	ldr	r0, [pc, #356]	@ (800081c <StateMachineTask+0x5d0>)
 80006b8:	f000 fe4a 	bl	8001350 <send_UART3>
                action_done = 1;
 80006bc:	4b49      	ldr	r3, [pc, #292]	@ (80007e4 <StateMachineTask+0x598>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80006c2:	e085      	b.n	80007d0 <StateMachineTask+0x584>
        case 4:
            if (!action_done) {
 80006c4:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <StateMachineTask+0x598>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 8083 	bne.w	80007d4 <StateMachineTask+0x588>
                send_UART3("ETAPE 4\n");
 80006ce:	4854      	ldr	r0, [pc, #336]	@ (8000820 <StateMachineTask+0x5d4>)
 80006d0:	f000 fe3e 	bl	8001350 <send_UART3>
                send_UART3("Test entrees en cours...\n");
 80006d4:	4853      	ldr	r0, [pc, #332]	@ (8000824 <StateMachineTask+0x5d8>)
 80006d6:	f000 fe3b 	bl	8001350 <send_UART3>
                // Activation de toutes les entrées
                HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006e0:	483f      	ldr	r0, [pc, #252]	@ (80007e0 <StateMachineTask+0x594>)
 80006e2:	f001 fce6 	bl	80020b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ec:	484e      	ldr	r0, [pc, #312]	@ (8000828 <StateMachineTask+0x5dc>)
 80006ee:	f001 fce0 	bl	80020b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2108      	movs	r1, #8
 80006f6:	483a      	ldr	r0, [pc, #232]	@ (80007e0 <StateMachineTask+0x594>)
 80006f8:	f001 fcdb 	bl	80020b2 <HAL_GPIO_WritePin>
                HAL_Delay(300);
 80006fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000700:	f000 ff74 	bl	80015ec <HAL_Delay>
                send_UART1("STS\r");
 8000704:	4844      	ldr	r0, [pc, #272]	@ (8000818 <StateMachineTask+0x5cc>)
 8000706:	f000 fdad 	bl	8001264 <send_UART1>
                action_done = 1;
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <StateMachineTask+0x598>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000710:	e060      	b.n	80007d4 <StateMachineTask+0x588>
        case 5:
            send_UART3("Test du décompteur...\n Veuillez valider en appuyant sur le BP si toutes les leds s'allument correctement et dans le bon ordre sur le décompteur");
 8000712:	4846      	ldr	r0, [pc, #280]	@ (800082c <StateMachineTask+0x5e0>)
 8000714:	f000 fe1c 	bl	8001350 <send_UART3>
            send_UART1("TST=1\r");
 8000718:	4845      	ldr	r0, [pc, #276]	@ (8000830 <StateMachineTask+0x5e4>)
 800071a:	f000 fda3 	bl	8001264 <send_UART1>
            break;
 800071e:	e05a      	b.n	80007d6 <StateMachineTask+0x58a>
        case 6:
            send_UART1("TST=0\r");
 8000720:	4844      	ldr	r0, [pc, #272]	@ (8000834 <StateMachineTask+0x5e8>)
 8000722:	f000 fd9f 	bl	8001264 <send_UART1>
            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072c:	482c      	ldr	r0, [pc, #176]	@ (80007e0 <StateMachineTask+0x594>)
 800072e:	f001 fcc0 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000738:	483b      	ldr	r0, [pc, #236]	@ (8000828 <StateMachineTask+0x5dc>)
 800073a:	f001 fcba 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	4827      	ldr	r0, [pc, #156]	@ (80007e0 <StateMachineTask+0x594>)
 8000744:	f001 fcb5 	bl	80020b2 <HAL_GPIO_WritePin>
            send_UART3("Test des ampoules ...\n Vérifiez que les ampoules s'éteignent et se rallument et que le défaut sur l'écran LCD de la carte corresponde bien à la bonne ampoule");
 8000748:	483b      	ldr	r0, [pc, #236]	@ (8000838 <StateMachineTask+0x5ec>)
 800074a:	f000 fe01 	bl	8001350 <send_UART3>
            HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	4823      	ldr	r0, [pc, #140]	@ (80007e0 <StateMachineTask+0x594>)
 8000754:	f001 fcad 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_Delay(1500);
 8000758:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800075c:	f000 ff46 	bl	80015ec <HAL_Delay>
            HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2120      	movs	r1, #32
 8000764:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <StateMachineTask+0x594>)
 8000766:	f001 fca4 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2140      	movs	r1, #64	@ 0x40
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <StateMachineTask+0x594>)
 8000770:	f001 fc9f 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_Delay(1500);
 8000774:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000778:	f000 ff38 	bl	80015ec <HAL_Delay>
            HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	@ 0x40
 8000780:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <StateMachineTask+0x594>)
 8000782:	f001 fc96 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <StateMachineTask+0x594>)
 800078c:	f001 fc91 	bl	80020b2 <HAL_GPIO_WritePin>
            HAL_Delay(1500);
 8000790:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000794:	f000 ff2a 	bl	80015ec <HAL_Delay>
            HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <StateMachineTask+0x594>)
 800079e:	f001 fc88 	bl	80020b2 <HAL_GPIO_WritePin>
            break;
 80007a2:	e018      	b.n	80007d6 <StateMachineTask+0x58a>
        case 7:
            send_UART3("Test de l'infrarouge...\n Veuillez valider en appuyant sur le BP si la télécommande fonctionne en émission et réception");
 80007a4:	4825      	ldr	r0, [pc, #148]	@ (800083c <StateMachineTask+0x5f0>)
 80007a6:	f000 fdd3 	bl	8001350 <send_UART3>
            break;
 80007aa:	e014      	b.n	80007d6 <StateMachineTask+0x58a>
        case 8:
            HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b2:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <StateMachineTask+0x594>)
 80007b4:	f001 fc7d 	bl	80020b2 <HAL_GPIO_WritePin>
            send_UART3("Test de l'accu...\n Veuillez vérifier que vous avez bien le message suppression batterie qui s'affiche à l'écran, si le cas validez");
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <StateMachineTask+0x5f4>)
 80007ba:	f000 fdc9 	bl	8001350 <send_UART3>
            break;
 80007be:	e00a      	b.n	80007d6 <StateMachineTask+0x58a>
        default:
            break;
 80007c0:	bf00      	nop
 80007c2:	e008      	b.n	80007d6 <StateMachineTask+0x58a>
            break;
 80007c4:	bf00      	nop
 80007c6:	e006      	b.n	80007d6 <StateMachineTask+0x58a>
            break;
 80007c8:	bf00      	nop
 80007ca:	e004      	b.n	80007d6 <StateMachineTask+0x58a>
            break;
 80007cc:	bf00      	nop
 80007ce:	e002      	b.n	80007d6 <StateMachineTask+0x58a>
            break;
 80007d0:	bf00      	nop
 80007d2:	e000      	b.n	80007d6 <StateMachineTask+0x58a>
            break;
 80007d4:	bf00      	nop
    }
}
 80007d6:	bf00      	nop
 80007d8:	37f8      	adds	r7, #248	@ 0xf8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000089 	.word	0x20000089
 80007e8:	08007898 	.word	0x08007898
 80007ec:	080078a4 	.word	0x080078a4
 80007f0:	080078cc 	.word	0x080078cc
 80007f4:	20000374 	.word	0x20000374
 80007f8:	20000378 	.word	0x20000378
 80007fc:	20000080 	.word	0x20000080
 8000800:	080078fc 	.word	0x080078fc
 8000804:	08007904 	.word	0x08007904
 8000808:	0800792c 	.word	0x0800792c
 800080c:	08007934 	.word	0x08007934
 8000810:	08007974 	.word	0x08007974
 8000814:	08007980 	.word	0x08007980
 8000818:	080079c4 	.word	0x080079c4
 800081c:	080079cc 	.word	0x080079cc
 8000820:	080079e4 	.word	0x080079e4
 8000824:	080079f0 	.word	0x080079f0
 8000828:	40010800 	.word	0x40010800
 800082c:	08007a0c 	.word	0x08007a0c
 8000830:	08007aa0 	.word	0x08007aa0
 8000834:	08007aa8 	.word	0x08007aa8
 8000838:	08007ab0 	.word	0x08007ab0
 800083c:	08007b54 	.word	0x08007b54
 8000840:	08007bd0 	.word	0x08007bd0

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fe9e 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f832 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f000 f948 	bl	8000ae4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000854:	f000 f8c8 	bl	80009e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000858:	f000 fcd4 	bl	8001204 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800085c:	f000 fd18 	bl	8001290 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000860:	f000 fd46 	bl	80012f0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000864:	f000 f882 	bl	800096c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000868:	f000 f8ec 	bl	8000a44 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800086c:	f003 fd2c 	bl	80042c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <main+0x58>)
 8000872:	2100      	movs	r1, #0
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <main+0x5c>)
 8000876:	f003 fd6f 	bl	8004358 <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <main+0x60>)
 800087e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 8000880:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <main+0x64>)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <main+0x68>)
 8000886:	f003 fd67 	bl	8004358 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <main+0x6c>)
 800088e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000890:	f003 fd3c 	bl	800430c <osKernelStart>
 8000894:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE END 3 */
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08007c98 	.word	0x08007c98
 80008a0:	08000c57 	.word	0x08000c57
 80008a4:	20000158 	.word	0x20000158
 80008a8:	08007cbc 	.word	0x08007cbc
 80008ac:	08000c41 	.word	0x08000c41
 80008b0:	2000015c 	.word	0x2000015c

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	@ 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008be:	2228      	movs	r2, #40	@ 0x28
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fa62 	bl	8006d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000900:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fd46 	bl	800239c <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000916:	f000 f9b7 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 ffb2 	bl	80028a0 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000942:	f000 f9a1 	bl	8000c88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000946:	2302      	movs	r3, #2
 8000948:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800094a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800094e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f002 f962 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095e:	f000 f993 	bl	8000c88 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	@ 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_ADC1_Init+0x74>)
 800097e:	4a19      	ldr	r2, [pc, #100]	@ (80009e4 <MX_ADC1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_ADC1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_ADC1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_ADC1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_ADC1_Init+0x74>)
 8000996:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800099a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_ADC1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_ADC1_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_ADC1_Init+0x74>)
 80009aa:	f000 fe43 	bl	8001634 <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f968 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009b8:	2308      	movs	r3, #8
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_ADC1_Init+0x74>)
 80009ca:	f000 ff0b 	bl	80017e4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009d4:	f000 f958 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000008c 	.word	0x2000008c
 80009e4:	40012400 	.word	0x40012400

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 fb75 	bl	8002114 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f92a 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000bc 	.word	0x200000bc
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <MX_TIM1_Init+0x9c>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000a8e:	f002 f97b 	bl	8002d88 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 f8f6 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000aaa:	f002 faff 	bl	80030ac <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ab4:	f000 f8e8 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_TIM1_Init+0x98>)
 8000ac6:	f002 fce1 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ad0:	f000 f8da 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	40012c00 	.word	0x40012c00

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a4b      	ldr	r2, [pc, #300]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b49      	ldr	r3, [pc, #292]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b46      	ldr	r3, [pc, #280]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a45      	ldr	r2, [pc, #276]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b43      	ldr	r3, [pc, #268]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b40      	ldr	r3, [pc, #256]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b3d      	ldr	r3, [pc, #244]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b3a      	ldr	r3, [pc, #232]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a39      	ldr	r2, [pc, #228]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <MX_GPIO_Init+0x148>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000b5e:	4834      	ldr	r0, [pc, #208]	@ (8000c30 <MX_GPIO_Init+0x14c>)
 8000b60:	f001 faa7 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin|LED_CEL_Pin|OUT2_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f648 0110 	movw	r1, #34832	@ 0x8810
 8000b6a:	4832      	ldr	r0, [pc, #200]	@ (8000c34 <MX_GPIO_Init+0x150>)
 8000b6c:	f001 faa1 	bl	80020b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000b70:	2200      	movs	r2, #0
 8000b72:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 8000b76:	4830      	ldr	r0, [pc, #192]	@ (8000c38 <MX_GPIO_Init+0x154>)
 8000b78:	f001 fa9b 	bl	80020b2 <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|BUZZER_Pin;
 8000b7c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	4826      	ldr	r0, [pc, #152]	@ (8000c30 <MX_GPIO_Init+0x14c>)
 8000b96:	f001 f8f1 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 8000b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4820      	ldr	r0, [pc, #128]	@ (8000c30 <MX_GPIO_Init+0x14c>)
 8000bb0:	f001 f8e4 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP3_Pin|BP2_Pin|BP3_Pin
 8000bb4:	23e3      	movs	r3, #227	@ 0xe3
 8000bb6:	613b      	str	r3, [r7, #16]
                          |BP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <MX_GPIO_Init+0x150>)
 8000bc8:	f001 f8d8 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin|LED_CEL_Pin|OUT2_Pin;
 8000bcc:	f648 0310 	movw	r3, #34832	@ 0x8810
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_GPIO_Init+0x150>)
 8000be6:	f001 f8c9 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000bea:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 8000bee:	613b      	str	r3, [r7, #16]
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_GPIO_Init+0x154>)
 8000c04:	f001 f8ba 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_GPIO_Init+0x158>)
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MX_GPIO_Init+0x154>)
 8000c1e:	f001 f8ad 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	10110000 	.word	0x10110000

08000c40 <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	for(;;){
		StateMachineTask();
 8000c48:	f7ff fb00 	bl	800024c <StateMachineTask>
		osDelay(50);
 8000c4c:	2032      	movs	r0, #50	@ 0x32
 8000c4e:	f003 fc15 	bl	800447c <osDelay>
		StateMachineTask();
 8000c52:	bf00      	nop
 8000c54:	e7f8      	b.n	8000c48 <StartStateMachineTask+0x8>

08000c56 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
	//HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 8000c5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c62:	f003 fc0b 	bl	800447c <osDelay>
 8000c66:	e7fa      	b.n	8000c5e <StartDefaultTask+0x8>

08000c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c7a:	f000 fc9b 	bl	80015b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_UART3("ERROR");
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <Error_Handler+0x10>)
 8000c92:	f000 fb5d 	bl	8001350 <send_UART3>
 8000c96:	e7fb      	b.n	8000c90 <Error_Handler+0x8>
 8000c98:	08007c78 	.word	0x08007c78

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_MspInit+0x68>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_MspInit+0x68>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a11      	ldr	r2, [pc, #68]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x68>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f000 ff72 	bl	8001bc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x6c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x6c>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <HAL_ADC_MspInit+0x6c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d121      	bne.n	8000d70 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a0c      	ldr	r2, [pc, #48]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_ADC_MspInit+0x70>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	2303      	movs	r3, #3
 8000d62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d6c:	f001 f806 	bl	8001d7c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40012400 	.word	0x40012400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <HAL_I2C_MspInit+0x90>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d132      	bne.n	8000e0a <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000dbc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <HAL_I2C_MspInit+0x98>)
 8000dd2:	f000 ffd3 	bl	8001d7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_I2C_MspInit+0x9c>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <HAL_I2C_MspInit+0x9c>)
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_I2C_MspInit+0x94>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010c00 	.word	0x40010c00
 8000e20:	40010000 	.word	0x40010000

08000e24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <HAL_TIM_Base_MspInit+0x34>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10b      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_TIM_Base_MspInit+0x38>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_TIM_Base_MspInit+0x38>)
 8000e3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_TIM_Base_MspInit+0x38>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff8 <HAL_UART_MspInit+0x198>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d13a      	bne.n	8000ef6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e80:	4b5e      	ldr	r3, [pc, #376]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a5d      	ldr	r2, [pc, #372]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a57      	ldr	r2, [pc, #348]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b55      	ldr	r3, [pc, #340]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	484e      	ldr	r0, [pc, #312]	@ (8001000 <HAL_UART_MspInit+0x1a0>)
 8000ec6:	f000 ff59 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 8000eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4619      	mov	r1, r3
 8000ede:	4848      	ldr	r0, [pc, #288]	@ (8001000 <HAL_UART_MspInit+0x1a0>)
 8000ee0:	f000 ff4c 	bl	8001d7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	2025      	movs	r0, #37	@ 0x25
 8000eea:	f000 fe6a 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eee:	2025      	movs	r0, #37	@ 0x25
 8000ef0:	f000 fe83 	bl	8001bfa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ef4:	e07c      	b.n	8000ff0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a42      	ldr	r2, [pc, #264]	@ (8001004 <HAL_UART_MspInit+0x1a4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d138      	bne.n	8000f72 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b3e      	ldr	r3, [pc, #248]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	4a3d      	ldr	r2, [pc, #244]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0a:	61d3      	str	r3, [r2, #28]
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b38      	ldr	r3, [pc, #224]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a37      	ldr	r2, [pc, #220]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b35      	ldr	r3, [pc, #212]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 8000f30:	2304      	movs	r3, #4
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4619      	mov	r1, r3
 8000f42:	482f      	ldr	r0, [pc, #188]	@ (8001000 <HAL_UART_MspInit+0x1a0>)
 8000f44:	f000 ff1a 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4829      	ldr	r0, [pc, #164]	@ (8001000 <HAL_UART_MspInit+0x1a0>)
 8000f5c:	f000 ff0e 	bl	8001d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2105      	movs	r1, #5
 8000f64:	2026      	movs	r0, #38	@ 0x26
 8000f66:	f000 fe2c 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f6a:	2026      	movs	r0, #38	@ 0x26
 8000f6c:	f000 fe45 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 8000f70:	e03e      	b.n	8000ff0 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <HAL_UART_MspInit+0x1a8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d139      	bne.n	8000ff0 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f86:	61d3      	str	r3, [r2, #28]
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_UART_MspInit+0x19c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4812      	ldr	r0, [pc, #72]	@ (800100c <HAL_UART_MspInit+0x1ac>)
 8000fc2:	f000 fedb 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480c      	ldr	r0, [pc, #48]	@ (800100c <HAL_UART_MspInit+0x1ac>)
 8000fdc:	f000 fece 	bl	8001d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	2027      	movs	r0, #39	@ 0x27
 8000fe6:	f000 fdec 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fea:	2027      	movs	r0, #39	@ 0x27
 8000fec:	f000 fe05 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	@ 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010800 	.word	0x40010800
 8001004:	40004400 	.word	0x40004400
 8001008:	40004800 	.word	0x40004800
 800100c:	40010c00 	.word	0x40010c00

08001010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	@ 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <HAL_InitTick+0xe8>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a33      	ldr	r2, [pc, #204]	@ (80010f8 <HAL_InitTick+0xe8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <HAL_InitTick+0xe8>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800103e:	f107 0210 	add.w	r2, r7, #16
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fd99 	bl	8002b80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001058:	f001 fd6a 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 800105c:	6378      	str	r0, [r7, #52]	@ 0x34
 800105e:	e004      	b.n	800106a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001060:	f001 fd66 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8001064:	4603      	mov	r3, r0
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106c:	4a23      	ldr	r2, [pc, #140]	@ (80010fc <HAL_InitTick+0xec>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	3b01      	subs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <HAL_InitTick+0xf0>)
 800107a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <HAL_InitTick+0xf0>)
 8001082:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001086:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001088:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <HAL_InitTick+0xf0>)
 800108a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <HAL_InitTick+0xf0>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_InitTick+0xf0>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_InitTick+0xf0>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010a0:	4817      	ldr	r0, [pc, #92]	@ (8001100 <HAL_InitTick+0xf0>)
 80010a2:	f001 fe71 	bl	8002d88 <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d11b      	bne.n	80010ec <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010b4:	4812      	ldr	r0, [pc, #72]	@ (8001100 <HAL_InitTick+0xf0>)
 80010b6:	f001 feb7 	bl	8002e28 <HAL_TIM_Base_Start_IT>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d111      	bne.n	80010ec <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c8:	201c      	movs	r0, #28
 80010ca:	f000 fd96 	bl	8001bfa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d808      	bhi.n	80010e6 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	201c      	movs	r0, #28
 80010da:	f000 fd72 	bl	8001bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_InitTick+0xf4>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e002      	b.n	80010ec <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3738      	adds	r7, #56	@ 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	431bde83 	.word	0x431bde83
 8001100:	20000160 	.word	0x20000160
 8001104:	20000004 	.word	0x20000004

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <NMI_Handler+0x4>

08001110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <UsageFault_Handler+0x4>

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM2_IRQHandler+0x10>)
 8001142:	f001 fec3 	bl	8002ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000160 	.word	0x20000160

08001150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <USART1_IRQHandler+0x10>)
 8001156:	f002 fb09 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200001ac 	.word	0x200001ac

08001164 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <USART2_IRQHandler+0x10>)
 800116a:	f002 faff 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003e0 	.word	0x200003e0

08001178 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <USART3_IRQHandler+0x10>)
 800117e:	f002 faf5 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000032c 	.word	0x2000032c

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f005 fe76 	bl	8006eac <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20005000 	.word	0x20005000
 80011ec:	00000400 	.word	0x00000400
 80011f0:	200001a8 	.word	0x200001a8
 80011f4:	20001f98 	.word	0x20001f98

080011f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <MX_USART1_UART_Init+0x58>)
 800120c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001210:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 800123c:	f002 f996 	bl	800356c <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f7ff fd1f 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 800124a:	2201      	movs	r2, #1
 800124c:	4904      	ldr	r1, [pc, #16]	@ (8001260 <MX_USART1_UART_Init+0x5c>)
 800124e:	4802      	ldr	r0, [pc, #8]	@ (8001258 <MX_USART1_UART_Init+0x54>)
 8001250:	f002 fa67 	bl	8003722 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001ac 	.word	0x200001ac
 800125c:	40013800 	.word	0x40013800
 8001260:	200001f5 	.word	0x200001f5

08001264 <send_UART1>:



void send_UART1(const char *msg)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7fe ff6f 	bl	8000150 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <send_UART1+0x28>)
 800127e:	f002 f9c5 	bl	800360c <HAL_UART_Transmit>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001ac 	.word	0x200001ac

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 8001296:	4a14      	ldr	r2, [pc, #80]	@ (80012e8 <MX_USART2_UART_Init+0x58>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 800129c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4807      	ldr	r0, [pc, #28]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012c8:	f002 f950 	bl	800356c <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f7ff fcd9 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 80012d6:	2201      	movs	r2, #1
 80012d8:	4904      	ldr	r1, [pc, #16]	@ (80012ec <MX_USART2_UART_Init+0x5c>)
 80012da:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <MX_USART2_UART_Init+0x54>)
 80012dc:	f002 fa21 	bl	8003722 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200003e0 	.word	0x200003e0
 80012e8:	40004400 	.word	0x40004400
 80012ec:	20000429 	.word	0x20000429

080012f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 80012f6:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <MX_USART3_UART_Init+0x58>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001326:	4807      	ldr	r0, [pc, #28]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 8001328:	f002 f920 	bl	800356c <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f7ff fca9 	bl	8000c88 <Error_Handler>
  }


  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	4904      	ldr	r1, [pc, #16]	@ (800134c <MX_USART3_UART_Init+0x5c>)
 800133a:	4802      	ldr	r0, [pc, #8]	@ (8001344 <MX_USART3_UART_Init+0x54>)
 800133c:	f002 f9f1 	bl	8003722 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000032c 	.word	0x2000032c
 8001348:	40004800 	.word	0x40004800
 800134c:	20000375 	.word	0x20000375

08001350 <send_UART3>:


void send_UART3(const char *msg)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7fe fef9 	bl	8000150 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4803      	ldr	r0, [pc, #12]	@ (8001378 <send_UART3+0x28>)
 800136a:	f002 f94f 	bl	800360c <HAL_UART_Transmit>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000032c 	.word	0x2000032c

0800137c <HAL_UART_RxCpltCallback>:
}


// Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); // DEBUG
 8001384:	2110      	movs	r1, #16
 8001386:	4845      	ldr	r0, [pc, #276]	@ (800149c <HAL_UART_RxCpltCallback+0x120>)
 8001388:	f000 feab 	bl	80020e2 <HAL_GPIO_TogglePin>

    // RS232_418
    if (huart->Instance == USART1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a43      	ldr	r2, [pc, #268]	@ (80014a0 <HAL_UART_RxCpltCallback+0x124>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12a      	bne.n	80013ec <HAL_UART_RxCpltCallback+0x70>
        {
            // Stocker le tick de réception à chaque char reçu
            last_rx_tick1 = HAL_GetTick();
 8001396:	f000 f91f 	bl	80015d8 <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	4a41      	ldr	r2, [pc, #260]	@ (80014a4 <HAL_UART_RxCpltCallback+0x128>)
 800139e:	6013      	str	r3, [r2, #0]

            if (rx_char1 != '\0' && rx_index1 < RX_BUFFER1_SIZE - 1)
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_UART_RxCpltCallback+0x12c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <HAL_UART_RxCpltCallback+0x4e>
 80013a8:	4b40      	ldr	r3, [pc, #256]	@ (80014ac <HAL_UART_RxCpltCallback+0x130>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 80013b0:	d80b      	bhi.n	80013ca <HAL_UART_RxCpltCallback+0x4e>
            {
                rx_buffer1[rx_index1++] = rx_char1;
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <HAL_UART_RxCpltCallback+0x130>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	b291      	uxth	r1, r2
 80013ba:	4a3c      	ldr	r2, [pc, #240]	@ (80014ac <HAL_UART_RxCpltCallback+0x130>)
 80013bc:	8011      	strh	r1, [r2, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <HAL_UART_RxCpltCallback+0x12c>)
 80013c2:	7819      	ldrb	r1, [r3, #0]
 80013c4:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_UART_RxCpltCallback+0x134>)
 80013c6:	5499      	strb	r1, [r3, r2]
 80013c8:	e00b      	b.n	80013e2 <HAL_UART_RxCpltCallback+0x66>
            }
            else
            {
                rx_buffer1[rx_index1] = '\0';
 80013ca:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <HAL_UART_RxCpltCallback+0x130>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_UART_RxCpltCallback+0x134>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]
                message_complete1 = 1;
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_UART_RxCpltCallback+0x138>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
                rx_index1 = 0;
 80013dc:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <HAL_UART_RxCpltCallback+0x130>)
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]
            }

            HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	4930      	ldr	r1, [pc, #192]	@ (80014a8 <HAL_UART_RxCpltCallback+0x12c>)
 80013e6:	4834      	ldr	r0, [pc, #208]	@ (80014b8 <HAL_UART_RxCpltCallback+0x13c>)
 80013e8:	f002 f99b 	bl	8003722 <HAL_UART_Receive_IT>
        }

    // RS232_COM
    if (huart->Instance == USART3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a32      	ldr	r2, [pc, #200]	@ (80014bc <HAL_UART_RxCpltCallback+0x140>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d124      	bne.n	8001440 <HAL_UART_RxCpltCallback+0xc4>
    {
        if (rx_char3 != '\r' && rx_index3 < RX_BUFFER3_SIZE - 1)
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d00f      	beq.n	800141e <HAL_UART_RxCpltCallback+0xa2>
 80013fe:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2b62      	cmp	r3, #98	@ 0x62
 8001404:	d80b      	bhi.n	800141e <HAL_UART_RxCpltCallback+0xa2>
        {
            rx_buffer3[rx_index3++] = rx_char3;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	b291      	uxth	r1, r2
 800140e:	4a2d      	ldr	r2, [pc, #180]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001410:	8011      	strh	r1, [r2, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 8001416:	7819      	ldrb	r1, [r3, #0]
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_UART_RxCpltCallback+0x14c>)
 800141a:	5499      	strb	r1, [r3, r2]
 800141c:	e00b      	b.n	8001436 <HAL_UART_RxCpltCallback+0xba>
        }
        else
        {
            rx_buffer3[rx_index3] = '\r';
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_UART_RxCpltCallback+0x14c>)
 8001426:	210d      	movs	r1, #13
 8001428:	5499      	strb	r1, [r3, r2]
            message_complete3 = 1;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_UART_RxCpltCallback+0x150>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
            rx_index3 = 0;
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <HAL_UART_RxCpltCallback+0x148>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	4921      	ldr	r1, [pc, #132]	@ (80014c0 <HAL_UART_RxCpltCallback+0x144>)
 800143a:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <HAL_UART_RxCpltCallback+0x154>)
 800143c:	f002 f971 	bl	8003722 <HAL_UART_Receive_IT>
        //send_UART3("COM!"); // DEBUG
    }

    // RS485
    if (huart->Instance == USART2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <HAL_UART_RxCpltCallback+0x158>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d124      	bne.n	8001494 <HAL_UART_RxCpltCallback+0x118>
    {
        if (rx_char2 != '\0' && rx_index2 < RX_BUFFER2_SIZE - 1)
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_UART_RxCpltCallback+0x15c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00f      	beq.n	8001472 <HAL_UART_RxCpltCallback+0xf6>
 8001452:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	2b30      	cmp	r3, #48	@ 0x30
 8001458:	d80b      	bhi.n	8001472 <HAL_UART_RxCpltCallback+0xf6>
        {
            rx_buffer2[rx_index2++] = rx_char2;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	b291      	uxth	r1, r2
 8001462:	4a1e      	ldr	r2, [pc, #120]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 8001464:	8011      	strh	r1, [r2, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_UART_RxCpltCallback+0x15c>)
 800146a:	7819      	ldrb	r1, [r3, #0]
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <HAL_UART_RxCpltCallback+0x164>)
 800146e:	5499      	strb	r1, [r3, r2]
 8001470:	e00b      	b.n	800148a <HAL_UART_RxCpltCallback+0x10e>
        }
        else
        {

             rx_buffer2[rx_index2] = '\0';
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_UART_RxCpltCallback+0x164>)
 800147a:	2100      	movs	r1, #0
 800147c:	5499      	strb	r1, [r3, r2]
             message_complete2 = 1;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_UART_RxCpltCallback+0x168>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
             rx_index2 = 0;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_UART_RxCpltCallback+0x160>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 800148a:	2201      	movs	r2, #1
 800148c:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <HAL_UART_RxCpltCallback+0x15c>)
 800148e:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <HAL_UART_RxCpltCallback+0x16c>)
 8001490:	f002 f947 	bl	8003722 <HAL_UART_Receive_IT>
    }
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40013800 	.word	0x40013800
 80014a4:	20000328 	.word	0x20000328
 80014a8:	200001f5 	.word	0x200001f5
 80014ac:	20000324 	.word	0x20000324
 80014b0:	200001f8 	.word	0x200001f8
 80014b4:	200001f4 	.word	0x200001f4
 80014b8:	200001ac 	.word	0x200001ac
 80014bc:	40004800 	.word	0x40004800
 80014c0:	20000375 	.word	0x20000375
 80014c4:	200003dc 	.word	0x200003dc
 80014c8:	20000378 	.word	0x20000378
 80014cc:	20000374 	.word	0x20000374
 80014d0:	2000032c 	.word	0x2000032c
 80014d4:	40004400 	.word	0x40004400
 80014d8:	20000429 	.word	0x20000429
 80014dc:	2000045e 	.word	0x2000045e
 80014e0:	2000042c 	.word	0x2000042c
 80014e4:	20000428 	.word	0x20000428
 80014e8:	200003e0 	.word	0x200003e0

080014ec <Check_UART1_Timeout>:

void Check_UART1_Timeout(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    if (!message_complete1 && rx_index1 > 0)
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Check_UART1_Timeout+0x40>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d117      	bne.n	8001528 <Check_UART1_Timeout+0x3c>
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <Check_UART1_Timeout+0x44>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <Check_UART1_Timeout+0x3c>
    {
        if ((HAL_GetTick() - last_rx_tick1) > RX_TIMEOUT_MS)
 8001500:	f000 f86a 	bl	80015d8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <Check_UART1_Timeout+0x48>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2bc8      	cmp	r3, #200	@ 0xc8
 800150e:	d90b      	bls.n	8001528 <Check_UART1_Timeout+0x3c>
        {
            rx_buffer1[rx_index1] = '\0';
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <Check_UART1_Timeout+0x44>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <Check_UART1_Timeout+0x4c>)
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
            message_complete1 = 1;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <Check_UART1_Timeout+0x40>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
            rx_index1 = 0;
 8001522:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <Check_UART1_Timeout+0x44>)
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001f4 	.word	0x200001f4
 8001530:	20000324 	.word	0x20000324
 8001534:	20000328 	.word	0x20000328
 8001538:	200001f8 	.word	0x200001f8

0800153c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff fe5c 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	@ (8001570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001542:	490c      	ldr	r1, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001544:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001558:	4c09      	ldr	r4, [pc, #36]	@ (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f005 fca7 	bl	8006eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff f96b 	bl	8000844 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001578:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 800157c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001580:	20001f94 	.word	0x20001f94

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_Init+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_Init+0x28>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fb07 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f7ff fd36 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fb7a 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_IncTick+0x1c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_IncTick+0x20>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a03      	ldr	r2, [pc, #12]	@ (80015d4 <HAL_IncTick+0x20>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000460 	.word	0x20000460

080015d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b02      	ldr	r3, [pc, #8]	@ (80015e8 <HAL_GetTick+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000460 	.word	0x20000460

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fff0 	bl	80015d8 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffe0 	bl	80015d8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0be      	b.n	80017d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fb4a 	bl	8000d0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f9ab 	bl	80019d4 <ADC_ConversionStop_Disable>
 800167e:	4603      	mov	r3, r0
 8001680:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8099 	bne.w	80017c2 <HAL_ADC_Init+0x18e>
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8095 	bne.w	80017c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7b1b      	ldrb	r3, [r3, #12]
 80016ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016cc:	d003      	beq.n	80016d6 <HAL_ADC_Init+0xa2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_ADC_Init+0xa8>
 80016d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016da:	e000      	b.n	80016de <HAL_ADC_Init+0xaa>
 80016dc:	2300      	movs	r3, #0
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7d1b      	ldrb	r3, [r3, #20]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d119      	bne.n	8001720 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7b1b      	ldrb	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	035a      	lsls	r2, r3, #13
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	e00b      	b.n	8001720 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b28      	ldr	r3, [pc, #160]	@ (80017dc <HAL_ADC_Init+0x1a8>)
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	430b      	orrs	r3, r1
 8001746:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001750:	d003      	beq.n	800175a <HAL_ADC_Init+0x126>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d104      	bne.n	8001764 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	3b01      	subs	r3, #1
 8001760:	051b      	lsls	r3, r3, #20
 8001762:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	430a      	orrs	r2, r1
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_ADC_Init+0x1ac>)
 8001780:	4013      	ands	r3, r2
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	429a      	cmp	r2, r3
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800179e:	e018      	b.n	80017d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f023 0312 	bic.w	r3, r3, #18
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c0:	e007      	b.n	80017d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c6:	f043 0210 	orr.w	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	ffe1f7fd 	.word	0xffe1f7fd
 80017e0:	ff1f0efe 	.word	0xff1f0efe

080017e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x20>
 8001800:	2302      	movs	r3, #2
 8001802:	e0dc      	b.n	80019be <HAL_ADC_ConfigChannel+0x1da>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b06      	cmp	r3, #6
 8001812:	d81c      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b05      	subs	r3, #5
 8001826:	221f      	movs	r2, #31
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	4019      	ands	r1, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b05      	subs	r3, #5
 8001840:	fa00 f203 	lsl.w	r2, r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	@ 0x34
 800184c:	e03c      	b.n	80018c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d81c      	bhi.n	8001890 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b23      	subs	r3, #35	@ 0x23
 8001868:	221f      	movs	r2, #31
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	4019      	ands	r1, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3b23      	subs	r3, #35	@ 0x23
 8001882:	fa00 f203 	lsl.w	r2, r0, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	631a      	str	r2, [r3, #48]	@ 0x30
 800188e:	e01b      	b.n	80018c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b41      	subs	r3, #65	@ 0x41
 80018a2:	221f      	movs	r2, #31
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4019      	ands	r1, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b41      	subs	r3, #65	@ 0x41
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	d91c      	bls.n	800190a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	3b1e      	subs	r3, #30
 80018e2:	2207      	movs	r2, #7
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4019      	ands	r1, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6898      	ldr	r0, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	e019      	b.n	800193e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6919      	ldr	r1, [r3, #16]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	2207      	movs	r2, #7
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4019      	ands	r1, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6898      	ldr	r0, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b10      	cmp	r3, #16
 8001944:	d003      	beq.n	800194e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800194a:	2b11      	cmp	r3, #17
 800194c:	d132      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d125      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d126      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001974:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b10      	cmp	r3, #16
 800197c:	d11a      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <HAL_ADC_ConfigChannel+0x1e8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9a      	lsrs	r2, r3, #18
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001994:	e002      	b.n	800199c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x1b2>
 80019a2:	e007      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40012400 	.word	0x40012400
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d12e      	bne.n	8001a4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fdeb 	bl	80015d8 <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a04:	e01b      	b.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a06:	f7ff fde7 	bl	80015d8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d914      	bls.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d0dc      	beq.n	8001a06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <__NVIC_EnableIRQ+0x34>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	@ (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff4f 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff64 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ffb2 	bl	8001b48 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff81 	bl	8001af4 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff57 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d008      	beq.n	8001c40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e020      	b.n	8001c82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020e 	bic.w	r2, r2, #14
 8001c4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d005      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e051      	b.n	8001d54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 020e 	bic.w	r2, r2, #14
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_DMA_Abort_IT+0xd4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d029      	beq.n	8001d2e <HAL_DMA_Abort_IT+0xa2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_DMA_Abort_IT+0xd8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <HAL_DMA_Abort_IT+0x9e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_DMA_Abort_IT+0xdc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x98>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_DMA_Abort_IT+0xe0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_Abort_IT+0x92>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_DMA_Abort_IT+0xe4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00a      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_DMA_Abort_IT+0xe8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_DMA_Abort_IT+0x86>
 8001d0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d10:	e00e      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d16:	e00b      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d1c:	e008      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	e005      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d28:	e002      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_DMA_Abort_IT+0xec>)
 8001d32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
    } 
  }
  return status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020008 	.word	0x40020008
 8001d64:	4002001c 	.word	0x4002001c
 8001d68:	40020030 	.word	0x40020030
 8001d6c:	40020044 	.word	0x40020044
 8001d70:	40020058 	.word	0x40020058
 8001d74:	4002006c 	.word	0x4002006c
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	@ 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e169      	b.n	8002064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8158 	bne.w	800205e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a9a      	ldr	r2, [pc, #616]	@ (800201c <HAL_GPIO_Init+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d05e      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001db8:	4a98      	ldr	r2, [pc, #608]	@ (800201c <HAL_GPIO_Init+0x2a0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d875      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dbe:	4a98      	ldr	r2, [pc, #608]	@ (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d058      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a96      	ldr	r2, [pc, #600]	@ (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d86f      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dca:	4a96      	ldr	r2, [pc, #600]	@ (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d052      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a94      	ldr	r2, [pc, #592]	@ (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d869      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dd6:	4a94      	ldr	r2, [pc, #592]	@ (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a92      	ldr	r2, [pc, #584]	@ (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d863      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001de2:	4a92      	ldr	r2, [pc, #584]	@ (800202c <HAL_GPIO_Init+0x2b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d046      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001de8:	4a90      	ldr	r2, [pc, #576]	@ (800202c <HAL_GPIO_Init+0x2b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d85d      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d82a      	bhi.n	8001e48 <HAL_GPIO_Init+0xcc>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d859      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001df6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <HAL_GPIO_Init+0x80>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001eab 	.word	0x08001eab
 8001e10:	08001eab 	.word	0x08001eab
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001eab 	.word	0x08001eab
 8001e1c:	08001eab 	.word	0x08001eab
 8001e20:	08001eab 	.word	0x08001eab
 8001e24:	08001eab 	.word	0x08001eab
 8001e28:	08001eab 	.word	0x08001eab
 8001e2c:	08001eab 	.word	0x08001eab
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	08001eab 	.word	0x08001eab
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	4a79      	ldr	r2, [pc, #484]	@ (8002030 <HAL_GPIO_Init+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e029      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e024      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01f      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e01a      	b.n	8001eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e013      	b.n	8001eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e009      	b.n	8001eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x130>
          break;
 8001eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	@ 0xff
 8001eb0:	d801      	bhi.n	8001eb6 <HAL_GPIO_Init+0x13a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_Init+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	@ 0xff
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_GPIO_Init+0x14c>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x152>
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f14:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	@ (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1e0>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7a:	492f      	ldr	r1, [pc, #188]	@ (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	492c      	ldr	r1, [pc, #176]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4928      	ldr	r1, [pc, #160]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4922      	ldr	r1, [pc, #136]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	491e      	ldr	r1, [pc, #120]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4918      	ldr	r1, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4914      	ldr	r1, [pc, #80]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	490e      	ldr	r1, [pc, #56]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x2e2>
 800201a:	bf00      	nop
 800201c:	10320000 	.word	0x10320000
 8002020:	10310000 	.word	0x10310000
 8002024:	10220000 	.word	0x10220000
 8002028:	10210000 	.word	0x10210000
 800202c:	10120000 	.word	0x10120000
 8002030:	10110000 	.word	0x10110000
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_GPIO_Init+0x304>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	@ (8002080 <HAL_GPIO_Init+0x304>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae8e 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	@ 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	787b      	ldrb	r3, [r7, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ce:	e003      	b.n	80020d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	041a      	lsls	r2, r3, #16
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43d9      	mvns	r1, r3
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e12b      	b.n	800237e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fe22 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	@ 0x24
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002178:	f000 fcda 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a81      	ldr	r2, [pc, #516]	@ (8002388 <HAL_I2C_Init+0x274>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d807      	bhi.n	8002198 <HAL_I2C_Init+0x84>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a80      	ldr	r2, [pc, #512]	@ (800238c <HAL_I2C_Init+0x278>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e006      	b.n	80021a6 <HAL_I2C_Init+0x92>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a7d      	ldr	r2, [pc, #500]	@ (8002390 <HAL_I2C_Init+0x27c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	bf94      	ite	ls
 80021a0:	2301      	movls	r3, #1
 80021a2:	2300      	movhi	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0e7      	b.n	800237e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4a78      	ldr	r2, [pc, #480]	@ (8002394 <HAL_I2C_Init+0x280>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9b      	lsrs	r3, r3, #18
 80021b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002388 <HAL_I2C_Init+0x274>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d802      	bhi.n	80021e8 <HAL_I2C_Init+0xd4>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	e009      	b.n	80021fc <HAL_I2C_Init+0xe8>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	4a69      	ldr	r2, [pc, #420]	@ (8002398 <HAL_I2C_Init+0x284>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	3301      	adds	r3, #1
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	430b      	orrs	r3, r1
 8002202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800220e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	495c      	ldr	r1, [pc, #368]	@ (8002388 <HAL_I2C_Init+0x274>)
 8002218:	428b      	cmp	r3, r1
 800221a:	d819      	bhi.n	8002250 <HAL_I2C_Init+0x13c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e59      	subs	r1, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fbb1 f3f3 	udiv	r3, r1, r3
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002230:	400b      	ands	r3, r1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_I2C_Init+0x138>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e59      	subs	r1, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	3301      	adds	r3, #1
 8002246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224a:	e051      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 800224c:	2304      	movs	r3, #4
 800224e:	e04f      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_I2C_Init+0x168>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	440b      	add	r3, r1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e012      	b.n	80022a2 <HAL_I2C_Init+0x18e>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	0099      	lsls	r1, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Init+0x196>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e022      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <HAL_I2C_Init+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e58      	subs	r0, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	440b      	add	r3, r1
 80022c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ce:	e00f      	b.n	80022f0 <HAL_I2C_Init+0x1dc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	0099      	lsls	r1, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	6809      	ldr	r1, [r1, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800231e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6911      	ldr	r1, [r2, #16]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68d2      	ldr	r2, [r2, #12]
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	000186a0 	.word	0x000186a0
 800238c:	001e847f 	.word	0x001e847f
 8002390:	003d08ff 	.word	0x003d08ff
 8002394:	431bde83 	.word	0x431bde83
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e272      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b92      	ldr	r3, [pc, #584]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
 80023d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b89      	ldr	r3, [pc, #548]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x12c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d168      	bne.n	80024c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e24c      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x76>
 8002404:	4b80      	ldr	r3, [pc, #512]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7f      	ldr	r2, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e02e      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b7b      	ldr	r3, [pc, #492]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7a      	ldr	r2, [pc, #488]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b78      	ldr	r3, [pc, #480]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a77      	ldr	r2, [pc, #476]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0xbc>
 800243e:	4b72      	ldr	r3, [pc, #456]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a71      	ldr	r2, [pc, #452]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6f      	ldr	r3, [pc, #444]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xd4>
 8002458:	4b6b      	ldr	r3, [pc, #428]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6a      	ldr	r2, [pc, #424]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b68      	ldr	r3, [pc, #416]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a67      	ldr	r2, [pc, #412]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff f8ae 	bl	80015d8 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff f8aa 	bl	80015d8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e200      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b5d      	ldr	r3, [pc, #372]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xe4>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff f89a 	bl	80015d8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f896 	bl	80015d8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	@ 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1ec      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x10c>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1c0      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4939      	ldr	r1, [pc, #228]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	@ (800260c <HAL_RCC_OscConfig+0x270>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff f84f 	bl	80015d8 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff f84b 	bl	80015d8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1a1      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4927      	ldr	r1, [pc, #156]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b26      	ldr	r3, [pc, #152]	@ (800260c <HAL_RCC_OscConfig+0x270>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff f82e 	bl	80015d8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff f82a 	bl	80015d8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e180      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03a      	beq.n	8002620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <HAL_RCC_OscConfig+0x274>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7ff f80e 	bl	80015d8 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff f80a 	bl	80015d8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e160      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fafe 	bl	8002be0 <RCC_Delay>
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7fe fff4 	bl	80015d8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe fff0 	bl	80015d8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d908      	bls.n	8002614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e146      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	42420000 	.word	0x42420000
 8002610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b92      	ldr	r3, [pc, #584]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e9      	bne.n	80025f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a6 	beq.w	800277a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b8b      	ldr	r3, [pc, #556]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a87      	ldr	r2, [pc, #540]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b82      	ldr	r3, [pc, #520]	@ (8002864 <HAL_RCC_OscConfig+0x4c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d118      	bne.n	8002698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b7f      	ldr	r3, [pc, #508]	@ (8002864 <HAL_RCC_OscConfig+0x4c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7e      	ldr	r2, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0x4c8>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe ffb1 	bl	80015d8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267a:	f7fe ffad 	bl	80015d8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	@ 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e103      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x4c8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x312>
 80026a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e02d      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a69      	ldr	r2, [pc, #420]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a66      	ldr	r2, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	e01c      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x356>
 80026d8:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a60      	ldr	r2, [pc, #384]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0x36e>
 80026f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d015      	beq.n	800273e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002712:	f7fe ff61 	bl	80015d8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe ff5d 	bl	80015d8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0b1      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002730:	4b4b      	ldr	r3, [pc, #300]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ee      	beq.n	800271a <HAL_RCC_OscConfig+0x37e>
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe ff4b 	bl	80015d8 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe ff47 	bl	80015d8 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e09b      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	4b40      	ldr	r3, [pc, #256]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d105      	bne.n	800277a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276e:	4b3c      	ldr	r3, [pc, #240]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4a3b      	ldr	r2, [pc, #236]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8087 	beq.w	8002892 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d061      	beq.n	8002854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d146      	bne.n	8002826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b33      	ldr	r3, [pc, #204]	@ (8002868 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe ff1b 	bl	80015d8 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe ff17 	bl	80015d8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e06d      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b8:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ce:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4921      	ldr	r1, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a19      	ldr	r1, [r3, #32]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	430b      	orrs	r3, r1
 80027f2:	491b      	ldr	r1, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe feeb 	bl	80015d8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe fee7 	bl	80015d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e03d      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x46a>
 8002824:	e035      	b.n	8002892 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <HAL_RCC_OscConfig+0x4cc>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fed4 	bl	80015d8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fed0 	bl	80015d8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e026      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x498>
 8002852:	e01e      	b.n	8002892 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e019      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
 8002868:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_OscConfig+0x500>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	429a      	cmp	r2, r3
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d0      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b67      	ldr	r3, [pc, #412]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4965      	ldr	r1, [pc, #404]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0b8      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a58      	ldr	r2, [pc, #352]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002914:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800291e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	494d      	ldr	r1, [pc, #308]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d040      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e073      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e06b      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4936      	ldr	r1, [pc, #216]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe fe22 	bl	80015d8 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fe1e 	bl	80015d8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e053      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d210      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4922      	ldr	r1, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e032      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4916      	ldr	r1, [pc, #88]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2e:	f000 f821 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490a      	ldr	r1, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a09      	ldr	r2, [pc, #36]	@ (8002a6c <HAL_RCC_ClockConfig+0x1cc>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1d0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fade 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08007ce0 	.word	0x08007ce0
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x36>
 8002aa2:	e027      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	613b      	str	r3, [r7, #16]
      break;
 8002aa8:	e027      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	4a17      	ldr	r2, [pc, #92]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0c5b      	lsrs	r3, r3, #17
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad6:	fb03 f202 	mul.w	r2, r3, r2
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e004      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	613b      	str	r3, [r7, #16]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002af6:	613b      	str	r3, [r7, #16]
      break;
 8002af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afa:	693b      	ldr	r3, [r7, #16]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	08007cf8 	.word	0x08007cf8
 8002b14:	08007d08 	.word	0x08007d08
 8002b18:	003d0900 	.word	0x003d0900

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b34:	f7ff fff2 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08007cf0 	.word	0x08007cf0

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08007cf0 	.word	0x08007cf0

08002b80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_RCC_GetClockConfig+0x58>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_RCC_GetClockConfig+0x58>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_GetClockConfig+0x58>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_RCC_GetClockConfig+0x58>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_GetClockConfig+0x5c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0207 	and.w	r2, r3, #7
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40022000 	.word	0x40022000

08002be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <RCC_Delay+0x34>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <RCC_Delay+0x38>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bfc:	bf00      	nop
  }
  while (Delay --);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	60fa      	str	r2, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <RCC_Delay+0x1c>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000000 	.word	0x20000000
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b4c      	ldr	r3, [pc, #304]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a42      	ldr	r2, [pc, #264]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fcac 	bl	80015d8 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fca8 	bl	80015d8 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e06d      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca2:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02e      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d027      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b2e      	ldr	r3, [pc, #184]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd6:	4a29      	ldr	r2, [pc, #164]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fc77 	bl	80015d8 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fc73 	bl	80015d8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e036      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4917      	ldr	r1, [pc, #92]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	490b      	ldr	r1, [pc, #44]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
 8002d84:	42420440 	.word	0x42420440

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f838 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fa5c 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e03a      	b.n	8002eb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_TIM_Base_Start_IT+0x98>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6a:	d009      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d111      	bne.n	8002ea4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d010      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea2:	e007      	b.n	8002eb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d020      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01b      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0202 	mvn.w	r2, #2
 8002f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f998 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f98b 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f99a 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d020      	beq.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0204 	mvn.w	r2, #4
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f972 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f965 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f974 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0208 	mvn.w	r2, #8
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f94c 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f93f 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f94e 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d020      	beq.n	8003014 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0210 	mvn.w	r2, #16
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f926 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f919 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f928 	bl	800325e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00c      	beq.n	8003038 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0201 	mvn.w	r2, #1
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fe18 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa7f 	bl	800355a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8f8 	bl	8003270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0220 	mvn.w	r2, #32
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa52 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0b4      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x186>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003100:	d03e      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xd4>
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003106:	f200 8087 	bhi.w	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310e:	f000 8086 	beq.w	800321e <HAL_TIM_ConfigClockSource+0x172>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	d87f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b70      	cmp	r3, #112	@ 0x70
 800311a:	d01a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xa6>
 800311c:	2b70      	cmp	r3, #112	@ 0x70
 800311e:	d87b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b60      	cmp	r3, #96	@ 0x60
 8003122:	d050      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003124:	2b60      	cmp	r3, #96	@ 0x60
 8003126:	d877      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b50      	cmp	r3, #80	@ 0x50
 800312a:	d03c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xfa>
 800312c:	2b50      	cmp	r3, #80	@ 0x50
 800312e:	d873      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	d058      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d86f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b30      	cmp	r3, #48	@ 0x30
 800313a:	d064      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b30      	cmp	r3, #48	@ 0x30
 800313e:	d86b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d060      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d867      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05c      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d05a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	e062      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	f000 f974 	bl	800344e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	609a      	str	r2, [r3, #8]
      break;
 800317e:	e04f      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	f000 f95d 	bl	800344e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a2:	609a      	str	r2, [r3, #8]
      break;
 80031a4:	e03c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 f8d4 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2150      	movs	r1, #80	@ 0x50
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f92b 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031c4:	e02c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 f8f2 	bl	80033bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2160      	movs	r1, #96	@ 0x60
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f91b 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031e4:	e01c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 f8b4 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2140      	movs	r1, #64	@ 0x40
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f90b 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003204:	e00c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 f902 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003216:	e003      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e000      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800321e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
	...

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2f      	ldr	r2, [pc, #188]	@ (8003354 <TIM_Base_SetConfig+0xd0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x30>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x30>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <TIM_Base_SetConfig+0xd4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <TIM_Base_SetConfig+0xd8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a22      	ldr	r2, [pc, #136]	@ (8003354 <TIM_Base_SetConfig+0xd0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0x62>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <TIM_Base_SetConfig+0xd4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <TIM_Base_SetConfig+0xd8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <TIM_Base_SetConfig+0xd0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d103      	bne.n	800332c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]
  }
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800

08003360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800338a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 030a 	bic.w	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0210 	bic.w	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 0307 	orr.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003468:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e046      	b.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f0:	d009      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10c      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800350c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e042      	b.n	8003604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fc64 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	@ 0x24
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fdb7 	bl	8004124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b20      	cmp	r3, #32
 800362a:	d175      	bne.n	8003718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_UART_Transmit+0x2c>
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e06e      	b.n	800371a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2221      	movs	r2, #33	@ 0x21
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800364a:	f7fd ffc5 	bl	80015d8 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003664:	d108      	bne.n	8003678 <HAL_UART_Transmit+0x6c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003680:	e02e      	b.n	80036e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fb1c 	bl	8003cca <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e03a      	b.n	800371a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3302      	adds	r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e007      	b.n	80036d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1cb      	bne.n	8003682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2140      	movs	r1, #64	@ 0x40
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fae8 	bl	8003cca <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e006      	b.n	800371a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	4613      	mov	r3, r2
 800372e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d112      	bne.n	8003762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Receive_IT+0x26>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e00b      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	461a      	mov	r2, r3
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb0f 	bl	8003d7c <UART_Start_Receive_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	e000      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ba      	sub	sp, #232	@ 0xe8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fbec 	bl	8003fa8 <UART_Receive_IT>
      return;
 80037d0:	e25b      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80de 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
 80037dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80d1 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 81f2 	beq.w	8003c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb77 	bl	8003fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_UART_IRQHandler+0x17a>
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04f      	beq.n	8003986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa81 	bl	8003dee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d041      	beq.n	800397e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800392a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800393e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1d9      	bne.n	80038fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	4a7e      	ldr	r2, [pc, #504]	@ (8003b4c <HAL_UART_IRQHandler+0x3e0>)
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe f996 	bl	8001c8c <HAL_DMA_Abort_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	4610      	mov	r0, r2
 8003972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00e      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f993 	bl	8003ca2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e00a      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f98f 	bl	8003ca2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e006      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f98b 	bl	8003ca2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003992:	e175      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	bf00      	nop
    return;
 8003996:	e173      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 814f 	bne.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8148 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8141 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80b6 	beq.w	8003b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8145 	beq.w	8003c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f080 813e 	bcs.w	8003c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	f000 8088 	beq.w	8003b2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a48:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1d9      	bne.n	8003a1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3314      	adds	r3, #20
 8003a88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a8c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e1      	bne.n	8003a68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ac8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ace:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e3      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b10:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f875 	bl	8001c16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8b6 	bl	8003cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b48:	e09c      	b.n	8003c84 <HAL_UART_IRQHandler+0x518>
 8003b4a:	bf00      	nop
 8003b4c:	08003eb3 	.word	0x08003eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808e 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8089 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e3      	bne.n	8003bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0310 	bic.w	r3, r3, #16
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e3      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f83b 	bl	8003cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c3e:	e023      	b.n	8003c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f93e 	bl	8003eda <UART_Transmit_IT>
    return;
 8003c5e:	e014      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f97d 	bl	8003f78 <UART_EndTransmit_IT>
    return;
 8003c7e:	e004      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c88:	bf00      	nop
  }
}
 8003c8a:	37e8      	adds	r7, #232	@ 0xe8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cda:	e03b      	b.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d037      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fd fc78 	bl	80015d8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e03a      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d020      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b40      	cmp	r3, #64	@ 0x40
 8003d16:	d01d      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d116      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f856 	bl	8003dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2208      	movs	r2, #8
 8003d46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e00f      	b.n	8003d74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d0b4      	beq.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2222      	movs	r2, #34	@ 0x22
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b095      	sub	sp, #84	@ 0x54
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e16:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d119      	bne.n	8003e9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e86:	61ba      	str	r2, [r7, #24]
 8003e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6979      	ldr	r1, [r7, #20]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	613b      	str	r3, [r7, #16]
   return(result);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ea8:	bf00      	nop
 8003eaa:	3754      	adds	r7, #84	@ 0x54
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fee8 	bl	8003ca2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b21      	cmp	r3, #33	@ 0x21
 8003eec:	d13e      	bne.n	8003f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef6:	d114      	bne.n	8003f22 <UART_Transmit_IT+0x48>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d110      	bne.n	8003f22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]
 8003f20:	e008      	b.n	8003f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6211      	str	r1, [r2, #32]
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4619      	mov	r1, r3
 8003f42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10f      	bne.n	8003f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fe79 	bl	8003c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b22      	cmp	r3, #34	@ 0x22
 8003fba:	f040 80ae 	bne.w	800411a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc6:	d117      	bne.n	8003ff8 <UART_Receive_IT+0x50>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d113      	bne.n	8003ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ff6:	e026      	b.n	8004046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400a:	d007      	beq.n	800401c <UART_Receive_IT+0x74>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <UART_Receive_IT+0x82>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e008      	b.n	800403c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004036:	b2da      	uxtb	r2, r3
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29b      	uxth	r3, r3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4619      	mov	r1, r3
 8004054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004056:	2b00      	cmp	r3, #0
 8004058:	d15d      	bne.n	8004116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0220 	bic.w	r2, r2, #32
 8004068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d135      	bne.n	800410c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f023 0310 	bic.w	r3, r3, #16
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	623a      	str	r2, [r7, #32]
 80040c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	69f9      	ldr	r1, [r7, #28]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d10a      	bne.n	80040fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fdd5 	bl	8003cb4 <HAL_UARTEx_RxEventCallback>
 800410a:	e002      	b.n	8004112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fd f935 	bl	800137c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e002      	b.n	800411c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3730      	adds	r7, #48	@ 0x30
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800415e:	f023 030c 	bic.w	r3, r3, #12
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	430b      	orrs	r3, r1
 800416a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <UART_SetConfig+0x114>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d103      	bne.n	8004194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe fce4 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	e002      	b.n	800419a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004194:	f7fe fccc 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8004198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	4a22      	ldr	r2, [pc, #136]	@ (800423c <UART_SetConfig+0x118>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	0119      	lsls	r1, r3, #4
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <UART_SetConfig+0x118>)
 80041d2:	fba3 0302 	umull	r0, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2064      	movs	r0, #100	@ 0x64
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	@ 0x32
 80041e4:	4a15      	ldr	r2, [pc, #84]	@ (800423c <UART_SetConfig+0x118>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f0:	4419      	add	r1, r3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <UART_SetConfig+0x118>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2064      	movs	r0, #100	@ 0x64
 8004212:	fb00 f303 	mul.w	r3, r0, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	@ 0x32
 800421c:	4a07      	ldr	r2, [pc, #28]	@ (800423c <UART_SetConfig+0x118>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	440a      	add	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40013800 	.word	0x40013800
 800423c:	51eb851f 	.word	0x51eb851f

08004240 <__NVIC_SetPriority>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	@ (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	@ (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <SysTick_Handler+0x1c>)
 800429a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800429c:	f001 fd38 	bl	8005d10 <xTaskGetSchedulerState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042a6:	f002 fadf 	bl	8006868 <xPortSysTickHandler>
  }
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	e000e010 	.word	0xe000e010

080042b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042b8:	2100      	movs	r1, #0
 80042ba:	f06f 0004 	mvn.w	r0, #4
 80042be:	f7ff ffbf 	bl	8004240 <__NVIC_SetPriority>
#endif
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ce:	f3ef 8305 	mrs	r3, IPSR
 80042d2:	603b      	str	r3, [r7, #0]
  return(result);
 80042d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042da:	f06f 0305 	mvn.w	r3, #5
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e00c      	b.n	80042fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042e2:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <osKernelInitialize+0x40>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042ea:	4b07      	ldr	r3, [pc, #28]	@ (8004308 <osKernelInitialize+0x40>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	e002      	b.n	80042fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042fc:	687b      	ldr	r3, [r7, #4]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	20000464 	.word	0x20000464

0800430c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004312:	f3ef 8305 	mrs	r3, IPSR
 8004316:	603b      	str	r3, [r7, #0]
  return(result);
 8004318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <osKernelStart+0x1a>
    stat = osErrorISR;
 800431e:	f06f 0305 	mvn.w	r3, #5
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e010      	b.n	8004348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <osKernelStart+0x48>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d109      	bne.n	8004342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800432e:	f7ff ffc1 	bl	80042b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <osKernelStart+0x48>)
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004338:	f001 f88a 	bl	8005450 <vTaskStartScheduler>
      stat = osOK;
 800433c:	2300      	movs	r3, #0
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	e002      	b.n	8004348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004348:	687b      	ldr	r3, [r7, #4]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000464 	.word	0x20000464

08004358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b08e      	sub	sp, #56	@ 0x38
 800435c:	af04      	add	r7, sp, #16
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004368:	f3ef 8305 	mrs	r3, IPSR
 800436c:	617b      	str	r3, [r7, #20]
  return(result);
 800436e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d17e      	bne.n	8004472 <osThreadNew+0x11a>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07b      	beq.n	8004472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800437e:	2318      	movs	r3, #24
 8004380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d045      	beq.n	800441e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <osThreadNew+0x48>
        name = attr->name;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <osThreadNew+0x6e>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b38      	cmp	r3, #56	@ 0x38
 80043b8:	d805      	bhi.n	80043c6 <osThreadNew+0x6e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <osThreadNew+0x72>
        return (NULL);
 80043c6:	2300      	movs	r3, #0
 80043c8:	e054      	b.n	8004474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <osThreadNew+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80043e8:	d90a      	bls.n	8004400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <osThreadNew+0xa8>
        mem = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e010      	b.n	8004422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10c      	bne.n	8004422 <osThreadNew+0xca>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <osThreadNew+0xca>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <osThreadNew+0xca>
          mem = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e001      	b.n	8004422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d110      	bne.n	800444a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004430:	9202      	str	r2, [sp, #8]
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a3a      	ldr	r2, [r7, #32]
 800443c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fe12 	bl	8005068 <xTaskCreateStatic>
 8004444:	4603      	mov	r3, r0
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e013      	b.n	8004472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d110      	bne.n	8004472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	b29a      	uxth	r2, r3
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fe60 	bl	8005128 <xTaskCreate>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <osThreadNew+0x11a>
            hTask = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004472:	693b      	ldr	r3, [r7, #16]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3728      	adds	r7, #40	@ 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004484:	f3ef 8305 	mrs	r3, IPSR
 8004488:	60bb      	str	r3, [r7, #8]
  return(result);
 800448a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <osDelay+0x1c>
    stat = osErrorISR;
 8004490:	f06f 0305 	mvn.w	r3, #5
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e007      	b.n	80044a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 ff9e 	bl	80053e4 <vTaskDelay>
    }
  }

  return (stat);
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a06      	ldr	r2, [pc, #24]	@ (80044dc <vApplicationGetIdleTaskMemory+0x28>)
 80044c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80044ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2280      	movs	r2, #128	@ 0x80
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	20000468 	.word	0x20000468
 80044e0:	20000510 	.word	0x20000510

080044e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a07      	ldr	r2, [pc, #28]	@ (8004510 <vApplicationGetTimerTaskMemory+0x2c>)
 80044f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <vApplicationGetTimerTaskMemory+0x30>)
 80044fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004502:	601a      	str	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000710 	.word	0x20000710
 8004514:	200007b8 	.word	0x200007b8

08004518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f103 0208 	add.w	r2, r3, #8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f103 0208 	add.w	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f103 0208 	add.w	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d103      	bne.n	80045d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e00c      	b.n	80045ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3308      	adds	r3, #8
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e002      	b.n	80045e2 <vListInsert+0x2e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d2f6      	bcs.n	80045dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6852      	ldr	r2, [r2, #4]
 8004644:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d103      	bne.n	8004658 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1e5a      	subs	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
	...

08004678 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046a4:	f002 f862 	bl	800676c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	441a      	add	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	3b01      	subs	r3, #1
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	22ff      	movs	r2, #255	@ 0xff
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	22ff      	movs	r2, #255	@ 0xff
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d114      	bne.n	8004724 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01a      	beq.n	8004738 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3310      	adds	r3, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f93c 	bl	8005984 <xTaskRemoveFromEventList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <xQueueGenericReset+0xd0>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e009      	b.n	8004738 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3310      	adds	r3, #16
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fef5 	bl	8004518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3324      	adds	r3, #36	@ 0x24
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fef0 	bl	8004518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004738:	f002 f848 	bl	80067cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800473c:	2301      	movs	r3, #1
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	@ 0x38
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <xQueueGenericCreateStatic+0x56>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <xQueueGenericCreateStatic+0x5a>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <xQueueGenericCreateStatic+0x5c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <xQueueGenericCreateStatic+0x84>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <xQueueGenericCreateStatic+0x88>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <xQueueGenericCreateStatic+0x8a>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	61fb      	str	r3, [r7, #28]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047f2:	2350      	movs	r3, #80	@ 0x50
 80047f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b50      	cmp	r3, #80	@ 0x50
 80047fa:	d00b      	beq.n	8004814 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	61bb      	str	r3, [r7, #24]
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004814:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004828:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f805 	bl	8004846 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800483e:	4618      	mov	r0, r3
 8004840:	3730      	adds	r7, #48	@ 0x30
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e002      	b.n	8004868 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004874:	2101      	movs	r1, #1
 8004876:	69b8      	ldr	r0, [r7, #24]
 8004878:	f7ff fefe 	bl	8004678 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	@ 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xQueueGenericSend+0x34>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSend+0x42>
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSend+0x46>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSend+0x48>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xQueueGenericSend+0x64>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <xQueueGenericSend+0x72>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <xQueueGenericSend+0x76>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueGenericSend+0x78>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <xQueueGenericSend+0x94>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004920:	f001 f9f6 	bl	8005d10 <xTaskGetSchedulerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <xQueueGenericSend+0xa4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <xQueueGenericSend+0xa8>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <xQueueGenericSend+0xaa>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <xQueueGenericSend+0xc6>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61fb      	str	r3, [r7, #28]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004952:	f001 ff0b 	bl	800676c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <xQueueGenericSend+0xdc>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d129      	bne.n	80049bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800496e:	f000 fa0f 	bl	8004d90 <prvCopyDataToQueue>
 8004972:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	3324      	adds	r3, #36	@ 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f000 ffff 	bl	8005984 <xTaskRemoveFromEventList>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800498c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a8c <xQueueGenericSend+0x200>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	e00a      	b.n	80049b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049a4:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <xQueueGenericSend+0x200>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049b4:	f001 ff0a 	bl	80067cc <vPortExitCritical>
				return pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e063      	b.n	8004a84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049c2:	f001 ff03 	bl	80067cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e05c      	b.n	8004a84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f839 	bl	8005a4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049de:	f001 fef5 	bl	80067cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049e2:	f000 fda5 	bl	8005530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049e6:	f001 fec1 	bl	800676c <vPortEnterCritical>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d103      	bne.n	8004a00 <xQueueGenericSend+0x174>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a06:	b25b      	sxtb	r3, r3
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d103      	bne.n	8004a16 <xQueueGenericSend+0x18a>
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a16:	f001 fed9 	bl	80067cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a1a:	1d3a      	adds	r2, r7, #4
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f828 	bl	8005a78 <xTaskCheckForTimeOut>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d124      	bne.n	8004a78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a30:	f000 faa6 	bl	8004f80 <prvIsQueueFull>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ff4c 	bl	80058e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a4a:	f000 fa31 	bl	8004eb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a4e:	f000 fd7d 	bl	800554c <xTaskResumeAll>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f47f af7c 	bne.w	8004952 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <xQueueGenericSend+0x200>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	e772      	b.n	8004952 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6e:	f000 fa1f 	bl	8004eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a72:	f000 fd6b 	bl	800554c <xTaskResumeAll>
 8004a76:	e76c      	b.n	8004952 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7a:	f000 fa19 	bl	8004eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a7e:	f000 fd65 	bl	800554c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3738      	adds	r7, #56	@ 0x38
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b090      	sub	sp, #64	@ 0x40
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <xQueueGenericSendFromISR+0x3e>
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericSendFromISR+0x42>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSendFromISR+0x44>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d103      	bne.n	8004afe <xQueueGenericSendFromISR+0x6e>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <xQueueGenericSendFromISR+0x72>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueGenericSendFromISR+0x74>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	623b      	str	r3, [r7, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	e7fd      	b.n	8004b1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b20:	f001 fee6 	bl	80068f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b24:	f3ef 8211 	mrs	r2, BASEPRI
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <xQueueGenericSendFromISR+0xc2>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d12f      	bne.n	8004bb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b68:	f000 f912 	bl	8004d90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d112      	bne.n	8004b9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	3324      	adds	r3, #36	@ 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fefe 	bl	8005984 <xTaskRemoveFromEventList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e007      	b.n	8004bac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	b25a      	sxtb	r2, r3
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004bb0:	e001      	b.n	8004bb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3740      	adds	r7, #64	@ 0x40
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	@ 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xQueueReceive+0x32>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	623b      	str	r3, [r7, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <xQueueReceive+0x40>
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <xQueueReceive+0x44>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <xQueueReceive+0x46>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <xQueueReceive+0x62>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61fb      	str	r3, [r7, #28]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2e:	f001 f86f 	bl	8005d10 <xTaskGetSchedulerState>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <xQueueReceive+0x72>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <xQueueReceive+0x76>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <xQueueReceive+0x78>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <xQueueReceive+0x94>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	61bb      	str	r3, [r7, #24]
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c60:	f001 fd84 	bl	800676c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01f      	beq.n	8004cb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c74:	f000 f8f6 	bl	8004e64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fe79 	bl	8005984 <xTaskRemoveFromEventList>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c98:	4b3c      	ldr	r3, [pc, #240]	@ (8004d8c <xQueueReceive+0x1c0>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca8:	f001 fd90 	bl	80067cc <vPortExitCritical>
				return pdPASS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e069      	b.n	8004d84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb6:	f001 fd89 	bl	80067cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e062      	b.n	8004d84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 febf 	bl	8005a4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd2:	f001 fd7b 	bl	80067cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd6:	f000 fc2b 	bl	8005530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cda:	f001 fd47 	bl	800676c <vPortEnterCritical>
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <xQueueReceive+0x128>
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d103      	bne.n	8004d0a <xQueueReceive+0x13e>
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d0a:	f001 fd5f 	bl	80067cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 feae 	bl	8005a78 <xTaskCheckForTimeOut>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d123      	bne.n	8004d6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d24:	f000 f916 	bl	8004f54 <prvIsQueueEmpty>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	3324      	adds	r3, #36	@ 0x24
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fdd2 	bl	80058e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3e:	f000 f8b7 	bl	8004eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d42:	f000 fc03 	bl	800554c <xTaskResumeAll>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d189      	bne.n	8004c60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d8c <xQueueReceive+0x1c0>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	e780      	b.n	8004c60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d60:	f000 f8a6 	bl	8004eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d64:	f000 fbf2 	bl	800554c <xTaskResumeAll>
 8004d68:	e77a      	b.n	8004c60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6c:	f000 f8a0 	bl	8004eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d70:	f000 fbec 	bl	800554c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d76:	f000 f8ed 	bl	8004f54 <prvIsQueueEmpty>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f43f af6f 	beq.w	8004c60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	@ 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d14d      	bne.n	8004e52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ffc6 	bl	8005d4c <xTaskPriorityDisinherit>
 8004dc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e043      	b.n	8004e52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d119      	bne.n	8004e04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6858      	ldr	r0, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	f002 f892 	bl	8006f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d32b      	bcc.n	8004e52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	e026      	b.n	8004e52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68d8      	ldr	r0, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	f002 f878 	bl	8006f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d207      	bcs.n	8004e40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	425b      	negs	r3, r3
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d105      	bne.n	8004e52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e5a:	697b      	ldr	r3, [r7, #20]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d303      	bcc.n	8004e98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68d9      	ldr	r1, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6838      	ldr	r0, [r7, #0]
 8004ea4:	f002 f82e 	bl	8006f04 <memcpy>
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb8:	f001 fc58 	bl	800676c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec4:	e011      	b.n	8004eea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d012      	beq.n	8004ef4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3324      	adds	r3, #36	@ 0x24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fd56 	bl	8005984 <xTaskRemoveFromEventList>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ede:	f000 fe2f 	bl	8005b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dce9      	bgt.n	8004ec6 <prvUnlockQueue+0x16>
 8004ef2:	e000      	b.n	8004ef6 <prvUnlockQueue+0x46>
					break;
 8004ef4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	22ff      	movs	r2, #255	@ 0xff
 8004efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004efe:	f001 fc65 	bl	80067cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f02:	f001 fc33 	bl	800676c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0e:	e011      	b.n	8004f34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3310      	adds	r3, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd31 	bl	8005984 <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f28:	f000 fe0a 	bl	8005b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dce9      	bgt.n	8004f10 <prvUnlockQueue+0x60>
 8004f3c:	e000      	b.n	8004f40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	22ff      	movs	r2, #255	@ 0xff
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f48:	f001 fc40 	bl	80067cc <vPortExitCritical>
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f5c:	f001 fc06 	bl	800676c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e001      	b.n	8004f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f72:	f001 fc2b 	bl	80067cc <vPortExitCritical>

	return xReturn;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f88:	f001 fbf0 	bl	800676c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d102      	bne.n	8004f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e001      	b.n	8004fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa2:	f001 fc13 	bl	80067cc <vPortExitCritical>

	return xReturn;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e014      	b.n	8004fea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8004ffc <vQueueAddToRegistry+0x4c>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fcc:	490b      	ldr	r1, [pc, #44]	@ (8004ffc <vQueueAddToRegistry+0x4c>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fd6:	4a09      	ldr	r2, [pc, #36]	@ (8004ffc <vQueueAddToRegistry+0x4c>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fe2:	e006      	b.n	8004ff2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b07      	cmp	r3, #7
 8004fee:	d9e7      	bls.n	8004fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	20000bb8 	.word	0x20000bb8

08005000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005010:	f001 fbac 	bl	800676c <vPortEnterCritical>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800501a:	b25b      	sxtb	r3, r3
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d103      	bne.n	800502a <vQueueWaitForMessageRestricted+0x2a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <vQueueWaitForMessageRestricted+0x40>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005040:	f001 fbc4 	bl	80067cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3324      	adds	r3, #36	@ 0x24
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fc69 	bl	800592c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff28 	bl	8004eb0 <prvUnlockQueue>
	}
 8005060:	bf00      	nop
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	@ 0x38
 800506c:	af04      	add	r7, sp, #16
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xTaskCreateStatic+0x2c>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	623b      	str	r3, [r7, #32]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	61fb      	str	r3, [r7, #28]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b2:	23a8      	movs	r3, #168	@ 0xa8
 80050b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80050ba:	d00b      	beq.n	80050d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	61bb      	str	r3, [r7, #24]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <xTaskCreateStatic+0xb2>
 80050dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01b      	beq.n	800511a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f4:	2300      	movs	r3, #0
 80050f6:	9303      	str	r3, [sp, #12]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	9302      	str	r3, [sp, #8]
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f851 	bl	80051b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005114:	f000 f8f6 	bl	8005304 <prvAddNewTaskToReadyList>
 8005118:	e001      	b.n	800511e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800511e:	697b      	ldr	r3, [r7, #20]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	@ 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	@ 0x30
 800512c:	af04      	add	r7, sp, #16
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f001 fc17 	bl	8006970 <pvPortMalloc>
 8005142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800514a:	20a8      	movs	r0, #168	@ 0xa8
 800514c:	f001 fc10 	bl	8006970 <pvPortMalloc>
 8005150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30
 800515e:	e005      	b.n	800516c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f001 fcd3 	bl	8006b0c <vPortFree>
 8005166:	e001      	b.n	800516c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d017      	beq.n	80051a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	2300      	movs	r3, #0
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9302      	str	r3, [sp, #8]
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f80f 	bl	80051b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005196:	69f8      	ldr	r0, [r7, #28]
 8005198:	f000 f8b4 	bl	8005304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e002      	b.n	80051a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051a8:	69bb      	ldr	r3, [r7, #24]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	21a5      	movs	r1, #165	@ 0xa5
 80051ce:	f001 fddd 	bl	8006d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051dc:	3b01      	subs	r3, #1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	617b      	str	r3, [r7, #20]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e012      	b.n	8005240 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	4413      	add	r3, r2
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	3334      	adds	r3, #52	@ 0x34
 800522a:	460a      	mov	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d9e9      	bls.n	800521a <prvInitialiseNewTask+0x66>
 8005246:	e000      	b.n	800524a <prvInitialiseNewTask+0x96>
			{
				break;
 8005248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005252:	e003      	b.n	800525c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b37      	cmp	r3, #55	@ 0x37
 8005260:	d901      	bls.n	8005266 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005262:	2337      	movs	r3, #55	@ 0x37
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	2200      	movs	r2, #0
 8005276:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff f96a 	bl	8004556 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	3318      	adds	r3, #24
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f965 	bl	8004556 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	3354      	adds	r3, #84	@ 0x54
 80052b6:	224c      	movs	r2, #76	@ 0x4c
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fd66 	bl	8006d8c <memset>
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	4a0d      	ldr	r2, [pc, #52]	@ (80052f8 <prvInitialiseNewTask+0x144>)
 80052c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	4a0c      	ldr	r2, [pc, #48]	@ (80052fc <prvInitialiseNewTask+0x148>)
 80052ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005300 <prvInitialiseNewTask+0x14c>)
 80052d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f001 f954 	bl	8006584 <pxPortInitialiseStack>
 80052dc:	4602      	mov	r2, r0
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ee:	bf00      	nop
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001e4c 	.word	0x20001e4c
 80052fc:	20001eb4 	.word	0x20001eb4
 8005300:	20001f1c 	.word	0x20001f1c

08005304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800530c:	f001 fa2e 	bl	800676c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005310:	4b2d      	ldr	r3, [pc, #180]	@ (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a2c      	ldr	r2, [pc, #176]	@ (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800531a:	4b2c      	ldr	r3, [pc, #176]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005322:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005328:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d110      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005330:	f000 fc2a 	bl	8005b88 <prvInitialiseTaskLists>
 8005334:	e00d      	b.n	8005352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005336:	4b26      	ldr	r3, [pc, #152]	@ (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800533e:	4b23      	ldr	r3, [pc, #140]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d802      	bhi.n	8005352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800534c:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005352:	4b20      	ldr	r3, [pc, #128]	@ (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a1e      	ldr	r2, [pc, #120]	@ (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 800535a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <prvAddNewTaskToReadyList+0xd4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d903      	bls.n	8005378 <prvAddNewTaskToReadyList+0x74>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a18      	ldr	r2, [pc, #96]	@ (80053d8 <prvAddNewTaskToReadyList+0xd4>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <prvAddNewTaskToReadyList+0xd8>)
 8005386:	441a      	add	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7ff f8ed 	bl	800456e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005394:	f001 fa1a 	bl	80067cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053a0:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <prvAddNewTaskToReadyList+0xc8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d207      	bcs.n	80053be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ae:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <prvAddNewTaskToReadyList+0xdc>)
 80053b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200010cc 	.word	0x200010cc
 80053cc:	20000bf8 	.word	0x20000bf8
 80053d0:	200010d8 	.word	0x200010d8
 80053d4:	200010e8 	.word	0x200010e8
 80053d8:	200010d4 	.word	0x200010d4
 80053dc:	20000bfc 	.word	0x20000bfc
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <vTaskDelay+0x64>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <vTaskDelay+0x32>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60bb      	str	r3, [r7, #8]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005416:	f000 f88b 	bl	8005530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800541a:	2100      	movs	r1, #0
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fd05 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005422:	f000 f893 	bl	800554c <xTaskResumeAll>
 8005426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <vTaskDelay+0x68>)
 8005430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200010f4 	.word	0x200010f4
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	@ 0x28
 8005454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800545e:	463a      	mov	r2, r7
 8005460:	1d39      	adds	r1, r7, #4
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f824 	bl	80044b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	9202      	str	r2, [sp, #8]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	2300      	movs	r3, #0
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	460a      	mov	r2, r1
 800547e:	4924      	ldr	r1, [pc, #144]	@ (8005510 <vTaskStartScheduler+0xc0>)
 8005480:	4824      	ldr	r0, [pc, #144]	@ (8005514 <vTaskStartScheduler+0xc4>)
 8005482:	f7ff fdf1 	bl	8005068 <xTaskCreateStatic>
 8005486:	4603      	mov	r3, r0
 8005488:	4a23      	ldr	r2, [pc, #140]	@ (8005518 <vTaskStartScheduler+0xc8>)
 800548a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800548c:	4b22      	ldr	r3, [pc, #136]	@ (8005518 <vTaskStartScheduler+0xc8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e001      	b.n	800549e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054a4:	f000 fd16 	bl	8005ed4 <xTimerCreateTimerTask>
 80054a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11b      	bne.n	80054e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <vTaskStartScheduler+0xcc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3354      	adds	r3, #84	@ 0x54
 80054ca:	4a15      	ldr	r2, [pc, #84]	@ (8005520 <vTaskStartScheduler+0xd0>)
 80054cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054ce:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <vTaskStartScheduler+0xd4>)
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054d6:	4b14      	ldr	r3, [pc, #80]	@ (8005528 <vTaskStartScheduler+0xd8>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054dc:	4b13      	ldr	r3, [pc, #76]	@ (800552c <vTaskStartScheduler+0xdc>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054e2:	f001 f8d1 	bl	8006688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054e6:	e00f      	b.n	8005508 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d10b      	bne.n	8005508 <vTaskStartScheduler+0xb8>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <vTaskStartScheduler+0xb4>
}
 8005508:	bf00      	nop
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08007c80 	.word	0x08007c80
 8005514:	08005b59 	.word	0x08005b59
 8005518:	200010f0 	.word	0x200010f0
 800551c:	20000bf8 	.word	0x20000bf8
 8005520:	20000010 	.word	0x20000010
 8005524:	200010ec 	.word	0x200010ec
 8005528:	200010d8 	.word	0x200010d8
 800552c:	200010d0 	.word	0x200010d0

08005530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005534:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <vTaskSuspendAll+0x18>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a03      	ldr	r2, [pc, #12]	@ (8005548 <vTaskSuspendAll+0x18>)
 800553c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	200010f4 	.word	0x200010f4

0800554c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800555a:	4b42      	ldr	r3, [pc, #264]	@ (8005664 <xTaskResumeAll+0x118>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <xTaskResumeAll+0x2e>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	603b      	str	r3, [r7, #0]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800557a:	f001 f8f7 	bl	800676c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800557e:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <xTaskResumeAll+0x118>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	4a37      	ldr	r2, [pc, #220]	@ (8005664 <xTaskResumeAll+0x118>)
 8005586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005588:	4b36      	ldr	r3, [pc, #216]	@ (8005664 <xTaskResumeAll+0x118>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d162      	bne.n	8005656 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005590:	4b35      	ldr	r3, [pc, #212]	@ (8005668 <xTaskResumeAll+0x11c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05e      	beq.n	8005656 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005598:	e02f      	b.n	80055fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800559a:	4b34      	ldr	r3, [pc, #208]	@ (800566c <xTaskResumeAll+0x120>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f83c 	bl	8004624 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f837 	bl	8004624 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005670 <xTaskResumeAll+0x124>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d903      	bls.n	80055ca <xTaskResumeAll+0x7e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <xTaskResumeAll+0x124>)
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a27      	ldr	r2, [pc, #156]	@ (8005674 <xTaskResumeAll+0x128>)
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fe ffc4 	bl	800456e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ea:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <xTaskResumeAll+0x12c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055f4:	4b21      	ldr	r3, [pc, #132]	@ (800567c <xTaskResumeAll+0x130>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055fa:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <xTaskResumeAll+0x120>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1cb      	bne.n	800559a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005608:	f000 fb62 	bl	8005cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800560c:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <xTaskResumeAll+0x134>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005618:	f000 f844 	bl	80056a4 <xTaskIncrementTick>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <xTaskResumeAll+0x130>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f1      	bne.n	8005618 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <xTaskResumeAll+0x134>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <xTaskResumeAll+0x130>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005646:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <xTaskResumeAll+0x138>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005656:	f001 f8b9 	bl	80067cc <vPortExitCritical>

	return xAlreadyYielded;
 800565a:	68bb      	ldr	r3, [r7, #8]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200010f4 	.word	0x200010f4
 8005668:	200010cc 	.word	0x200010cc
 800566c:	2000108c 	.word	0x2000108c
 8005670:	200010d4 	.word	0x200010d4
 8005674:	20000bfc 	.word	0x20000bfc
 8005678:	20000bf8 	.word	0x20000bf8
 800567c:	200010e0 	.word	0x200010e0
 8005680:	200010dc 	.word	0x200010dc
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800568e:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <xTaskGetTickCount+0x18>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005694:	687b      	ldr	r3, [r7, #4]
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	200010d0 	.word	0x200010d0

080056a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ae:	4b4f      	ldr	r3, [pc, #316]	@ (80057ec <xTaskIncrementTick+0x148>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 8090 	bne.w	80057d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b8:	4b4d      	ldr	r3, [pc, #308]	@ (80057f0 <xTaskIncrementTick+0x14c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c0:	4a4b      	ldr	r2, [pc, #300]	@ (80057f0 <xTaskIncrementTick+0x14c>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d121      	bne.n	8005710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056cc:	4b49      	ldr	r3, [pc, #292]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	603b      	str	r3, [r7, #0]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <xTaskIncrementTick+0x46>
 80056ee:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <xTaskIncrementTick+0x154>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3e      	ldr	r2, [pc, #248]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4a3e      	ldr	r2, [pc, #248]	@ (80057f8 <xTaskIncrementTick+0x154>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <xTaskIncrementTick+0x158>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	4a3c      	ldr	r2, [pc, #240]	@ (80057fc <xTaskIncrementTick+0x158>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	f000 fae0 	bl	8005cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005710:	4b3b      	ldr	r3, [pc, #236]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d349      	bcc.n	80057ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <xTaskIncrementTick+0x150>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005724:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	601a      	str	r2, [r3, #0]
					break;
 800572c:	e03f      	b.n	80057ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b31      	ldr	r3, [pc, #196]	@ (80057f4 <xTaskIncrementTick+0x150>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d203      	bcs.n	800574e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005746:	4a2e      	ldr	r2, [pc, #184]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800574c:	e02f      	b.n	80057ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3304      	adds	r3, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe ff66 	bl	8004624 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3318      	adds	r3, #24
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe ff5d 	bl	8004624 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <xTaskIncrementTick+0x160>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d903      	bls.n	800577e <xTaskIncrementTick+0xda>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <xTaskIncrementTick+0x160>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4a1f      	ldr	r2, [pc, #124]	@ (8005808 <xTaskIncrementTick+0x164>)
 800578c:	441a      	add	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe feea 	bl	800456e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579e:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <xTaskIncrementTick+0x168>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3b8      	bcc.n	800571a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ac:	e7b5      	b.n	800571a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ae:	4b17      	ldr	r3, [pc, #92]	@ (800580c <xTaskIncrementTick+0x168>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	4914      	ldr	r1, [pc, #80]	@ (8005808 <xTaskIncrementTick+0x164>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d901      	bls.n	80057ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057ca:	4b11      	ldr	r3, [pc, #68]	@ (8005810 <xTaskIncrementTick+0x16c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e004      	b.n	80057e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <xTaskIncrementTick+0x170>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <xTaskIncrementTick+0x170>)
 80057e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057e2:	697b      	ldr	r3, [r7, #20]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	200010f4 	.word	0x200010f4
 80057f0:	200010d0 	.word	0x200010d0
 80057f4:	20001084 	.word	0x20001084
 80057f8:	20001088 	.word	0x20001088
 80057fc:	200010e4 	.word	0x200010e4
 8005800:	200010ec 	.word	0x200010ec
 8005804:	200010d4 	.word	0x200010d4
 8005808:	20000bfc 	.word	0x20000bfc
 800580c:	20000bf8 	.word	0x20000bf8
 8005810:	200010e0 	.word	0x200010e0
 8005814:	200010dc 	.word	0x200010dc

08005818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581e:	4b2a      	ldr	r3, [pc, #168]	@ (80058c8 <vTaskSwitchContext+0xb0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <vTaskSwitchContext+0xb4>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800582c:	e047      	b.n	80058be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800582e:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <vTaskSwitchContext+0xb4>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005834:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <vTaskSwitchContext+0xb8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e011      	b.n	8005860 <vTaskSwitchContext+0x48>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <vTaskSwitchContext+0x42>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	607b      	str	r3, [r7, #4]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <vTaskSwitchContext+0x3e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3b01      	subs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	491c      	ldr	r1, [pc, #112]	@ (80058d4 <vTaskSwitchContext+0xbc>)
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0e3      	beq.n	800583c <vTaskSwitchContext+0x24>
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <vTaskSwitchContext+0xbc>)
 8005880:	4413      	add	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	3308      	adds	r3, #8
 8005896:	429a      	cmp	r2, r3
 8005898:	d104      	bne.n	80058a4 <vTaskSwitchContext+0x8c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a0b      	ldr	r2, [pc, #44]	@ (80058d8 <vTaskSwitchContext+0xc0>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4a08      	ldr	r2, [pc, #32]	@ (80058d0 <vTaskSwitchContext+0xb8>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058b4:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <vTaskSwitchContext+0xc0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3354      	adds	r3, #84	@ 0x54
 80058ba:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <vTaskSwitchContext+0xc4>)
 80058bc:	6013      	str	r3, [r2, #0]
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	200010f4 	.word	0x200010f4
 80058cc:	200010e0 	.word	0x200010e0
 80058d0:	200010d4 	.word	0x200010d4
 80058d4:	20000bfc 	.word	0x20000bfc
 80058d8:	20000bf8 	.word	0x20000bf8
 80058dc:	20000010 	.word	0x20000010

080058e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005908:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <vTaskPlaceOnEventList+0x48>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3318      	adds	r3, #24
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fe fe4f 	bl	80045b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005916:	2101      	movs	r1, #1
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f000 fa87 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000bf8 	.word	0x20000bf8

0800592c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <vTaskPlaceOnEventListRestricted+0x54>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3318      	adds	r3, #24
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fe fe05 	bl	800456e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68b8      	ldr	r0, [r7, #8]
 8005974:	f000 fa5a 	bl	8005e2c <prvAddCurrentTaskToDelayedList>
	}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000bf8 	.word	0x20000bf8

08005984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fe34 	bl	8004624 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <xTaskRemoveFromEventList+0xb0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11d      	bne.n	8005a00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fe2b 	bl	8004624 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d2:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <xTaskRemoveFromEventList+0xb4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d903      	bls.n	80059e2 <xTaskRemoveFromEventList+0x5e>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <xTaskRemoveFromEventList+0xb4>)
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <xTaskRemoveFromEventList+0xb8>)
 80059f0:	441a      	add	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fe fdb8 	bl	800456e <vListInsertEnd>
 80059fe:	e005      	b.n	8005a0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3318      	adds	r3, #24
 8005a04:	4619      	mov	r1, r3
 8005a06:	480e      	ldr	r0, [pc, #56]	@ (8005a40 <xTaskRemoveFromEventList+0xbc>)
 8005a08:	f7fe fdb1 	bl	800456e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <xTaskRemoveFromEventList+0xc0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d905      	bls.n	8005a26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <xTaskRemoveFromEventList+0xc4>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e001      	b.n	8005a2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a2a:	697b      	ldr	r3, [r7, #20]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	200010f4 	.word	0x200010f4
 8005a38:	200010d4 	.word	0x200010d4
 8005a3c:	20000bfc 	.word	0x20000bfc
 8005a40:	2000108c 	.word	0x2000108c
 8005a44:	20000bf8 	.word	0x20000bf8
 8005a48:	200010e0 	.word	0x200010e0

08005a4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <vTaskInternalSetTimeOutState+0x24>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <vTaskInternalSetTimeOutState+0x28>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	200010e4 	.word	0x200010e4
 8005a74:	200010d0 	.word	0x200010d0

08005a78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	613b      	str	r3, [r7, #16]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005abe:	f000 fe55 	bl	800676c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <xTaskCheckForTimeOut+0xc0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d102      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e023      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <xTaskCheckForTimeOut+0xc4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d007      	beq.n	8005afe <xTaskCheckForTimeOut+0x86>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e015      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d20b      	bcs.n	8005b20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff99 	bl	8005a4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e004      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2a:	f000 fe4f 	bl	80067cc <vPortExitCritical>

	return xReturn;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200010d0 	.word	0x200010d0
 8005b3c:	200010e4 	.word	0x200010e4

08005b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b44:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <vTaskMissedYield+0x14>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200010e0 	.word	0x200010e0

08005b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b60:	f000 f852 	bl	8005c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <prvIdleTask+0x28>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d9f9      	bls.n	8005b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <prvIdleTask+0x2c>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b7c:	e7f0      	b.n	8005b60 <prvIdleTask+0x8>
 8005b7e:	bf00      	nop
 8005b80:	20000bfc 	.word	0x20000bfc
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	e00c      	b.n	8005bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <prvInitialiseTaskLists+0x60>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fcb8 	bl	8004518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b37      	cmp	r3, #55	@ 0x37
 8005bb2:	d9ef      	bls.n	8005b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb4:	480d      	ldr	r0, [pc, #52]	@ (8005bec <prvInitialiseTaskLists+0x64>)
 8005bb6:	f7fe fcaf 	bl	8004518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bba:	480d      	ldr	r0, [pc, #52]	@ (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bbc:	f7fe fcac 	bl	8004518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc0:	480c      	ldr	r0, [pc, #48]	@ (8005bf4 <prvInitialiseTaskLists+0x6c>)
 8005bc2:	f7fe fca9 	bl	8004518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bc6:	480c      	ldr	r0, [pc, #48]	@ (8005bf8 <prvInitialiseTaskLists+0x70>)
 8005bc8:	f7fe fca6 	bl	8004518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bcc:	480b      	ldr	r0, [pc, #44]	@ (8005bfc <prvInitialiseTaskLists+0x74>)
 8005bce:	f7fe fca3 	bl	8004518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <prvInitialiseTaskLists+0x78>)
 8005bd4:	4a05      	ldr	r2, [pc, #20]	@ (8005bec <prvInitialiseTaskLists+0x64>)
 8005bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c04 <prvInitialiseTaskLists+0x7c>)
 8005bda:	4a05      	ldr	r2, [pc, #20]	@ (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000bfc 	.word	0x20000bfc
 8005bec:	2000105c 	.word	0x2000105c
 8005bf0:	20001070 	.word	0x20001070
 8005bf4:	2000108c 	.word	0x2000108c
 8005bf8:	200010a0 	.word	0x200010a0
 8005bfc:	200010b8 	.word	0x200010b8
 8005c00:	20001084 	.word	0x20001084
 8005c04:	20001088 	.word	0x20001088

08005c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0e:	e019      	b.n	8005c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c10:	f000 fdac 	bl	800676c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <prvCheckTasksWaitingTermination+0x50>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fcff 	bl	8004624 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3a:	f000 fdc7 	bl	80067cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f810 	bl	8005c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e1      	bne.n	8005c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200010a0 	.word	0x200010a0
 8005c5c:	200010cc 	.word	0x200010cc
 8005c60:	200010b4 	.word	0x200010b4

08005c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3354      	adds	r3, #84	@ 0x54
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f8bd 	bl	8006df0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 ff41 	bl	8006b0c <vPortFree>
				vPortFree( pxTCB );
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 ff3e 	bl	8006b0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c90:	e019      	b.n	8005cc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d103      	bne.n	8005ca4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 ff35 	bl	8006b0c <vPortFree>
	}
 8005ca2:	e010      	b.n	8005cc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d00b      	beq.n	8005cc6 <prvDeleteTCB+0x62>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <prvDeleteTCB+0x5e>
	}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <prvResetNextTaskUnblockTime+0x38>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <prvResetNextTaskUnblockTime+0x3c>)
 8005ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce8:	e008      	b.n	8005cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cea:	4b07      	ldr	r3, [pc, #28]	@ (8005d08 <prvResetNextTaskUnblockTime+0x38>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <prvResetNextTaskUnblockTime+0x3c>)
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20001084 	.word	0x20001084
 8005d0c:	200010ec 	.word	0x200010ec

08005d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d16:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <xTaskGetSchedulerState+0x34>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	e008      	b.n	8005d36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d24:	4b08      	ldr	r3, [pc, #32]	@ (8005d48 <xTaskGetSchedulerState+0x38>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e001      	b.n	8005d36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d36:	687b      	ldr	r3, [r7, #4]
	}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	200010d8 	.word	0x200010d8
 8005d48:	200010f4 	.word	0x200010f4

08005d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d058      	beq.n	8005e14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d62:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <xTaskPriorityDisinherit+0xd4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d00b      	beq.n	8005d84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60bb      	str	r3, [r7, #8]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da8:	1e5a      	subs	r2, r3, #1
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d02c      	beq.n	8005e14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d128      	bne.n	8005e14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fc2c 	bl	8004624 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <xTaskPriorityDisinherit+0xd8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d903      	bls.n	8005df4 <xTaskPriorityDisinherit+0xa8>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <xTaskPriorityDisinherit+0xd8>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <xTaskPriorityDisinherit+0xdc>)
 8005e02:	441a      	add	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe fbaf 	bl	800456e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e14:	697b      	ldr	r3, [r7, #20]
	}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000bf8 	.word	0x20000bf8
 8005e24:	200010d4 	.word	0x200010d4
 8005e28:	20000bfc 	.word	0x20000bfc

08005e2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e36:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x90>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3c:	4b20      	ldr	r3, [pc, #128]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fbee 	bl	8004624 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d10a      	bne.n	8005e66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4819      	ldr	r0, [pc, #100]	@ (8005ec4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e60:	f7fe fb85 	bl	800456e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e64:	e026      	b.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d209      	bcs.n	8005e92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe fb92 	bl	80045b4 <vListInsert>
}
 8005e90:	e010      	b.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	4b0e      	ldr	r3, [pc, #56]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fb88 	bl	80045b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d202      	bcs.n	8005eb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eae:	4a08      	ldr	r2, [pc, #32]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6013      	str	r3, [r2, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200010d0 	.word	0x200010d0
 8005ec0:	20000bf8 	.word	0x20000bf8
 8005ec4:	200010b8 	.word	0x200010b8
 8005ec8:	20001088 	.word	0x20001088
 8005ecc:	20001084 	.word	0x20001084
 8005ed0:	200010ec 	.word	0x200010ec

08005ed4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	@ 0x28
 8005ed8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ede:	f000 fb11 	bl	8006504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <xTimerCreateTimerTask+0x84>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d021      	beq.n	8005f2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ef2:	1d3a      	adds	r2, r7, #4
 8005ef4:	f107 0108 	add.w	r1, r7, #8
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe faf1 	bl	80044e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2300      	movs	r3, #0
 8005f12:	460a      	mov	r2, r1
 8005f14:	4911      	ldr	r1, [pc, #68]	@ (8005f5c <xTimerCreateTimerTask+0x88>)
 8005f16:	4812      	ldr	r0, [pc, #72]	@ (8005f60 <xTimerCreateTimerTask+0x8c>)
 8005f18:	f7ff f8a6 	bl	8005068 <xTaskCreateStatic>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <xTimerCreateTimerTask+0x90>)
 8005f20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f22:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <xTimerCreateTimerTask+0x90>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	613b      	str	r3, [r7, #16]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f4c:	697b      	ldr	r3, [r7, #20]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20001128 	.word	0x20001128
 8005f5c:	08007c88 	.word	0x08007c88
 8005f60:	080060a1 	.word	0x080060a1
 8005f64:	2000112c 	.word	0x2000112c

08005f68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	@ 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f98:	4b19      	ldr	r3, [pc, #100]	@ (8006000 <xTimerGenericCommand+0x98>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d02a      	beq.n	8005ff6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	dc18      	bgt.n	8005fe4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fb2:	f7ff fead 	bl	8005d10 <xTaskGetSchedulerState>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d109      	bne.n	8005fd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <xTimerGenericCommand+0x98>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	f107 0110 	add.w	r1, r7, #16
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc8:	f7fe fc60 	bl	800488c <xQueueGenericSend>
 8005fcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fce:	e012      	b.n	8005ff6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <xTimerGenericCommand+0x98>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	f107 0110 	add.w	r1, r7, #16
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f7fe fc56 	bl	800488c <xQueueGenericSend>
 8005fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fe2:	e008      	b.n	8005ff6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fe4:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <xTimerGenericCommand+0x98>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	f107 0110 	add.w	r1, r7, #16
 8005fec:	2300      	movs	r3, #0
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f7fe fd4e 	bl	8004a90 <xQueueGenericSendFromISR>
 8005ff4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3728      	adds	r7, #40	@ 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20001128 	.word	0x20001128

08006004 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <prvProcessExpiredTimer+0x98>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fb01 	bl	8004624 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d023      	beq.n	8006078 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	18d1      	adds	r1, r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	6978      	ldr	r0, [r7, #20]
 800603e:	f000 f8d3 	bl	80061e8 <prvInsertTimerInActiveList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d020      	beq.n	800608a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006048:	2300      	movs	r3, #0
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	2100      	movs	r1, #0
 8006052:	6978      	ldr	r0, [r7, #20]
 8006054:	f7ff ff88 	bl	8005f68 <xTimerGenericCommand>
 8006058:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d114      	bne.n	800608a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	4798      	blx	r3
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20001120 	.word	0x20001120

080060a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060a8:	f107 0308 	add.w	r3, r7, #8
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f859 	bl	8006164 <prvGetNextExpireTime>
 80060b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f805 	bl	80060c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060be:	f000 f8d5 	bl	800626c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c2:	bf00      	nop
 80060c4:	e7f0      	b.n	80060a8 <prvTimerTask+0x8>
	...

080060c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060d2:	f7ff fa2d 	bl	8005530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f864 	bl	80061a8 <prvSampleTimeNow>
 80060e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d130      	bne.n	800614a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <prvProcessTimerOrBlockTask+0x3c>
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d806      	bhi.n	8006104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060f6:	f7ff fa29 	bl	800554c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff ff81 	bl	8006004 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006102:	e024      	b.n	800614e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800610a:	4b13      	ldr	r3, [pc, #76]	@ (8006158 <prvProcessTimerOrBlockTask+0x90>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <prvProcessTimerOrBlockTask+0x50>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <prvProcessTimerOrBlockTask+0x52>
 8006118:	2300      	movs	r3, #0
 800611a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800611c:	4b0f      	ldr	r3, [pc, #60]	@ (800615c <prvProcessTimerOrBlockTask+0x94>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	4619      	mov	r1, r3
 800612a:	f7fe ff69 	bl	8005000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800612e:	f7ff fa0d 	bl	800554c <xTaskResumeAll>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <prvProcessTimerOrBlockTask+0x98>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
}
 8006148:	e001      	b.n	800614e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800614a:	f7ff f9ff 	bl	800554c <xTaskResumeAll>
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20001124 	.word	0x20001124
 800615c:	20001128 	.word	0x20001128
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800616c:	4b0d      	ldr	r3, [pc, #52]	@ (80061a4 <prvGetNextExpireTime+0x40>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <prvGetNextExpireTime+0x16>
 8006176:	2201      	movs	r2, #1
 8006178:	e000      	b.n	800617c <prvGetNextExpireTime+0x18>
 800617a:	2200      	movs	r2, #0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <prvGetNextExpireTime+0x40>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e001      	b.n	8006198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006198:	68fb      	ldr	r3, [r7, #12]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	20001120 	.word	0x20001120

080061a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061b0:	f7ff fa6a 	bl	8005688 <xTaskGetTickCount>
 80061b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <prvSampleTimeNow+0x3c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d205      	bcs.n	80061cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061c0:	f000 f93a 	bl	8006438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061d2:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <prvSampleTimeNow+0x3c>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20001130 	.word	0x20001130

080061e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d812      	bhi.n	8006234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e01b      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006222:	4b10      	ldr	r3, [pc, #64]	@ (8006264 <prvInsertTimerInActiveList+0x7c>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7fe f9c1 	bl	80045b4 <vListInsert>
 8006232:	e012      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d206      	bcs.n	800624a <prvInsertTimerInActiveList+0x62>
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e007      	b.n	800625a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <prvInsertTimerInActiveList+0x80>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7fe f9ad 	bl	80045b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800625a:	697b      	ldr	r3, [r7, #20]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20001124 	.word	0x20001124
 8006268:	20001120 	.word	0x20001120

0800626c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	@ 0x38
 8006270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006272:	e0ce      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	da19      	bge.n	80062ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	3304      	adds	r3, #4
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	61fb      	str	r3, [r7, #28]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a4:	6850      	ldr	r0, [r2, #4]
 80062a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f2c0 80ae 	blt.w	8006412 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f9ac 	bl	8004624 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062cc:	463b      	mov	r3, r7
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff6a 	bl	80061a8 <prvSampleTimeNow>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b09      	cmp	r3, #9
 80062da:	f200 8097 	bhi.w	800640c <prvProcessReceivedCommands+0x1a0>
 80062de:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <prvProcessReceivedCommands+0x78>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006383 	.word	0x08006383
 80062f4:	08006397 	.word	0x08006397
 80062f8:	080063e3 	.word	0x080063e3
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800630d 	.word	0x0800630d
 8006304:	08006383 	.word	0x08006383
 8006308:	08006397 	.word	0x08006397
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	18d1      	adds	r1, r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800632c:	f7ff ff5c 	bl	80061e8 <prvInsertTimerInActiveList>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d06c      	beq.n	8006410 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d061      	beq.n	8006410 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	441a      	add	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	2100      	movs	r1, #0
 800635c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800635e:	f7ff fe03 	bl	8005f68 <xTimerGenericCommand>
 8006362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d152      	bne.n	8006410 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61bb      	str	r3, [r7, #24]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006394:	e03d      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	18d1      	adds	r1, r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063dc:	f7ff ff04 	bl	80061e8 <prvInsertTimerInActiveList>
					break;
 80063e0:	e017      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063f2:	f000 fb8b 	bl	8006b0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063f6:	e00c      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800640a:	e002      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <prvProcessReceivedCommands+0x1a6>
					break;
 8006410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006412:	4b08      	ldr	r3, [pc, #32]	@ (8006434 <prvProcessReceivedCommands+0x1c8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	1d39      	adds	r1, r7, #4
 8006418:	2200      	movs	r2, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fbd6 	bl	8004bcc <xQueueReceive>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	f47f af26 	bne.w	8006274 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	3730      	adds	r7, #48	@ 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20001128 	.word	0x20001128

08006438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800643e:	e049      	b.n	80064d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006440:	4b2e      	ldr	r3, [pc, #184]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644a:	4b2c      	ldr	r3, [pc, #176]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3304      	adds	r3, #4
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe f8e3 	bl	8004624 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d02f      	beq.n	80064d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90e      	bls.n	80064a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3304      	adds	r3, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f7fe f889 	bl	80045b4 <vListInsert>
 80064a2:	e017      	b.n	80064d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064a4:	2300      	movs	r3, #0
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	2100      	movs	r1, #0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fd5a 	bl	8005f68 <xTimerGenericCommand>
 80064b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	603b      	str	r3, [r7, #0]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1b0      	bne.n	8006440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <prvSwitchTimerLists+0xc8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a04      	ldr	r2, [pc, #16]	@ (80064fc <prvSwitchTimerLists+0xc4>)
 80064ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064ec:	4a04      	ldr	r2, [pc, #16]	@ (8006500 <prvSwitchTimerLists+0xc8>)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6013      	str	r3, [r2, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001120 	.word	0x20001120
 8006500:	20001124 	.word	0x20001124

08006504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800650a:	f000 f92f 	bl	800676c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d120      	bne.n	8006558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006516:	4814      	ldr	r0, [pc, #80]	@ (8006568 <prvCheckForValidListAndQueue+0x64>)
 8006518:	f7fd fffe 	bl	8004518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800651c:	4813      	ldr	r0, [pc, #76]	@ (800656c <prvCheckForValidListAndQueue+0x68>)
 800651e:	f7fd fffb 	bl	8004518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006522:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <prvCheckForValidListAndQueue+0x6c>)
 8006524:	4a10      	ldr	r2, [pc, #64]	@ (8006568 <prvCheckForValidListAndQueue+0x64>)
 8006526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006528:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <prvCheckForValidListAndQueue+0x70>)
 800652a:	4a10      	ldr	r2, [pc, #64]	@ (800656c <prvCheckForValidListAndQueue+0x68>)
 800652c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <prvCheckForValidListAndQueue+0x74>)
 8006534:	4a11      	ldr	r2, [pc, #68]	@ (800657c <prvCheckForValidListAndQueue+0x78>)
 8006536:	2110      	movs	r1, #16
 8006538:	200a      	movs	r0, #10
 800653a:	f7fe f907 	bl	800474c <xQueueGenericCreateStatic>
 800653e:	4603      	mov	r3, r0
 8006540:	4a08      	ldr	r2, [pc, #32]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006544:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800654c:	4b05      	ldr	r3, [pc, #20]	@ (8006564 <prvCheckForValidListAndQueue+0x60>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	490b      	ldr	r1, [pc, #44]	@ (8006580 <prvCheckForValidListAndQueue+0x7c>)
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fd2c 	bl	8004fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006558:	f000 f938 	bl	80067cc <vPortExitCritical>
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20001128 	.word	0x20001128
 8006568:	200010f8 	.word	0x200010f8
 800656c:	2000110c 	.word	0x2000110c
 8006570:	20001120 	.word	0x20001120
 8006574:	20001124 	.word	0x20001124
 8006578:	200011d4 	.word	0x200011d4
 800657c:	20001134 	.word	0x20001134
 8006580:	08007c90 	.word	0x08007c90

08006584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b04      	subs	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800659c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3b04      	subs	r3, #4
 80065a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065b4:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <pxPortInitialiseStack+0x54>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b14      	subs	r3, #20
 80065be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b20      	subs	r3, #32
 80065ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	080065dd 	.word	0x080065dd

080065dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065e6:	4b12      	ldr	r3, [pc, #72]	@ (8006630 <prvTaskExitError+0x54>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d00b      	beq.n	8006608 <prvTaskExitError+0x2c>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <prvTaskExitError+0x28>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60bb      	str	r3, [r7, #8]
}
 800661a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800661c:	bf00      	nop
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0fc      	beq.n	800661e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	2000000c 	.word	0x2000000c
	...

08006640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006640:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <pxCurrentTCBConst2>)
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	6808      	ldr	r0, [r1, #0]
 8006646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800664a:	f380 8809 	msr	PSP, r0
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f04f 0000 	mov.w	r0, #0
 8006656:	f380 8811 	msr	BASEPRI, r0
 800665a:	f04e 0e0d 	orr.w	lr, lr, #13
 800665e:	4770      	bx	lr

08006660 <pxCurrentTCBConst2>:
 8006660:	20000bf8 	.word	0x20000bf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop

08006668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006668:	4806      	ldr	r0, [pc, #24]	@ (8006684 <prvPortStartFirstTask+0x1c>)
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	6800      	ldr	r0, [r0, #0]
 800666e:	f380 8808 	msr	MSP, r0
 8006672:	b662      	cpsie	i
 8006674:	b661      	cpsie	f
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	df00      	svc	0
 8006680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006682:	bf00      	nop
 8006684:	e000ed08 	.word	0xe000ed08

08006688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800668e:	4b32      	ldr	r3, [pc, #200]	@ (8006758 <xPortStartScheduler+0xd0>)
 8006690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	@ 0xff
 800669e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	4b2a      	ldr	r3, [pc, #168]	@ (800675c <xPortStartScheduler+0xd4>)
 80066b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <xPortStartScheduler+0xd8>)
 80066b8:	2207      	movs	r2, #7
 80066ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066bc:	e009      	b.n	80066d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066be:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <xPortStartScheduler+0xd8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	4a26      	ldr	r2, [pc, #152]	@ (8006760 <xPortStartScheduler+0xd8>)
 80066c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b80      	cmp	r3, #128	@ 0x80
 80066dc:	d0ef      	beq.n	80066be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066de:	4b20      	ldr	r3, [pc, #128]	@ (8006760 <xPortStartScheduler+0xd8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f1c3 0307 	rsb	r3, r3, #7
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d00b      	beq.n	8006702 <xPortStartScheduler+0x7a>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60bb      	str	r3, [r7, #8]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006702:	4b17      	ldr	r3, [pc, #92]	@ (8006760 <xPortStartScheduler+0xd8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	4a15      	ldr	r2, [pc, #84]	@ (8006760 <xPortStartScheduler+0xd8>)
 800670a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800670c:	4b14      	ldr	r3, [pc, #80]	@ (8006760 <xPortStartScheduler+0xd8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006714:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <xPortStartScheduler+0xd8>)
 8006716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006720:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <xPortStartScheduler+0xdc>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0f      	ldr	r2, [pc, #60]	@ (8006764 <xPortStartScheduler+0xdc>)
 8006726:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800672a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800672c:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <xPortStartScheduler+0xdc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0c      	ldr	r2, [pc, #48]	@ (8006764 <xPortStartScheduler+0xdc>)
 8006732:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006738:	f000 f8b8 	bl	80068ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <xPortStartScheduler+0xe0>)
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006742:	f7ff ff91 	bl	8006668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006746:	f7ff f867 	bl	8005818 <vTaskSwitchContext>
	prvTaskExitError();
 800674a:	f7ff ff47 	bl	80065dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000e400 	.word	0xe000e400
 800675c:	20001224 	.word	0x20001224
 8006760:	20001228 	.word	0x20001228
 8006764:	e000ed20 	.word	0xe000ed20
 8006768:	2000000c 	.word	0x2000000c

0800676c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	607b      	str	r3, [r7, #4]
}
 8006784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006786:	4b0f      	ldr	r3, [pc, #60]	@ (80067c4 <vPortEnterCritical+0x58>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a0d      	ldr	r2, [pc, #52]	@ (80067c4 <vPortEnterCritical+0x58>)
 800678e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006790:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <vPortEnterCritical+0x58>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d110      	bne.n	80067ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <vPortEnterCritical+0x5c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <vPortEnterCritical+0x4e>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	603b      	str	r3, [r7, #0]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <vPortEnterCritical+0x4a>
	}
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	2000000c 	.word	0x2000000c
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067d2:	4b12      	ldr	r3, [pc, #72]	@ (800681c <vPortExitCritical+0x50>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <vPortExitCritical+0x26>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	607b      	str	r3, [r7, #4]
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	e7fd      	b.n	80067ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <vPortExitCritical+0x50>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	4a08      	ldr	r2, [pc, #32]	@ (800681c <vPortExitCritical+0x50>)
 80067fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <vPortExitCritical+0x50>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <vPortExitCritical+0x44>
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	2000000c 	.word	0x2000000c

08006820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006820:	f3ef 8009 	mrs	r0, PSP
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <pxCurrentTCBConst>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006830:	6010      	str	r0, [r2, #0]
 8006832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006836:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800683a:	f380 8811 	msr	BASEPRI, r0
 800683e:	f7fe ffeb 	bl	8005818 <vTaskSwitchContext>
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f380 8811 	msr	BASEPRI, r0
 800684a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800684e:	6819      	ldr	r1, [r3, #0]
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006856:	f380 8809 	msr	PSP, r0
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	4770      	bx	lr

08006860 <pxCurrentTCBConst>:
 8006860:	20000bf8 	.word	0x20000bf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
}
 8006880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006882:	f7fe ff0f 	bl	80056a4 <xTaskIncrementTick>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <xPortSysTickHandler+0x40>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <vPortSetupTimerInterrupt+0x30>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068b6:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <vPortSetupTimerInterrupt+0x34>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068bc:	4b09      	ldr	r3, [pc, #36]	@ (80068e4 <vPortSetupTimerInterrupt+0x38>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <vPortSetupTimerInterrupt+0x3c>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	4a08      	ldr	r2, [pc, #32]	@ (80068ec <vPortSetupTimerInterrupt+0x40>)
 80068ca:	3b01      	subs	r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ce:	4b03      	ldr	r3, [pc, #12]	@ (80068dc <vPortSetupTimerInterrupt+0x30>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	e000e010 	.word	0xe000e010
 80068e0:	e000e018 	.word	0xe000e018
 80068e4:	20000000 	.word	0x20000000
 80068e8:	10624dd3 	.word	0x10624dd3
 80068ec:	e000e014 	.word	0xe000e014

080068f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068f6:	f3ef 8305 	mrs	r3, IPSR
 80068fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b0f      	cmp	r3, #15
 8006900:	d915      	bls.n	800692e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006902:	4a17      	ldr	r2, [pc, #92]	@ (8006960 <vPortValidateInterruptPriority+0x70>)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800690c:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <vPortValidateInterruptPriority+0x74>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	7afa      	ldrb	r2, [r7, #11]
 8006912:	429a      	cmp	r2, r3
 8006914:	d20b      	bcs.n	800692e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	607b      	str	r3, [r7, #4]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800692e:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <vPortValidateInterruptPriority+0x78>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006936:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <vPortValidateInterruptPriority+0x7c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d90b      	bls.n	8006956 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	603b      	str	r3, [r7, #0]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <vPortValidateInterruptPriority+0x62>
	}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr
 8006960:	e000e3f0 	.word	0xe000e3f0
 8006964:	20001224 	.word	0x20001224
 8006968:	e000ed0c 	.word	0xe000ed0c
 800696c:	20001228 	.word	0x20001228

08006970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	@ 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800697c:	f7fe fdd8 	bl	8005530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006980:	4b5c      	ldr	r3, [pc, #368]	@ (8006af4 <pvPortMalloc+0x184>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006988:	f000 f924 	bl	8006bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800698c:	4b5a      	ldr	r3, [pc, #360]	@ (8006af8 <pvPortMalloc+0x188>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8095 	bne.w	8006ac4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01e      	beq.n	80069de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069a0:	2208      	movs	r2, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d015      	beq.n	80069de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f023 0307 	bic.w	r3, r3, #7
 80069b8:	3308      	adds	r3, #8
 80069ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <pvPortMalloc+0x6e>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	617b      	str	r3, [r7, #20]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d06f      	beq.n	8006ac4 <pvPortMalloc+0x154>
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <pvPortMalloc+0x18c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d86a      	bhi.n	8006ac4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ee:	4b44      	ldr	r3, [pc, #272]	@ (8006b00 <pvPortMalloc+0x190>)
 80069f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069f2:	4b43      	ldr	r3, [pc, #268]	@ (8006b00 <pvPortMalloc+0x190>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f8:	e004      	b.n	8006a04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d903      	bls.n	8006a16 <pvPortMalloc+0xa6>
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f1      	bne.n	80069fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a16:	4b37      	ldr	r3, [pc, #220]	@ (8006af4 <pvPortMalloc+0x184>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d051      	beq.n	8006ac4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	4413      	add	r3, r2
 8006a28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	1ad2      	subs	r2, r2, r3
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d920      	bls.n	8006a84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <pvPortMalloc+0xfc>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	613b      	str	r3, [r7, #16]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a7e:	69b8      	ldr	r0, [r7, #24]
 8006a80:	f000 f90a 	bl	8006c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <pvPortMalloc+0x18c>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006afc <pvPortMalloc+0x18c>)
 8006a90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a92:	4b1a      	ldr	r3, [pc, #104]	@ (8006afc <pvPortMalloc+0x18c>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b1b      	ldr	r3, [pc, #108]	@ (8006b04 <pvPortMalloc+0x194>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d203      	bcs.n	8006aa6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a9e:	4b17      	ldr	r3, [pc, #92]	@ (8006afc <pvPortMalloc+0x18c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <pvPortMalloc+0x194>)
 8006aa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <pvPortMalloc+0x188>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aba:	4b13      	ldr	r3, [pc, #76]	@ (8006b08 <pvPortMalloc+0x198>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a11      	ldr	r2, [pc, #68]	@ (8006b08 <pvPortMalloc+0x198>)
 8006ac2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ac4:	f7fe fd42 	bl	800554c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <pvPortMalloc+0x17a>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60fb      	str	r3, [r7, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <pvPortMalloc+0x176>
	return pvReturn;
 8006aea:	69fb      	ldr	r3, [r7, #28]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3728      	adds	r7, #40	@ 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20001e34 	.word	0x20001e34
 8006af8:	20001e48 	.word	0x20001e48
 8006afc:	20001e38 	.word	0x20001e38
 8006b00:	20001e2c 	.word	0x20001e2c
 8006b04:	20001e3c 	.word	0x20001e3c
 8006b08:	20001e40 	.word	0x20001e40

08006b0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d04f      	beq.n	8006bbe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b1e:	2308      	movs	r3, #8
 8006b20:	425b      	negs	r3, r3
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4b25      	ldr	r3, [pc, #148]	@ (8006bc8 <vPortFree+0xbc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <vPortFree+0x46>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <vPortFree+0x66>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	e7fd      	b.n	8006b6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <vPortFree+0xbc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01e      	beq.n	8006bbe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11a      	bne.n	8006bbe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc8 <vPortFree+0xbc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b98:	f7fe fcca 	bl	8005530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <vPortFree+0xc0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4a09      	ldr	r2, [pc, #36]	@ (8006bcc <vPortFree+0xc0>)
 8006ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006baa:	6938      	ldr	r0, [r7, #16]
 8006bac:	f000 f874 	bl	8006c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bb0:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <vPortFree+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a06      	ldr	r2, [pc, #24]	@ (8006bd0 <vPortFree+0xc4>)
 8006bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bba:	f7fe fcc7 	bl	800554c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bbe:	bf00      	nop
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20001e48 	.word	0x20001e48
 8006bcc:	20001e38 	.word	0x20001e38
 8006bd0:	20001e44 	.word	0x20001e44

08006bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <prvHeapInit+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1f      	ldr	r2, [pc, #124]	@ (8006c80 <prvHeapInit+0xac>)
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <prvHeapInit+0xb0>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	@ (8006c84 <prvHeapInit+0xb0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c20:	2208      	movs	r2, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a15      	ldr	r2, [pc, #84]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <prvHeapInit+0xb4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	@ (8006c8c <prvHeapInit+0xb8>)
 8006c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <prvHeapInit+0xbc>)
 8006c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <prvHeapInit+0xc0>)
 8006c6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000122c 	.word	0x2000122c
 8006c84:	20001e2c 	.word	0x20001e2c
 8006c88:	20001e34 	.word	0x20001e34
 8006c8c:	20001e3c 	.word	0x20001e3c
 8006c90:	20001e38 	.word	0x20001e38
 8006c94:	20001e48 	.word	0x20001e48

08006c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ca0:	4b27      	ldr	r3, [pc, #156]	@ (8006d40 <prvInsertBlockIntoFreeList+0xa8>)
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <prvInsertBlockIntoFreeList+0x14>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d8f7      	bhi.n	8006ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d108      	bne.n	8006cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d118      	bne.n	8006d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b14      	ldr	r3, [pc, #80]	@ (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d00d      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e003      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	20001e2c 	.word	0x20001e2c
 8006d44:	20001e34 	.word	0x20001e34

08006d48 <siprintf>:
 8006d48:	b40e      	push	{r1, r2, r3}
 8006d4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	2400      	movs	r4, #0
 8006d52:	b09d      	sub	sp, #116	@ 0x74
 8006d54:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d56:	9002      	str	r0, [sp, #8]
 8006d58:	9006      	str	r0, [sp, #24]
 8006d5a:	9107      	str	r1, [sp, #28]
 8006d5c:	9104      	str	r1, [sp, #16]
 8006d5e:	4809      	ldr	r0, [pc, #36]	@ (8006d84 <siprintf+0x3c>)
 8006d60:	4909      	ldr	r1, [pc, #36]	@ (8006d88 <siprintf+0x40>)
 8006d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d66:	9105      	str	r1, [sp, #20]
 8006d68:	6800      	ldr	r0, [r0, #0]
 8006d6a:	a902      	add	r1, sp, #8
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d70:	f000 fa28 	bl	80071c4 <_svfiprintf_r>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	701c      	strb	r4, [r3, #0]
 8006d78:	b01d      	add	sp, #116	@ 0x74
 8006d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7e:	b003      	add	sp, #12
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000010 	.word	0x20000010
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <memset>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	4402      	add	r2, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d100      	bne.n	8006d96 <memset+0xa>
 8006d94:	4770      	bx	lr
 8006d96:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9a:	e7f9      	b.n	8006d90 <memset+0x4>

08006d9c <strncpy>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	3901      	subs	r1, #1
 8006da2:	b132      	cbz	r2, 8006db2 <strncpy+0x16>
 8006da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006da8:	3a01      	subs	r2, #1
 8006daa:	f803 4b01 	strb.w	r4, [r3], #1
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1f7      	bne.n	8006da2 <strncpy+0x6>
 8006db2:	2100      	movs	r1, #0
 8006db4:	441a      	add	r2, r3
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d100      	bne.n	8006dbc <strncpy+0x20>
 8006dba:	bd10      	pop	{r4, pc}
 8006dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc0:	e7f9      	b.n	8006db6 <strncpy+0x1a>

08006dc2 <strstr>:
 8006dc2:	780a      	ldrb	r2, [r1, #0]
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	b96a      	cbnz	r2, 8006de4 <strstr+0x22>
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d109      	bne.n	8006de2 <strstr+0x20>
 8006dce:	460c      	mov	r4, r1
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f6      	beq.n	8006dc8 <strstr+0x6>
 8006dda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006dde:	429e      	cmp	r6, r3
 8006de0:	d0f7      	beq.n	8006dd2 <strstr+0x10>
 8006de2:	3001      	adds	r0, #1
 8006de4:	7803      	ldrb	r3, [r0, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1ef      	bne.n	8006dca <strstr+0x8>
 8006dea:	4618      	mov	r0, r3
 8006dec:	e7ec      	b.n	8006dc8 <strstr+0x6>
	...

08006df0 <_reclaim_reent>:
 8006df0:	4b2d      	ldr	r3, [pc, #180]	@ (8006ea8 <_reclaim_reent+0xb8>)
 8006df2:	b570      	push	{r4, r5, r6, lr}
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4604      	mov	r4, r0
 8006df8:	4283      	cmp	r3, r0
 8006dfa:	d053      	beq.n	8006ea4 <_reclaim_reent+0xb4>
 8006dfc:	69c3      	ldr	r3, [r0, #28]
 8006dfe:	b31b      	cbz	r3, 8006e48 <_reclaim_reent+0x58>
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	b163      	cbz	r3, 8006e1e <_reclaim_reent+0x2e>
 8006e04:	2500      	movs	r5, #0
 8006e06:	69e3      	ldr	r3, [r4, #28]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	5959      	ldr	r1, [r3, r5]
 8006e0c:	b9b1      	cbnz	r1, 8006e3c <_reclaim_reent+0x4c>
 8006e0e:	3504      	adds	r5, #4
 8006e10:	2d80      	cmp	r5, #128	@ 0x80
 8006e12:	d1f8      	bne.n	8006e06 <_reclaim_reent+0x16>
 8006e14:	69e3      	ldr	r3, [r4, #28]
 8006e16:	4620      	mov	r0, r4
 8006e18:	68d9      	ldr	r1, [r3, #12]
 8006e1a:	f000 f881 	bl	8006f20 <_free_r>
 8006e1e:	69e3      	ldr	r3, [r4, #28]
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	b111      	cbz	r1, 8006e2a <_reclaim_reent+0x3a>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f87b 	bl	8006f20 <_free_r>
 8006e2a:	69e3      	ldr	r3, [r4, #28]
 8006e2c:	689d      	ldr	r5, [r3, #8]
 8006e2e:	b15d      	cbz	r5, 8006e48 <_reclaim_reent+0x58>
 8006e30:	4629      	mov	r1, r5
 8006e32:	4620      	mov	r0, r4
 8006e34:	682d      	ldr	r5, [r5, #0]
 8006e36:	f000 f873 	bl	8006f20 <_free_r>
 8006e3a:	e7f8      	b.n	8006e2e <_reclaim_reent+0x3e>
 8006e3c:	680e      	ldr	r6, [r1, #0]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f000 f86e 	bl	8006f20 <_free_r>
 8006e44:	4631      	mov	r1, r6
 8006e46:	e7e1      	b.n	8006e0c <_reclaim_reent+0x1c>
 8006e48:	6961      	ldr	r1, [r4, #20]
 8006e4a:	b111      	cbz	r1, 8006e52 <_reclaim_reent+0x62>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 f867 	bl	8006f20 <_free_r>
 8006e52:	69e1      	ldr	r1, [r4, #28]
 8006e54:	b111      	cbz	r1, 8006e5c <_reclaim_reent+0x6c>
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f862 	bl	8006f20 <_free_r>
 8006e5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e5e:	b111      	cbz	r1, 8006e66 <_reclaim_reent+0x76>
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f85d 	bl	8006f20 <_free_r>
 8006e66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e68:	b111      	cbz	r1, 8006e70 <_reclaim_reent+0x80>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f858 	bl	8006f20 <_free_r>
 8006e70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e72:	b111      	cbz	r1, 8006e7a <_reclaim_reent+0x8a>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f853 	bl	8006f20 <_free_r>
 8006e7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e7c:	b111      	cbz	r1, 8006e84 <_reclaim_reent+0x94>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f84e 	bl	8006f20 <_free_r>
 8006e84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e86:	b111      	cbz	r1, 8006e8e <_reclaim_reent+0x9e>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f849 	bl	8006f20 <_free_r>
 8006e8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e90:	b111      	cbz	r1, 8006e98 <_reclaim_reent+0xa8>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f844 	bl	8006f20 <_free_r>
 8006e98:	6a23      	ldr	r3, [r4, #32]
 8006e9a:	b11b      	cbz	r3, 8006ea4 <_reclaim_reent+0xb4>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ea2:	4718      	bx	r3
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000010 	.word	0x20000010

08006eac <__errno>:
 8006eac:	4b01      	ldr	r3, [pc, #4]	@ (8006eb4 <__errno+0x8>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000010 	.word	0x20000010

08006eb8 <__libc_init_array>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	2600      	movs	r6, #0
 8006ebc:	4d0c      	ldr	r5, [pc, #48]	@ (8006ef0 <__libc_init_array+0x38>)
 8006ebe:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef4 <__libc_init_array+0x3c>)
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	42a6      	cmp	r6, r4
 8006ec6:	d109      	bne.n	8006edc <__libc_init_array+0x24>
 8006ec8:	f000 fc76 	bl	80077b8 <_init>
 8006ecc:	2600      	movs	r6, #0
 8006ece:	4d0a      	ldr	r5, [pc, #40]	@ (8006ef8 <__libc_init_array+0x40>)
 8006ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8006efc <__libc_init_array+0x44>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	42a6      	cmp	r6, r4
 8006ed8:	d105      	bne.n	8006ee6 <__libc_init_array+0x2e>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee0:	4798      	blx	r3
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	e7ee      	b.n	8006ec4 <__libc_init_array+0xc>
 8006ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eea:	4798      	blx	r3
 8006eec:	3601      	adds	r6, #1
 8006eee:	e7f2      	b.n	8006ed6 <__libc_init_array+0x1e>
 8006ef0:	08007d48 	.word	0x08007d48
 8006ef4:	08007d48 	.word	0x08007d48
 8006ef8:	08007d48 	.word	0x08007d48
 8006efc:	08007d4c 	.word	0x08007d4c

08006f00 <__retarget_lock_acquire_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <__retarget_lock_release_recursive>:
 8006f02:	4770      	bx	lr

08006f04 <memcpy>:
 8006f04:	440a      	add	r2, r1
 8006f06:	4291      	cmp	r1, r2
 8006f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0c:	d100      	bne.n	8006f10 <memcpy+0xc>
 8006f0e:	4770      	bx	lr
 8006f10:	b510      	push	{r4, lr}
 8006f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1c:	d1f9      	bne.n	8006f12 <memcpy+0xe>
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <_free_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d040      	beq.n	8006faa <_free_r+0x8a>
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f0c      	subs	r4, r1, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb8      	it	lt
 8006f32:	18e4      	addlt	r4, r4, r3
 8006f34:	f000 f8de 	bl	80070f4 <__malloc_lock>
 8006f38:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <_free_r+0x8c>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	b933      	cbnz	r3, 8006f4c <_free_r+0x2c>
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f000 b8da 	b.w	8007100 <__malloc_unlock>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x42>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	1821      	adds	r1, r4, r0
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	e7ed      	b.n	8006f3e <_free_r+0x1e>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x4c>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x42>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1850      	adds	r0, r2, r1
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x6c>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	4401      	add	r1, r0
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1e0      	bne.n	8006f42 <_free_r+0x22>
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4408      	add	r0, r1
 8006f86:	6010      	str	r0, [r2, #0]
 8006f88:	6053      	str	r3, [r2, #4]
 8006f8a:	e7da      	b.n	8006f42 <_free_r+0x22>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x74>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d6      	b.n	8006f42 <_free_r+0x22>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	1821      	adds	r1, r4, r0
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf01      	itttt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	1809      	addeq	r1, r1, r0
 8006fa2:	6021      	streq	r1, [r4, #0]
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	6054      	str	r4, [r2, #4]
 8006fa8:	e7cb      	b.n	8006f42 <_free_r+0x22>
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20001f90 	.word	0x20001f90

08006fb0 <sbrk_aligned>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8006ff0 <sbrk_aligned+0x40>)
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	6831      	ldr	r1, [r6, #0]
 8006fb8:	4605      	mov	r5, r0
 8006fba:	b911      	cbnz	r1, 8006fc2 <sbrk_aligned+0x12>
 8006fbc:	f000 fba8 	bl	8007710 <_sbrk_r>
 8006fc0:	6030      	str	r0, [r6, #0]
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 fba3 	bl	8007710 <_sbrk_r>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d103      	bne.n	8006fd6 <sbrk_aligned+0x26>
 8006fce:	f04f 34ff 	mov.w	r4, #4294967295
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	1cc4      	adds	r4, r0, #3
 8006fd8:	f024 0403 	bic.w	r4, r4, #3
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d0f8      	beq.n	8006fd2 <sbrk_aligned+0x22>
 8006fe0:	1a21      	subs	r1, r4, r0
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 fb94 	bl	8007710 <_sbrk_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d1f2      	bne.n	8006fd2 <sbrk_aligned+0x22>
 8006fec:	e7ef      	b.n	8006fce <sbrk_aligned+0x1e>
 8006fee:	bf00      	nop
 8006ff0:	20001f8c 	.word	0x20001f8c

08006ff4 <_malloc_r>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	1ccd      	adds	r5, r1, #3
 8006ffa:	f025 0503 	bic.w	r5, r5, #3
 8006ffe:	3508      	adds	r5, #8
 8007000:	2d0c      	cmp	r5, #12
 8007002:	bf38      	it	cc
 8007004:	250c      	movcc	r5, #12
 8007006:	2d00      	cmp	r5, #0
 8007008:	4606      	mov	r6, r0
 800700a:	db01      	blt.n	8007010 <_malloc_r+0x1c>
 800700c:	42a9      	cmp	r1, r5
 800700e:	d904      	bls.n	800701a <_malloc_r+0x26>
 8007010:	230c      	movs	r3, #12
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	2000      	movs	r0, #0
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070f0 <_malloc_r+0xfc>
 800701e:	f000 f869 	bl	80070f4 <__malloc_lock>
 8007022:	f8d8 3000 	ldr.w	r3, [r8]
 8007026:	461c      	mov	r4, r3
 8007028:	bb44      	cbnz	r4, 800707c <_malloc_r+0x88>
 800702a:	4629      	mov	r1, r5
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff ffbf 	bl	8006fb0 <sbrk_aligned>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	4604      	mov	r4, r0
 8007036:	d158      	bne.n	80070ea <_malloc_r+0xf6>
 8007038:	f8d8 4000 	ldr.w	r4, [r8]
 800703c:	4627      	mov	r7, r4
 800703e:	2f00      	cmp	r7, #0
 8007040:	d143      	bne.n	80070ca <_malloc_r+0xd6>
 8007042:	2c00      	cmp	r4, #0
 8007044:	d04b      	beq.n	80070de <_malloc_r+0xea>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	4639      	mov	r1, r7
 800704a:	4630      	mov	r0, r6
 800704c:	eb04 0903 	add.w	r9, r4, r3
 8007050:	f000 fb5e 	bl	8007710 <_sbrk_r>
 8007054:	4581      	cmp	r9, r0
 8007056:	d142      	bne.n	80070de <_malloc_r+0xea>
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	4630      	mov	r0, r6
 800705c:	1a6d      	subs	r5, r5, r1
 800705e:	4629      	mov	r1, r5
 8007060:	f7ff ffa6 	bl	8006fb0 <sbrk_aligned>
 8007064:	3001      	adds	r0, #1
 8007066:	d03a      	beq.n	80070de <_malloc_r+0xea>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	442b      	add	r3, r5
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	f8d8 3000 	ldr.w	r3, [r8]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	bb62      	cbnz	r2, 80070d0 <_malloc_r+0xdc>
 8007076:	f8c8 7000 	str.w	r7, [r8]
 800707a:	e00f      	b.n	800709c <_malloc_r+0xa8>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	1b52      	subs	r2, r2, r5
 8007080:	d420      	bmi.n	80070c4 <_malloc_r+0xd0>
 8007082:	2a0b      	cmp	r2, #11
 8007084:	d917      	bls.n	80070b6 <_malloc_r+0xc2>
 8007086:	1961      	adds	r1, r4, r5
 8007088:	42a3      	cmp	r3, r4
 800708a:	6025      	str	r5, [r4, #0]
 800708c:	bf18      	it	ne
 800708e:	6059      	strne	r1, [r3, #4]
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	bf08      	it	eq
 8007094:	f8c8 1000 	streq.w	r1, [r8]
 8007098:	5162      	str	r2, [r4, r5]
 800709a:	604b      	str	r3, [r1, #4]
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f82f 	bl	8007100 <__malloc_unlock>
 80070a2:	f104 000b 	add.w	r0, r4, #11
 80070a6:	1d23      	adds	r3, r4, #4
 80070a8:	f020 0007 	bic.w	r0, r0, #7
 80070ac:	1ac2      	subs	r2, r0, r3
 80070ae:	bf1c      	itt	ne
 80070b0:	1a1b      	subne	r3, r3, r0
 80070b2:	50a3      	strne	r3, [r4, r2]
 80070b4:	e7af      	b.n	8007016 <_malloc_r+0x22>
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	bf0c      	ite	eq
 80070bc:	f8c8 2000 	streq.w	r2, [r8]
 80070c0:	605a      	strne	r2, [r3, #4]
 80070c2:	e7eb      	b.n	800709c <_malloc_r+0xa8>
 80070c4:	4623      	mov	r3, r4
 80070c6:	6864      	ldr	r4, [r4, #4]
 80070c8:	e7ae      	b.n	8007028 <_malloc_r+0x34>
 80070ca:	463c      	mov	r4, r7
 80070cc:	687f      	ldr	r7, [r7, #4]
 80070ce:	e7b6      	b.n	800703e <_malloc_r+0x4a>
 80070d0:	461a      	mov	r2, r3
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d1fb      	bne.n	80070d0 <_malloc_r+0xdc>
 80070d8:	2300      	movs	r3, #0
 80070da:	6053      	str	r3, [r2, #4]
 80070dc:	e7de      	b.n	800709c <_malloc_r+0xa8>
 80070de:	230c      	movs	r3, #12
 80070e0:	4630      	mov	r0, r6
 80070e2:	6033      	str	r3, [r6, #0]
 80070e4:	f000 f80c 	bl	8007100 <__malloc_unlock>
 80070e8:	e794      	b.n	8007014 <_malloc_r+0x20>
 80070ea:	6005      	str	r5, [r0, #0]
 80070ec:	e7d6      	b.n	800709c <_malloc_r+0xa8>
 80070ee:	bf00      	nop
 80070f0:	20001f90 	.word	0x20001f90

080070f4 <__malloc_lock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	@ (80070fc <__malloc_lock+0x8>)
 80070f6:	f7ff bf03 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	20001f88 	.word	0x20001f88

08007100 <__malloc_unlock>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__malloc_unlock+0x8>)
 8007102:	f7ff befe 	b.w	8006f02 <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	20001f88 	.word	0x20001f88

0800710c <__ssputs_r>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	461f      	mov	r7, r3
 8007112:	688e      	ldr	r6, [r1, #8]
 8007114:	4682      	mov	sl, r0
 8007116:	42be      	cmp	r6, r7
 8007118:	460c      	mov	r4, r1
 800711a:	4690      	mov	r8, r2
 800711c:	680b      	ldr	r3, [r1, #0]
 800711e:	d82d      	bhi.n	800717c <__ssputs_r+0x70>
 8007120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007128:	d026      	beq.n	8007178 <__ssputs_r+0x6c>
 800712a:	6965      	ldr	r5, [r4, #20]
 800712c:	6909      	ldr	r1, [r1, #16]
 800712e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007132:	eba3 0901 	sub.w	r9, r3, r1
 8007136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800713a:	1c7b      	adds	r3, r7, #1
 800713c:	444b      	add	r3, r9
 800713e:	106d      	asrs	r5, r5, #1
 8007140:	429d      	cmp	r5, r3
 8007142:	bf38      	it	cc
 8007144:	461d      	movcc	r5, r3
 8007146:	0553      	lsls	r3, r2, #21
 8007148:	d527      	bpl.n	800719a <__ssputs_r+0x8e>
 800714a:	4629      	mov	r1, r5
 800714c:	f7ff ff52 	bl	8006ff4 <_malloc_r>
 8007150:	4606      	mov	r6, r0
 8007152:	b360      	cbz	r0, 80071ae <__ssputs_r+0xa2>
 8007154:	464a      	mov	r2, r9
 8007156:	6921      	ldr	r1, [r4, #16]
 8007158:	f7ff fed4 	bl	8006f04 <memcpy>
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	6126      	str	r6, [r4, #16]
 800716a:	444e      	add	r6, r9
 800716c:	6026      	str	r6, [r4, #0]
 800716e:	463e      	mov	r6, r7
 8007170:	6165      	str	r5, [r4, #20]
 8007172:	eba5 0509 	sub.w	r5, r5, r9
 8007176:	60a5      	str	r5, [r4, #8]
 8007178:	42be      	cmp	r6, r7
 800717a:	d900      	bls.n	800717e <__ssputs_r+0x72>
 800717c:	463e      	mov	r6, r7
 800717e:	4632      	mov	r2, r6
 8007180:	4641      	mov	r1, r8
 8007182:	6820      	ldr	r0, [r4, #0]
 8007184:	f000 faaa 	bl	80076dc <memmove>
 8007188:	2000      	movs	r0, #0
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	4433      	add	r3, r6
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	462a      	mov	r2, r5
 800719c:	f000 fad6 	bl	800774c <_realloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d1e0      	bne.n	8007168 <__ssputs_r+0x5c>
 80071a6:	4650      	mov	r0, sl
 80071a8:	6921      	ldr	r1, [r4, #16]
 80071aa:	f7ff feb9 	bl	8006f20 <_free_r>
 80071ae:	230c      	movs	r3, #12
 80071b0:	f8ca 3000 	str.w	r3, [sl]
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	e7e9      	b.n	8007196 <__ssputs_r+0x8a>
	...

080071c4 <_svfiprintf_r>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	4698      	mov	r8, r3
 80071ca:	898b      	ldrh	r3, [r1, #12]
 80071cc:	4607      	mov	r7, r0
 80071ce:	061b      	lsls	r3, r3, #24
 80071d0:	460d      	mov	r5, r1
 80071d2:	4614      	mov	r4, r2
 80071d4:	b09d      	sub	sp, #116	@ 0x74
 80071d6:	d510      	bpl.n	80071fa <_svfiprintf_r+0x36>
 80071d8:	690b      	ldr	r3, [r1, #16]
 80071da:	b973      	cbnz	r3, 80071fa <_svfiprintf_r+0x36>
 80071dc:	2140      	movs	r1, #64	@ 0x40
 80071de:	f7ff ff09 	bl	8006ff4 <_malloc_r>
 80071e2:	6028      	str	r0, [r5, #0]
 80071e4:	6128      	str	r0, [r5, #16]
 80071e6:	b930      	cbnz	r0, 80071f6 <_svfiprintf_r+0x32>
 80071e8:	230c      	movs	r3, #12
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b01d      	add	sp, #116	@ 0x74
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	2340      	movs	r3, #64	@ 0x40
 80071f8:	616b      	str	r3, [r5, #20]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071fe:	2320      	movs	r3, #32
 8007200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007204:	2330      	movs	r3, #48	@ 0x30
 8007206:	f04f 0901 	mov.w	r9, #1
 800720a:	f8cd 800c 	str.w	r8, [sp, #12]
 800720e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80073a8 <_svfiprintf_r+0x1e4>
 8007212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007216:	4623      	mov	r3, r4
 8007218:	469a      	mov	sl, r3
 800721a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721e:	b10a      	cbz	r2, 8007224 <_svfiprintf_r+0x60>
 8007220:	2a25      	cmp	r2, #37	@ 0x25
 8007222:	d1f9      	bne.n	8007218 <_svfiprintf_r+0x54>
 8007224:	ebba 0b04 	subs.w	fp, sl, r4
 8007228:	d00b      	beq.n	8007242 <_svfiprintf_r+0x7e>
 800722a:	465b      	mov	r3, fp
 800722c:	4622      	mov	r2, r4
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ff6b 	bl	800710c <__ssputs_r>
 8007236:	3001      	adds	r0, #1
 8007238:	f000 80a7 	beq.w	800738a <_svfiprintf_r+0x1c6>
 800723c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800723e:	445a      	add	r2, fp
 8007240:	9209      	str	r2, [sp, #36]	@ 0x24
 8007242:	f89a 3000 	ldrb.w	r3, [sl]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 809f 	beq.w	800738a <_svfiprintf_r+0x1c6>
 800724c:	2300      	movs	r3, #0
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007256:	f10a 0a01 	add.w	sl, sl, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	9307      	str	r3, [sp, #28]
 800725e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007262:	931a      	str	r3, [sp, #104]	@ 0x68
 8007264:	4654      	mov	r4, sl
 8007266:	2205      	movs	r2, #5
 8007268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726c:	484e      	ldr	r0, [pc, #312]	@ (80073a8 <_svfiprintf_r+0x1e4>)
 800726e:	f000 fa5f 	bl	8007730 <memchr>
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	b9d8      	cbnz	r0, 80072ae <_svfiprintf_r+0xea>
 8007276:	06d0      	lsls	r0, r2, #27
 8007278:	bf44      	itt	mi
 800727a:	2320      	movmi	r3, #32
 800727c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007280:	0711      	lsls	r1, r2, #28
 8007282:	bf44      	itt	mi
 8007284:	232b      	movmi	r3, #43	@ 0x2b
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800728a:	f89a 3000 	ldrb.w	r3, [sl]
 800728e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007290:	d015      	beq.n	80072be <_svfiprintf_r+0xfa>
 8007292:	4654      	mov	r4, sl
 8007294:	2000      	movs	r0, #0
 8007296:	f04f 0c0a 	mov.w	ip, #10
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	4621      	mov	r1, r4
 800729e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a2:	3b30      	subs	r3, #48	@ 0x30
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d94b      	bls.n	8007340 <_svfiprintf_r+0x17c>
 80072a8:	b1b0      	cbz	r0, 80072d8 <_svfiprintf_r+0x114>
 80072aa:	9207      	str	r2, [sp, #28]
 80072ac:	e014      	b.n	80072d8 <_svfiprintf_r+0x114>
 80072ae:	eba0 0308 	sub.w	r3, r0, r8
 80072b2:	fa09 f303 	lsl.w	r3, r9, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	46a2      	mov	sl, r4
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	e7d2      	b.n	8007264 <_svfiprintf_r+0xa0>
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	1d19      	adds	r1, r3, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	9103      	str	r1, [sp, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfbb      	ittet	lt
 80072ca:	425b      	neglt	r3, r3
 80072cc:	f042 0202 	orrlt.w	r2, r2, #2
 80072d0:	9307      	strge	r3, [sp, #28]
 80072d2:	9307      	strlt	r3, [sp, #28]
 80072d4:	bfb8      	it	lt
 80072d6:	9204      	strlt	r2, [sp, #16]
 80072d8:	7823      	ldrb	r3, [r4, #0]
 80072da:	2b2e      	cmp	r3, #46	@ 0x2e
 80072dc:	d10a      	bne.n	80072f4 <_svfiprintf_r+0x130>
 80072de:	7863      	ldrb	r3, [r4, #1]
 80072e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e2:	d132      	bne.n	800734a <_svfiprintf_r+0x186>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	3402      	adds	r4, #2
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	9203      	str	r2, [sp, #12]
 80072ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072f2:	9305      	str	r3, [sp, #20]
 80072f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80073ac <_svfiprintf_r+0x1e8>
 80072f8:	2203      	movs	r2, #3
 80072fa:	4650      	mov	r0, sl
 80072fc:	7821      	ldrb	r1, [r4, #0]
 80072fe:	f000 fa17 	bl	8007730 <memchr>
 8007302:	b138      	cbz	r0, 8007314 <_svfiprintf_r+0x150>
 8007304:	2240      	movs	r2, #64	@ 0x40
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	eba0 000a 	sub.w	r0, r0, sl
 800730c:	4082      	lsls	r2, r0
 800730e:	4313      	orrs	r3, r2
 8007310:	3401      	adds	r4, #1
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007318:	2206      	movs	r2, #6
 800731a:	4825      	ldr	r0, [pc, #148]	@ (80073b0 <_svfiprintf_r+0x1ec>)
 800731c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007320:	f000 fa06 	bl	8007730 <memchr>
 8007324:	2800      	cmp	r0, #0
 8007326:	d036      	beq.n	8007396 <_svfiprintf_r+0x1d2>
 8007328:	4b22      	ldr	r3, [pc, #136]	@ (80073b4 <_svfiprintf_r+0x1f0>)
 800732a:	bb1b      	cbnz	r3, 8007374 <_svfiprintf_r+0x1b0>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	3307      	adds	r3, #7
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	3308      	adds	r3, #8
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733a:	4433      	add	r3, r6
 800733c:	9309      	str	r3, [sp, #36]	@ 0x24
 800733e:	e76a      	b.n	8007216 <_svfiprintf_r+0x52>
 8007340:	460c      	mov	r4, r1
 8007342:	2001      	movs	r0, #1
 8007344:	fb0c 3202 	mla	r2, ip, r2, r3
 8007348:	e7a8      	b.n	800729c <_svfiprintf_r+0xd8>
 800734a:	2300      	movs	r3, #0
 800734c:	f04f 0c0a 	mov.w	ip, #10
 8007350:	4619      	mov	r1, r3
 8007352:	3401      	adds	r4, #1
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	4620      	mov	r0, r4
 8007358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735c:	3a30      	subs	r2, #48	@ 0x30
 800735e:	2a09      	cmp	r2, #9
 8007360:	d903      	bls.n	800736a <_svfiprintf_r+0x1a6>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c6      	beq.n	80072f4 <_svfiprintf_r+0x130>
 8007366:	9105      	str	r1, [sp, #20]
 8007368:	e7c4      	b.n	80072f4 <_svfiprintf_r+0x130>
 800736a:	4604      	mov	r4, r0
 800736c:	2301      	movs	r3, #1
 800736e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007372:	e7f0      	b.n	8007356 <_svfiprintf_r+0x192>
 8007374:	ab03      	add	r3, sp, #12
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	462a      	mov	r2, r5
 800737a:	4638      	mov	r0, r7
 800737c:	4b0e      	ldr	r3, [pc, #56]	@ (80073b8 <_svfiprintf_r+0x1f4>)
 800737e:	a904      	add	r1, sp, #16
 8007380:	f3af 8000 	nop.w
 8007384:	1c42      	adds	r2, r0, #1
 8007386:	4606      	mov	r6, r0
 8007388:	d1d6      	bne.n	8007338 <_svfiprintf_r+0x174>
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	065b      	lsls	r3, r3, #25
 800738e:	f53f af2d 	bmi.w	80071ec <_svfiprintf_r+0x28>
 8007392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007394:	e72c      	b.n	80071f0 <_svfiprintf_r+0x2c>
 8007396:	ab03      	add	r3, sp, #12
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	462a      	mov	r2, r5
 800739c:	4638      	mov	r0, r7
 800739e:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <_svfiprintf_r+0x1f4>)
 80073a0:	a904      	add	r1, sp, #16
 80073a2:	f000 f87d 	bl	80074a0 <_printf_i>
 80073a6:	e7ed      	b.n	8007384 <_svfiprintf_r+0x1c0>
 80073a8:	08007d0a 	.word	0x08007d0a
 80073ac:	08007d10 	.word	0x08007d10
 80073b0:	08007d14 	.word	0x08007d14
 80073b4:	00000000 	.word	0x00000000
 80073b8:	0800710d 	.word	0x0800710d

080073bc <_printf_common>:
 80073bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	4616      	mov	r6, r2
 80073c2:	4698      	mov	r8, r3
 80073c4:	688a      	ldr	r2, [r1, #8]
 80073c6:	690b      	ldr	r3, [r1, #16]
 80073c8:	4607      	mov	r7, r0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfb8      	it	lt
 80073ce:	4613      	movlt	r3, r2
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073d6:	460c      	mov	r4, r1
 80073d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073dc:	b10a      	cbz	r2, 80073e2 <_printf_common+0x26>
 80073de:	3301      	adds	r3, #1
 80073e0:	6033      	str	r3, [r6, #0]
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	0699      	lsls	r1, r3, #26
 80073e6:	bf42      	ittt	mi
 80073e8:	6833      	ldrmi	r3, [r6, #0]
 80073ea:	3302      	addmi	r3, #2
 80073ec:	6033      	strmi	r3, [r6, #0]
 80073ee:	6825      	ldr	r5, [r4, #0]
 80073f0:	f015 0506 	ands.w	r5, r5, #6
 80073f4:	d106      	bne.n	8007404 <_printf_common+0x48>
 80073f6:	f104 0a19 	add.w	sl, r4, #25
 80073fa:	68e3      	ldr	r3, [r4, #12]
 80073fc:	6832      	ldr	r2, [r6, #0]
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	42ab      	cmp	r3, r5
 8007402:	dc2b      	bgt.n	800745c <_printf_common+0xa0>
 8007404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	3b00      	subs	r3, #0
 800740c:	bf18      	it	ne
 800740e:	2301      	movne	r3, #1
 8007410:	0692      	lsls	r2, r2, #26
 8007412:	d430      	bmi.n	8007476 <_printf_common+0xba>
 8007414:	4641      	mov	r1, r8
 8007416:	4638      	mov	r0, r7
 8007418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800741c:	47c8      	blx	r9
 800741e:	3001      	adds	r0, #1
 8007420:	d023      	beq.n	800746a <_printf_common+0xae>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	f003 0306 	and.w	r3, r3, #6
 800742a:	2b04      	cmp	r3, #4
 800742c:	bf14      	ite	ne
 800742e:	2500      	movne	r5, #0
 8007430:	6833      	ldreq	r3, [r6, #0]
 8007432:	f04f 0600 	mov.w	r6, #0
 8007436:	bf08      	it	eq
 8007438:	68e5      	ldreq	r5, [r4, #12]
 800743a:	f104 041a 	add.w	r4, r4, #26
 800743e:	bf08      	it	eq
 8007440:	1aed      	subeq	r5, r5, r3
 8007442:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007446:	bf08      	it	eq
 8007448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800744c:	4293      	cmp	r3, r2
 800744e:	bfc4      	itt	gt
 8007450:	1a9b      	subgt	r3, r3, r2
 8007452:	18ed      	addgt	r5, r5, r3
 8007454:	42b5      	cmp	r5, r6
 8007456:	d11a      	bne.n	800748e <_printf_common+0xd2>
 8007458:	2000      	movs	r0, #0
 800745a:	e008      	b.n	800746e <_printf_common+0xb2>
 800745c:	2301      	movs	r3, #1
 800745e:	4652      	mov	r2, sl
 8007460:	4641      	mov	r1, r8
 8007462:	4638      	mov	r0, r7
 8007464:	47c8      	blx	r9
 8007466:	3001      	adds	r0, #1
 8007468:	d103      	bne.n	8007472 <_printf_common+0xb6>
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007472:	3501      	adds	r5, #1
 8007474:	e7c1      	b.n	80073fa <_printf_common+0x3e>
 8007476:	2030      	movs	r0, #48	@ 0x30
 8007478:	18e1      	adds	r1, r4, r3
 800747a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007484:	4422      	add	r2, r4
 8007486:	3302      	adds	r3, #2
 8007488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800748c:	e7c2      	b.n	8007414 <_printf_common+0x58>
 800748e:	2301      	movs	r3, #1
 8007490:	4622      	mov	r2, r4
 8007492:	4641      	mov	r1, r8
 8007494:	4638      	mov	r0, r7
 8007496:	47c8      	blx	r9
 8007498:	3001      	adds	r0, #1
 800749a:	d0e6      	beq.n	800746a <_printf_common+0xae>
 800749c:	3601      	adds	r6, #1
 800749e:	e7d9      	b.n	8007454 <_printf_common+0x98>

080074a0 <_printf_i>:
 80074a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	7e0f      	ldrb	r7, [r1, #24]
 80074a6:	4691      	mov	r9, r2
 80074a8:	2f78      	cmp	r7, #120	@ 0x78
 80074aa:	4680      	mov	r8, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	469a      	mov	sl, r3
 80074b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074b6:	d807      	bhi.n	80074c8 <_printf_i+0x28>
 80074b8:	2f62      	cmp	r7, #98	@ 0x62
 80074ba:	d80a      	bhi.n	80074d2 <_printf_i+0x32>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	f000 80d1 	beq.w	8007664 <_printf_i+0x1c4>
 80074c2:	2f58      	cmp	r7, #88	@ 0x58
 80074c4:	f000 80b8 	beq.w	8007638 <_printf_i+0x198>
 80074c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074d0:	e03a      	b.n	8007548 <_printf_i+0xa8>
 80074d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074d6:	2b15      	cmp	r3, #21
 80074d8:	d8f6      	bhi.n	80074c8 <_printf_i+0x28>
 80074da:	a101      	add	r1, pc, #4	@ (adr r1, 80074e0 <_printf_i+0x40>)
 80074dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e0:	08007539 	.word	0x08007539
 80074e4:	0800754d 	.word	0x0800754d
 80074e8:	080074c9 	.word	0x080074c9
 80074ec:	080074c9 	.word	0x080074c9
 80074f0:	080074c9 	.word	0x080074c9
 80074f4:	080074c9 	.word	0x080074c9
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	080074c9 	.word	0x080074c9
 8007500:	080074c9 	.word	0x080074c9
 8007504:	080074c9 	.word	0x080074c9
 8007508:	080074c9 	.word	0x080074c9
 800750c:	0800764b 	.word	0x0800764b
 8007510:	08007577 	.word	0x08007577
 8007514:	08007605 	.word	0x08007605
 8007518:	080074c9 	.word	0x080074c9
 800751c:	080074c9 	.word	0x080074c9
 8007520:	0800766d 	.word	0x0800766d
 8007524:	080074c9 	.word	0x080074c9
 8007528:	08007577 	.word	0x08007577
 800752c:	080074c9 	.word	0x080074c9
 8007530:	080074c9 	.word	0x080074c9
 8007534:	0800760d 	.word	0x0800760d
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6032      	str	r2, [r6, #0]
 8007540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007548:	2301      	movs	r3, #1
 800754a:	e09c      	b.n	8007686 <_printf_i+0x1e6>
 800754c:	6833      	ldr	r3, [r6, #0]
 800754e:	6820      	ldr	r0, [r4, #0]
 8007550:	1d19      	adds	r1, r3, #4
 8007552:	6031      	str	r1, [r6, #0]
 8007554:	0606      	lsls	r6, r0, #24
 8007556:	d501      	bpl.n	800755c <_printf_i+0xbc>
 8007558:	681d      	ldr	r5, [r3, #0]
 800755a:	e003      	b.n	8007564 <_printf_i+0xc4>
 800755c:	0645      	lsls	r5, r0, #25
 800755e:	d5fb      	bpl.n	8007558 <_printf_i+0xb8>
 8007560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007564:	2d00      	cmp	r5, #0
 8007566:	da03      	bge.n	8007570 <_printf_i+0xd0>
 8007568:	232d      	movs	r3, #45	@ 0x2d
 800756a:	426d      	negs	r5, r5
 800756c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007570:	230a      	movs	r3, #10
 8007572:	4858      	ldr	r0, [pc, #352]	@ (80076d4 <_printf_i+0x234>)
 8007574:	e011      	b.n	800759a <_printf_i+0xfa>
 8007576:	6821      	ldr	r1, [r4, #0]
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	0608      	lsls	r0, r1, #24
 800757c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007580:	d402      	bmi.n	8007588 <_printf_i+0xe8>
 8007582:	0649      	lsls	r1, r1, #25
 8007584:	bf48      	it	mi
 8007586:	b2ad      	uxthmi	r5, r5
 8007588:	2f6f      	cmp	r7, #111	@ 0x6f
 800758a:	6033      	str	r3, [r6, #0]
 800758c:	bf14      	ite	ne
 800758e:	230a      	movne	r3, #10
 8007590:	2308      	moveq	r3, #8
 8007592:	4850      	ldr	r0, [pc, #320]	@ (80076d4 <_printf_i+0x234>)
 8007594:	2100      	movs	r1, #0
 8007596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800759a:	6866      	ldr	r6, [r4, #4]
 800759c:	2e00      	cmp	r6, #0
 800759e:	60a6      	str	r6, [r4, #8]
 80075a0:	db05      	blt.n	80075ae <_printf_i+0x10e>
 80075a2:	6821      	ldr	r1, [r4, #0]
 80075a4:	432e      	orrs	r6, r5
 80075a6:	f021 0104 	bic.w	r1, r1, #4
 80075aa:	6021      	str	r1, [r4, #0]
 80075ac:	d04b      	beq.n	8007646 <_printf_i+0x1a6>
 80075ae:	4616      	mov	r6, r2
 80075b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80075b4:	fb03 5711 	mls	r7, r3, r1, r5
 80075b8:	5dc7      	ldrb	r7, [r0, r7]
 80075ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075be:	462f      	mov	r7, r5
 80075c0:	42bb      	cmp	r3, r7
 80075c2:	460d      	mov	r5, r1
 80075c4:	d9f4      	bls.n	80075b0 <_printf_i+0x110>
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d10b      	bne.n	80075e2 <_printf_i+0x142>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	07df      	lsls	r7, r3, #31
 80075ce:	d508      	bpl.n	80075e2 <_printf_i+0x142>
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	6861      	ldr	r1, [r4, #4]
 80075d4:	4299      	cmp	r1, r3
 80075d6:	bfde      	ittt	le
 80075d8:	2330      	movle	r3, #48	@ 0x30
 80075da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075e2:	1b92      	subs	r2, r2, r6
 80075e4:	6122      	str	r2, [r4, #16]
 80075e6:	464b      	mov	r3, r9
 80075e8:	4621      	mov	r1, r4
 80075ea:	4640      	mov	r0, r8
 80075ec:	f8cd a000 	str.w	sl, [sp]
 80075f0:	aa03      	add	r2, sp, #12
 80075f2:	f7ff fee3 	bl	80073bc <_printf_common>
 80075f6:	3001      	adds	r0, #1
 80075f8:	d14a      	bne.n	8007690 <_printf_i+0x1f0>
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	b004      	add	sp, #16
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f043 0320 	orr.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	2778      	movs	r7, #120	@ 0x78
 800760e:	4832      	ldr	r0, [pc, #200]	@ (80076d8 <_printf_i+0x238>)
 8007610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	6831      	ldr	r1, [r6, #0]
 8007618:	061f      	lsls	r7, r3, #24
 800761a:	f851 5b04 	ldr.w	r5, [r1], #4
 800761e:	d402      	bmi.n	8007626 <_printf_i+0x186>
 8007620:	065f      	lsls	r7, r3, #25
 8007622:	bf48      	it	mi
 8007624:	b2ad      	uxthmi	r5, r5
 8007626:	6031      	str	r1, [r6, #0]
 8007628:	07d9      	lsls	r1, r3, #31
 800762a:	bf44      	itt	mi
 800762c:	f043 0320 	orrmi.w	r3, r3, #32
 8007630:	6023      	strmi	r3, [r4, #0]
 8007632:	b11d      	cbz	r5, 800763c <_printf_i+0x19c>
 8007634:	2310      	movs	r3, #16
 8007636:	e7ad      	b.n	8007594 <_printf_i+0xf4>
 8007638:	4826      	ldr	r0, [pc, #152]	@ (80076d4 <_printf_i+0x234>)
 800763a:	e7e9      	b.n	8007610 <_printf_i+0x170>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	f023 0320 	bic.w	r3, r3, #32
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	e7f6      	b.n	8007634 <_printf_i+0x194>
 8007646:	4616      	mov	r6, r2
 8007648:	e7bd      	b.n	80075c6 <_printf_i+0x126>
 800764a:	6833      	ldr	r3, [r6, #0]
 800764c:	6825      	ldr	r5, [r4, #0]
 800764e:	1d18      	adds	r0, r3, #4
 8007650:	6961      	ldr	r1, [r4, #20]
 8007652:	6030      	str	r0, [r6, #0]
 8007654:	062e      	lsls	r6, r5, #24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	d501      	bpl.n	800765e <_printf_i+0x1be>
 800765a:	6019      	str	r1, [r3, #0]
 800765c:	e002      	b.n	8007664 <_printf_i+0x1c4>
 800765e:	0668      	lsls	r0, r5, #25
 8007660:	d5fb      	bpl.n	800765a <_printf_i+0x1ba>
 8007662:	8019      	strh	r1, [r3, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	4616      	mov	r6, r2
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	e7bc      	b.n	80075e6 <_printf_i+0x146>
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	2100      	movs	r1, #0
 8007670:	1d1a      	adds	r2, r3, #4
 8007672:	6032      	str	r2, [r6, #0]
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	6862      	ldr	r2, [r4, #4]
 8007678:	4630      	mov	r0, r6
 800767a:	f000 f859 	bl	8007730 <memchr>
 800767e:	b108      	cbz	r0, 8007684 <_printf_i+0x1e4>
 8007680:	1b80      	subs	r0, r0, r6
 8007682:	6060      	str	r0, [r4, #4]
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	2300      	movs	r3, #0
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768e:	e7aa      	b.n	80075e6 <_printf_i+0x146>
 8007690:	4632      	mov	r2, r6
 8007692:	4649      	mov	r1, r9
 8007694:	4640      	mov	r0, r8
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	47d0      	blx	sl
 800769a:	3001      	adds	r0, #1
 800769c:	d0ad      	beq.n	80075fa <_printf_i+0x15a>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	079b      	lsls	r3, r3, #30
 80076a2:	d413      	bmi.n	80076cc <_printf_i+0x22c>
 80076a4:	68e0      	ldr	r0, [r4, #12]
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	4298      	cmp	r0, r3
 80076aa:	bfb8      	it	lt
 80076ac:	4618      	movlt	r0, r3
 80076ae:	e7a6      	b.n	80075fe <_printf_i+0x15e>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4632      	mov	r2, r6
 80076b4:	4649      	mov	r1, r9
 80076b6:	4640      	mov	r0, r8
 80076b8:	47d0      	blx	sl
 80076ba:	3001      	adds	r0, #1
 80076bc:	d09d      	beq.n	80075fa <_printf_i+0x15a>
 80076be:	3501      	adds	r5, #1
 80076c0:	68e3      	ldr	r3, [r4, #12]
 80076c2:	9903      	ldr	r1, [sp, #12]
 80076c4:	1a5b      	subs	r3, r3, r1
 80076c6:	42ab      	cmp	r3, r5
 80076c8:	dcf2      	bgt.n	80076b0 <_printf_i+0x210>
 80076ca:	e7eb      	b.n	80076a4 <_printf_i+0x204>
 80076cc:	2500      	movs	r5, #0
 80076ce:	f104 0619 	add.w	r6, r4, #25
 80076d2:	e7f5      	b.n	80076c0 <_printf_i+0x220>
 80076d4:	08007d1b 	.word	0x08007d1b
 80076d8:	08007d2c 	.word	0x08007d2c

080076dc <memmove>:
 80076dc:	4288      	cmp	r0, r1
 80076de:	b510      	push	{r4, lr}
 80076e0:	eb01 0402 	add.w	r4, r1, r2
 80076e4:	d902      	bls.n	80076ec <memmove+0x10>
 80076e6:	4284      	cmp	r4, r0
 80076e8:	4623      	mov	r3, r4
 80076ea:	d807      	bhi.n	80076fc <memmove+0x20>
 80076ec:	1e43      	subs	r3, r0, #1
 80076ee:	42a1      	cmp	r1, r4
 80076f0:	d008      	beq.n	8007704 <memmove+0x28>
 80076f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076fa:	e7f8      	b.n	80076ee <memmove+0x12>
 80076fc:	4601      	mov	r1, r0
 80076fe:	4402      	add	r2, r0
 8007700:	428a      	cmp	r2, r1
 8007702:	d100      	bne.n	8007706 <memmove+0x2a>
 8007704:	bd10      	pop	{r4, pc}
 8007706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800770a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800770e:	e7f7      	b.n	8007700 <memmove+0x24>

08007710 <_sbrk_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	2300      	movs	r3, #0
 8007714:	4d05      	ldr	r5, [pc, #20]	@ (800772c <_sbrk_r+0x1c>)
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7f9 fd36 	bl	800118c <_sbrk>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_sbrk_r+0x1a>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_sbrk_r+0x1a>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20001f84 	.word	0x20001f84

08007730 <memchr>:
 8007730:	4603      	mov	r3, r0
 8007732:	b510      	push	{r4, lr}
 8007734:	b2c9      	uxtb	r1, r1
 8007736:	4402      	add	r2, r0
 8007738:	4293      	cmp	r3, r2
 800773a:	4618      	mov	r0, r3
 800773c:	d101      	bne.n	8007742 <memchr+0x12>
 800773e:	2000      	movs	r0, #0
 8007740:	e003      	b.n	800774a <memchr+0x1a>
 8007742:	7804      	ldrb	r4, [r0, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	428c      	cmp	r4, r1
 8007748:	d1f6      	bne.n	8007738 <memchr+0x8>
 800774a:	bd10      	pop	{r4, pc}

0800774c <_realloc_r>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	4607      	mov	r7, r0
 8007752:	4614      	mov	r4, r2
 8007754:	460d      	mov	r5, r1
 8007756:	b921      	cbnz	r1, 8007762 <_realloc_r+0x16>
 8007758:	4611      	mov	r1, r2
 800775a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	f7ff bc49 	b.w	8006ff4 <_malloc_r>
 8007762:	b92a      	cbnz	r2, 8007770 <_realloc_r+0x24>
 8007764:	f7ff fbdc 	bl	8006f20 <_free_r>
 8007768:	4625      	mov	r5, r4
 800776a:	4628      	mov	r0, r5
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	f000 f81a 	bl	80077a8 <_malloc_usable_size_r>
 8007774:	4284      	cmp	r4, r0
 8007776:	4606      	mov	r6, r0
 8007778:	d802      	bhi.n	8007780 <_realloc_r+0x34>
 800777a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777e:	d8f4      	bhi.n	800776a <_realloc_r+0x1e>
 8007780:	4621      	mov	r1, r4
 8007782:	4638      	mov	r0, r7
 8007784:	f7ff fc36 	bl	8006ff4 <_malloc_r>
 8007788:	4680      	mov	r8, r0
 800778a:	b908      	cbnz	r0, 8007790 <_realloc_r+0x44>
 800778c:	4645      	mov	r5, r8
 800778e:	e7ec      	b.n	800776a <_realloc_r+0x1e>
 8007790:	42b4      	cmp	r4, r6
 8007792:	4622      	mov	r2, r4
 8007794:	4629      	mov	r1, r5
 8007796:	bf28      	it	cs
 8007798:	4632      	movcs	r2, r6
 800779a:	f7ff fbb3 	bl	8006f04 <memcpy>
 800779e:	4629      	mov	r1, r5
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7ff fbbd 	bl	8006f20 <_free_r>
 80077a6:	e7f1      	b.n	800778c <_realloc_r+0x40>

080077a8 <_malloc_usable_size_r>:
 80077a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ac:	1f18      	subs	r0, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfbc      	itt	lt
 80077b2:	580b      	ldrlt	r3, [r1, r0]
 80077b4:	18c0      	addlt	r0, r0, r3
 80077b6:	4770      	bx	lr

080077b8 <_init>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr

080077c4 <_fini>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	bf00      	nop
 80077c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ca:	bc08      	pop	{r3}
 80077cc:	469e      	mov	lr, r3
 80077ce:	4770      	bx	lr
