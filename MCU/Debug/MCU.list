
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004268  08004268  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004268  08004268  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004268  08004268  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004268  08004268  00005268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800426c  0800426c  0000526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004270  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  20000060  080042d0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  080042d0  000063ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016142  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d1  00000000  00000000  0001c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0001f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff9  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2c7  00000000  00000000  000216e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a08  00000000  00000000  0003b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a386  00000000  00000000  000543b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee73e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005868  00000000  00000000  000ee784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f3fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004198 	.word	0x08004198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004198 	.word	0x08004198

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fd37 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f855 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f9e9 	bl	8000564 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000192:	f000 f8eb 	bl	800036c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f967 	bl	8000468 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f98f 	bl	80004bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f9b7 	bl	8000510 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80001a2:	f000 f8a5 	bl	80002f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of State_machine */
  osThreadDef(State_machine, Update_StateMachine, osPriorityNormal, 0, 128);
 80001aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000220 <main+0xa0>)
 80001ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001b0:	461d      	mov	r5, r3
 80001b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  State_machineHandle = osThreadCreate(osThread(State_machine), NULL);
 80001be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 fcff 	bl	8002bc8 <osThreadCreate>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a15      	ldr	r2, [pc, #84]	@ (8000224 <main+0xa4>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Update_screen */
  osThreadDef(Update_screen, Update_Screen, osPriorityIdle, 0, 128);
 80001d0:	4b15      	ldr	r3, [pc, #84]	@ (8000228 <main+0xa8>)
 80001d2:	f107 0420 	add.w	r4, r7, #32
 80001d6:	461d      	mov	r5, r3
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Update_screenHandle = osThreadCreate(osThread(Update_screen), NULL);
 80001e4:	f107 0320 	add.w	r3, r7, #32
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fcec 	bl	8002bc8 <osThreadCreate>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a0e      	ldr	r2, [pc, #56]	@ (800022c <main+0xac>)
 80001f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Update_measure */
  osThreadDef(Update_measure, Update_Measures, osPriorityIdle, 0, 128);
 80001f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <main+0xb0>)
 80001f8:	1d3c      	adds	r4, r7, #4
 80001fa:	461d      	mov	r5, r3
 80001fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Update_measureHandle = osThreadCreate(osThread(Update_measure), NULL);
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f002 fcdb 	bl	8002bc8 <osThreadCreate>
 8000212:	4603      	mov	r3, r0
 8000214:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <main+0xb4>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f002 fccf 	bl	8002bba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	bf00      	nop
 800021e:	e7fd      	b.n	800021c <main+0x9c>
 8000220:	080041c0 	.word	0x080041c0
 8000224:	200004c0 	.word	0x200004c0
 8000228:	080041ec 	.word	0x080041ec
 800022c:	200004c4 	.word	0x200004c4
 8000230:	08004218 	.word	0x08004218
 8000234:	200004c8 	.word	0x200004c8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	@ 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000242:	2228      	movs	r2, #40	@ 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fec6 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fab6 	bl	8001800 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 fa38 	bl	800070e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fd22 	bl	8001d04 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 fa22 	bl	800070e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ca:	2302      	movs	r3, #2
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80002ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fed2 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e2:	f000 fa14 	bl	800070e <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3750      	adds	r7, #80	@ 0x50
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_ADC1_Init+0x74>)
 8000302:	4a19      	ldr	r2, [pc, #100]	@ (8000368 <MX_ADC1_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <MX_ADC1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <MX_ADC1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_ADC1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <MX_ADC1_Init+0x74>)
 800031a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800031e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000320:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <MX_ADC1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_ADC1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032c:	480d      	ldr	r0, [pc, #52]	@ (8000364 <MX_ADC1_Init+0x74>)
 800032e:	f000 fc95 	bl	8000c5c <HAL_ADC_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000338:	f000 f9e9 	bl	800070e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800033c:	2308      	movs	r3, #8
 800033e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000340:	2301      	movs	r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_ADC1_Init+0x74>)
 800034e:	f000 fd5d 	bl	8000e0c <HAL_ADC_ConfigChannel>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000358:	f000 f9d9 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000031c 	.word	0x2000031c
 8000368:	40012400 	.word	0x40012400

0800036c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <MX_I2C1_Init+0x50>)
 8000372:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <MX_I2C1_Init+0x54>)
 8000374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <MX_I2C1_Init+0x50>)
 8000378:	4a12      	ldr	r2, [pc, #72]	@ (80003c4 <MX_I2C1_Init+0x58>)
 800037a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <MX_I2C1_Init+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <MX_I2C1_Init+0x50>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <MX_I2C1_Init+0x50>)
 800038a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800038e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <MX_I2C1_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <MX_I2C1_Init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	@ (80003bc <MX_I2C1_Init+0x50>)
 80003aa:	f001 f8e5 	bl	8001578 <HAL_I2C_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b4:	f000 f9ab 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2000034c 	.word	0x2000034c
 80003c0:	40005400 	.word	0x40005400
 80003c4:	000186a0 	.word	0x000186a0

080003c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_TIM1_Init+0x98>)
 80003e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000464 <MX_TIM1_Init+0x9c>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <MX_TIM1_Init+0x98>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_TIM1_Init+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <MX_TIM1_Init+0x98>)
 80003f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_TIM1_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000404:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <MX_TIM1_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_TIM1_Init+0x98>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000410:	4813      	ldr	r0, [pc, #76]	@ (8000460 <MX_TIM1_Init+0x98>)
 8000412:	f001 feeb 	bl	80021ec <HAL_TIM_Base_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800041c:	f000 f977 	bl	800070e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	4619      	mov	r1, r3
 800042c:	480c      	ldr	r0, [pc, #48]	@ (8000460 <MX_TIM1_Init+0x98>)
 800042e:	f002 f86f 	bl	8002510 <HAL_TIM_ConfigClockSource>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000438:	f000 f969 	bl	800070e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043c:	2300      	movs	r3, #0
 800043e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000444:	463b      	mov	r3, r7
 8000446:	4619      	mov	r1, r3
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_TIM1_Init+0x98>)
 800044a:	f002 fa51 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000454:	f000 f95b 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200003a0 	.word	0x200003a0
 8000464:	40012c00 	.word	0x40012c00

08000468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 800046e:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <MX_USART1_UART_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_USART1_UART_Init+0x4c>)
 80004a0:	f002 fa96 	bl	80029d0 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004aa:	f000 f930 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200003e8 	.word	0x200003e8
 80004b8:	40013800 	.word	0x40013800

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	@ (800050c <MX_USART2_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f002 fa6c 	bl	80029d0 <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f906 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000430 	.word	0x20000430
 800050c:	40004400 	.word	0x40004400

08000510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000516:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <MX_USART3_UART_Init+0x50>)
 8000518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <MX_USART3_UART_Init+0x4c>)
 8000548:	f002 fa42 	bl	80029d0 <HAL_UART_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000552:	f000 f8dc 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000478 	.word	0x20000478
 8000560:	40004800 	.word	0x40004800

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	4b4c      	ldr	r3, [pc, #304]	@ (80006ac <MX_GPIO_Init+0x148>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a4b      	ldr	r2, [pc, #300]	@ (80006ac <MX_GPIO_Init+0x148>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <MX_GPIO_Init+0x148>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0310 	and.w	r3, r3, #16
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b46      	ldr	r3, [pc, #280]	@ (80006ac <MX_GPIO_Init+0x148>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a45      	ldr	r2, [pc, #276]	@ (80006ac <MX_GPIO_Init+0x148>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b43      	ldr	r3, [pc, #268]	@ (80006ac <MX_GPIO_Init+0x148>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b40      	ldr	r3, [pc, #256]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a3f      	ldr	r2, [pc, #252]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b3a      	ldr	r3, [pc, #232]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a39      	ldr	r2, [pc, #228]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <MX_GPIO_Init+0x148>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80005de:	4834      	ldr	r0, [pc, #208]	@ (80006b0 <MX_GPIO_Init+0x14c>)
 80005e0:	f000 ffb2 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin|LED_CEL_Pin|OUT2_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f648 0110 	movw	r1, #34832	@ 0x8810
 80005ea:	4832      	ldr	r0, [pc, #200]	@ (80006b4 <MX_GPIO_Init+0x150>)
 80005ec:	f000 ffac 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 80005f0:	2200      	movs	r2, #0
 80005f2:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 80005f6:	4830      	ldr	r0, [pc, #192]	@ (80006b8 <MX_GPIO_Init+0x154>)
 80005f8:	f000 ffa6 	bl	8001548 <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|BUZZER_Pin;
 80005fc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4826      	ldr	r0, [pc, #152]	@ (80006b0 <MX_GPIO_Init+0x14c>)
 8000616:	f000 fe13 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 800061a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <MX_GPIO_Init+0x14c>)
 8000630:	f000 fe06 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP3_Pin|BP2_Pin|BP3_Pin
 8000634:	23e3      	movs	r3, #227	@ 0xe3
 8000636:	613b      	str	r3, [r7, #16]
                          |BP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <MX_GPIO_Init+0x150>)
 8000648:	f000 fdfa 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin|LED_CEL_Pin|OUT2_Pin;
 800064c:	f648 0310 	movw	r3, #34832	@ 0x8810
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <MX_GPIO_Init+0x150>)
 8000666:	f000 fdeb 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 800066a:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 800066e:	613b      	str	r3, [r7, #16]
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	4619      	mov	r1, r3
 8000682:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <MX_GPIO_Init+0x154>)
 8000684:	f000 fddc 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_GPIO_Init+0x158>)
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_GPIO_Init+0x154>)
 800069e:	f000 fdcf 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40011000 	.word	0x40011000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	10110000 	.word	0x10110000

080006c0 <Update_StateMachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Update_StateMachine */
void Update_StateMachine(void const * argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f002 fac9 	bl	8002c60 <osDelay>
 80006ce:	e7fb      	b.n	80006c8 <Update_StateMachine+0x8>

080006d0 <Update_Screen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Screen */
void Update_Screen(void const * argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Screen */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f002 fac1 	bl	8002c60 <osDelay>
 80006de:	e7fb      	b.n	80006d8 <Update_Screen+0x8>

080006e0 <Update_Measures>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Measures */
void Update_Measures(void const * argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Measures */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f002 fab9 	bl	8002c60 <osDelay>
 80006ee:	e7fb      	b.n	80006e8 <Update_Measures+0x8>

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000700:	d101      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000702:	f000 fa8f 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <HAL_MspInit+0x68>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <HAL_MspInit+0x68>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <HAL_MspInit+0x68>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_MspInit+0x68>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <HAL_MspInit+0x68>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x68>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 fd46 	bl	80011ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <HAL_MspInit+0x6c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	@ (8000788 <HAL_MspInit+0x6c>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <HAL_ADC_MspInit+0x6c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d121      	bne.n	80007f0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <HAL_ADC_MspInit+0x70>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <HAL_ADC_MspInit+0x74>)
 80007ec:	f000 fd28 	bl	8001240 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40012400 	.word	0x40012400
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010c00 	.word	0x40010c00

08000804 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <HAL_I2C_MspInit+0x90>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d132      	bne.n	800088a <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800083c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	@ (800089c <HAL_I2C_MspInit+0x98>)
 8000852:	f000 fcf5 	bl	8001240 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_I2C_MspInit+0x9c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
 800085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
 800086c:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <HAL_I2C_MspInit+0x9c>)
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 8000878:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_I2C_MspInit+0x94>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005400 	.word	0x40005400
 8000898:	40021000 	.word	0x40021000
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <HAL_TIM_Base_MspInit+0x34>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10b      	bne.n	80008ce <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_TIM_Base_MspInit+0x38>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_TIM_Base_MspInit+0x38>)
 80008bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_TIM_Base_MspInit+0x38>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40012c00 	.word	0x40012c00
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	@ 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a53      	ldr	r2, [pc, #332]	@ (8000a48 <HAL_UART_MspInit+0x168>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d132      	bne.n	8000966 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000900:	4b52      	ldr	r3, [pc, #328]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a51      	ldr	r2, [pc, #324]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000914:	61fb      	str	r3, [r7, #28]
 8000916:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b49      	ldr	r3, [pc, #292]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8000930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	4619      	mov	r1, r3
 8000944:	4842      	ldr	r0, [pc, #264]	@ (8000a50 <HAL_UART_MspInit+0x170>)
 8000946:	f000 fc7b 	bl	8001240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 800094a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4619      	mov	r1, r3
 800095e:	483c      	ldr	r0, [pc, #240]	@ (8000a50 <HAL_UART_MspInit+0x170>)
 8000960:	f000 fc6e 	bl	8001240 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000964:	e06c      	b.n	8000a40 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a54 <HAL_UART_MspInit+0x174>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d130      	bne.n	80009d2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	4a35      	ldr	r2, [pc, #212]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097a:	61d3      	str	r3, [r2, #28]
 800097c:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 80009a0:	2304      	movs	r3, #4
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4619      	mov	r1, r3
 80009b2:	4827      	ldr	r0, [pc, #156]	@ (8000a50 <HAL_UART_MspInit+0x170>)
 80009b4:	f000 fc44 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	4821      	ldr	r0, [pc, #132]	@ (8000a50 <HAL_UART_MspInit+0x170>)
 80009cc:	f000 fc38 	bl	8001240 <HAL_GPIO_Init>
}
 80009d0:	e036      	b.n	8000a40 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a20      	ldr	r2, [pc, #128]	@ (8000a58 <HAL_UART_MspInit+0x178>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d131      	bne.n	8000a40 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 80009e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a14      	ldr	r2, [pc, #80]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_UART_MspInit+0x16c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_COM_Pin;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TX_COM_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <HAL_UART_MspInit+0x17c>)
 8000a22:	f000 fc0d 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_COM_Pin;
 8000a26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RX_COM_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <HAL_UART_MspInit+0x17c>)
 8000a3c:	f000 fc00 	bl	8001240 <HAL_GPIO_Init>
}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	@ 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40004800 	.word	0x40004800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a76:	4b34      	ldr	r3, [pc, #208]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a33      	ldr	r2, [pc, #204]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a8e:	f107 0210 	add.w	r2, r7, #16
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 faa3 	bl	8001fe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d103      	bne.n	8000ab0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa8:	f001 fa74 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8000aac:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aae:	e004      	b.n	8000aba <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab0:	f001 fa70 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abc:	4a23      	ldr	r2, [pc, #140]	@ (8000b4c <HAL_InitTick+0xec>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ad2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000adc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000af0:	4817      	ldr	r0, [pc, #92]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000af2:	f001 fb7b 	bl	80021ec <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11b      	bne.n	8000b3c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b04:	4812      	ldr	r0, [pc, #72]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000b06:	f001 fbc1 	bl	800228c <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f000 fb82 	bl	8001222 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d808      	bhi.n	8000b36 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 fb5e 	bl	80011ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <HAL_InitTick+0xf4>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3738      	adds	r7, #56	@ 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	200004cc 	.word	0x200004cc
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM2_IRQHandler+0x10>)
 8000b92:	f001 fbcd 	bl	8002330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200004cc 	.word	0x200004cc

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff fff8 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb2:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc8:	4c09      	ldr	r4, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f003 fa65 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fad1 	bl	8000180 <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000be8:	08004270 	.word	0x08004270
  ldr r2, =_sbss
 8000bec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bf0:	200013ac 	.word	0x200013ac

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 fae3 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff ff26 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fd82 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000514 	.word	0x20000514

08000c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000514 	.word	0x20000514

08000c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0be      	b.n	8000dfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d109      	bne.n	8000ca0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fd76 	bl	800078c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f9ab 	bl	8000ffc <ADC_ConversionStop_Disable>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8099 	bne.w	8000dea <HAL_ADC_Init+0x18e>
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 8095 	bne.w	8000dea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cc8:	f023 0302 	bic.w	r3, r3, #2
 8000ccc:	f043 0202 	orr.w	r2, r3, #2
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b1b      	ldrb	r3, [r3, #12]
 8000ce2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ce4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cf4:	d003      	beq.n	8000cfe <HAL_ADC_Init+0xa2>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d102      	bne.n	8000d04 <HAL_ADC_Init+0xa8>
 8000cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d02:	e000      	b.n	8000d06 <HAL_ADC_Init+0xaa>
 8000d04:	2300      	movs	r3, #0
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7d1b      	ldrb	r3, [r3, #20]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d119      	bne.n	8000d48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7b1b      	ldrb	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	035a      	lsls	r2, r3, #13
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e00b      	b.n	8000d48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d34:	f043 0220 	orr.w	r2, r3, #32
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d40:	f043 0201 	orr.w	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <HAL_ADC_Init+0x1a8>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0x126>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	051b      	lsls	r3, r3, #20
 8000d8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_ADC_Init+0x1ac>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10b      	bne.n	8000dc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc6:	e018      	b.n	8000dfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dcc:	f023 0312 	bic.w	r3, r3, #18
 8000dd0:	f043 0210 	orr.w	r2, r3, #16
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de8:	e007      	b.n	8000dfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	ffe1f7fd 	.word	0xffe1f7fd
 8000e08:	ff1f0efe 	.word	0xff1f0efe

08000e0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x20>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e0dc      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1da>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b06      	cmp	r3, #6
 8000e3a:	d81c      	bhi.n	8000e76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b05      	subs	r3, #5
 8000e4e:	221f      	movs	r2, #31
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b05      	subs	r3, #5
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e74:	e03c      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d81c      	bhi.n	8000eb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b23      	subs	r3, #35	@ 0x23
 8000e90:	221f      	movs	r2, #31
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b23      	subs	r3, #35	@ 0x23
 8000eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb6:	e01b      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b41      	subs	r3, #65	@ 0x41
 8000eca:	221f      	movs	r2, #31
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4019      	ands	r1, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3b41      	subs	r3, #65	@ 0x41
 8000ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d91c      	bls.n	8000f32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68d9      	ldr	r1, [r3, #12]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	3b1e      	subs	r3, #30
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4019      	ands	r1, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6898      	ldr	r0, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	3b1e      	subs	r3, #30
 8000f24:	fa00 f203 	lsl.w	r2, r0, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	e019      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6919      	ldr	r1, [r3, #16]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	2207      	movs	r2, #7
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4019      	ands	r1, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d003      	beq.n	8000f76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f72:	2b11      	cmp	r3, #17
 8000f74:	d132      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d125      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d126      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b10      	cmp	r3, #16
 8000fa4:	d11a      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9a      	lsrs	r2, r3, #18
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fbc:	e002      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f9      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1b2>
 8000fca:	e007      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd0:	f043 0220 	orr.w	r2, r3, #32
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40012400 	.word	0x40012400
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d12e      	bne.n	8001074 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001026:	f7ff fe0f 	bl	8000c48 <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800102c:	e01b      	b.n	8001066 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800102e:	f7ff fe0b 	bl	8000c48 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d914      	bls.n	8001066 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10d      	bne.n	8001066 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e007      	b.n	8001076 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d0dc      	beq.n	800102e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4906      	ldr	r1, [pc, #24]	@ (8001118 <__NVIC_EnableIRQ+0x34>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff4f 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff64 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ffb2 	bl	8001170 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff81 	bl	800111c <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff57 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b08b      	sub	sp, #44	@ 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e169      	b.n	8001528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001254:	2201      	movs	r2, #1
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8158 	bne.w	8001522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a9a      	ldr	r2, [pc, #616]	@ (80014e0 <HAL_GPIO_Init+0x2a0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d05e      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 800127c:	4a98      	ldr	r2, [pc, #608]	@ (80014e0 <HAL_GPIO_Init+0x2a0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d875      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 8001282:	4a98      	ldr	r2, [pc, #608]	@ (80014e4 <HAL_GPIO_Init+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d058      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001288:	4a96      	ldr	r2, [pc, #600]	@ (80014e4 <HAL_GPIO_Init+0x2a4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d86f      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800128e:	4a96      	ldr	r2, [pc, #600]	@ (80014e8 <HAL_GPIO_Init+0x2a8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d052      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001294:	4a94      	ldr	r2, [pc, #592]	@ (80014e8 <HAL_GPIO_Init+0x2a8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d869      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800129a:	4a94      	ldr	r2, [pc, #592]	@ (80014ec <HAL_GPIO_Init+0x2ac>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d04c      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012a0:	4a92      	ldr	r2, [pc, #584]	@ (80014ec <HAL_GPIO_Init+0x2ac>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d863      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012a6:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <HAL_GPIO_Init+0x2b0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d046      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012ac:	4a90      	ldr	r2, [pc, #576]	@ (80014f0 <HAL_GPIO_Init+0x2b0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d85d      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d82a      	bhi.n	800130c <HAL_GPIO_Init+0xcc>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d859      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012ba:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <HAL_GPIO_Init+0x80>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	0800133b 	.word	0x0800133b
 80012c4:	08001315 	.word	0x08001315
 80012c8:	08001327 	.word	0x08001327
 80012cc:	08001369 	.word	0x08001369
 80012d0:	0800136f 	.word	0x0800136f
 80012d4:	0800136f 	.word	0x0800136f
 80012d8:	0800136f 	.word	0x0800136f
 80012dc:	0800136f 	.word	0x0800136f
 80012e0:	0800136f 	.word	0x0800136f
 80012e4:	0800136f 	.word	0x0800136f
 80012e8:	0800136f 	.word	0x0800136f
 80012ec:	0800136f 	.word	0x0800136f
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	0800136f 	.word	0x0800136f
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	0800136f 	.word	0x0800136f
 8001300:	0800136f 	.word	0x0800136f
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001331 	.word	0x08001331
 800130c:	4a79      	ldr	r2, [pc, #484]	@ (80014f4 <HAL_GPIO_Init+0x2b4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001312:	e02c      	b.n	800136e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e029      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	3304      	adds	r3, #4
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e024      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	3308      	adds	r3, #8
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e01f      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	330c      	adds	r3, #12
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e01a      	b.n	8001370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001342:	2304      	movs	r3, #4
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e013      	b.n	8001370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	611a      	str	r2, [r3, #16]
          break;
 800135a:	e009      	b.n	8001370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	615a      	str	r2, [r3, #20]
          break;
 8001366:	e003      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x130>
          break;
 800136e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2bff      	cmp	r3, #255	@ 0xff
 8001374:	d801      	bhi.n	800137a <HAL_GPIO_Init+0x13a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e001      	b.n	800137e <HAL_GPIO_Init+0x13e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3304      	adds	r3, #4
 800137e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	@ 0xff
 8001384:	d802      	bhi.n	800138c <HAL_GPIO_Init+0x14c>
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x152>
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	3b08      	subs	r3, #8
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	210f      	movs	r1, #15
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	6a39      	ldr	r1, [r7, #32]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80b1 	beq.w	8001522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c0:	4b4d      	ldr	r3, [pc, #308]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_GPIO_Init+0x2b8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d8:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <HAL_GPIO_Init+0x2bc>)
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a40      	ldr	r2, [pc, #256]	@ (8001500 <HAL_GPIO_Init+0x2c0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d013      	beq.n	800142c <HAL_GPIO_Init+0x1ec>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3f      	ldr	r2, [pc, #252]	@ (8001504 <HAL_GPIO_Init+0x2c4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00d      	beq.n	8001428 <HAL_GPIO_Init+0x1e8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3e      	ldr	r2, [pc, #248]	@ (8001508 <HAL_GPIO_Init+0x2c8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3d      	ldr	r2, [pc, #244]	@ (800150c <HAL_GPIO_Init+0x2cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_GPIO_Init+0x1e0>
 800141c:	2303      	movs	r3, #3
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001420:	2304      	movs	r3, #4
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001424:	2302      	movs	r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 800142c:	2300      	movs	r3, #0
 800142e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800143e:	492f      	ldr	r1, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x2bc>)
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	492c      	ldr	r1, [pc, #176]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	4928      	ldr	r1, [pc, #160]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	4922      	ldr	r1, [pc, #136]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	491e      	ldr	r1, [pc, #120]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4918      	ldr	r1, [pc, #96]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	4914      	ldr	r1, [pc, #80]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d021      	beq.n	8001514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	490e      	ldr	r1, [pc, #56]	@ (8001510 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e021      	b.n	8001522 <HAL_GPIO_Init+0x2e2>
 80014de:	bf00      	nop
 80014e0:	10320000 	.word	0x10320000
 80014e4:	10310000 	.word	0x10310000
 80014e8:	10220000 	.word	0x10220000
 80014ec:	10210000 	.word	0x10210000
 80014f0:	10120000 	.word	0x10120000
 80014f4:	10110000 	.word	0x10110000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000
 8001500:	40010800 	.word	0x40010800
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40011000 	.word	0x40011000
 800150c:	40011400 	.word	0x40011400
 8001510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	43db      	mvns	r3, r3
 800151c:	4909      	ldr	r1, [pc, #36]	@ (8001544 <HAL_GPIO_Init+0x304>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f ae8e 	bne.w	8001254 <HAL_GPIO_Init+0x14>
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	372c      	adds	r7, #44	@ 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e12b      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff f930 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	@ 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015dc:	f000 fcda 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a81      	ldr	r2, [pc, #516]	@ (80017ec <HAL_I2C_Init+0x274>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d807      	bhi.n	80015fc <HAL_I2C_Init+0x84>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a80      	ldr	r2, [pc, #512]	@ (80017f0 <HAL_I2C_Init+0x278>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e006      	b.n	800160a <HAL_I2C_Init+0x92>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a7d      	ldr	r2, [pc, #500]	@ (80017f4 <HAL_I2C_Init+0x27c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0e7      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a78      	ldr	r2, [pc, #480]	@ (80017f8 <HAL_I2C_Init+0x280>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a6a      	ldr	r2, [pc, #424]	@ (80017ec <HAL_I2C_Init+0x274>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d802      	bhi.n	800164c <HAL_I2C_Init+0xd4>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	e009      	b.n	8001660 <HAL_I2C_Init+0xe8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a69      	ldr	r2, [pc, #420]	@ (80017fc <HAL_I2C_Init+0x284>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001672:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	495c      	ldr	r1, [pc, #368]	@ (80017ec <HAL_I2C_Init+0x274>)
 800167c:	428b      	cmp	r3, r1
 800167e:	d819      	bhi.n	80016b4 <HAL_I2C_Init+0x13c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e59      	subs	r1, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fbb1 f3f3 	udiv	r3, r1, r3
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001694:	400b      	ands	r3, r1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <HAL_I2C_Init+0x138>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e59      	subs	r1, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	e051      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e04f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_I2C_Init+0x168>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e012      	b.n	8001706 <HAL_I2C_Init+0x18e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Init+0x196>
 800170a:	2301      	movs	r3, #1
 800170c:	e022      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10e      	bne.n	8001734 <HAL_I2C_Init+0x1bc>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e58      	subs	r0, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6859      	ldr	r1, [r3, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	6809      	ldr	r1, [r1, #0]
 8001758:	4313      	orrs	r3, r2
 800175a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6911      	ldr	r1, [r2, #16]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	000186a0 	.word	0x000186a0
 80017f0:	001e847f 	.word	0x001e847f
 80017f4:	003d08ff 	.word	0x003d08ff
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e272      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001820:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00c      	beq.n	8001846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
 8001838:	4b8c      	ldr	r3, [pc, #560]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b89      	ldr	r3, [pc, #548]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06c      	beq.n	800192c <HAL_RCC_OscConfig+0x12c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d168      	bne.n	800192c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e24c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x76>
 8001868:	4b80      	ldr	r3, [pc, #512]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e02e      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7a      	ldr	r2, [pc, #488]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b78      	ldr	r3, [pc, #480]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a77      	ldr	r2, [pc, #476]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xbc>
 80018a2:	4b72      	ldr	r3, [pc, #456]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a71      	ldr	r2, [pc, #452]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 80018bc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a67      	ldr	r2, [pc, #412]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff f9b4 	bl	8000c48 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f9b0 	bl	8000c48 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e200      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe4>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f9a0 	bl	8000c48 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f99c 	bl	8000c48 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1ec      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x10c>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001946:	4b49      	ldr	r3, [pc, #292]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
 8001952:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1c0      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3d      	ldr	r3, [pc, #244]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4939      	ldr	r1, [pc, #228]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f955 	bl	8000c48 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f951 	bl	8000c48 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1a1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4927      	ldr	r1, [pc, #156]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f934 	bl	8000c48 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff f930 	bl	8000c48 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e180      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03a      	beq.n	8001a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f914 	bl	8000c48 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f910 	bl	8000c48 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e160      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 fafe 	bl	8002044 <RCC_Delay>
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f8fa 	bl	8000c48 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8f6 	bl	8000c48 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d908      	bls.n	8001a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e146      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	42420000 	.word	0x42420000
 8001a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e9      	bne.n	8001a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a6 	beq.w	8001bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b88      	ldr	r3, [pc, #544]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a87      	ldr	r2, [pc, #540]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b85      	ldr	r3, [pc, #532]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b82      	ldr	r3, [pc, #520]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f8b7 	bl	8000c48 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff f8b3 	bl	8000c48 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	@ 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e103      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b75      	ldr	r3, [pc, #468]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x312>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x334>
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a69      	ldr	r2, [pc, #420]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b67      	ldr	r3, [pc, #412]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a66      	ldr	r2, [pc, #408]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x356>
 8001b3c:	4b61      	ldr	r3, [pc, #388]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a60      	ldr	r2, [pc, #384]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b56:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff f867 	bl	8000c48 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff f863 	bl	8000c48 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0b1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x37e>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f851 	bl	8000c48 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f84d 	bl	8000c48 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e09b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d061      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d146      	bne.n	8001c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f821 	bl	8000c48 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f81d 	bl	8000c48 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e06d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4921      	ldr	r1, [pc, #132]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a19      	ldr	r1, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	430b      	orrs	r3, r1
 8001c56:	491b      	ldr	r1, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fff1 	bl	8000c48 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe ffed 	bl	8000c48 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e03d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x46a>
 8001c88:	e035      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffda 	bl	8000c48 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ffd6 	bl	8000c48 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e026      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x498>
 8001cb6:	e01e      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e019      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_OscConfig+0x500>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4965      	ldr	r1, [pc, #404]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7fe ff28 	bl	8000c48 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe ff24 	bl	8000c48 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4922      	ldr	r1, [pc, #136]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fdd4 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	0800423c 	.word	0x0800423c
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x36>
 8001f06:	e027      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e027      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0c5b      	lsrs	r3, r3, #17
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3a:	fb03 f202 	mul.w	r2, r3, r2
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e004      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	613b      	str	r3, [r7, #16]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	613b      	str	r3, [r7, #16]
      break;
 8001f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5e:	693b      	ldr	r3, [r7, #16]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	08004254 	.word	0x08004254
 8001f78:	08004264 	.word	0x08004264
 8001f7c:	003d0900 	.word	0x003d0900

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b02      	ldr	r3, [pc, #8]	@ (8001f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f98:	f7ff fff2 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	0800424c 	.word	0x0800424c

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4903      	ldr	r1, [pc, #12]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	0800424c 	.word	0x0800424c

08001fe4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <HAL_RCC_GetClockConfig+0x58>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_RCC_GetClockConfig+0x58>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_GetClockConfig+0x58>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_GetClockConfig+0x58>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_GetClockConfig+0x5c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0207 	and.w	r2, r3, #7
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40022000 	.word	0x40022000

08002044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <RCC_Delay+0x34>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <RCC_Delay+0x38>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0a5b      	lsrs	r3, r3, #9
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002060:	bf00      	nop
  }
  while (Delay --);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	60fa      	str	r2, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <RCC_Delay+0x1c>
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000000 	.word	0x20000000
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d07d      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a0:	4b4f      	ldr	r3, [pc, #316]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	61d3      	str	r3, [r2, #28]
 80020b8:	4b49      	ldr	r3, [pc, #292]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b46      	ldr	r3, [pc, #280]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d118      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d4:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a42      	ldr	r2, [pc, #264]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fdb2 	bl	8000c48 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	e008      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7fe fdae 	bl	8000c48 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e06d      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b3a      	ldr	r3, [pc, #232]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002106:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d02e      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d027      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002124:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800212e:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002134:	4b2c      	ldr	r3, [pc, #176]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800213a:	4a29      	ldr	r2, [pc, #164]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d014      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fd7d 	bl	8000c48 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fd79 	bl	8000c48 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e036      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4917      	ldr	r1, [pc, #92]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	4313      	orrs	r3, r2
 8002184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002196:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	490b      	ldr	r1, [pc, #44]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4904      	ldr	r1, [pc, #16]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42420440 	.word	0x42420440

080021ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e041      	b.n	8002282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fb46 	bl	80008a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 fa5c 	bl	80026e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d001      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e03a      	b.n	800231a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_TIM_Base_Start_IT+0x98>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x58>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ce:	d009      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x58>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <HAL_TIM_Base_Start_IT+0x9c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x58>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a13      	ldr	r2, [pc, #76]	@ (800232c <HAL_TIM_Base_Start_IT+0xa0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d111      	bne.n	8002308 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d010      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002306:	e007      	b.n	8002318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d020      	beq.n	8002394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0202 	mvn.w	r2, #2
 8002364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f998 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f98b 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f99a 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d020      	beq.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0204 	mvn.w	r2, #4
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f972 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f965 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f974 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0208 	mvn.w	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f94c 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f93f 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f94e 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2208      	movs	r2, #8
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f926 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f919 	bl	800269e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f928 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0201 	mvn.w	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe f92a 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa7f 	bl	80029be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8f8 	bl	80026d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0220 	mvn.w	r2, #32
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa52 	bl	80029ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIM_ConfigClockSource+0x1c>
 8002528:	2302      	movs	r3, #2
 800252a:	e0b4      	b.n	8002696 <HAL_TIM_ConfigClockSource+0x186>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800254a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002564:	d03e      	beq.n	80025e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800256a:	f200 8087 	bhi.w	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002572:	f000 8086 	beq.w	8002682 <HAL_TIM_ConfigClockSource+0x172>
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257a:	d87f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b70      	cmp	r3, #112	@ 0x70
 800257e:	d01a      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002580:	2b70      	cmp	r3, #112	@ 0x70
 8002582:	d87b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b60      	cmp	r3, #96	@ 0x60
 8002586:	d050      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x11a>
 8002588:	2b60      	cmp	r3, #96	@ 0x60
 800258a:	d877      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b50      	cmp	r3, #80	@ 0x50
 800258e:	d03c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xfa>
 8002590:	2b50      	cmp	r3, #80	@ 0x50
 8002592:	d873      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b40      	cmp	r3, #64	@ 0x40
 8002596:	d058      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x13a>
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d86f      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b30      	cmp	r3, #48	@ 0x30
 800259e:	d064      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025a0:	2b30      	cmp	r3, #48	@ 0x30
 80025a2:	d86b      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d060      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d867      	bhi.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d05c      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d05a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	e062      	b.n	800267c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	f000 f974 	bl	80028b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	609a      	str	r2, [r3, #8]
      break;
 80025e2:	e04f      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f4:	f000 f95d 	bl	80028b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e03c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f8d4 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2150      	movs	r1, #80	@ 0x50
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f92b 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002628:	e02c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f8f2 	bl	8002820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2160      	movs	r1, #96	@ 0x60
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f91b 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002648:	e01c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8b4 	bl	80027c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2140      	movs	r1, #64	@ 0x40
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f90b 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002668:	e00c      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 f902 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 800267a:	e003      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e000      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
	...

080026e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a2c      	ldr	r2, [pc, #176]	@ (80027bc <TIM_Base_SetConfig+0xd4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x30>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <TIM_Base_SetConfig+0xd8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002738:	d007      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <TIM_Base_SetConfig+0xd4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0x62>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <TIM_Base_SetConfig+0xd8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <TIM_Base_SetConfig+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d103      	bne.n	8002790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f023 0201 	bic.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
  }
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800

080027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 030a 	bic.w	r3, r3, #10
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f023 0210 	bic.w	r2, r3, #16
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800285c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	f043 0307 	orr.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e046      	b.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a16      	ldr	r2, [pc, #88]	@ (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002954:	d009      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800

080029ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e042      	b.n	8002a68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fd ff72 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	@ 0x24
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f82b 	bl	8002a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002aaa:	f023 030c 	bic.w	r3, r3, #12
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b84 <UART_SetConfig+0x114>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d103      	bne.n	8002ae0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff fa70 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	e002      	b.n	8002ae6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff fa58 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <UART_SetConfig+0x118>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	0119      	lsls	r1, r3, #4
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009a      	lsls	r2, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <UART_SetConfig+0x118>)
 8002b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2064      	movs	r0, #100	@ 0x64
 8002b26:	fb00 f303 	mul.w	r3, r0, r3
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	3332      	adds	r3, #50	@ 0x32
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <UART_SetConfig+0x118>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b3c:	4419      	add	r1, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009a      	lsls	r2, r3, #2
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <UART_SetConfig+0x118>)
 8002b56:	fba3 0302 	umull	r0, r3, r3, r2
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2064      	movs	r0, #100	@ 0x64
 8002b5e:	fb00 f303 	mul.w	r3, r0, r3
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	3332      	adds	r3, #50	@ 0x32
 8002b68:	4a07      	ldr	r2, [pc, #28]	@ (8002b88 <UART_SetConfig+0x118>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	f003 020f 	and.w	r2, r3, #15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	440a      	add	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40013800 	.word	0x40013800
 8002b88:	51eb851f 	.word	0x51eb851f

08002b8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9e:	2b84      	cmp	r3, #132	@ 0x84
 8002ba0:	d005      	beq.n	8002bae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ba2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3303      	adds	r3, #3
 8002bac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bbe:	f000 faf7 	bl	80031b0 <vTaskStartScheduler>
  
  return osOK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d020      	beq.n	8002c1c <osThreadCreate+0x54>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01c      	beq.n	8002c1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685c      	ldr	r4, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691e      	ldr	r6, [r3, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ffc9 	bl	8002b8c <makeFreeRtosPriority>
 8002bfa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	9100      	str	r1, [sp, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	4632      	mov	r2, r6
 8002c0e:	4629      	mov	r1, r5
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 f8e8 	bl	8002de6 <xTaskCreateStatic>
 8002c16:	4603      	mov	r3, r0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e01c      	b.n	8002c56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685c      	ldr	r4, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c28:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ffab 	bl	8002b8c <makeFreeRtosPriority>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	9200      	str	r2, [sp, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4632      	mov	r2, r6
 8002c44:	4629      	mov	r1, r5
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 f92d 	bl	8002ea6 <xTaskCreate>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <osDelay+0x16>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	e000      	b.n	8002c78 <osDelay+0x18>
 8002c76:	2301      	movs	r3, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fa63 	bl	8003144 <vTaskDelay>
  
  return osOK;
 8002c7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0208 	add.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f103 0208 	add.w	r2, r3, #8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f103 0208 	add.w	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e00c      	b.n	8002d5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3308      	adds	r3, #8
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e002      	b.n	8002d52 <vListInsert+0x2e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d2f6      	bcs.n	8002d4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d103      	bne.n	8002dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1e5a      	subs	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b08e      	sub	sp, #56	@ 0x38
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10b      	bne.n	8002e12 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	e7fd      	b.n	8002e0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61fb      	str	r3, [r7, #28]
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e30:	23a0      	movs	r3, #160	@ 0xa0
 8002e32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e38:	d00b      	beq.n	8002e52 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	61bb      	str	r3, [r7, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	e7fd      	b.n	8002e4e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01e      	beq.n	8002e98 <xTaskCreateStatic+0xb2>
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e72:	2300      	movs	r3, #0
 8002e74:	9303      	str	r3, [sp, #12]
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f850 	bl	8002f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e92:	f000 f8ed 	bl	8003070 <prvAddNewTaskToReadyList>
 8002e96:	e001      	b.n	8002e9c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e9c:	697b      	ldr	r3, [r7, #20]
	}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	@ 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b08c      	sub	sp, #48	@ 0x30
 8002eaa:	af04      	add	r7, sp, #16
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fea0 	bl	8003c00 <pvPortMalloc>
 8002ec0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ec8:	20a0      	movs	r0, #160	@ 0xa0
 8002eca:	f000 fe99 	bl	8003c00 <pvPortMalloc>
 8002ece:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002edc:	e005      	b.n	8002eea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f000 ff5c 	bl	8003d9c <vPortFree>
 8002ee4:	e001      	b.n	8002eea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9303      	str	r3, [sp, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f80e 	bl	8002f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f14:	69f8      	ldr	r0, [r7, #28]
 8002f16:	f000 f8ab 	bl	8003070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e002      	b.n	8002f26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f26:	69bb      	ldr	r3, [r7, #24]
	}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	617b      	str	r3, [r7, #20]
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01f      	beq.n	8002fc0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e012      	b.n	8002fac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	7819      	ldrb	r1, [r3, #0]
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	3334      	adds	r3, #52	@ 0x34
 8002f96:	460a      	mov	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	d9e9      	bls.n	8002f86 <prvInitialiseNewTask+0x56>
 8002fb2:	e000      	b.n	8002fb6 <prvInitialiseNewTask+0x86>
			{
				break;
 8002fb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fbe:	e003      	b.n	8002fc8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d901      	bls.n	8002fd2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fce:	2306      	movs	r3, #6
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fe6c 	bl	8002cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fe67 	bl	8002cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ffc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	f1c3 0207 	rsb	r2, r3, #7
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	2200      	movs	r2, #0
 8003012:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	2200      	movs	r2, #0
 800301a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	334c      	adds	r3, #76	@ 0x4c
 8003022:	224c      	movs	r2, #76	@ 0x4c
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ffd6 	bl	8003fd8 <memset>
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <prvInitialiseNewTask+0x134>)
 8003030:	651a      	str	r2, [r3, #80]	@ 0x50
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <prvInitialiseNewTask+0x138>)
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <prvInitialiseNewTask+0x13c>)
 800303c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	69b8      	ldr	r0, [r7, #24]
 8003044:	f000 fc28 	bl	8003898 <pxPortInitialiseStack>
 8003048:	4602      	mov	r2, r0
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800305a:	bf00      	nop
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2000126c 	.word	0x2000126c
 8003068:	200012d4 	.word	0x200012d4
 800306c:	2000133c 	.word	0x2000133c

08003070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003078:	f000 fd00 	bl	8003a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800307c:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <prvAddNewTaskToReadyList+0xb8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a29      	ldr	r2, [pc, #164]	@ (8003128 <prvAddNewTaskToReadyList+0xb8>)
 8003084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003086:	4b29      	ldr	r3, [pc, #164]	@ (800312c <prvAddNewTaskToReadyList+0xbc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800308e:	4a27      	ldr	r2, [pc, #156]	@ (800312c <prvAddNewTaskToReadyList+0xbc>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003094:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <prvAddNewTaskToReadyList+0xb8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d110      	bne.n	80030be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800309c:	f000 fad2 	bl	8003644 <prvInitialiseTaskLists>
 80030a0:	e00d      	b.n	80030be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <prvAddNewTaskToReadyList+0xc0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030aa:	4b20      	ldr	r3, [pc, #128]	@ (800312c <prvAddNewTaskToReadyList+0xbc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d802      	bhi.n	80030be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030b8:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <prvAddNewTaskToReadyList+0xbc>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030be:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <prvAddNewTaskToReadyList+0xc4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <prvAddNewTaskToReadyList+0xc4>)
 80030c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <prvAddNewTaskToReadyList+0xc8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <prvAddNewTaskToReadyList+0xc8>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a15      	ldr	r2, [pc, #84]	@ (800313c <prvAddNewTaskToReadyList+0xcc>)
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7ff fdf4 	bl	8002cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030f6:	f000 fcf1 	bl	8003adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <prvAddNewTaskToReadyList+0xc0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <prvAddNewTaskToReadyList+0xbc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	429a      	cmp	r2, r3
 800310e:	d207      	bcs.n	8003120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <prvAddNewTaskToReadyList+0xd0>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000618 	.word	0x20000618
 800312c:	20000518 	.word	0x20000518
 8003130:	20000624 	.word	0x20000624
 8003134:	20000634 	.word	0x20000634
 8003138:	20000620 	.word	0x20000620
 800313c:	2000051c 	.word	0x2000051c
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d018      	beq.n	8003188 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <vTaskDelay+0x64>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <vTaskDelay+0x32>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	60bb      	str	r3, [r7, #8]
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003176:	f000 f885 	bl	8003284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800317a:	2100      	movs	r1, #0
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb25 	bl	80037cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003182:	f000 f88d 	bl	80032a0 <xTaskResumeAll>
 8003186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <vTaskDelay+0x68>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000640 	.word	0x20000640
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031be:	463a      	mov	r2, r7
 80031c0:	1d39      	adds	r1, r7, #4
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fc ffc2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	9202      	str	r2, [sp, #8]
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	460a      	mov	r2, r1
 80031de:	4921      	ldr	r1, [pc, #132]	@ (8003264 <vTaskStartScheduler+0xb4>)
 80031e0:	4821      	ldr	r0, [pc, #132]	@ (8003268 <vTaskStartScheduler+0xb8>)
 80031e2:	f7ff fe00 	bl	8002de6 <xTaskCreateStatic>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a20      	ldr	r2, [pc, #128]	@ (800326c <vTaskStartScheduler+0xbc>)
 80031ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031ec:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <vTaskStartScheduler+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e001      	b.n	80031fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d11b      	bne.n	800323c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	613b      	str	r3, [r7, #16]
}
 8003216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003218:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <vTaskStartScheduler+0xc0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	334c      	adds	r3, #76	@ 0x4c
 800321e:	4a15      	ldr	r2, [pc, #84]	@ (8003274 <vTaskStartScheduler+0xc4>)
 8003220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <vTaskStartScheduler+0xc8>)
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <vTaskStartScheduler+0xcc>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003230:	4b13      	ldr	r3, [pc, #76]	@ (8003280 <vTaskStartScheduler+0xd0>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003236:	f000 fbaf 	bl	8003998 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800323a:	e00f      	b.n	800325c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d10b      	bne.n	800325c <vTaskStartScheduler+0xac>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	60fb      	str	r3, [r7, #12]
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <vTaskStartScheduler+0xa8>
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08004234 	.word	0x08004234
 8003268:	08003615 	.word	0x08003615
 800326c:	2000063c 	.word	0x2000063c
 8003270:	20000518 	.word	0x20000518
 8003274:	20000010 	.word	0x20000010
 8003278:	20000638 	.word	0x20000638
 800327c:	20000624 	.word	0x20000624
 8003280:	2000061c 	.word	0x2000061c

08003284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <vTaskSuspendAll+0x18>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a03      	ldr	r2, [pc, #12]	@ (800329c <vTaskSuspendAll+0x18>)
 8003290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000640 	.word	0x20000640

080032a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ae:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <xTaskResumeAll+0x118>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <xTaskResumeAll+0x2e>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	603b      	str	r3, [r7, #0]
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	e7fd      	b.n	80032ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032ce:	f000 fbd5 	bl	8003a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032d2:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <xTaskResumeAll+0x118>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	4a37      	ldr	r2, [pc, #220]	@ (80033b8 <xTaskResumeAll+0x118>)
 80032da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032dc:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <xTaskResumeAll+0x118>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d161      	bne.n	80033a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <xTaskResumeAll+0x11c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05d      	beq.n	80033a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ec:	e02e      	b.n	800334c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ee:	4b34      	ldr	r3, [pc, #208]	@ (80033c0 <xTaskResumeAll+0x120>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3318      	adds	r3, #24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd4a 	bl	8002d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3304      	adds	r3, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fd45 	bl	8002d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	4b2c      	ldr	r3, [pc, #176]	@ (80033c4 <xTaskResumeAll+0x124>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <xTaskResumeAll+0x124>)
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4a27      	ldr	r2, [pc, #156]	@ (80033c8 <xTaskResumeAll+0x128>)
 800332a:	441a      	add	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7ff fcd3 	bl	8002cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333c:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <xTaskResumeAll+0x12c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003346:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <xTaskResumeAll+0x130>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800334c:	4b1c      	ldr	r3, [pc, #112]	@ (80033c0 <xTaskResumeAll+0x120>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1cc      	bne.n	80032ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800335a:	f000 fa17 	bl	800378c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800335e:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <xTaskResumeAll+0x134>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800336a:	f000 f837 	bl	80033dc <xTaskIncrementTick>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003374:	4b16      	ldr	r3, [pc, #88]	@ (80033d0 <xTaskResumeAll+0x130>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3b01      	subs	r3, #1
 800337e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f1      	bne.n	800336a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <xTaskResumeAll+0x134>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800338c:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <xTaskResumeAll+0x130>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003398:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <xTaskResumeAll+0x138>)
 800339a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033a8:	f000 fb98 	bl	8003adc <vPortExitCritical>

	return xAlreadyYielded;
 80033ac:	68bb      	ldr	r3, [r7, #8]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000640 	.word	0x20000640
 80033bc:	20000618 	.word	0x20000618
 80033c0:	200005d8 	.word	0x200005d8
 80033c4:	20000620 	.word	0x20000620
 80033c8:	2000051c 	.word	0x2000051c
 80033cc:	20000518 	.word	0x20000518
 80033d0:	2000062c 	.word	0x2000062c
 80033d4:	20000628 	.word	0x20000628
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e6:	4b4f      	ldr	r3, [pc, #316]	@ (8003524 <xTaskIncrementTick+0x148>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 808f 	bne.w	800350e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003528 <xTaskIncrementTick+0x14c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003528 <xTaskIncrementTick+0x14c>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d121      	bne.n	8003448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003404:	4b49      	ldr	r3, [pc, #292]	@ (800352c <xTaskIncrementTick+0x150>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <xTaskIncrementTick+0x4a>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	603b      	str	r3, [r7, #0]
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	e7fd      	b.n	8003422 <xTaskIncrementTick+0x46>
 8003426:	4b41      	ldr	r3, [pc, #260]	@ (800352c <xTaskIncrementTick+0x150>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	4b40      	ldr	r3, [pc, #256]	@ (8003530 <xTaskIncrementTick+0x154>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3e      	ldr	r2, [pc, #248]	@ (800352c <xTaskIncrementTick+0x150>)
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4a3e      	ldr	r2, [pc, #248]	@ (8003530 <xTaskIncrementTick+0x154>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b3e      	ldr	r3, [pc, #248]	@ (8003534 <xTaskIncrementTick+0x158>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a3c      	ldr	r2, [pc, #240]	@ (8003534 <xTaskIncrementTick+0x158>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	f000 f9a2 	bl	800378c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003448:	4b3b      	ldr	r3, [pc, #236]	@ (8003538 <xTaskIncrementTick+0x15c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	429a      	cmp	r2, r3
 8003450:	d348      	bcc.n	80034e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003452:	4b36      	ldr	r3, [pc, #216]	@ (800352c <xTaskIncrementTick+0x150>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <xTaskIncrementTick+0x15c>)
 800345e:	f04f 32ff 	mov.w	r2, #4294967295
 8003462:	601a      	str	r2, [r3, #0]
					break;
 8003464:	e03e      	b.n	80034e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003466:	4b31      	ldr	r3, [pc, #196]	@ (800352c <xTaskIncrementTick+0x150>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d203      	bcs.n	8003486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800347e:	4a2e      	ldr	r2, [pc, #184]	@ (8003538 <xTaskIncrementTick+0x15c>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003484:	e02e      	b.n	80034e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fc82 	bl	8002d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3318      	adds	r3, #24
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fc79 	bl	8002d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	2201      	movs	r2, #1
 80034a8:	409a      	lsls	r2, r3
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <xTaskIncrementTick+0x160>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	4a22      	ldr	r2, [pc, #136]	@ (800353c <xTaskIncrementTick+0x160>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <xTaskIncrementTick+0x164>)
 80034c2:	441a      	add	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7ff fc07 	bl	8002cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <xTaskIncrementTick+0x168>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3b9      	bcc.n	8003452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e2:	e7b6      	b.n	8003452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <xTaskIncrementTick+0x168>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	4915      	ldr	r1, [pc, #84]	@ (8003540 <xTaskIncrementTick+0x164>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d901      	bls.n	8003500 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <xTaskIncrementTick+0x16c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e004      	b.n	8003518 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800350e:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <xTaskIncrementTick+0x170>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <xTaskIncrementTick+0x170>)
 8003516:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003518:	697b      	ldr	r3, [r7, #20]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000640 	.word	0x20000640
 8003528:	2000061c 	.word	0x2000061c
 800352c:	200005d0 	.word	0x200005d0
 8003530:	200005d4 	.word	0x200005d4
 8003534:	20000630 	.word	0x20000630
 8003538:	20000638 	.word	0x20000638
 800353c:	20000620 	.word	0x20000620
 8003540:	2000051c 	.word	0x2000051c
 8003544:	20000518 	.word	0x20000518
 8003548:	2000062c 	.word	0x2000062c
 800354c:	20000628 	.word	0x20000628

08003550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003556:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <vTaskSwitchContext+0xac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800355e:	4b28      	ldr	r3, [pc, #160]	@ (8003600 <vTaskSwitchContext+0xb0>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003564:	e045      	b.n	80035f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003566:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <vTaskSwitchContext+0xb0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356c:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <vTaskSwitchContext+0xb4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f1c3 031f 	rsb	r3, r3, #31
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	4921      	ldr	r1, [pc, #132]	@ (8003608 <vTaskSwitchContext+0xb8>)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	607b      	str	r3, [r7, #4]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <vTaskSwitchContext+0x5a>
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <vTaskSwitchContext+0xb8>)
 80035ba:	4413      	add	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3308      	adds	r3, #8
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d104      	bne.n	80035de <vTaskSwitchContext+0x8e>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a09      	ldr	r2, [pc, #36]	@ (800360c <vTaskSwitchContext+0xbc>)
 80035e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <vTaskSwitchContext+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	334c      	adds	r3, #76	@ 0x4c
 80035ee:	4a08      	ldr	r2, [pc, #32]	@ (8003610 <vTaskSwitchContext+0xc0>)
 80035f0:	6013      	str	r3, [r2, #0]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	20000640 	.word	0x20000640
 8003600:	2000062c 	.word	0x2000062c
 8003604:	20000620 	.word	0x20000620
 8003608:	2000051c 	.word	0x2000051c
 800360c:	20000518 	.word	0x20000518
 8003610:	20000010 	.word	0x20000010

08003614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800361c:	f000 f852 	bl	80036c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <prvIdleTask+0x28>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d9f9      	bls.n	800361c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <prvIdleTask+0x2c>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003638:	e7f0      	b.n	800361c <prvIdleTask+0x8>
 800363a:	bf00      	nop
 800363c:	2000051c 	.word	0x2000051c
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	e00c      	b.n	800366a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <prvInitialiseTaskLists+0x60>)
 800365c:	4413      	add	r3, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fb12 	bl	8002c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b06      	cmp	r3, #6
 800366e:	d9ef      	bls.n	8003650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003670:	480d      	ldr	r0, [pc, #52]	@ (80036a8 <prvInitialiseTaskLists+0x64>)
 8003672:	f7ff fb09 	bl	8002c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003676:	480d      	ldr	r0, [pc, #52]	@ (80036ac <prvInitialiseTaskLists+0x68>)
 8003678:	f7ff fb06 	bl	8002c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800367c:	480c      	ldr	r0, [pc, #48]	@ (80036b0 <prvInitialiseTaskLists+0x6c>)
 800367e:	f7ff fb03 	bl	8002c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003682:	480c      	ldr	r0, [pc, #48]	@ (80036b4 <prvInitialiseTaskLists+0x70>)
 8003684:	f7ff fb00 	bl	8002c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003688:	480b      	ldr	r0, [pc, #44]	@ (80036b8 <prvInitialiseTaskLists+0x74>)
 800368a:	f7ff fafd 	bl	8002c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800368e:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <prvInitialiseTaskLists+0x78>)
 8003690:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <prvInitialiseTaskLists+0x64>)
 8003692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <prvInitialiseTaskLists+0x7c>)
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <prvInitialiseTaskLists+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000051c 	.word	0x2000051c
 80036a8:	200005a8 	.word	0x200005a8
 80036ac:	200005bc 	.word	0x200005bc
 80036b0:	200005d8 	.word	0x200005d8
 80036b4:	200005ec 	.word	0x200005ec
 80036b8:	20000604 	.word	0x20000604
 80036bc:	200005d0 	.word	0x200005d0
 80036c0:	200005d4 	.word	0x200005d4

080036c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ca:	e019      	b.n	8003700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036cc:	f000 f9d6 	bl	8003a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <prvCheckTasksWaitingTermination+0x50>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fb59 	bl	8002d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <prvCheckTasksWaitingTermination+0x54>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003718 <prvCheckTasksWaitingTermination+0x54>)
 80036ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <prvCheckTasksWaitingTermination+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <prvCheckTasksWaitingTermination+0x58>)
 80036f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036f6:	f000 f9f1 	bl	8003adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f810 	bl	8003720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <prvCheckTasksWaitingTermination+0x58>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e1      	bne.n	80036cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200005ec 	.word	0x200005ec
 8003718:	20000618 	.word	0x20000618
 800371c:	20000600 	.word	0x20000600

08003720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	334c      	adds	r3, #76	@ 0x4c
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fc5b 	bl	8003fe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003738:	2b00      	cmp	r3, #0
 800373a:	d108      	bne.n	800374e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fb2b 	bl	8003d9c <vPortFree>
				vPortFree( pxTCB );
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb28 	bl	8003d9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800374c:	e019      	b.n	8003782 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003754:	2b01      	cmp	r3, #1
 8003756:	d103      	bne.n	8003760 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fb1f 	bl	8003d9c <vPortFree>
	}
 800375e:	e010      	b.n	8003782 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003766:	2b02      	cmp	r3, #2
 8003768:	d00b      	beq.n	8003782 <prvDeleteTCB+0x62>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60fb      	str	r3, [r7, #12]
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <prvDeleteTCB+0x5e>
	}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003792:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <prvResetNextTaskUnblockTime+0x38>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d104      	bne.n	80037a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <prvResetNextTaskUnblockTime+0x3c>)
 800379e:	f04f 32ff 	mov.w	r2, #4294967295
 80037a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037a4:	e008      	b.n	80037b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a6:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <prvResetNextTaskUnblockTime+0x38>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a04      	ldr	r2, [pc, #16]	@ (80037c8 <prvResetNextTaskUnblockTime+0x3c>)
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200005d0 	.word	0x200005d0
 80037c8:	20000638 	.word	0x20000638

080037cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037d6:	4b29      	ldr	r3, [pc, #164]	@ (800387c <prvAddCurrentTaskToDelayedList+0xb0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fad6 	bl	8002d94 <uxListRemove>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037ee:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	2201      	movs	r2, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4013      	ands	r3, r2
 8003802:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d10a      	bne.n	8003824 <prvAddCurrentTaskToDelayedList+0x58>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003814:	4b1a      	ldr	r3, [pc, #104]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3304      	adds	r3, #4
 800381a:	4619      	mov	r1, r3
 800381c:	481a      	ldr	r0, [pc, #104]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xbc>)
 800381e:	f7ff fa5e 	bl	8002cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003822:	e026      	b.n	8003872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d209      	bcs.n	8003850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <prvAddCurrentTaskToDelayedList+0xc0>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7ff fa6b 	bl	8002d24 <vListInsert>
}
 800384e:	e010      	b.n	8003872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7ff fa61 	bl	8002d24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003862:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d202      	bcs.n	8003872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800386c:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xc8>)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6013      	str	r3, [r2, #0]
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2000061c 	.word	0x2000061c
 8003880:	20000518 	.word	0x20000518
 8003884:	20000620 	.word	0x20000620
 8003888:	20000604 	.word	0x20000604
 800388c:	200005d4 	.word	0x200005d4
 8003890:	200005d0 	.word	0x200005d0
 8003894:	20000638 	.word	0x20000638

08003898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b04      	subs	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b04      	subs	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038c8:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <pxPortInitialiseStack+0x54>)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3b14      	subs	r3, #20
 80038d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b20      	subs	r3, #32
 80038de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	080038f1 	.word	0x080038f1

080038f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038fa:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <prvTaskExitError+0x54>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d00b      	beq.n	800391c <prvTaskExitError+0x2c>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60fb      	str	r3, [r7, #12]
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <prvTaskExitError+0x28>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60bb      	str	r3, [r7, #8]
}
 800392e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003930:	bf00      	nop
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0fc      	beq.n	8003932 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	2000000c 	.word	0x2000000c
	...

08003950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003950:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	f04e 0e0d 	orr.w	lr, lr, #13
 800396e:	4770      	bx	lr

08003970 <pxCurrentTCBConst2>:
 8003970:	20000518 	.word	0x20000518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003978:	4806      	ldr	r0, [pc, #24]	@ (8003994 <prvPortStartFirstTask+0x1c>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	b662      	cpsie	i
 8003984:	b661      	cpsie	f
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	df00      	svc	0
 8003990:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003992:	bf00      	nop
 8003994:	e000ed08 	.word	0xe000ed08

08003998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800399e:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <xPortStartScheduler+0xd0>)
 80039a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	@ 0xff
 80039ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <xPortStartScheduler+0xd4>)
 80039c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <xPortStartScheduler+0xd8>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039cc:	e009      	b.n	80039e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <xPortStartScheduler+0xd8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	4a26      	ldr	r2, [pc, #152]	@ (8003a70 <xPortStartScheduler+0xd8>)
 80039d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	d0ef      	beq.n	80039ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039ee:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <xPortStartScheduler+0xd8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1c3 0307 	rsb	r3, r3, #7
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00b      	beq.n	8003a12 <xPortStartScheduler+0x7a>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60bb      	str	r3, [r7, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	e7fd      	b.n	8003a0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a12:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <xPortStartScheduler+0xd8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <xPortStartScheduler+0xd8>)
 8003a1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a1c:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <xPortStartScheduler+0xd8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a24:	4a12      	ldr	r2, [pc, #72]	@ (8003a70 <xPortStartScheduler+0xd8>)
 8003a26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a30:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <xPortStartScheduler+0xdc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <xPortStartScheduler+0xdc>)
 8003a36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <xPortStartScheduler+0xdc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <xPortStartScheduler+0xdc>)
 8003a42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a48:	f000 f8b8 	bl	8003bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <xPortStartScheduler+0xe0>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a52:	f7ff ff91 	bl	8003978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a56:	f7ff fd7b 	bl	8003550 <vTaskSwitchContext>
	prvTaskExitError();
 8003a5a:	f7ff ff49 	bl	80038f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	e000e400 	.word	0xe000e400
 8003a6c:	20000644 	.word	0x20000644
 8003a70:	20000648 	.word	0x20000648
 8003a74:	e000ed20 	.word	0xe000ed20
 8003a78:	2000000c 	.word	0x2000000c

08003a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	607b      	str	r3, [r7, #4]
}
 8003a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <vPortEnterCritical+0x58>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <vPortEnterCritical+0x58>)
 8003a9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <vPortEnterCritical+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d110      	bne.n	8003aca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <vPortEnterCritical+0x5c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <vPortEnterCritical+0x4e>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	603b      	str	r3, [r7, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <vPortEnterCritical+0x4a>
	}
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	2000000c 	.word	0x2000000c
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ae2:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <vPortExitCritical+0x50>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <vPortExitCritical+0x26>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	607b      	str	r3, [r7, #4]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <vPortExitCritical+0x50>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <vPortExitCritical+0x50>)
 8003b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <vPortExitCritical+0x50>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <vPortExitCritical+0x44>
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b30:	f3ef 8009 	mrs	r0, PSP
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <pxCurrentTCBConst>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b40:	6010      	str	r0, [r2, #0]
 8003b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b4a:	f380 8811 	msr	BASEPRI, r0
 8003b4e:	f7ff fcff 	bl	8003550 <vTaskSwitchContext>
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	6808      	ldr	r0, [r1, #0]
 8003b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b66:	f380 8809 	msr	PSP, r0
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	4770      	bx	lr

08003b70 <pxCurrentTCBConst>:
 8003b70:	20000518 	.word	0x20000518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop

08003b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	607b      	str	r3, [r7, #4]
}
 8003b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b92:	f7ff fc23 	bl	80033dc <xTaskIncrementTick>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <SysTick_Handler+0x40>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f383 8811 	msr	BASEPRI, r3
}
 8003bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <vPortSetupTimerInterrupt+0x30>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <vPortSetupTimerInterrupt+0x34>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <vPortSetupTimerInterrupt+0x38>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <vPortSetupTimerInterrupt+0x3c>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	4a08      	ldr	r2, [pc, #32]	@ (8003bfc <vPortSetupTimerInterrupt+0x40>)
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bde:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <vPortSetupTimerInterrupt+0x30>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	e000e010 	.word	0xe000e010
 8003bf0:	e000e018 	.word	0xe000e018
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	10624dd3 	.word	0x10624dd3
 8003bfc:	e000e014 	.word	0xe000e014

08003c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c0c:	f7ff fb3a 	bl	8003284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c10:	4b5c      	ldr	r3, [pc, #368]	@ (8003d84 <pvPortMalloc+0x184>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c18:	f000 f924 	bl	8003e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <pvPortMalloc+0x188>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 8095 	bne.w	8003d54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01e      	beq.n	8003c6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c30:	2208      	movs	r2, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d015      	beq.n	8003c6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	3308      	adds	r3, #8
 8003c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <pvPortMalloc+0x6e>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	617b      	str	r3, [r7, #20]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d06f      	beq.n	8003d54 <pvPortMalloc+0x154>
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <pvPortMalloc+0x18c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d86a      	bhi.n	8003d54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c7e:	4b44      	ldr	r3, [pc, #272]	@ (8003d90 <pvPortMalloc+0x190>)
 8003c80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c82:	4b43      	ldr	r3, [pc, #268]	@ (8003d90 <pvPortMalloc+0x190>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c88:	e004      	b.n	8003c94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d903      	bls.n	8003ca6 <pvPortMalloc+0xa6>
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f1      	bne.n	8003c8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ca6:	4b37      	ldr	r3, [pc, #220]	@ (8003d84 <pvPortMalloc+0x184>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d051      	beq.n	8003d54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	4413      	add	r3, r2
 8003cb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	1ad2      	subs	r2, r2, r3
 8003cca:	2308      	movs	r3, #8
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d920      	bls.n	8003d14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <pvPortMalloc+0xfc>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	613b      	str	r3, [r7, #16]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d0e:	69b8      	ldr	r0, [r7, #24]
 8003d10:	f000 f90a 	bl	8003f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	@ (8003d8c <pvPortMalloc+0x18c>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <pvPortMalloc+0x18c>)
 8003d20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <pvPortMalloc+0x18c>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <pvPortMalloc+0x194>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d203      	bcs.n	8003d36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d2e:	4b17      	ldr	r3, [pc, #92]	@ (8003d8c <pvPortMalloc+0x18c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <pvPortMalloc+0x194>)
 8003d34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <pvPortMalloc+0x188>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d4a:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <pvPortMalloc+0x198>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <pvPortMalloc+0x198>)
 8003d52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d54:	f7ff faa4 	bl	80032a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <pvPortMalloc+0x17a>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <pvPortMalloc+0x176>
	return pvReturn;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	@ 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20001254 	.word	0x20001254
 8003d88:	20001268 	.word	0x20001268
 8003d8c:	20001258 	.word	0x20001258
 8003d90:	2000124c 	.word	0x2000124c
 8003d94:	2000125c 	.word	0x2000125c
 8003d98:	20001260 	.word	0x20001260

08003d9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d04f      	beq.n	8003e4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dae:	2308      	movs	r3, #8
 8003db0:	425b      	negs	r3, r3
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4413      	add	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <vPortFree+0xbc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <vPortFree+0x46>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60fb      	str	r3, [r7, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <vPortFree+0x66>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60bb      	str	r3, [r7, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <vPortFree+0xbc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01e      	beq.n	8003e4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11a      	bne.n	8003e4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <vPortFree+0xbc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e28:	f7ff fa2c 	bl	8003284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <vPortFree+0xc0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a09      	ldr	r2, [pc, #36]	@ (8003e5c <vPortFree+0xc0>)
 8003e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e3a:	6938      	ldr	r0, [r7, #16]
 8003e3c:	f000 f874 	bl	8003f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <vPortFree+0xc4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <vPortFree+0xc4>)
 8003e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e4a:	f7ff fa29 	bl	80032a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20001268 	.word	0x20001268
 8003e5c:	20001258 	.word	0x20001258
 8003e60:	20001264 	.word	0x20001264

08003e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <prvHeapInit+0xac>)
 8003e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00c      	beq.n	8003e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3307      	adds	r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <prvHeapInit+0xac>)
 8003e94:	4413      	add	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <prvHeapInit+0xb0>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <prvHeapInit+0xb0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4413      	add	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a15      	ldr	r2, [pc, #84]	@ (8003f18 <prvHeapInit+0xb4>)
 8003ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <prvHeapInit+0xb4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ece:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <prvHeapInit+0xb4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <prvHeapInit+0xb4>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <prvHeapInit+0xb8>)
 8003ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a09      	ldr	r2, [pc, #36]	@ (8003f20 <prvHeapInit+0xbc>)
 8003efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <prvHeapInit+0xc0>)
 8003efe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000064c 	.word	0x2000064c
 8003f14:	2000124c 	.word	0x2000124c
 8003f18:	20001254 	.word	0x20001254
 8003f1c:	2000125c 	.word	0x2000125c
 8003f20:	20001258 	.word	0x20001258
 8003f24:	20001268 	.word	0x20001268

08003f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f30:	4b27      	ldr	r3, [pc, #156]	@ (8003fd0 <prvInsertBlockIntoFreeList+0xa8>)
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e002      	b.n	8003f3c <prvInsertBlockIntoFreeList+0x14>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d8f7      	bhi.n	8003f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4413      	add	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d108      	bne.n	8003f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	441a      	add	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d118      	bne.n	8003fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b14      	ldr	r3, [pc, #80]	@ (8003fd4 <prvInsertBlockIntoFreeList+0xac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d00d      	beq.n	8003fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e008      	b.n	8003fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <prvInsertBlockIntoFreeList+0xac>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e003      	b.n	8003fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d002      	beq.n	8003fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	2000124c 	.word	0x2000124c
 8003fd4:	20001254 	.word	0x20001254

08003fd8 <memset>:
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4402      	add	r2, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <_reclaim_reent>:
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <_reclaim_reent+0xb8>)
 8003fea:	b570      	push	{r4, r5, r6, lr}
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	d053      	beq.n	800409c <_reclaim_reent+0xb4>
 8003ff4:	69c3      	ldr	r3, [r0, #28]
 8003ff6:	b31b      	cbz	r3, 8004040 <_reclaim_reent+0x58>
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	b163      	cbz	r3, 8004016 <_reclaim_reent+0x2e>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	69e3      	ldr	r3, [r4, #28]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	5959      	ldr	r1, [r3, r5]
 8004004:	b9b1      	cbnz	r1, 8004034 <_reclaim_reent+0x4c>
 8004006:	3504      	adds	r5, #4
 8004008:	2d80      	cmp	r5, #128	@ 0x80
 800400a:	d1f8      	bne.n	8003ffe <_reclaim_reent+0x16>
 800400c:	69e3      	ldr	r3, [r4, #28]
 800400e:	4620      	mov	r0, r4
 8004010:	68d9      	ldr	r1, [r3, #12]
 8004012:	f000 f86d 	bl	80040f0 <_free_r>
 8004016:	69e3      	ldr	r3, [r4, #28]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	b111      	cbz	r1, 8004022 <_reclaim_reent+0x3a>
 800401c:	4620      	mov	r0, r4
 800401e:	f000 f867 	bl	80040f0 <_free_r>
 8004022:	69e3      	ldr	r3, [r4, #28]
 8004024:	689d      	ldr	r5, [r3, #8]
 8004026:	b15d      	cbz	r5, 8004040 <_reclaim_reent+0x58>
 8004028:	4629      	mov	r1, r5
 800402a:	4620      	mov	r0, r4
 800402c:	682d      	ldr	r5, [r5, #0]
 800402e:	f000 f85f 	bl	80040f0 <_free_r>
 8004032:	e7f8      	b.n	8004026 <_reclaim_reent+0x3e>
 8004034:	680e      	ldr	r6, [r1, #0]
 8004036:	4620      	mov	r0, r4
 8004038:	f000 f85a 	bl	80040f0 <_free_r>
 800403c:	4631      	mov	r1, r6
 800403e:	e7e1      	b.n	8004004 <_reclaim_reent+0x1c>
 8004040:	6961      	ldr	r1, [r4, #20]
 8004042:	b111      	cbz	r1, 800404a <_reclaim_reent+0x62>
 8004044:	4620      	mov	r0, r4
 8004046:	f000 f853 	bl	80040f0 <_free_r>
 800404a:	69e1      	ldr	r1, [r4, #28]
 800404c:	b111      	cbz	r1, 8004054 <_reclaim_reent+0x6c>
 800404e:	4620      	mov	r0, r4
 8004050:	f000 f84e 	bl	80040f0 <_free_r>
 8004054:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004056:	b111      	cbz	r1, 800405e <_reclaim_reent+0x76>
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f849 	bl	80040f0 <_free_r>
 800405e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004060:	b111      	cbz	r1, 8004068 <_reclaim_reent+0x80>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f844 	bl	80040f0 <_free_r>
 8004068:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800406a:	b111      	cbz	r1, 8004072 <_reclaim_reent+0x8a>
 800406c:	4620      	mov	r0, r4
 800406e:	f000 f83f 	bl	80040f0 <_free_r>
 8004072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004074:	b111      	cbz	r1, 800407c <_reclaim_reent+0x94>
 8004076:	4620      	mov	r0, r4
 8004078:	f000 f83a 	bl	80040f0 <_free_r>
 800407c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800407e:	b111      	cbz	r1, 8004086 <_reclaim_reent+0x9e>
 8004080:	4620      	mov	r0, r4
 8004082:	f000 f835 	bl	80040f0 <_free_r>
 8004086:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004088:	b111      	cbz	r1, 8004090 <_reclaim_reent+0xa8>
 800408a:	4620      	mov	r0, r4
 800408c:	f000 f830 	bl	80040f0 <_free_r>
 8004090:	6a23      	ldr	r3, [r4, #32]
 8004092:	b11b      	cbz	r3, 800409c <_reclaim_reent+0xb4>
 8004094:	4620      	mov	r0, r4
 8004096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800409a:	4718      	bx	r3
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	bf00      	nop
 80040a0:	20000010 	.word	0x20000010

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	2600      	movs	r6, #0
 80040a8:	4d0c      	ldr	r5, [pc, #48]	@ (80040dc <__libc_init_array+0x38>)
 80040aa:	4c0d      	ldr	r4, [pc, #52]	@ (80040e0 <__libc_init_array+0x3c>)
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	f000 f870 	bl	8004198 <_init>
 80040b8:	2600      	movs	r6, #0
 80040ba:	4d0a      	ldr	r5, [pc, #40]	@ (80040e4 <__libc_init_array+0x40>)
 80040bc:	4c0a      	ldr	r4, [pc, #40]	@ (80040e8 <__libc_init_array+0x44>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08004268 	.word	0x08004268
 80040e0:	08004268 	.word	0x08004268
 80040e4:	08004268 	.word	0x08004268
 80040e8:	0800426c 	.word	0x0800426c

080040ec <__retarget_lock_acquire_recursive>:
 80040ec:	4770      	bx	lr

080040ee <__retarget_lock_release_recursive>:
 80040ee:	4770      	bx	lr

080040f0 <_free_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4605      	mov	r5, r0
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d040      	beq.n	800417a <_free_r+0x8a>
 80040f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040fc:	1f0c      	subs	r4, r1, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfb8      	it	lt
 8004102:	18e4      	addlt	r4, r4, r3
 8004104:	f000 f83c 	bl	8004180 <__malloc_lock>
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <_free_r+0x8c>)
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x2c>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	4628      	mov	r0, r5
 8004114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004118:	f000 b838 	b.w	800418c <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x42>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	1821      	adds	r1, r4, r0
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x1e>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x4c>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x42>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1850      	adds	r0, r2, r1
 8004140:	42a0      	cmp	r0, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x6c>
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	4401      	add	r1, r0
 8004148:	1850      	adds	r0, r2, r1
 800414a:	4283      	cmp	r3, r0
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x22>
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4408      	add	r0, r1
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	6053      	str	r3, [r2, #4]
 800415a:	e7da      	b.n	8004112 <_free_r+0x22>
 800415c:	d902      	bls.n	8004164 <_free_r+0x74>
 800415e:	230c      	movs	r3, #12
 8004160:	602b      	str	r3, [r5, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x22>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	1821      	adds	r1, r4, r0
 8004168:	428b      	cmp	r3, r1
 800416a:	bf01      	itttt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	1809      	addeq	r1, r1, r0
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	6054      	str	r4, [r2, #4]
 8004178:	e7cb      	b.n	8004112 <_free_r+0x22>
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	200013a8 	.word	0x200013a8

08004180 <__malloc_lock>:
 8004180:	4801      	ldr	r0, [pc, #4]	@ (8004188 <__malloc_lock+0x8>)
 8004182:	f7ff bfb3 	b.w	80040ec <__retarget_lock_acquire_recursive>
 8004186:	bf00      	nop
 8004188:	200013a4 	.word	0x200013a4

0800418c <__malloc_unlock>:
 800418c:	4801      	ldr	r0, [pc, #4]	@ (8004194 <__malloc_unlock+0x8>)
 800418e:	f7ff bfae 	b.w	80040ee <__retarget_lock_release_recursive>
 8004192:	bf00      	nop
 8004194:	200013a4 	.word	0x200013a4

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
