
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005acc  08005acc  00006acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b88  08005b88  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b90  08005b90  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b94  08005b94  00006b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005b98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000060  08005bf8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d9c  08005bf8  00007d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beef  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc5  00000000  00000000  00022f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00026c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e0  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b346  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddcf  00000000  00000000  00044a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c97c  00000000  00000000  00062855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff1d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a8  00000000  00000000  000ff214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00105abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ab4 	.word	0x08005ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005ab4 	.word	0x08005ab4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <StateMachineTask>:
}*/

uint8_t state = 0;
char* per_value = 0;

void StateMachineTask(void){
 8000160:	b580      	push	{r7, lr}
 8000162:	b0a6      	sub	sp, #152	@ 0x98
 8000164:	af00      	add	r7, sp, #0
	static uint8_t action_done = 0;

	while(1){
		send_UART3("HELLO WORLD!");
 8000166:	4802      	ldr	r0, [pc, #8]	@ (8000170 <StateMachineTask+0x10>)
 8000168:	f000 fd04 	bl	8000b74 <send_UART3>
 800016c:	e7fb      	b.n	8000166 <StateMachineTask+0x6>
 800016e:	bf00      	nop
 8000170:	08005acc 	.word	0x08005acc

08000174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4a06      	ldr	r2, [pc, #24]	@ (800019c <vApplicationGetIdleTaskMemory+0x28>)
 8000184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	4a05      	ldr	r2, [pc, #20]	@ (80001a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800018a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2280      	movs	r2, #128	@ 0x80
 8000190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000192:	bf00      	nop
 8000194:	3714      	adds	r7, #20
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c
 80001a0:	20000124 	.word	0x20000124

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a8:	f000 fd20 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ac:	f000 f830 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b0:	f000 f970 	bl	8000494 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001b4:	f000 f8c6 	bl	8000344 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001b8:	f000 fc88 	bl	8000acc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001bc:	f000 f940 	bl	8000440 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001c0:	f000 fcae 	bl	8000b20 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80001c4:	f000 f880 	bl	80002c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001c8:	f000 f8ea 	bl	80003a0 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001cc:	f002 fe62 	bl	8002e94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001d0:	4a09      	ldr	r2, [pc, #36]	@ (80001f8 <main+0x54>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	4809      	ldr	r0, [pc, #36]	@ (80001fc <main+0x58>)
 80001d6:	f002 fea5 	bl	8002f24 <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <main+0x5c>)
 80001de:	6013      	str	r3, [r2, #0]
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 80001e0:	4a08      	ldr	r2, [pc, #32]	@ (8000204 <main+0x60>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	4808      	ldr	r0, [pc, #32]	@ (8000208 <main+0x64>)
 80001e6:	f002 fe9d 	bl	8002f24 <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a07      	ldr	r2, [pc, #28]	@ (800020c <main+0x68>)
 80001ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001f0:	f002 fe72 	bl	8002ed8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	bf00      	nop
 80001f6:	e7fd      	b.n	80001f4 <main+0x50>
 80001f8:	08005b14 	.word	0x08005b14
 80001fc:	080005ff 	.word	0x080005ff
 8000200:	20000438 	.word	0x20000438
 8000204:	08005b38 	.word	0x08005b38
 8000208:	080005f1 	.word	0x080005f1
 800020c:	2000043c 	.word	0x2000043c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	@ 0x50
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f005 fb5a 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fac4 	bl	80017f4 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000272:	f000 f9dc 	bl	800062e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fd30 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800029e:	f000 f9c6 	bl	800062e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002a2:	2302      	movs	r3, #2
 80002a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80002a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fee0 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ba:	f000 f9b8 	bl	800062e <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3750      	adds	r7, #80	@ 0x50
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_ADC1_Init+0x74>)
 80002da:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <MX_ADC1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_ADC1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_ADC1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_ADC1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_ADC1_Init+0x74>)
 80002f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f8:	4b10      	ldr	r3, [pc, #64]	@ (800033c <MX_ADC1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_ADC1_Init+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <MX_ADC1_Init+0x74>)
 8000306:	f000 fca3 	bl	8000c50 <HAL_ADC_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f98d 	bl	800062e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000314:	2308      	movs	r3, #8
 8000316:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000318:	2301      	movs	r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_ADC1_Init+0x74>)
 8000326:	f000 fd6b 	bl	8000e00 <HAL_ADC_ConfigChannel>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000330:	f000 f97d 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000324 	.word	0x20000324
 8000340:	40012400 	.word	0x40012400

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_I2C1_Init+0x50>)
 800034a:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <MX_I2C1_Init+0x54>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000350:	4a12      	ldr	r2, [pc, #72]	@ (800039c <MX_I2C1_Init+0x58>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000362:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <MX_I2C1_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000382:	f001 f8f3 	bl	800156c <HAL_I2C_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800038c:	f000 f94f 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000354 	.word	0x20000354
 8000398:	40005400 	.word	0x40005400
 800039c:	000186a0 	.word	0x000186a0

080003a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b4:	463b      	mov	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003be:	4a1f      	ldr	r2, [pc, #124]	@ (800043c <MX_TIM1_Init+0x9c>)
 80003c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d6:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003dc:	4b16      	ldr	r3, [pc, #88]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e8:	4813      	ldr	r0, [pc, #76]	@ (8000438 <MX_TIM1_Init+0x98>)
 80003ea:	f001 fef9 	bl	80021e0 <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003f4:	f000 f91b 	bl	800062e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <MX_TIM1_Init+0x98>)
 8000406:	f002 f87d 	bl	8002504 <HAL_TIM_ConfigClockSource>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000410:	f000 f90d 	bl	800062e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_TIM1_Init+0x98>)
 8000422:	f002 fa5f 	bl	80028e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800042c:	f000 f8ff 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200003a8 	.word	0x200003a8
 800043c:	40012c00 	.word	0x40012c00

08000440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000446:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <MX_USART2_UART_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 800044c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_USART2_UART_Init+0x4c>)
 8000478:	f002 faa4 	bl	80029c4 <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000482:	f000 f8d4 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200003f0 	.word	0x200003f0
 8000490:	40004400 	.word	0x40004400

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a8:	4b4c      	ldr	r3, [pc, #304]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a4b      	ldr	r2, [pc, #300]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b49      	ldr	r3, [pc, #292]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c0:	4b46      	ldr	r3, [pc, #280]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a45      	ldr	r2, [pc, #276]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b43      	ldr	r3, [pc, #268]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b40      	ldr	r3, [pc, #256]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a3f      	ldr	r2, [pc, #252]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b3d      	ldr	r3, [pc, #244]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b3a      	ldr	r3, [pc, #232]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a39      	ldr	r2, [pc, #228]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b37      	ldr	r3, [pc, #220]	@ (80005dc <MX_GPIO_Init+0x148>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800050e:	4834      	ldr	r0, [pc, #208]	@ (80005e0 <MX_GPIO_Init+0x14c>)
 8000510:	f001 f814 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin|LED_CEL_Pin|OUT2_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f648 0110 	movw	r1, #34832	@ 0x8810
 800051a:	4832      	ldr	r0, [pc, #200]	@ (80005e4 <MX_GPIO_Init+0x150>)
 800051c:	f001 f80e 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 8000520:	2200      	movs	r2, #0
 8000522:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 8000526:	4830      	ldr	r0, [pc, #192]	@ (80005e8 <MX_GPIO_Init+0x154>)
 8000528:	f001 f808 	bl	800153c <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin|BUZZER_Pin;
 800052c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2302      	movs	r3, #2
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4826      	ldr	r0, [pc, #152]	@ (80005e0 <MX_GPIO_Init+0x14c>)
 8000546:	f000 fe75 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 800054a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4820      	ldr	r0, [pc, #128]	@ (80005e0 <MX_GPIO_Init+0x14c>)
 8000560:	f000 fe68 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP3_Pin|BP2_Pin|BP3_Pin
 8000564:	23e3      	movs	r3, #227	@ 0xe3
 8000566:	613b      	str	r3, [r7, #16]
                          |BP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	481b      	ldr	r0, [pc, #108]	@ (80005e4 <MX_GPIO_Init+0x150>)
 8000578:	f000 fe5c 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin|LED_CEL_Pin|OUT2_Pin;
 800057c:	f648 0310 	movw	r3, #34832	@ 0x8810
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <MX_GPIO_Init+0x150>)
 8000596:	f000 fe4d 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDY_Pin|RELAIS_ALIM_418_Pin
 800059a:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 800059e:	613b      	str	r3, [r7, #16]
                          |OUT1_Pin|OUT3_Pin|OUT4_Pin|OUT5_Pin
                          |OUT6_Pin|OUT7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <MX_GPIO_Init+0x154>)
 80005b4:	f000 fe3e 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_GPIO_Init+0x158>)
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <MX_GPIO_Init+0x154>)
 80005ce:	f000 fe31 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	10110000 	.word	0x10110000

080005f0 <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	for(;;){
		StateMachineTask();
 80005f8:	f7ff fdb2 	bl	8000160 <StateMachineTask>
 80005fc:	e7fc      	b.n	80005f8 <StartStateMachineTask+0x8>

080005fe <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
	//HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060a:	f002 fd1d 	bl	8003048 <osDelay>
 800060e:	e7fa      	b.n	8000606 <StartDefaultTask+0x8>

08000610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000620:	d101      	bne.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000622:	f000 faf9 	bl	8000c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000632:	b672      	cpsid	i
}
 8000634:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_MspInit+0x68>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a17      	ldr	r2, [pc, #92]	@ (80006a4 <HAL_MspInit+0x68>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_MspInit+0x68>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <HAL_MspInit+0x68>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <HAL_MspInit+0x68>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <HAL_MspInit+0x68>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	f06f 0001 	mvn.w	r0, #1
 800067a:	f000 fdb0 	bl	80011de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <HAL_MspInit+0x6c>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_MspInit+0x6c>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a14      	ldr	r2, [pc, #80]	@ (8000718 <HAL_ADC_MspInit+0x6c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d121      	bne.n	8000710 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a12      	ldr	r2, [pc, #72]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_ADC_MspInit+0x70>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000700:	2303      	movs	r3, #3
 8000702:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_ADC_MspInit+0x74>)
 800070c:	f000 fd92 	bl	8001234 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40012400 	.word	0x40012400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010c00 	.word	0x40010c00

08000724 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <HAL_I2C_MspInit+0x90>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d132      	bne.n	80007aa <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800075c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4812      	ldr	r0, [pc, #72]	@ (80007bc <HAL_I2C_MspInit+0x98>)
 8000772:	f000 fd5f 	bl	8001234 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <HAL_I2C_MspInit+0x9c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
 800077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <HAL_I2C_MspInit+0x9c>)
 800078e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000790:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_I2C_MspInit+0x94>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	@ 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	40010000 	.word	0x40010000

080007c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <HAL_TIM_Base_MspInit+0x34>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10b      	bne.n	80007ee <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40012c00 	.word	0x40012c00
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a53      	ldr	r2, [pc, #332]	@ (8000968 <HAL_UART_MspInit+0x168>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d132      	bne.n	8000886 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000820:	4b52      	ldr	r3, [pc, #328]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a51      	ldr	r2, [pc, #324]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a4b      	ldr	r2, [pc, #300]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b49      	ldr	r3, [pc, #292]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 8000850:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4842      	ldr	r0, [pc, #264]	@ (8000970 <HAL_UART_MspInit+0x170>)
 8000866:	f000 fce5 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 800086a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4619      	mov	r1, r3
 800087e:	483c      	ldr	r0, [pc, #240]	@ (8000970 <HAL_UART_MspInit+0x170>)
 8000880:	f000 fcd8 	bl	8001234 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000884:	e06c      	b.n	8000960 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a3a      	ldr	r2, [pc, #232]	@ (8000974 <HAL_UART_MspInit+0x174>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d130      	bne.n	80008f2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000890:	4b36      	ldr	r3, [pc, #216]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b33      	ldr	r3, [pc, #204]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b30      	ldr	r3, [pc, #192]	@ (800096c <HAL_UART_MspInit+0x16c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a2f      	ldr	r2, [pc, #188]	@ (800096c <HAL_UART_MspInit+0x16c>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <HAL_UART_MspInit+0x16c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4619      	mov	r1, r3
 80008d2:	4827      	ldr	r0, [pc, #156]	@ (8000970 <HAL_UART_MspInit+0x170>)
 80008d4:	f000 fcae 	bl	8001234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 80008d8:	2308      	movs	r3, #8
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4619      	mov	r1, r3
 80008ea:	4821      	ldr	r0, [pc, #132]	@ (8000970 <HAL_UART_MspInit+0x170>)
 80008ec:	f000 fca2 	bl	8001234 <HAL_GPIO_Init>
}
 80008f0:	e036      	b.n	8000960 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a20      	ldr	r2, [pc, #128]	@ (8000978 <HAL_UART_MspInit+0x178>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d131      	bne.n	8000960 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <HAL_UART_MspInit+0x16c>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000906:	61d3      	str	r3, [r2, #28]
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a14      	ldr	r2, [pc, #80]	@ (800096c <HAL_UART_MspInit+0x16c>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_UART_MspInit+0x16c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_COM_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TX_COM_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	480e      	ldr	r0, [pc, #56]	@ (800097c <HAL_UART_MspInit+0x17c>)
 8000942:	f000 fc77 	bl	8001234 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_COM_Pin;
 8000946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RX_COM_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4619      	mov	r1, r3
 800095a:	4808      	ldr	r0, [pc, #32]	@ (800097c <HAL_UART_MspInit+0x17c>)
 800095c:	f000 fc6a 	bl	8001234 <HAL_GPIO_Init>
}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	@ 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40013800 	.word	0x40013800
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800
 8000974:	40004400 	.word	0x40004400
 8000978:	40004800 	.word	0x40004800
 800097c:	40010c00 	.word	0x40010c00

08000980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	@ 0x38
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <HAL_InitTick+0xe8>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a33      	ldr	r2, [pc, #204]	@ (8000a68 <HAL_InitTick+0xe8>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <HAL_InitTick+0xe8>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ae:	f107 0210 	add.w	r2, r7, #16
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fb0d 	bl	8001fd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c8:	f001 fade 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80009cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ce:	e004      	b.n	80009da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d0:	f001 fada 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009dc:	4a23      	ldr	r2, [pc, #140]	@ (8000a6c <HAL_InitTick+0xec>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <HAL_InitTick+0xf0>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_InitTick+0xf0>)
 80009f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <HAL_InitTick+0xf0>)
 80009fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_InitTick+0xf0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <HAL_InitTick+0xf0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_InitTick+0xf0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a10:	4817      	ldr	r0, [pc, #92]	@ (8000a70 <HAL_InitTick+0xf0>)
 8000a12:	f001 fbe5 	bl	80021e0 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d11b      	bne.n	8000a5c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a24:	4812      	ldr	r0, [pc, #72]	@ (8000a70 <HAL_InitTick+0xf0>)
 8000a26:	f001 fc2b 	bl	8002280 <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d111      	bne.n	8000a5c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a38:	201c      	movs	r0, #28
 8000a3a:	f000 fbec 	bl	8001216 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d808      	bhi.n	8000a56 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	201c      	movs	r0, #28
 8000a4a:	f000 fbc8 	bl	80011de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <HAL_InitTick+0xf4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e002      	b.n	8000a5c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3738      	adds	r7, #56	@ 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	431bde83 	.word	0x431bde83
 8000a70:	20000440 	.word	0x20000440
 8000a74:	20000004 	.word	0x20000004

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <TIM2_IRQHandler+0x10>)
 8000ab2:	f001 fc37 	bl	8002324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000440 	.word	0x20000440

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <MX_USART1_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART1_UART_Init+0x4c>)
 8000b04:	f001 ff5e 	bl	80029c4 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f7ff fd8e 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000488 	.word	0x20000488
 8000b1c:	40013800 	.word	0x40013800

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <MX_USART3_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_USART3_UART_Init+0x4c>)
 8000b58:	f001 ff34 	bl	80029c4 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f7ff fd64 	bl	800062e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200004d0 	.word	0x200004d0
 8000b70:	40004800 	.word	0x40004800

08000b74 <send_UART3>:
{
    HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
}

void send_UART3(const char *msg)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fae7 	bl	8000150 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <send_UART3+0x28>)
 8000b8e:	f001 ff69 	bl	8002a64 <HAL_UART_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200004d0 	.word	0x200004d0

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ff8e 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba6:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bbc:	4c09      	ldr	r4, [pc, #36]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 feeb 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fae9 	bl	80001a4 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bdc:	08005b98 	.word	0x08005b98
  ldr r2, =_sbss
 8000be0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be4:	20001d9c 	.word	0x20001d9c

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 fae3 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f7ff febc 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fd18 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	@ (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000518 	.word	0x20000518

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	@ (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000518 	.word	0x20000518

08000c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e0be      	b.n	8000df0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fd0c 	bl	80006ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f9ab 	bl	8000ff0 <ADC_ConversionStop_Disable>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8099 	bne.w	8000dde <HAL_ADC_Init+0x18e>
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8095 	bne.w	8000dde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	f043 0202 	orr.w	r2, r3, #2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7b1b      	ldrb	r3, [r3, #12]
 8000cd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ce8:	d003      	beq.n	8000cf2 <HAL_ADC_Init+0xa2>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d102      	bne.n	8000cf8 <HAL_ADC_Init+0xa8>
 8000cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf6:	e000      	b.n	8000cfa <HAL_ADC_Init+0xaa>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7d1b      	ldrb	r3, [r3, #20]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d119      	bne.n	8000d3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7b1b      	ldrb	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	035a      	lsls	r2, r3, #13
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e00b      	b.n	8000d3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d28:	f043 0220 	orr.w	r2, r3, #32
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <HAL_ADC_Init+0x1a8>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d6c:	d003      	beq.n	8000d76 <HAL_ADC_Init+0x126>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d104      	bne.n	8000d80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	051b      	lsls	r3, r3, #20
 8000d7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d86:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_ADC_Init+0x1ac>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d10b      	bne.n	8000dbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	f023 0303 	bic.w	r3, r3, #3
 8000db2:	f043 0201 	orr.w	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dba:	e018      	b.n	8000dee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc0:	f023 0312 	bic.w	r3, r3, #18
 8000dc4:	f043 0210 	orr.w	r2, r3, #16
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ddc:	e007      	b.n	8000dee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de2:	f043 0210 	orr.w	r2, r3, #16
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dfc:	ff1f0efe 	.word	0xff1f0efe

08000e00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x20>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0dc      	b.n	8000fda <HAL_ADC_ConfigChannel+0x1da>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d81c      	bhi.n	8000e6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b05      	subs	r3, #5
 8000e42:	221f      	movs	r2, #31
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4019      	ands	r1, r3
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	3b05      	subs	r3, #5
 8000e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e68:	e03c      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	d81c      	bhi.n	8000eac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3b23      	subs	r3, #35	@ 0x23
 8000e84:	221f      	movs	r2, #31
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b23      	subs	r3, #35	@ 0x23
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eaa:	e01b      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	3b41      	subs	r3, #65	@ 0x41
 8000ebe:	221f      	movs	r2, #31
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3b41      	subs	r3, #65	@ 0x41
 8000ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d91c      	bls.n	8000f26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68d9      	ldr	r1, [r3, #12]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	3b1e      	subs	r3, #30
 8000efe:	2207      	movs	r2, #7
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4019      	ands	r1, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6898      	ldr	r0, [r3, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	e019      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6919      	ldr	r1, [r3, #16]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	2207      	movs	r2, #7
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d003      	beq.n	8000f6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f66:	2b11      	cmp	r3, #17
 8000f68:	d132      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d125      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d126      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d11a      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <HAL_ADC_ConfigChannel+0x1ec>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	0c9a      	lsrs	r2, r3, #18
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	e002      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <HAL_ADC_ConfigChannel+0x1b2>
 8000fbe:	e007      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	f043 0220 	orr.w	r2, r3, #32
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12e      	bne.n	8001068 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0201 	bic.w	r2, r2, #1
 8001018:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800101a:	f7ff fe0f 	bl	8000c3c <HAL_GetTick>
 800101e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001020:	e01b      	b.n	800105a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001022:	f7ff fe0b 	bl	8000c3c <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d914      	bls.n	800105a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10d      	bne.n	800105a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001042:	f043 0210 	orr.w	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104e:	f043 0201 	orr.w	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e007      	b.n	800106a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0dc      	beq.n	8001022 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4906      	ldr	r1, [pc, #24]	@ (800110c <__NVIC_EnableIRQ+0x34>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	@ (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff4f 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff64 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ffb2 	bl	8001164 <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff81 	bl	8001110 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff57 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	@ 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e169      	b.n	800151c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8158 	bne.w	8001516 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a9a      	ldr	r2, [pc, #616]	@ (80014d4 <HAL_GPIO_Init+0x2a0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d05e      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001270:	4a98      	ldr	r2, [pc, #608]	@ (80014d4 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d875      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001276:	4a98      	ldr	r2, [pc, #608]	@ (80014d8 <HAL_GPIO_Init+0x2a4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d058      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 800127c:	4a96      	ldr	r2, [pc, #600]	@ (80014d8 <HAL_GPIO_Init+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d86f      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 8001282:	4a96      	ldr	r2, [pc, #600]	@ (80014dc <HAL_GPIO_Init+0x2a8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d052      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001288:	4a94      	ldr	r2, [pc, #592]	@ (80014dc <HAL_GPIO_Init+0x2a8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d869      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800128e:	4a94      	ldr	r2, [pc, #592]	@ (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d04c      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 8001294:	4a92      	ldr	r2, [pc, #584]	@ (80014e0 <HAL_GPIO_Init+0x2ac>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d863      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 800129a:	4a92      	ldr	r2, [pc, #584]	@ (80014e4 <HAL_GPIO_Init+0x2b0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d046      	beq.n	800132e <HAL_GPIO_Init+0xfa>
 80012a0:	4a90      	ldr	r2, [pc, #576]	@ (80014e4 <HAL_GPIO_Init+0x2b0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d85d      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012a6:	2b12      	cmp	r3, #18
 80012a8:	d82a      	bhi.n	8001300 <HAL_GPIO_Init+0xcc>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d859      	bhi.n	8001362 <HAL_GPIO_Init+0x12e>
 80012ae:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <HAL_GPIO_Init+0x80>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	08001309 	.word	0x08001309
 80012bc:	0800131b 	.word	0x0800131b
 80012c0:	0800135d 	.word	0x0800135d
 80012c4:	08001363 	.word	0x08001363
 80012c8:	08001363 	.word	0x08001363
 80012cc:	08001363 	.word	0x08001363
 80012d0:	08001363 	.word	0x08001363
 80012d4:	08001363 	.word	0x08001363
 80012d8:	08001363 	.word	0x08001363
 80012dc:	08001363 	.word	0x08001363
 80012e0:	08001363 	.word	0x08001363
 80012e4:	08001363 	.word	0x08001363
 80012e8:	08001363 	.word	0x08001363
 80012ec:	08001363 	.word	0x08001363
 80012f0:	08001363 	.word	0x08001363
 80012f4:	08001363 	.word	0x08001363
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001325 	.word	0x08001325
 8001300:	4a79      	ldr	r2, [pc, #484]	@ (80014e8 <HAL_GPIO_Init+0x2b4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001306:	e02c      	b.n	8001362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e029      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e024      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e01f      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	330c      	adds	r3, #12
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e01a      	b.n	8001364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001336:	2304      	movs	r3, #4
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e013      	b.n	8001364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	611a      	str	r2, [r3, #16]
          break;
 800134e:	e009      	b.n	8001364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]
          break;
 800135a:	e003      	b.n	8001364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x130>
          break;
 8001362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2bff      	cmp	r3, #255	@ 0xff
 8001368:	d801      	bhi.n	800136e <HAL_GPIO_Init+0x13a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_Init+0x13e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d802      	bhi.n	8001380 <HAL_GPIO_Init+0x14c>
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x152>
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	3b08      	subs	r3, #8
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	210f      	movs	r1, #15
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80b1 	beq.w	8001516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b4:	4b4d      	ldr	r3, [pc, #308]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013cc:	4a48      	ldr	r2, [pc, #288]	@ (80014f0 <HAL_GPIO_Init+0x2bc>)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a40      	ldr	r2, [pc, #256]	@ (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d013      	beq.n	8001420 <HAL_GPIO_Init+0x1ec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3f      	ldr	r2, [pc, #252]	@ (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1e8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <HAL_GPIO_Init+0x2c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3d      	ldr	r2, [pc, #244]	@ (8001500 <HAL_GPIO_Init+0x2cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1e0>
 8001410:	2303      	movs	r3, #3
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001414:	2304      	movs	r3, #4
 8001416:	e004      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001420:	2300      	movs	r3, #0
 8001422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001432:	492f      	ldr	r1, [pc, #188]	@ (80014f0 <HAL_GPIO_Init+0x2bc>)
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	492c      	ldr	r1, [pc, #176]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4928      	ldr	r1, [pc, #160]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4922      	ldr	r1, [pc, #136]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	491e      	ldr	r1, [pc, #120]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4918      	ldr	r1, [pc, #96]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4914      	ldr	r1, [pc, #80]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d021      	beq.n	8001508 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	490e      	ldr	r1, [pc, #56]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e021      	b.n	8001516 <HAL_GPIO_Init+0x2e2>
 80014d2:	bf00      	nop
 80014d4:	10320000 	.word	0x10320000
 80014d8:	10310000 	.word	0x10310000
 80014dc:	10220000 	.word	0x10220000
 80014e0:	10210000 	.word	0x10210000
 80014e4:	10120000 	.word	0x10120000
 80014e8:	10110000 	.word	0x10110000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_GPIO_Init+0x304>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	43db      	mvns	r3, r3
 8001510:	4909      	ldr	r1, [pc, #36]	@ (8001538 <HAL_GPIO_Init+0x304>)
 8001512:	4013      	ands	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae8e 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	372c      	adds	r7, #44	@ 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e12b      	b.n	80017d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff f8c6 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2224      	movs	r2, #36	@ 0x24
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d0:	f000 fcda 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a81      	ldr	r2, [pc, #516]	@ (80017e0 <HAL_I2C_Init+0x274>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d807      	bhi.n	80015f0 <HAL_I2C_Init+0x84>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a80      	ldr	r2, [pc, #512]	@ (80017e4 <HAL_I2C_Init+0x278>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e006      	b.n	80015fe <HAL_I2C_Init+0x92>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4a7d      	ldr	r2, [pc, #500]	@ (80017e8 <HAL_I2C_Init+0x27c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	bf94      	ite	ls
 80015f8:	2301      	movls	r3, #1
 80015fa:	2300      	movhi	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0e7      	b.n	80017d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a78      	ldr	r2, [pc, #480]	@ (80017ec <HAL_I2C_Init+0x280>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a6a      	ldr	r2, [pc, #424]	@ (80017e0 <HAL_I2C_Init+0x274>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d802      	bhi.n	8001640 <HAL_I2C_Init+0xd4>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3301      	adds	r3, #1
 800163e:	e009      	b.n	8001654 <HAL_I2C_Init+0xe8>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	4a69      	ldr	r2, [pc, #420]	@ (80017f0 <HAL_I2C_Init+0x284>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	3301      	adds	r3, #1
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001666:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	495c      	ldr	r1, [pc, #368]	@ (80017e0 <HAL_I2C_Init+0x274>)
 8001670:	428b      	cmp	r3, r1
 8001672:	d819      	bhi.n	80016a8 <HAL_I2C_Init+0x13c>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1e59      	subs	r1, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001682:	1c59      	adds	r1, r3, #1
 8001684:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001688:	400b      	ands	r3, r1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HAL_I2C_Init+0x138>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e59      	subs	r1, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fbb1 f3f3 	udiv	r3, r1, r3
 800169c:	3301      	adds	r3, #1
 800169e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a2:	e051      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e04f      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d111      	bne.n	80016d4 <HAL_I2C_Init+0x168>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e012      	b.n	80016fa <HAL_I2C_Init+0x18e>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e58      	subs	r0, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	0099      	lsls	r1, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x196>
 80016fe:	2301      	movs	r3, #1
 8001700:	e022      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10e      	bne.n	8001728 <HAL_I2C_Init+0x1bc>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e58      	subs	r0, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	440b      	add	r3, r1
 8001718:	fbb0 f3f3 	udiv	r3, r0, r3
 800171c:	3301      	adds	r3, #1
 800171e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001726:	e00f      	b.n	8001748 <HAL_I2C_Init+0x1dc>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	fbb0 f3f3 	udiv	r3, r0, r3
 800173e:	3301      	adds	r3, #1
 8001740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	6809      	ldr	r1, [r1, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001776:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6911      	ldr	r1, [r2, #16]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68d2      	ldr	r2, [r2, #12]
 8001782:	4311      	orrs	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	430b      	orrs	r3, r1
 800178a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	000186a0 	.word	0x000186a0
 80017e4:	001e847f 	.word	0x001e847f
 80017e8:	003d08ff 	.word	0x003d08ff
 80017ec:	431bde83 	.word	0x431bde83
 80017f0:	10624dd3 	.word	0x10624dd3

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e272      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b92      	ldr	r3, [pc, #584]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4b8f      	ldr	r3, [pc, #572]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
 800182c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b89      	ldr	r3, [pc, #548]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x12c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e24c      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x76>
 800185c:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b7b      	ldr	r3, [pc, #492]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b78      	ldr	r3, [pc, #480]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xbc>
 8001896:	4b72      	ldr	r3, [pc, #456]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a71      	ldr	r2, [pc, #452]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 80018b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a67      	ldr	r2, [pc, #412]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f9b4 	bl	8000c3c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f9b0 	bl	8000c3c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e200      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f9a0 	bl	8000c3c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff f99c 	bl	8000c3c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1ec      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x10c>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
 8001946:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b43      	ldr	r3, [pc, #268]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c0      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4939      	ldr	r1, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b36      	ldr	r3, [pc, #216]	@ (8001a64 <HAL_RCC_OscConfig+0x270>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f955 	bl	8000c3c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff f951 	bl	8000c3c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1a1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4927      	ldr	r1, [pc, #156]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <HAL_RCC_OscConfig+0x270>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f934 	bl	8000c3c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff f930 	bl	8000c3c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e180      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f914 	bl	8000c3c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f910 	bl	8000c3c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e160      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 fafe 	bl	8002038 <RCC_Delay>
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff f8fa 	bl	8000c3c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8f6 	bl	8000c3c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e146      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	42420000 	.word	0x42420000
 8001a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e9      	bne.n	8001a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a6 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a87      	ldr	r2, [pc, #540]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b7f      	ldr	r3, [pc, #508]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff f8b7 	bl	8000c3c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff f8b3 	bl	8000c3c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	@ 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e103      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02d      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	e01c      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x356>
 8001b30:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a60      	ldr	r2, [pc, #384]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b58      	ldr	r3, [pc, #352]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f867 	bl	8000c3c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff f863 	bl	8000c3c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0b1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCC_OscConfig+0x37e>
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f851 	bl	8000c3c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f84d 	bl	8000c3c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e09b      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d061      	beq.n	8001cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d146      	bne.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f821 	bl	8000c3c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f81d 	bl	8000c3c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e06d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4921      	ldr	r1, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	491b      	ldr	r1, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fff1 	bl	8000c3c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe ffed 	bl	8000c3c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46a>
 8001c7c:	e035      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffda 	bl	8000c3c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ffd6 	bl	8000c3c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e019      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_OscConfig+0x500>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7fe ff28 	bl	8000c3c <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe ff24 	bl	8000c3c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fd6a 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08005b5c 	.word	0x08005b5c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e027      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	613b      	str	r3, [r7, #16]
      break;
 8001f00:	e027      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c5b      	lsrs	r3, r3, #17
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e004      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	613b      	str	r3, [r7, #16]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	693b      	ldr	r3, [r7, #16]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	08005b74 	.word	0x08005b74
 8001f6c:	08005b84 	.word	0x08005b84
 8001f70:	003d0900 	.word	0x003d0900

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b02      	ldr	r3, [pc, #8]	@ (8001f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff2 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08005b6c 	.word	0x08005b6c

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0adb      	lsrs	r3, r3, #11
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	@ (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08005b6c 	.word	0x08005b6c

08001fd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_RCC_GetClockConfig+0x58>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_RCC_GetClockConfig+0x58>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_RCC_GetClockConfig+0x58>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <HAL_RCC_GetClockConfig+0x58>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_GetClockConfig+0x5c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0207 	and.w	r2, r3, #7
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40022000 	.word	0x40022000

08002038 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <RCC_Delay+0x34>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <RCC_Delay+0x38>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0a5b      	lsrs	r3, r3, #9
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002054:	bf00      	nop
  }
  while (Delay --);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	60fa      	str	r2, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <RCC_Delay+0x1c>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000000 	.word	0x20000000
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d07d      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002094:	4b4f      	ldr	r3, [pc, #316]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10d      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	61d3      	str	r3, [r2, #28]
 80020ac:	4b49      	ldr	r3, [pc, #292]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d118      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c8:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a42      	ldr	r2, [pc, #264]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fdb2 	bl	8000c3c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	e008      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fdae 	bl	8000c3c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e06d      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020fa:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002102:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02e      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d027      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002118:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002120:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002122:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800212e:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d014      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fd7d 	bl	8000c3c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fd79 	bl	8000c3c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e036      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002168:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4917      	ldr	r1, [pc, #92]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	4313      	orrs	r3, r2
 8002178:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	490b      	ldr	r1, [pc, #44]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4904      	ldr	r1, [pc, #16]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42420440 	.word	0x42420440

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fadc 	bl	80007c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fa5c 	bl	80026dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e03a      	b.n	800230e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_TIM_Base_Start_IT+0x98>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <HAL_TIM_Base_Start_IT+0x9c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x58>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a13      	ldr	r2, [pc, #76]	@ (8002320 <HAL_TIM_Base_Start_IT+0xa0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d010      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	e007      	b.n	800230c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40012c00 	.word	0x40012c00
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800

08002324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d020      	beq.n	8002388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0202 	mvn.w	r2, #2
 8002358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f998 	bl	80026a4 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f98b 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f99a 	bl	80026b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0204 	mvn.w	r2, #4
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f972 	bl	80026a4 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f965 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f974 	bl	80026b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0208 	mvn.w	r2, #8
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2204      	movs	r2, #4
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f94c 	bl	80026a4 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f93f 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f94e 	bl	80026b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0210 	mvn.w	r2, #16
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2208      	movs	r2, #8
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f926 	bl	80026a4 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f919 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f928 	bl	80026b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f8c0 	bl	8000610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa7f 	bl	80029b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8f8 	bl	80026c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00c      	beq.n	80024fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0220 	mvn.w	r2, #32
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa52 	bl	80029a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIM_ConfigClockSource+0x1c>
 800251c:	2302      	movs	r3, #2
 800251e:	e0b4      	b.n	800268a <HAL_TIM_ConfigClockSource+0x186>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800253e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002558:	d03e      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0xd4>
 800255a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255e:	f200 8087 	bhi.w	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002566:	f000 8086 	beq.w	8002676 <HAL_TIM_ConfigClockSource+0x172>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256e:	d87f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d01a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xa6>
 8002574:	2b70      	cmp	r3, #112	@ 0x70
 8002576:	d87b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b60      	cmp	r3, #96	@ 0x60
 800257a:	d050      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x11a>
 800257c:	2b60      	cmp	r3, #96	@ 0x60
 800257e:	d877      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b50      	cmp	r3, #80	@ 0x50
 8002582:	d03c      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xfa>
 8002584:	2b50      	cmp	r3, #80	@ 0x50
 8002586:	d873      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b40      	cmp	r3, #64	@ 0x40
 800258a:	d058      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x13a>
 800258c:	2b40      	cmp	r3, #64	@ 0x40
 800258e:	d86f      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b30      	cmp	r3, #48	@ 0x30
 8002592:	d064      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 8002594:	2b30      	cmp	r3, #48	@ 0x30
 8002596:	d86b      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d060      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	2b20      	cmp	r3, #32
 800259e:	d867      	bhi.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05c      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d05a      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x15a>
 80025a8:	e062      	b.n	8002670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ba:	f000 f974 	bl	80028a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]
      break;
 80025d6:	e04f      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	f000 f95d 	bl	80028a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025fa:	609a      	str	r2, [r3, #8]
      break;
 80025fc:	e03c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	461a      	mov	r2, r3
 800260c:	f000 f8d4 	bl	80027b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2150      	movs	r1, #80	@ 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f92b 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 800261c:	e02c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800262a:	461a      	mov	r2, r3
 800262c:	f000 f8f2 	bl	8002814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2160      	movs	r1, #96	@ 0x60
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f91b 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 800263c:	e01c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8b4 	bl	80027b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2140      	movs	r1, #64	@ 0x40
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f90b 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 800265c:	e00c      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f000 f902 	bl	8002872 <TIM_ITRx_SetConfig>
      break;
 800266e:	e003      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      break;
 8002674:	e000      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
	...

080026dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <TIM_Base_SetConfig+0xd0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00b      	beq.n	800270c <TIM_Base_SetConfig+0x30>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fa:	d007      	beq.n	800270c <TIM_Base_SetConfig+0x30>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a2c      	ldr	r2, [pc, #176]	@ (80027b0 <TIM_Base_SetConfig+0xd4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <TIM_Base_SetConfig+0x30>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a2b      	ldr	r2, [pc, #172]	@ (80027b4 <TIM_Base_SetConfig+0xd8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a22      	ldr	r2, [pc, #136]	@ (80027ac <TIM_Base_SetConfig+0xd0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00b      	beq.n	800273e <TIM_Base_SetConfig+0x62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d007      	beq.n	800273e <TIM_Base_SetConfig+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1f      	ldr	r2, [pc, #124]	@ (80027b0 <TIM_Base_SetConfig+0xd4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_Base_SetConfig+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <TIM_Base_SetConfig+0xd8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <TIM_Base_SetConfig+0xd0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d103      	bne.n	8002784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  }
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800

080027b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 030a 	bic.w	r3, r3, #10
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0210 	bic.w	r2, r3, #16
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800283e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	f043 0307 	orr.w	r3, r3, #7
 8002894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e046      	b.n	800298a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002948:	d009      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10c      	bne.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800

080029a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e042      	b.n	8002a5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd ff08 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f971 	bl	8002cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d175      	bne.n	8002b70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_Transmit+0x2c>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e06e      	b.n	8002b72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	@ 0x21
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe f8cb 	bl	8000c3c <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002abc:	d108      	bne.n	8002ad0 <HAL_UART_Transmit+0x6c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e003      	b.n	8002ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ad8:	e02e      	b.n	8002b38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	@ 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f848 	bl	8002b7a <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e03a      	b.n	8002b72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3302      	adds	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e007      	b.n	8002b2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cb      	bne.n	8002ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	@ 0x40
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f814 	bl	8002b7a <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e006      	b.n	8002b72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8a:	e03b      	b.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d037      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b94:	f7fe f852 	bl	8000c3c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	6a3a      	ldr	r2, [r7, #32]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e03a      	b.n	8002c24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b80      	cmp	r3, #128	@ 0x80
 8002bc0:	d020      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b40      	cmp	r3, #64	@ 0x40
 8002bc6:	d01d      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d116      	bne.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f81d 	bl	8002c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00f      	b.n	8002c24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d0b4      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b095      	sub	sp, #84	@ 0x54
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	e853 3f00 	ldrex	r3, [r3]
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c54:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e5      	bne.n	8002c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e5      	bne.n	8002c68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d119      	bne.n	8002cd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	e853 3f00 	ldrex	r3, [r3]
 8002cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 0310 	bic.w	r3, r3, #16
 8002cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cc4:	61ba      	str	r2, [r7, #24]
 8002cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6979      	ldr	r1, [r7, #20]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e5      	bne.n	8002ca4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ce6:	bf00      	nop
 8002ce8:	3754      	adds	r7, #84	@ 0x54
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d2a:	f023 030c 	bic.w	r3, r3, #12
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2c      	ldr	r2, [pc, #176]	@ (8002e04 <UART_SetConfig+0x114>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d58:	f7ff f92a 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	e002      	b.n	8002d66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d60:	f7ff f912 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8002d64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <UART_SetConfig+0x118>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	0119      	lsls	r1, r3, #4
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009a      	lsls	r2, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <UART_SetConfig+0x118>)
 8002d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2064      	movs	r0, #100	@ 0x64
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	3332      	adds	r3, #50	@ 0x32
 8002db0:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <UART_SetConfig+0x118>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dbc:	4419      	add	r1, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <UART_SetConfig+0x118>)
 8002dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2064      	movs	r0, #100	@ 0x64
 8002dde:	fb00 f303 	mul.w	r3, r0, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	3332      	adds	r3, #50	@ 0x32
 8002de8:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <UART_SetConfig+0x118>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	f003 020f 	and.w	r2, r3, #15
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	440a      	add	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013800 	.word	0x40013800
 8002e08:	51eb851f 	.word	0x51eb851f

08002e0c <__NVIC_SetPriority>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	@ (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	@ (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <SysTick_Handler+0x1c>)
 8002e66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e68:	f001 fd20 	bl	80048ac <xTaskGetSchedulerState>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e72:	f002 fac1 	bl	80053f8 <xPortSysTickHandler>
  }
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e84:	2100      	movs	r1, #0
 8002e86:	f06f 0004 	mvn.w	r0, #4
 8002e8a:	f7ff ffbf 	bl	8002e0c <__NVIC_SetPriority>
#endif
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9a:	f3ef 8305 	mrs	r3, IPSR
 8002e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ea6:	f06f 0305 	mvn.w	r3, #5
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	e00c      	b.n	8002ec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <osKernelInitialize+0x40>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <osKernelInitialize+0x40>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e002      	b.n	8002ec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	2000051c 	.word	0x2000051c

08002ed8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ede:	f3ef 8305 	mrs	r3, IPSR
 8002ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ee4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002eea:	f06f 0305 	mvn.w	r3, #5
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	e010      	b.n	8002f14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <osKernelStart+0x48>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d109      	bne.n	8002f0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002efa:	f7ff ffc1 	bl	8002e80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <osKernelStart+0x48>)
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f04:	f001 f872 	bl	8003fec <vTaskStartScheduler>
      stat = osOK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	e002      	b.n	8002f14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2000051c 	.word	0x2000051c

08002f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08e      	sub	sp, #56	@ 0x38
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f34:	f3ef 8305 	mrs	r3, IPSR
 8002f38:	617b      	str	r3, [r7, #20]
  return(result);
 8002f3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d17e      	bne.n	800303e <osThreadNew+0x11a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d07b      	beq.n	800303e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f46:	2380      	movs	r3, #128	@ 0x80
 8002f48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f4a:	2318      	movs	r3, #24
 8002f4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295
 8002f56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d045      	beq.n	8002fea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <osThreadNew+0x48>
        name = attr->name;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <osThreadNew+0x6e>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b38      	cmp	r3, #56	@ 0x38
 8002f84:	d805      	bhi.n	8002f92 <osThreadNew+0x6e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <osThreadNew+0x72>
        return (NULL);
 8002f92:	2300      	movs	r3, #0
 8002f94:	e054      	b.n	8003040 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00e      	beq.n	8002fcc <osThreadNew+0xa8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8002fb4:	d90a      	bls.n	8002fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <osThreadNew+0xa8>
        mem = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e010      	b.n	8002fee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10c      	bne.n	8002fee <osThreadNew+0xca>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <osThreadNew+0xca>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <osThreadNew+0xca>
          mem = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e001      	b.n	8002fee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d110      	bne.n	8003016 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ffc:	9202      	str	r2, [sp, #8]
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fdfa 	bl	8003c04 <xTaskCreateStatic>
 8003010:	4603      	mov	r3, r0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e013      	b.n	800303e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d110      	bne.n	800303e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	b29a      	uxth	r2, r3
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fe48 	bl	8003cc4 <xTaskCreate>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <osThreadNew+0x11a>
            hTask = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800303e:	693b      	ldr	r3, [r7, #16]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3728      	adds	r7, #40	@ 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003050:	f3ef 8305 	mrs	r3, IPSR
 8003054:	60bb      	str	r3, [r7, #8]
  return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <osDelay+0x1c>
    stat = osErrorISR;
 800305c:	f06f 0305 	mvn.w	r3, #5
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e007      	b.n	8003074 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <osDelay+0x2c>
      vTaskDelay(ticks);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ff86 	bl	8003f80 <vTaskDelay>
    }
  }

  return (stat);
 8003074:	68fb      	ldr	r3, [r7, #12]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a07      	ldr	r2, [pc, #28]	@ (80030ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4a06      	ldr	r2, [pc, #24]	@ (80030b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000520 	.word	0x20000520
 80030b0:	200005c8 	.word	0x200005c8

080030b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f103 0208 	add.w	r2, r3, #8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f103 0208 	add.w	r2, r3, #8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f103 0208 	add.w	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d103      	bne.n	8003170 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e00c      	b.n	800318a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3308      	adds	r3, #8
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e002      	b.n	800317e <vListInsert+0x2e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d2f6      	bcs.n	8003178 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6892      	ldr	r2, [r2, #8]
 80031d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d103      	bne.n	80031f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1e5a      	subs	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003240:	f002 f85c 	bl	80052fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	3b01      	subs	r3, #1
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	441a      	add	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	22ff      	movs	r2, #255	@ 0xff
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	22ff      	movs	r2, #255	@ 0xff
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d114      	bne.n	80032c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01a      	beq.n	80032d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3310      	adds	r3, #16
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f93c 	bl	8004520 <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <xQueueGenericReset+0xd0>)
 80032b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	e009      	b.n	80032d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3310      	adds	r3, #16
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fef5 	bl	80030b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3324      	adds	r3, #36	@ 0x24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fef0 	bl	80030b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032d4:	f002 f842 	bl	800535c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032d8:	2301      	movs	r3, #1
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <xQueueGenericCreateStatic+0x56>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <xQueueGenericCreateStatic+0x5a>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xQueueGenericCreateStatic+0x5c>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	623b      	str	r3, [r7, #32]
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <xQueueGenericCreateStatic+0x84>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <xQueueGenericCreateStatic+0x88>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <xQueueGenericCreateStatic+0x8a>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	61fb      	str	r3, [r7, #28]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800338e:	2350      	movs	r3, #80	@ 0x50
 8003390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b50      	cmp	r3, #80	@ 0x50
 8003396:	d00b      	beq.n	80033b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	61bb      	str	r3, [r7, #24]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f805 	bl	80033e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80033da:	4618      	mov	r0, r3
 80033dc:	3730      	adds	r7, #48	@ 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e002      	b.n	8003404 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003410:	2101      	movs	r1, #1
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	f7ff fefe 	bl	8003214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	@ 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <xQueueGenericSend+0x34>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <xQueueGenericSend+0x42>
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueGenericSend+0x46>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueGenericSend+0x48>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <xQueueGenericSend+0x64>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <xQueueGenericSend+0x72>
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <xQueueGenericSend+0x76>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <xQueueGenericSend+0x78>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <xQueueGenericSend+0x94>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	623b      	str	r3, [r7, #32]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034bc:	f001 f9f6 	bl	80048ac <xTaskGetSchedulerState>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <xQueueGenericSend+0xa4>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <xQueueGenericSend+0xa8>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <xQueueGenericSend+0xaa>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <xQueueGenericSend+0xc6>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	61fb      	str	r3, [r7, #28]
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	e7fd      	b.n	80034ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ee:	f001 ff05 	bl	80052fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <xQueueGenericSend+0xdc>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d129      	bne.n	8003558 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800350a:	f000 fa0f 	bl	800392c <prvCopyDataToQueue>
 800350e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	3324      	adds	r3, #36	@ 0x24
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ffff 	bl	8004520 <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b3f      	ldr	r3, [pc, #252]	@ (8003628 <xQueueGenericSend+0x200>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	e00a      	b.n	8003550 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800353a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <xQueueGenericSend+0x200>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003550:	f001 ff04 	bl	800535c <vPortExitCritical>
				return pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	e063      	b.n	8003620 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800355e:	f001 fefd 	bl	800535c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003562:	2300      	movs	r3, #0
 8003564:	e05c      	b.n	8003620 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4618      	mov	r0, r3
 8003572:	f001 f839 	bl	80045e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003576:	2301      	movs	r3, #1
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800357a:	f001 feef 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800357e:	f000 fda5 	bl	80040cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003582:	f001 febb 	bl	80052fc <vPortEnterCritical>
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800358c:	b25b      	sxtb	r3, r3
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d103      	bne.n	800359c <xQueueGenericSend+0x174>
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d103      	bne.n	80035b2 <xQueueGenericSend+0x18a>
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b2:	f001 fed3 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035b6:	1d3a      	adds	r2, r7, #4
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f828 	bl	8004614 <xTaskCheckForTimeOut>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d124      	bne.n	8003614 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035cc:	f000 faa6 	bl	8003b1c <prvIsQueueFull>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	3310      	adds	r3, #16
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ff4c 	bl	800447c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e6:	f000 fa31 	bl	8003a4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035ea:	f000 fd7d 	bl	80040e8 <xTaskResumeAll>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f af7c 	bne.w	80034ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <xQueueGenericSend+0x200>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	e772      	b.n	80034ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800360a:	f000 fa1f 	bl	8003a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800360e:	f000 fd6b 	bl	80040e8 <xTaskResumeAll>
 8003612:	e76c      	b.n	80034ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003616:	f000 fa19 	bl	8003a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800361a:	f000 fd65 	bl	80040e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800361e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3738      	adds	r7, #56	@ 0x38
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b090      	sub	sp, #64	@ 0x40
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <xQueueGenericSendFromISR+0x3e>
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueGenericSendFromISR+0x42>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericSendFromISR+0x44>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d103      	bne.n	800369a <xQueueGenericSendFromISR+0x6e>
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <xQueueGenericSendFromISR+0x72>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <xQueueGenericSendFromISR+0x74>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	623b      	str	r3, [r7, #32]
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036bc:	f001 fee0 	bl	8005480 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036c0:	f3ef 8211 	mrs	r2, BASEPRI
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	61fa      	str	r2, [r7, #28]
 80036d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <xQueueGenericSendFromISR+0xc2>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d12f      	bne.n	800374e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003704:	f000 f912 	bl	800392c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003708:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d112      	bne.n	8003738 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	3324      	adds	r3, #36	@ 0x24
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fefe 	bl	8004520 <xTaskRemoveFromEventList>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e007      	b.n	8003748 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003738:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800373c:	3301      	adds	r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	b25a      	sxtb	r2, r3
 8003742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003748:	2301      	movs	r3, #1
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800374c:	e001      	b.n	8003752 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800374e:	2300      	movs	r3, #0
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800375c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800375e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003760:	4618      	mov	r0, r3
 8003762:	3740      	adds	r7, #64	@ 0x40
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	@ 0x30
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <xQueueReceive+0x32>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	623b      	str	r3, [r7, #32]
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	e7fd      	b.n	8003796 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <xQueueReceive+0x40>
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <xQueueReceive+0x44>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <xQueueReceive+0x46>
 80037ac:	2300      	movs	r3, #0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <xQueueReceive+0x62>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	61fb      	str	r3, [r7, #28]
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ca:	f001 f86f 	bl	80048ac <xTaskGetSchedulerState>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <xQueueReceive+0x72>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <xQueueReceive+0x76>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueReceive+0x78>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <xQueueReceive+0x94>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	61bb      	str	r3, [r7, #24]
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037fc:	f001 fd7e 	bl	80052fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01f      	beq.n	800384c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003810:	f000 f8f6 	bl	8003a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00f      	beq.n	8003844 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	3310      	adds	r3, #16
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fe79 	bl	8004520 <xTaskRemoveFromEventList>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003834:	4b3c      	ldr	r3, [pc, #240]	@ (8003928 <xQueueReceive+0x1c0>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003844:	f001 fd8a 	bl	800535c <vPortExitCritical>
				return pdPASS;
 8003848:	2301      	movs	r3, #1
 800384a:	e069      	b.n	8003920 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003852:	f001 fd83 	bl	800535c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003856:	2300      	movs	r3, #0
 8003858:	e062      	b.n	8003920 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	4618      	mov	r0, r3
 8003866:	f000 febf 	bl	80045e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800386e:	f001 fd75 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003872:	f000 fc2b 	bl	80040cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003876:	f001 fd41 	bl	80052fc <vPortEnterCritical>
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003880:	b25b      	sxtb	r3, r3
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <xQueueReceive+0x128>
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003896:	b25b      	sxtb	r3, r3
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d103      	bne.n	80038a6 <xQueueReceive+0x13e>
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038a6:	f001 fd59 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038aa:	1d3a      	adds	r2, r7, #4
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 feae 	bl	8004614 <xTaskCheckForTimeOut>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d123      	bne.n	8003906 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c0:	f000 f916 	bl	8003af0 <prvIsQueueEmpty>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d017      	beq.n	80038fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	3324      	adds	r3, #36	@ 0x24
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fdd2 	bl	800447c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038da:	f000 f8b7 	bl	8003a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038de:	f000 fc03 	bl	80040e8 <xTaskResumeAll>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d189      	bne.n	80037fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <xQueueReceive+0x1c0>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	e780      	b.n	80037fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038fc:	f000 f8a6 	bl	8003a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003900:	f000 fbf2 	bl	80040e8 <xTaskResumeAll>
 8003904:	e77a      	b.n	80037fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003908:	f000 f8a0 	bl	8003a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800390c:	f000 fbec 	bl	80040e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003912:	f000 f8ed 	bl	8003af0 <prvIsQueueEmpty>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	f43f af6f 	beq.w	80037fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800391e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003920:	4618      	mov	r0, r3
 8003922:	3730      	adds	r7, #48	@ 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d14d      	bne.n	80039ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 ffc6 	bl	80048e8 <xTaskPriorityDisinherit>
 800395c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e043      	b.n	80039ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d119      	bne.n	80039a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6858      	ldr	r0, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	461a      	mov	r2, r3
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	f002 f83a 	bl	80059f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	441a      	add	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d32b      	bcc.n	80039ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e026      	b.n	80039ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68d8      	ldr	r0, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	461a      	mov	r2, r3
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	f002 f820 	bl	80059f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	425b      	negs	r3, r3
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d207      	bcs.n	80039dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	425b      	negs	r3, r3
 80039d6:	441a      	add	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d105      	bne.n	80039ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d303      	bcc.n	8003a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68d9      	ldr	r1, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f001 ffd6 	bl	80059f0 <memcpy>
	}
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a54:	f001 fc52 	bl	80052fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a60:	e011      	b.n	8003a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3324      	adds	r3, #36	@ 0x24
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd56 	bl	8004520 <xTaskRemoveFromEventList>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a7a:	f000 fe2f 	bl	80046dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	dce9      	bgt.n	8003a62 <prvUnlockQueue+0x16>
 8003a8e:	e000      	b.n	8003a92 <prvUnlockQueue+0x46>
					break;
 8003a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	22ff      	movs	r2, #255	@ 0xff
 8003a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a9a:	f001 fc5f 	bl	800535c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a9e:	f001 fc2d 	bl	80052fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aaa:	e011      	b.n	8003ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d012      	beq.n	8003ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3310      	adds	r3, #16
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fd31 	bl	8004520 <xTaskRemoveFromEventList>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ac4:	f000 fe0a 	bl	80046dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dce9      	bgt.n	8003aac <prvUnlockQueue+0x60>
 8003ad8:	e000      	b.n	8003adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	22ff      	movs	r2, #255	@ 0xff
 8003ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ae4:	f001 fc3a 	bl	800535c <vPortExitCritical>
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003af8:	f001 fc00 	bl	80052fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e001      	b.n	8003b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b0e:	f001 fc25 	bl	800535c <vPortExitCritical>

	return xReturn;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b24:	f001 fbea 	bl	80052fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d102      	bne.n	8003b3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e001      	b.n	8003b3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b3e:	f001 fc0d 	bl	800535c <vPortExitCritical>

	return xReturn;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e014      	b.n	8003b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b98 <vQueueAddToRegistry+0x4c>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b68:	490b      	ldr	r1, [pc, #44]	@ (8003b98 <vQueueAddToRegistry+0x4c>)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <vQueueAddToRegistry+0x4c>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b7e:	e006      	b.n	8003b8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	d9e7      	bls.n	8003b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	200009c8 	.word	0x200009c8

08003b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bac:	f001 fba6 	bl	80052fc <vPortEnterCritical>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d103      	bne.n	8003bc6 <vQueueWaitForMessageRestricted+0x2a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <vQueueWaitForMessageRestricted+0x40>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bdc:	f001 fbbe 	bl	800535c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3324      	adds	r3, #36	@ 0x24
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fc69 	bl	80044c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff28 	bl	8003a4c <prvUnlockQueue>
	}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	61fb      	str	r3, [r7, #28]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c4e:	23a8      	movs	r3, #168	@ 0xa8
 8003c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c56:	d00b      	beq.n	8003c70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	61bb      	str	r3, [r7, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <xTaskCreateStatic+0xb2>
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01b      	beq.n	8003cb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c90:	2300      	movs	r3, #0
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f851 	bl	8003d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cb0:	f000 f8f6 	bl	8003ea0 <prvAddNewTaskToReadyList>
 8003cb4:	e001      	b.n	8003cba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cba:	697b      	ldr	r3, [r7, #20]
	}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	@ 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	@ 0x30
 8003cc8:	af04      	add	r7, sp, #16
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fc11 	bl	8005500 <pvPortMalloc>
 8003cde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ce6:	20a8      	movs	r0, #168	@ 0xa8
 8003ce8:	f001 fc0a 	bl	8005500 <pvPortMalloc>
 8003cec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cfa:	e005      	b.n	8003d08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f001 fccd 	bl	800569c <vPortFree>
 8003d02:	e001      	b.n	8003d08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f80f 	bl	8003d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d32:	69f8      	ldr	r0, [r7, #28]
 8003d34:	f000 f8b4 	bl	8003ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e002      	b.n	8003d44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d44:	69bb      	ldr	r3, [r7, #24]
	}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	21a5      	movs	r1, #165	@ 0xa5
 8003d6a:	f001 fdb5 	bl	80058d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	617b      	str	r3, [r7, #20]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e012      	b.n	8003ddc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	7819      	ldrb	r1, [r3, #0]
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3334      	adds	r3, #52	@ 0x34
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d9e9      	bls.n	8003db6 <prvInitialiseNewTask+0x66>
 8003de2:	e000      	b.n	8003de6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003de4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dee:	e003      	b.n	8003df8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	2b37      	cmp	r3, #55	@ 0x37
 8003dfc:	d901      	bls.n	8003e02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dfe:	2337      	movs	r3, #55	@ 0x37
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2200      	movs	r2, #0
 8003e12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f96a 	bl	80030f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	3318      	adds	r3, #24
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f965 	bl	80030f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	3354      	adds	r3, #84	@ 0x54
 8003e52:	224c      	movs	r2, #76	@ 0x4c
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fd3e 	bl	80058d8 <memset>
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <prvInitialiseNewTask+0x144>)
 8003e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <prvInitialiseNewTask+0x148>)
 8003e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <prvInitialiseNewTask+0x14c>)
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	69b8      	ldr	r0, [r7, #24]
 8003e74:	f001 f954 	bl	8005120 <pxPortInitialiseStack>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20001c5c 	.word	0x20001c5c
 8003e98:	20001cc4 	.word	0x20001cc4
 8003e9c:	20001d2c 	.word	0x20001d2c

08003ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ea8:	f001 fa28 	bl	80052fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eac:	4b2d      	ldr	r3, [pc, #180]	@ (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec4:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d110      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ecc:	f000 fc2a 	bl	8004724 <prvInitialiseTaskLists>
 8003ed0:	e00d      	b.n	8003eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <prvAddNewTaskToReadyList+0xcc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eda:	4b23      	ldr	r3, [pc, #140]	@ (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d802      	bhi.n	8003eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eee:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f04:	4b1b      	ldr	r3, [pc, #108]	@ (8003f74 <prvAddNewTaskToReadyList+0xd4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d903      	bls.n	8003f14 <prvAddNewTaskToReadyList+0x74>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	4a18      	ldr	r2, [pc, #96]	@ (8003f74 <prvAddNewTaskToReadyList+0xd4>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <prvAddNewTaskToReadyList+0xd8>)
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f7ff f8ed 	bl	800310a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f30:	f001 fa14 	bl	800535c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f34:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <prvAddNewTaskToReadyList+0xcc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d207      	bcs.n	8003f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <prvAddNewTaskToReadyList+0xdc>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000edc 	.word	0x20000edc
 8003f68:	20000a08 	.word	0x20000a08
 8003f6c:	20000ee8 	.word	0x20000ee8
 8003f70:	20000ef8 	.word	0x20000ef8
 8003f74:	20000ee4 	.word	0x20000ee4
 8003f78:	20000a0c 	.word	0x20000a0c
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f92:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <vTaskDelay+0x64>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <vTaskDelay+0x32>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60bb      	str	r3, [r7, #8]
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fb2:	f000 f88b 	bl	80040cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fd05 	bl	80049c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fbe:	f000 f893 	bl	80040e8 <xTaskResumeAll>
 8003fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fca:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <vTaskDelay+0x68>)
 8003fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000f04 	.word	0x20000f04
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	@ 0x28
 8003ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	1d39      	adds	r1, r7, #4
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc f8b6 	bl	8000174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	460a      	mov	r2, r1
 800401a:	4924      	ldr	r1, [pc, #144]	@ (80040ac <vTaskStartScheduler+0xc0>)
 800401c:	4824      	ldr	r0, [pc, #144]	@ (80040b0 <vTaskStartScheduler+0xc4>)
 800401e:	f7ff fdf1 	bl	8003c04 <xTaskCreateStatic>
 8004022:	4603      	mov	r3, r0
 8004024:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <vTaskStartScheduler+0xc8>)
 8004026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004028:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <vTaskStartScheduler+0xc8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e001      	b.n	800403a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004040:	f000 fd16 	bl	8004a70 <xTimerCreateTimerTask>
 8004044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d11b      	bne.n	8004084 <vTaskStartScheduler+0x98>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
}
 800405e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <vTaskStartScheduler+0xcc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3354      	adds	r3, #84	@ 0x54
 8004066:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <vTaskStartScheduler+0xd0>)
 8004068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800406a:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <vTaskStartScheduler+0xd4>)
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004072:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <vTaskStartScheduler+0xd8>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <vTaskStartScheduler+0xdc>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800407e:	f001 f8cb 	bl	8005218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004082:	e00f      	b.n	80040a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d10b      	bne.n	80040a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60fb      	str	r3, [r7, #12]
}
 800409e:	bf00      	nop
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <vTaskStartScheduler+0xb4>
}
 80040a4:	bf00      	nop
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	08005afc 	.word	0x08005afc
 80040b0:	080046f5 	.word	0x080046f5
 80040b4:	20000f00 	.word	0x20000f00
 80040b8:	20000a08 	.word	0x20000a08
 80040bc:	20000010 	.word	0x20000010
 80040c0:	20000efc 	.word	0x20000efc
 80040c4:	20000ee8 	.word	0x20000ee8
 80040c8:	20000ee0 	.word	0x20000ee0

080040cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040d0:	4b04      	ldr	r3, [pc, #16]	@ (80040e4 <vTaskSuspendAll+0x18>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a03      	ldr	r2, [pc, #12]	@ (80040e4 <vTaskSuspendAll+0x18>)
 80040d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040da:	bf00      	nop
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000f04 	.word	0x20000f04

080040e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040f6:	4b42      	ldr	r3, [pc, #264]	@ (8004200 <xTaskResumeAll+0x118>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <xTaskResumeAll+0x2e>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	603b      	str	r3, [r7, #0]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004116:	f001 f8f1 	bl	80052fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <xTaskResumeAll+0x118>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a37      	ldr	r2, [pc, #220]	@ (8004200 <xTaskResumeAll+0x118>)
 8004122:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <xTaskResumeAll+0x118>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d162      	bne.n	80041f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800412c:	4b35      	ldr	r3, [pc, #212]	@ (8004204 <xTaskResumeAll+0x11c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d05e      	beq.n	80041f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004134:	e02f      	b.n	8004196 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <xTaskResumeAll+0x120>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3318      	adds	r3, #24
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f83c 	bl	80031c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff f837 	bl	80031c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004156:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <xTaskResumeAll+0x124>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <xTaskResumeAll+0x7e>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a2a      	ldr	r2, [pc, #168]	@ (800420c <xTaskResumeAll+0x124>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a27      	ldr	r2, [pc, #156]	@ (8004210 <xTaskResumeAll+0x128>)
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe ffc4 	bl	800310a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004186:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <xTaskResumeAll+0x12c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004190:	4b21      	ldr	r3, [pc, #132]	@ (8004218 <xTaskResumeAll+0x130>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004196:	4b1c      	ldr	r3, [pc, #112]	@ (8004208 <xTaskResumeAll+0x120>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1cb      	bne.n	8004136 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041a4:	f000 fb62 	bl	800486c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <xTaskResumeAll+0x134>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041b4:	f000 f844 	bl	8004240 <xTaskIncrementTick>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80041be:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <xTaskResumeAll+0x130>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f1      	bne.n	80041b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80041d0:	4b12      	ldr	r3, [pc, #72]	@ (800421c <xTaskResumeAll+0x134>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <xTaskResumeAll+0x130>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041de:	2301      	movs	r3, #1
 80041e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <xTaskResumeAll+0x138>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 f8b3 	bl	800535c <vPortExitCritical>

	return xAlreadyYielded;
 80041f6:	68bb      	ldr	r3, [r7, #8]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000f04 	.word	0x20000f04
 8004204:	20000edc 	.word	0x20000edc
 8004208:	20000e9c 	.word	0x20000e9c
 800420c:	20000ee4 	.word	0x20000ee4
 8004210:	20000a0c 	.word	0x20000a0c
 8004214:	20000a08 	.word	0x20000a08
 8004218:	20000ef0 	.word	0x20000ef0
 800421c:	20000eec 	.word	0x20000eec
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800422a:	4b04      	ldr	r3, [pc, #16]	@ (800423c <xTaskGetTickCount+0x18>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004230:	687b      	ldr	r3, [r7, #4]
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	20000ee0 	.word	0x20000ee0

08004240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800424a:	4b4f      	ldr	r3, [pc, #316]	@ (8004388 <xTaskIncrementTick+0x148>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 8090 	bne.w	8004374 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004254:	4b4d      	ldr	r3, [pc, #308]	@ (800438c <xTaskIncrementTick+0x14c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800425c:	4a4b      	ldr	r2, [pc, #300]	@ (800438c <xTaskIncrementTick+0x14c>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d121      	bne.n	80042ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004268:	4b49      	ldr	r3, [pc, #292]	@ (8004390 <xTaskIncrementTick+0x150>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xTaskIncrementTick+0x46>
 800428a:	4b41      	ldr	r3, [pc, #260]	@ (8004390 <xTaskIncrementTick+0x150>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	4b40      	ldr	r3, [pc, #256]	@ (8004394 <xTaskIncrementTick+0x154>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3e      	ldr	r2, [pc, #248]	@ (8004390 <xTaskIncrementTick+0x150>)
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4a3e      	ldr	r2, [pc, #248]	@ (8004394 <xTaskIncrementTick+0x154>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <xTaskIncrementTick+0x158>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004398 <xTaskIncrementTick+0x158>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	f000 fae0 	bl	800486c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042ac:	4b3b      	ldr	r3, [pc, #236]	@ (800439c <xTaskIncrementTick+0x15c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d349      	bcc.n	800434a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b6:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <xTaskIncrementTick+0x150>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <xTaskIncrementTick+0x15c>)
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	601a      	str	r2, [r3, #0]
					break;
 80042c8:	e03f      	b.n	800434a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ca:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <xTaskIncrementTick+0x150>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d203      	bcs.n	80042ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042e2:	4a2e      	ldr	r2, [pc, #184]	@ (800439c <xTaskIncrementTick+0x15c>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042e8:	e02f      	b.n	800434a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe ff66 	bl	80031c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d004      	beq.n	8004306 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	3318      	adds	r3, #24
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe ff5d 	bl	80031c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	4b25      	ldr	r3, [pc, #148]	@ (80043a0 <xTaskIncrementTick+0x160>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d903      	bls.n	800431a <xTaskIncrementTick+0xda>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <xTaskIncrementTick+0x160>)
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a1f      	ldr	r2, [pc, #124]	@ (80043a4 <xTaskIncrementTick+0x164>)
 8004328:	441a      	add	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3304      	adds	r3, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f7fe feea 	bl	800310a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433a:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <xTaskIncrementTick+0x168>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004340:	429a      	cmp	r2, r3
 8004342:	d3b8      	bcc.n	80042b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004348:	e7b5      	b.n	80042b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800434a:	4b17      	ldr	r3, [pc, #92]	@ (80043a8 <xTaskIncrementTick+0x168>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004350:	4914      	ldr	r1, [pc, #80]	@ (80043a4 <xTaskIncrementTick+0x164>)
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d901      	bls.n	8004366 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004366:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <xTaskIncrementTick+0x16c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e004      	b.n	800437e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004374:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <xTaskIncrementTick+0x170>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	4a0d      	ldr	r2, [pc, #52]	@ (80043b0 <xTaskIncrementTick+0x170>)
 800437c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800437e:	697b      	ldr	r3, [r7, #20]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000f04 	.word	0x20000f04
 800438c:	20000ee0 	.word	0x20000ee0
 8004390:	20000e94 	.word	0x20000e94
 8004394:	20000e98 	.word	0x20000e98
 8004398:	20000ef4 	.word	0x20000ef4
 800439c:	20000efc 	.word	0x20000efc
 80043a0:	20000ee4 	.word	0x20000ee4
 80043a4:	20000a0c 	.word	0x20000a0c
 80043a8:	20000a08 	.word	0x20000a08
 80043ac:	20000ef0 	.word	0x20000ef0
 80043b0:	20000eec 	.word	0x20000eec

080043b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <vTaskSwitchContext+0xb0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043c2:	4b29      	ldr	r3, [pc, #164]	@ (8004468 <vTaskSwitchContext+0xb4>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043c8:	e047      	b.n	800445a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80043ca:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <vTaskSwitchContext+0xb4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d0:	4b26      	ldr	r3, [pc, #152]	@ (800446c <vTaskSwitchContext+0xb8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e011      	b.n	80043fc <vTaskSwitchContext+0x48>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	e7fd      	b.n	80043f2 <vTaskSwitchContext+0x3e>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	491c      	ldr	r1, [pc, #112]	@ (8004470 <vTaskSwitchContext+0xbc>)
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0e3      	beq.n	80043d8 <vTaskSwitchContext+0x24>
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <vTaskSwitchContext+0xbc>)
 800441c:	4413      	add	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3308      	adds	r3, #8
 8004432:	429a      	cmp	r2, r3
 8004434:	d104      	bne.n	8004440 <vTaskSwitchContext+0x8c>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4a0b      	ldr	r2, [pc, #44]	@ (8004474 <vTaskSwitchContext+0xc0>)
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <vTaskSwitchContext+0xb8>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004450:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <vTaskSwitchContext+0xc0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3354      	adds	r3, #84	@ 0x54
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <vTaskSwitchContext+0xc4>)
 8004458:	6013      	str	r3, [r2, #0]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	20000f04 	.word	0x20000f04
 8004468:	20000ef0 	.word	0x20000ef0
 800446c:	20000ee4 	.word	0x20000ee4
 8004470:	20000a0c 	.word	0x20000a0c
 8004474:	20000a08 	.word	0x20000a08
 8004478:	20000010 	.word	0x20000010

0800447c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044a4:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <vTaskPlaceOnEventList+0x48>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3318      	adds	r3, #24
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fe fe4f 	bl	8003150 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044b2:	2101      	movs	r1, #1
 80044b4:	6838      	ldr	r0, [r7, #0]
 80044b6:	f000 fa87 	bl	80049c8 <prvAddCurrentTaskToDelayedList>
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000a08 	.word	0x20000a08

080044c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	617b      	str	r3, [r7, #20]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <vTaskPlaceOnEventListRestricted+0x54>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3318      	adds	r3, #24
 80044f8:	4619      	mov	r1, r3
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7fe fe05 	bl	800310a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f000 fa5a 	bl	80049c8 <prvAddCurrentTaskToDelayedList>
	}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000a08 	.word	0x20000a08

08004520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60fb      	str	r3, [r7, #12]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3318      	adds	r3, #24
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fe34 	bl	80031c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004558:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <xTaskRemoveFromEventList+0xb0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11d      	bne.n	800459c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	3304      	adds	r3, #4
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fe2b 	bl	80031c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456e:	4b19      	ldr	r3, [pc, #100]	@ (80045d4 <xTaskRemoveFromEventList+0xb4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d903      	bls.n	800457e <xTaskRemoveFromEventList+0x5e>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <xTaskRemoveFromEventList+0xb4>)
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <xTaskRemoveFromEventList+0xb8>)
 800458c:	441a      	add	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe fdb8 	bl	800310a <vListInsertEnd>
 800459a:	e005      	b.n	80045a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3318      	adds	r3, #24
 80045a0:	4619      	mov	r1, r3
 80045a2:	480e      	ldr	r0, [pc, #56]	@ (80045dc <xTaskRemoveFromEventList+0xbc>)
 80045a4:	f7fe fdb1 	bl	800310a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <xTaskRemoveFromEventList+0xc0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d905      	bls.n	80045c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <xTaskRemoveFromEventList+0xc4>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e001      	b.n	80045c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045c6:	697b      	ldr	r3, [r7, #20]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000f04 	.word	0x20000f04
 80045d4:	20000ee4 	.word	0x20000ee4
 80045d8:	20000a0c 	.word	0x20000a0c
 80045dc:	20000e9c 	.word	0x20000e9c
 80045e0:	20000a08 	.word	0x20000a08
 80045e4:	20000ef0 	.word	0x20000ef0

080045e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045f0:	4b06      	ldr	r3, [pc, #24]	@ (800460c <vTaskInternalSetTimeOutState+0x24>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <vTaskInternalSetTimeOutState+0x28>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	605a      	str	r2, [r3, #4]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000ef4 	.word	0x20000ef4
 8004610:	20000ee0 	.word	0x20000ee0

08004614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60fb      	str	r3, [r7, #12]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800465a:	f000 fe4f 	bl	80052fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800465e:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <xTaskCheckForTimeOut+0xc0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d102      	bne.n	800467e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e023      	b.n	80046c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <xTaskCheckForTimeOut+0xc4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d007      	beq.n	800469a <xTaskCheckForTimeOut+0x86>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e015      	b.n	80046c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d20b      	bcs.n	80046bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff99 	bl	80045e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e004      	b.n	80046c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f000 fe49 	bl	800535c <vPortExitCritical>

	return xReturn;
 80046ca:	69fb      	ldr	r3, [r7, #28]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000ee0 	.word	0x20000ee0
 80046d8:	20000ef4 	.word	0x20000ef4

080046dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <vTaskMissedYield+0x14>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000ef0 	.word	0x20000ef0

080046f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046fc:	f000 f852 	bl	80047a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <prvIdleTask+0x28>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d9f9      	bls.n	80046fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <prvIdleTask+0x2c>)
 800470a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004718:	e7f0      	b.n	80046fc <prvIdleTask+0x8>
 800471a:	bf00      	nop
 800471c:	20000a0c 	.word	0x20000a0c
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e00c      	b.n	800474a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <prvInitialiseTaskLists+0x60>)
 800473c:	4413      	add	r3, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fcb8 	bl	80030b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3301      	adds	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b37      	cmp	r3, #55	@ 0x37
 800474e:	d9ef      	bls.n	8004730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004750:	480d      	ldr	r0, [pc, #52]	@ (8004788 <prvInitialiseTaskLists+0x64>)
 8004752:	f7fe fcaf 	bl	80030b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004756:	480d      	ldr	r0, [pc, #52]	@ (800478c <prvInitialiseTaskLists+0x68>)
 8004758:	f7fe fcac 	bl	80030b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800475c:	480c      	ldr	r0, [pc, #48]	@ (8004790 <prvInitialiseTaskLists+0x6c>)
 800475e:	f7fe fca9 	bl	80030b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004762:	480c      	ldr	r0, [pc, #48]	@ (8004794 <prvInitialiseTaskLists+0x70>)
 8004764:	f7fe fca6 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004768:	480b      	ldr	r0, [pc, #44]	@ (8004798 <prvInitialiseTaskLists+0x74>)
 800476a:	f7fe fca3 	bl	80030b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <prvInitialiseTaskLists+0x78>)
 8004770:	4a05      	ldr	r2, [pc, #20]	@ (8004788 <prvInitialiseTaskLists+0x64>)
 8004772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004774:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <prvInitialiseTaskLists+0x7c>)
 8004776:	4a05      	ldr	r2, [pc, #20]	@ (800478c <prvInitialiseTaskLists+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000a0c 	.word	0x20000a0c
 8004788:	20000e6c 	.word	0x20000e6c
 800478c:	20000e80 	.word	0x20000e80
 8004790:	20000e9c 	.word	0x20000e9c
 8004794:	20000eb0 	.word	0x20000eb0
 8004798:	20000ec8 	.word	0x20000ec8
 800479c:	20000e94 	.word	0x20000e94
 80047a0:	20000e98 	.word	0x20000e98

080047a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047aa:	e019      	b.n	80047e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047ac:	f000 fda6 	bl	80052fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b0:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <prvCheckTasksWaitingTermination+0x50>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fcff 	bl	80031c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <prvCheckTasksWaitingTermination+0x54>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <prvCheckTasksWaitingTermination+0x54>)
 80047ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047d6:	f000 fdc1 	bl	800535c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f810 	bl	8004800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e1      	bne.n	80047ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000eb0 	.word	0x20000eb0
 80047f8:	20000edc 	.word	0x20000edc
 80047fc:	20000ec4 	.word	0x20000ec4

08004800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3354      	adds	r3, #84	@ 0x54
 800480c:	4618      	mov	r0, r3
 800480e:	f001 f86b 	bl	80058e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	4618      	mov	r0, r3
 8004822:	f000 ff3b 	bl	800569c <vPortFree>
				vPortFree( pxTCB );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 ff38 	bl	800569c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800482c:	e019      	b.n	8004862 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004834:	2b01      	cmp	r3, #1
 8004836:	d103      	bne.n	8004840 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 ff2f 	bl	800569c <vPortFree>
	}
 800483e:	e010      	b.n	8004862 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004846:	2b02      	cmp	r3, #2
 8004848:	d00b      	beq.n	8004862 <prvDeleteTCB+0x62>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60fb      	str	r3, [r7, #12]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <prvDeleteTCB+0x5e>
	}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004872:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <prvResetNextTaskUnblockTime+0x38>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvResetNextTaskUnblockTime+0x3c>)
 800487e:	f04f 32ff 	mov.w	r2, #4294967295
 8004882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004884:	e008      	b.n	8004898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004886:	4b07      	ldr	r3, [pc, #28]	@ (80048a4 <prvResetNextTaskUnblockTime+0x38>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a04      	ldr	r2, [pc, #16]	@ (80048a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000e94 	.word	0x20000e94
 80048a8:	20000efc 	.word	0x20000efc

080048ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <xTaskGetSchedulerState+0x34>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048ba:	2301      	movs	r3, #1
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	e008      	b.n	80048d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c0:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <xTaskGetSchedulerState+0x38>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048c8:	2302      	movs	r3, #2
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	e001      	b.n	80048d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048d2:	687b      	ldr	r3, [r7, #4]
	}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000ee8 	.word	0x20000ee8
 80048e4:	20000f04 	.word	0x20000f04

080048e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d058      	beq.n	80049b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048fe:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <xTaskPriorityDisinherit+0xd4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d00b      	beq.n	8004920 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	60bb      	str	r3, [r7, #8]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004952:	429a      	cmp	r2, r3
 8004954:	d02c      	beq.n	80049b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800495a:	2b00      	cmp	r3, #0
 800495c:	d128      	bne.n	80049b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fc2c 	bl	80031c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004980:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <xTaskPriorityDisinherit+0xd8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d903      	bls.n	8004990 <xTaskPriorityDisinherit+0xa8>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4a0c      	ldr	r2, [pc, #48]	@ (80049c0 <xTaskPriorityDisinherit+0xd8>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <xTaskPriorityDisinherit+0xdc>)
 800499e:	441a      	add	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe fbaf 	bl	800310a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049b0:	697b      	ldr	r3, [r7, #20]
	}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000a08 	.word	0x20000a08
 80049c0:	20000ee4 	.word	0x20000ee4
 80049c4:	20000a0c 	.word	0x20000a0c

080049c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049d2:	4b21      	ldr	r3, [pc, #132]	@ (8004a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d8:	4b20      	ldr	r3, [pc, #128]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3304      	adds	r3, #4
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fbee 	bl	80031c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d10a      	bne.n	8004a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4819      	ldr	r0, [pc, #100]	@ (8004a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80049fc:	f7fe fb85 	bl	800310a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a00:	e026      	b.n	8004a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d209      	bcs.n	8004a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe fb92 	bl	8003150 <vListInsert>
}
 8004a2c:	e010      	b.n	8004a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7fe fb88 	bl	8003150 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d202      	bcs.n	8004a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a4a:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6013      	str	r3, [r2, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000ee0 	.word	0x20000ee0
 8004a5c:	20000a08 	.word	0x20000a08
 8004a60:	20000ec8 	.word	0x20000ec8
 8004a64:	20000e98 	.word	0x20000e98
 8004a68:	20000e94 	.word	0x20000e94
 8004a6c:	20000efc 	.word	0x20000efc

08004a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	@ 0x28
 8004a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a7a:	f000 fb11 	bl	80050a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <xTimerCreateTimerTask+0x84>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d021      	beq.n	8004aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a8e:	1d3a      	adds	r2, r7, #4
 8004a90:	f107 0108 	add.w	r1, r7, #8
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe faf1 	bl	8003080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	9202      	str	r2, [sp, #8]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	460a      	mov	r2, r1
 8004ab0:	4911      	ldr	r1, [pc, #68]	@ (8004af8 <xTimerCreateTimerTask+0x88>)
 8004ab2:	4812      	ldr	r0, [pc, #72]	@ (8004afc <xTimerCreateTimerTask+0x8c>)
 8004ab4:	f7ff f8a6 	bl	8003c04 <xTaskCreateStatic>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a11      	ldr	r2, [pc, #68]	@ (8004b00 <xTimerCreateTimerTask+0x90>)
 8004abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004abe:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <xTimerCreateTimerTask+0x90>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000f38 	.word	0x20000f38
 8004af8:	08005b04 	.word	0x08005b04
 8004afc:	08004c3d 	.word	0x08004c3d
 8004b00:	20000f3c 	.word	0x20000f3c

08004b04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	@ 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b34:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <xTimerGenericCommand+0x98>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d02a      	beq.n	8004b92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	dc18      	bgt.n	8004b80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b4e:	f7ff fead 	bl	80048ac <xTaskGetSchedulerState>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d109      	bne.n	8004b6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b58:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <xTimerGenericCommand+0x98>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	f107 0110 	add.w	r1, r7, #16
 8004b60:	2300      	movs	r3, #0
 8004b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b64:	f7fe fc60 	bl	8003428 <xQueueGenericSend>
 8004b68:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b6a:	e012      	b.n	8004b92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <xTimerGenericCommand+0x98>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	f107 0110 	add.w	r1, r7, #16
 8004b74:	2300      	movs	r3, #0
 8004b76:	2200      	movs	r2, #0
 8004b78:	f7fe fc56 	bl	8003428 <xQueueGenericSend>
 8004b7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b7e:	e008      	b.n	8004b92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <xTimerGenericCommand+0x98>)
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	f107 0110 	add.w	r1, r7, #16
 8004b88:	2300      	movs	r3, #0
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	f7fe fd4e 	bl	800362c <xQueueGenericSendFromISR>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3728      	adds	r7, #40	@ 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000f38 	.word	0x20000f38

08004ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <prvProcessExpiredTimer+0x98>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fb01 	bl	80031c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d023      	beq.n	8004c14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	18d1      	adds	r1, r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	6978      	ldr	r0, [r7, #20]
 8004bda:	f000 f8d3 	bl	8004d84 <prvInsertTimerInActiveList>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	2100      	movs	r1, #0
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f7ff ff88 	bl	8004b04 <xTimerGenericCommand>
 8004bf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d114      	bne.n	8004c26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60fb      	str	r3, [r7, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	4798      	blx	r3
}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000f30 	.word	0x20000f30

08004c3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c44:	f107 0308 	add.w	r3, r7, #8
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f859 	bl	8004d00 <prvGetNextExpireTime>
 8004c4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4619      	mov	r1, r3
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f805 	bl	8004c64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c5a:	f000 f8d5 	bl	8004e08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c5e:	bf00      	nop
 8004c60:	e7f0      	b.n	8004c44 <prvTimerTask+0x8>
	...

08004c64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c6e:	f7ff fa2d 	bl	80040cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f864 	bl	8004d44 <prvSampleTimeNow>
 8004c7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d130      	bne.n	8004ce6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <prvProcessTimerOrBlockTask+0x3c>
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d806      	bhi.n	8004ca0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c92:	f7ff fa29 	bl	80040e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff81 	bl	8004ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c9e:	e024      	b.n	8004cea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ca6:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <prvProcessTimerOrBlockTask+0x90>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <prvProcessTimerOrBlockTask+0x50>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <prvProcessTimerOrBlockTask+0x52>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <prvProcessTimerOrBlockTask+0x94>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f7fe ff69 	bl	8003b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cca:	f7ff fa0d 	bl	80040e8 <xTaskResumeAll>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cd4:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <prvProcessTimerOrBlockTask+0x98>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
}
 8004ce4:	e001      	b.n	8004cea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ce6:	f7ff f9ff 	bl	80040e8 <xTaskResumeAll>
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000f34 	.word	0x20000f34
 8004cf8:	20000f38 	.word	0x20000f38
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d08:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <prvGetNextExpireTime+0x40>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <prvGetNextExpireTime+0x16>
 8004d12:	2201      	movs	r2, #1
 8004d14:	e000      	b.n	8004d18 <prvGetNextExpireTime+0x18>
 8004d16:	2200      	movs	r2, #0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <prvGetNextExpireTime+0x40>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e001      	b.n	8004d34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	20000f30 	.word	0x20000f30

08004d44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d4c:	f7ff fa6a 	bl	8004224 <xTaskGetTickCount>
 8004d50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d52:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <prvSampleTimeNow+0x3c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d205      	bcs.n	8004d68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d5c:	f000 f93a 	bl	8004fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <prvSampleTimeNow+0x3c>)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d74:	68fb      	ldr	r3, [r7, #12]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000f40 	.word	0x20000f40

08004d84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d812      	bhi.n	8004dd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e01b      	b.n	8004df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dbe:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <prvInsertTimerInActiveList+0x7c>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe f9c1 	bl	8003150 <vListInsert>
 8004dce:	e012      	b.n	8004df6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d206      	bcs.n	8004de6 <prvInsertTimerInActiveList+0x62>
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e007      	b.n	8004df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004de6:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <prvInsertTimerInActiveList+0x80>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fe f9ad 	bl	8003150 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004df6:	697b      	ldr	r3, [r7, #20]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000f34 	.word	0x20000f34
 8004e04:	20000f30 	.word	0x20000f30

08004e08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	@ 0x38
 8004e0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e0e:	e0ce      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da19      	bge.n	8004e4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	3304      	adds	r3, #4
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	61fb      	str	r3, [r7, #28]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e40:	6850      	ldr	r0, [r2, #4]
 8004e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e44:	6892      	ldr	r2, [r2, #8]
 8004e46:	4611      	mov	r1, r2
 8004e48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f2c0 80ae 	blt.w	8004fae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	3304      	adds	r3, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe f9ac 	bl	80031c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e68:	463b      	mov	r3, r7
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff6a 	bl	8004d44 <prvSampleTimeNow>
 8004e70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	f200 8097 	bhi.w	8004fa8 <prvProcessReceivedCommands+0x1a0>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <prvProcessReceivedCommands+0x78>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004f1f 	.word	0x08004f1f
 8004e90:	08004f33 	.word	0x08004f33
 8004e94:	08004f7f 	.word	0x08004f7f
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004ea9 	.word	0x08004ea9
 8004ea0:	08004f1f 	.word	0x08004f1f
 8004ea4:	08004f33 	.word	0x08004f33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	18d1      	adds	r1, r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec8:	f7ff ff5c 	bl	8004d84 <prvInsertTimerInActiveList>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d06c      	beq.n	8004fac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d061      	beq.n	8004fac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	441a      	add	r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004efa:	f7ff fe03 	bl	8004b04 <xTimerGenericCommand>
 8004efe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d152      	bne.n	8004fac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61bb      	str	r3, [r7, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f30:	e03d      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	617b      	str	r3, [r7, #20]
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	e7fd      	b.n	8004f66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	18d1      	adds	r1, r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f78:	f7ff ff04 	bl	8004d84 <prvInsertTimerInActiveList>
					break;
 8004f7c:	e017      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f8e:	f000 fb85 	bl	800569c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f92:	e00c      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fa6:	e002      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <prvProcessReceivedCommands+0x1a6>
					break;
 8004fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fae:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <prvProcessReceivedCommands+0x1c8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1d39      	adds	r1, r7, #4
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fbd6 	bl	8003768 <xQueueReceive>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f47f af26 	bne.w	8004e10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3730      	adds	r7, #48	@ 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000f38 	.word	0x20000f38

08004fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fda:	e049      	b.n	8005070 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe f8e3 	bl	80031c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02f      	beq.n	8005070 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d90e      	bls.n	8005040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800502e:	4b1a      	ldr	r3, [pc, #104]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7fe f889 	bl	8003150 <vListInsert>
 800503e:	e017      	b.n	8005070 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005040:	2300      	movs	r3, #0
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	2100      	movs	r1, #0
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff fd5a 	bl	8004b04 <xTimerGenericCommand>
 8005050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	603b      	str	r3, [r7, #0]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005070:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1b0      	bne.n	8004fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005080:	4b06      	ldr	r3, [pc, #24]	@ (800509c <prvSwitchTimerLists+0xc8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a04      	ldr	r2, [pc, #16]	@ (8005098 <prvSwitchTimerLists+0xc4>)
 8005086:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005088:	4a04      	ldr	r2, [pc, #16]	@ (800509c <prvSwitchTimerLists+0xc8>)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000f30 	.word	0x20000f30
 800509c:	20000f34 	.word	0x20000f34

080050a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050a6:	f000 f929 	bl	80052fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <prvCheckForValidListAndQueue+0x60>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d120      	bne.n	80050f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050b2:	4814      	ldr	r0, [pc, #80]	@ (8005104 <prvCheckForValidListAndQueue+0x64>)
 80050b4:	f7fd fffe 	bl	80030b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050b8:	4813      	ldr	r0, [pc, #76]	@ (8005108 <prvCheckForValidListAndQueue+0x68>)
 80050ba:	f7fd fffb 	bl	80030b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050be:	4b13      	ldr	r3, [pc, #76]	@ (800510c <prvCheckForValidListAndQueue+0x6c>)
 80050c0:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <prvCheckForValidListAndQueue+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050c4:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <prvCheckForValidListAndQueue+0x70>)
 80050c6:	4a10      	ldr	r2, [pc, #64]	@ (8005108 <prvCheckForValidListAndQueue+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050ca:	2300      	movs	r3, #0
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4b11      	ldr	r3, [pc, #68]	@ (8005114 <prvCheckForValidListAndQueue+0x74>)
 80050d0:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <prvCheckForValidListAndQueue+0x78>)
 80050d2:	2110      	movs	r1, #16
 80050d4:	200a      	movs	r0, #10
 80050d6:	f7fe f907 	bl	80032e8 <xQueueGenericCreateStatic>
 80050da:	4603      	mov	r3, r0
 80050dc:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <prvCheckForValidListAndQueue+0x60>)
 80050de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <prvCheckForValidListAndQueue+0x60>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <prvCheckForValidListAndQueue+0x60>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	490b      	ldr	r1, [pc, #44]	@ (800511c <prvCheckForValidListAndQueue+0x7c>)
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fd2c 	bl	8003b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050f4:	f000 f932 	bl	800535c <vPortExitCritical>
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000f38 	.word	0x20000f38
 8005104:	20000f08 	.word	0x20000f08
 8005108:	20000f1c 	.word	0x20000f1c
 800510c:	20000f30 	.word	0x20000f30
 8005110:	20000f34 	.word	0x20000f34
 8005114:	20000fe4 	.word	0x20000fe4
 8005118:	20000f44 	.word	0x20000f44
 800511c:	08005b0c 	.word	0x08005b0c

08005120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3b04      	subs	r3, #4
 8005130:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b04      	subs	r3, #4
 800513e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b04      	subs	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005150:	4a08      	ldr	r2, [pc, #32]	@ (8005174 <pxPortInitialiseStack+0x54>)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b14      	subs	r3, #20
 800515a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3b20      	subs	r3, #32
 8005166:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	08005179 	.word	0x08005179

08005178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005182:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <prvTaskExitError+0x54>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d00b      	beq.n	80051a4 <prvTaskExitError+0x2c>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <prvTaskExitError+0x28>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60bb      	str	r3, [r7, #8]
}
 80051b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051b8:	bf00      	nop
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0fc      	beq.n	80051ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <pxCurrentTCBConst2>)
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	6808      	ldr	r0, [r1, #0]
 80051d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051da:	f380 8809 	msr	PSP, r0
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80051ee:	4770      	bx	lr

080051f0 <pxCurrentTCBConst2>:
 80051f0:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80051f8:	4806      	ldr	r0, [pc, #24]	@ (8005214 <prvPortStartFirstTask+0x1c>)
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f380 8808 	msr	MSP, r0
 8005202:	b662      	cpsie	i
 8005204:	b661      	cpsie	f
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	df00      	svc	0
 8005210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005212:	bf00      	nop
 8005214:	e000ed08 	.word	0xe000ed08

08005218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800521e:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <xPortStartScheduler+0xd0>)
 8005220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	22ff      	movs	r2, #255	@ 0xff
 800522e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4b2a      	ldr	r3, [pc, #168]	@ (80052ec <xPortStartScheduler+0xd4>)
 8005244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005246:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005248:	2207      	movs	r2, #7
 800524a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800524c:	e009      	b.n	8005262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800524e:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	b2db      	uxtb	r3, r3
 8005260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d0ef      	beq.n	800524e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800526e:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1c3 0307 	rsb	r3, r3, #7
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00b      	beq.n	8005292 <xPortStartScheduler+0x7a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60bb      	str	r3, [r7, #8]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005292:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <xPortStartScheduler+0xd8>)
 800529a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800529c:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <xPortStartScheduler+0xd8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a4:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <xPortStartScheduler+0xd8>)
 80052a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0f      	ldr	r2, [pc, #60]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052bc:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052c8:	f000 f8b8 	bl	800543c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <xPortStartScheduler+0xe0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052d2:	f7ff ff91 	bl	80051f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052d6:	f7ff f86d 	bl	80043b4 <vTaskSwitchContext>
	prvTaskExitError();
 80052da:	f7ff ff4d 	bl	8005178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000e400 	.word	0xe000e400
 80052ec:	20001034 	.word	0x20001034
 80052f0:	20001038 	.word	0x20001038
 80052f4:	e000ed20 	.word	0xe000ed20
 80052f8:	2000000c 	.word	0x2000000c

080052fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
}
 8005314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005316:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <vPortEnterCritical+0x58>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <vPortEnterCritical+0x58>)
 800531e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <vPortEnterCritical+0x58>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d110      	bne.n	800534a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <vPortEnterCritical+0x5c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <vPortEnterCritical+0x4e>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	603b      	str	r3, [r7, #0]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <vPortEnterCritical+0x4a>
	}
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	2000000c 	.word	0x2000000c
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <vPortExitCritical+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <vPortExitCritical+0x26>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <vPortExitCritical+0x50>)
 800538a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <vPortExitCritical+0x50>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <vPortExitCritical+0x44>
 8005394:	2300      	movs	r3, #0
 8005396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	2000000c 	.word	0x2000000c

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053c0:	6010      	str	r0, [r2, #0]
 80053c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053ca:	f380 8811 	msr	BASEPRI, r0
 80053ce:	f7fe fff1 	bl	80043b4 <vTaskSwitchContext>
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053e6:	f380 8809 	msr	PSP, r0
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	4770      	bx	lr

080053f0 <pxCurrentTCBConst>:
 80053f0:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005412:	f7fe ff15 	bl	8004240 <xTaskIncrementTick>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <xPortSysTickHandler+0x40>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f383 8811 	msr	BASEPRI, r3
}
 800542e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005440:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x30>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <vPortSetupTimerInterrupt+0x38>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vPortSetupTimerInterrupt+0x3c>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vPortSetupTimerInterrupt+0x40>)
 800545a:	3b01      	subs	r3, #1
 800545c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800545e:	4b03      	ldr	r3, [pc, #12]	@ (800546c <vPortSetupTimerInterrupt+0x30>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	e000e010 	.word	0xe000e010
 8005470:	e000e018 	.word	0xe000e018
 8005474:	20000000 	.word	0x20000000
 8005478:	10624dd3 	.word	0x10624dd3
 800547c:	e000e014 	.word	0xe000e014

08005480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005486:	f3ef 8305 	mrs	r3, IPSR
 800548a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b0f      	cmp	r3, #15
 8005490:	d915      	bls.n	80054be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005492:	4a17      	ldr	r2, [pc, #92]	@ (80054f0 <vPortValidateInterruptPriority+0x70>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800549c:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <vPortValidateInterruptPriority+0x74>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	7afa      	ldrb	r2, [r7, #11]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20b      	bcs.n	80054be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	607b      	str	r3, [r7, #4]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054be:	4b0e      	ldr	r3, [pc, #56]	@ (80054f8 <vPortValidateInterruptPriority+0x78>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <vPortValidateInterruptPriority+0x7c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d90b      	bls.n	80054e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <vPortValidateInterruptPriority+0x62>
	}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	e000e3f0 	.word	0xe000e3f0
 80054f4:	20001034 	.word	0x20001034
 80054f8:	e000ed0c 	.word	0xe000ed0c
 80054fc:	20001038 	.word	0x20001038

08005500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800550c:	f7fe fdde 	bl	80040cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005510:	4b5c      	ldr	r3, [pc, #368]	@ (8005684 <pvPortMalloc+0x184>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005518:	f000 f924 	bl	8005764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800551c:	4b5a      	ldr	r3, [pc, #360]	@ (8005688 <pvPortMalloc+0x188>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 8095 	bne.w	8005654 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01e      	beq.n	800556e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005530:	2208      	movs	r2, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b00      	cmp	r3, #0
 8005540:	d015      	beq.n	800556e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	3308      	adds	r3, #8
 800554a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <pvPortMalloc+0x6e>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	617b      	str	r3, [r7, #20]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d06f      	beq.n	8005654 <pvPortMalloc+0x154>
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <pvPortMalloc+0x18c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d86a      	bhi.n	8005654 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <pvPortMalloc+0x190>)
 8005580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005582:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <pvPortMalloc+0x190>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005588:	e004      	b.n	8005594 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <pvPortMalloc+0xa6>
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f1      	bne.n	800558a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055a6:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <pvPortMalloc+0x184>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d051      	beq.n	8005654 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2208      	movs	r2, #8
 80055b6:	4413      	add	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	2308      	movs	r3, #8
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d920      	bls.n	8005614 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <pvPortMalloc+0xfc>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	613b      	str	r3, [r7, #16]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f000 f90a 	bl	8005828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005614:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <pvPortMalloc+0x18c>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <pvPortMalloc+0x18c>)
 8005620:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005622:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <pvPortMalloc+0x18c>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <pvPortMalloc+0x194>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d203      	bcs.n	8005636 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <pvPortMalloc+0x18c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <pvPortMalloc+0x194>)
 8005634:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <pvPortMalloc+0x188>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	431a      	orrs	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800564a:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <pvPortMalloc+0x198>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a11      	ldr	r2, [pc, #68]	@ (8005698 <pvPortMalloc+0x198>)
 8005652:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005654:	f7fe fd48 	bl	80040e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <pvPortMalloc+0x17a>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <pvPortMalloc+0x176>
	return pvReturn;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3728      	adds	r7, #40	@ 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20001c44 	.word	0x20001c44
 8005688:	20001c58 	.word	0x20001c58
 800568c:	20001c48 	.word	0x20001c48
 8005690:	20001c3c 	.word	0x20001c3c
 8005694:	20001c4c 	.word	0x20001c4c
 8005698:	20001c50 	.word	0x20001c50

0800569c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04f      	beq.n	800574e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ae:	2308      	movs	r3, #8
 80056b0:	425b      	negs	r3, r3
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <vPortFree+0x46>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60fb      	str	r3, [r7, #12]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <vPortFree+0x66>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <vPortFree+0xbc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <vPortFree+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005728:	f7fe fcd0 	bl	80040cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <vPortFree+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4413      	add	r3, r2
 8005736:	4a09      	ldr	r2, [pc, #36]	@ (800575c <vPortFree+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573a:	6938      	ldr	r0, [r7, #16]
 800573c:	f000 f874 	bl	8005828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <vPortFree+0xc4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <vPortFree+0xc4>)
 8005748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800574a:	f7fe fccd 	bl	80040e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20001c58 	.word	0x20001c58
 800575c:	20001c48 	.word	0x20001c48
 8005760:	20001c54 	.word	0x20001c54

08005764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800576a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800576e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005770:	4b27      	ldr	r3, [pc, #156]	@ (8005810 <prvHeapInit+0xac>)
 8005772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3307      	adds	r3, #7
 8005782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0307 	bic.w	r3, r3, #7
 800578a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	4a1f      	ldr	r2, [pc, #124]	@ (8005810 <prvHeapInit+0xac>)
 8005794:	4413      	add	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800579c:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <prvHeapInit+0xb0>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005814 <prvHeapInit+0xb0>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057b0:	2208      	movs	r2, #8
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <prvHeapInit+0xb4>)
 80057c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057c6:	4b14      	ldr	r3, [pc, #80]	@ (8005818 <prvHeapInit+0xb4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ce:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <prvHeapInit+0xb4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <prvHeapInit+0xb4>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <prvHeapInit+0xb8>)
 80057f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <prvHeapInit+0xbc>)
 80057fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <prvHeapInit+0xc0>)
 80057fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000103c 	.word	0x2000103c
 8005814:	20001c3c 	.word	0x20001c3c
 8005818:	20001c44 	.word	0x20001c44
 800581c:	20001c4c 	.word	0x20001c4c
 8005820:	20001c48 	.word	0x20001c48
 8005824:	20001c58 	.word	0x20001c58

08005828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <prvInsertBlockIntoFreeList+0xa8>)
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e002      	b.n	800583c <prvInsertBlockIntoFreeList+0x14>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d8f7      	bhi.n	8005836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4413      	add	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d108      	bne.n	800586a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d118      	bne.n	80058b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <prvInsertBlockIntoFreeList+0xac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d00d      	beq.n	80058a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e008      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <prvInsertBlockIntoFreeList+0xac>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e003      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d002      	beq.n	80058c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20001c3c 	.word	0x20001c3c
 80058d4:	20001c44 	.word	0x20001c44

080058d8 <memset>:
 80058d8:	4603      	mov	r3, r0
 80058da:	4402      	add	r2, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <_reclaim_reent>:
 80058e8:	4b2d      	ldr	r3, [pc, #180]	@ (80059a0 <_reclaim_reent+0xb8>)
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4604      	mov	r4, r0
 80058f0:	4283      	cmp	r3, r0
 80058f2:	d053      	beq.n	800599c <_reclaim_reent+0xb4>
 80058f4:	69c3      	ldr	r3, [r0, #28]
 80058f6:	b31b      	cbz	r3, 8005940 <_reclaim_reent+0x58>
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	b163      	cbz	r3, 8005916 <_reclaim_reent+0x2e>
 80058fc:	2500      	movs	r5, #0
 80058fe:	69e3      	ldr	r3, [r4, #28]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	5959      	ldr	r1, [r3, r5]
 8005904:	b9b1      	cbnz	r1, 8005934 <_reclaim_reent+0x4c>
 8005906:	3504      	adds	r5, #4
 8005908:	2d80      	cmp	r5, #128	@ 0x80
 800590a:	d1f8      	bne.n	80058fe <_reclaim_reent+0x16>
 800590c:	69e3      	ldr	r3, [r4, #28]
 800590e:	4620      	mov	r0, r4
 8005910:	68d9      	ldr	r1, [r3, #12]
 8005912:	f000 f87b 	bl	8005a0c <_free_r>
 8005916:	69e3      	ldr	r3, [r4, #28]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	b111      	cbz	r1, 8005922 <_reclaim_reent+0x3a>
 800591c:	4620      	mov	r0, r4
 800591e:	f000 f875 	bl	8005a0c <_free_r>
 8005922:	69e3      	ldr	r3, [r4, #28]
 8005924:	689d      	ldr	r5, [r3, #8]
 8005926:	b15d      	cbz	r5, 8005940 <_reclaim_reent+0x58>
 8005928:	4629      	mov	r1, r5
 800592a:	4620      	mov	r0, r4
 800592c:	682d      	ldr	r5, [r5, #0]
 800592e:	f000 f86d 	bl	8005a0c <_free_r>
 8005932:	e7f8      	b.n	8005926 <_reclaim_reent+0x3e>
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f868 	bl	8005a0c <_free_r>
 800593c:	4631      	mov	r1, r6
 800593e:	e7e1      	b.n	8005904 <_reclaim_reent+0x1c>
 8005940:	6961      	ldr	r1, [r4, #20]
 8005942:	b111      	cbz	r1, 800594a <_reclaim_reent+0x62>
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f861 	bl	8005a0c <_free_r>
 800594a:	69e1      	ldr	r1, [r4, #28]
 800594c:	b111      	cbz	r1, 8005954 <_reclaim_reent+0x6c>
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f85c 	bl	8005a0c <_free_r>
 8005954:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005956:	b111      	cbz	r1, 800595e <_reclaim_reent+0x76>
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f857 	bl	8005a0c <_free_r>
 800595e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005960:	b111      	cbz	r1, 8005968 <_reclaim_reent+0x80>
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f852 	bl	8005a0c <_free_r>
 8005968:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800596a:	b111      	cbz	r1, 8005972 <_reclaim_reent+0x8a>
 800596c:	4620      	mov	r0, r4
 800596e:	f000 f84d 	bl	8005a0c <_free_r>
 8005972:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005974:	b111      	cbz	r1, 800597c <_reclaim_reent+0x94>
 8005976:	4620      	mov	r0, r4
 8005978:	f000 f848 	bl	8005a0c <_free_r>
 800597c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800597e:	b111      	cbz	r1, 8005986 <_reclaim_reent+0x9e>
 8005980:	4620      	mov	r0, r4
 8005982:	f000 f843 	bl	8005a0c <_free_r>
 8005986:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005988:	b111      	cbz	r1, 8005990 <_reclaim_reent+0xa8>
 800598a:	4620      	mov	r0, r4
 800598c:	f000 f83e 	bl	8005a0c <_free_r>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	b11b      	cbz	r3, 800599c <_reclaim_reent+0xb4>
 8005994:	4620      	mov	r0, r4
 8005996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800599a:	4718      	bx	r3
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop
 80059a0:	20000010 	.word	0x20000010

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	2600      	movs	r6, #0
 80059a8:	4d0c      	ldr	r5, [pc, #48]	@ (80059dc <__libc_init_array+0x38>)
 80059aa:	4c0d      	ldr	r4, [pc, #52]	@ (80059e0 <__libc_init_array+0x3c>)
 80059ac:	1b64      	subs	r4, r4, r5
 80059ae:	10a4      	asrs	r4, r4, #2
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	f000 f87e 	bl	8005ab4 <_init>
 80059b8:	2600      	movs	r6, #0
 80059ba:	4d0a      	ldr	r5, [pc, #40]	@ (80059e4 <__libc_init_array+0x40>)
 80059bc:	4c0a      	ldr	r4, [pc, #40]	@ (80059e8 <__libc_init_array+0x44>)
 80059be:	1b64      	subs	r4, r4, r5
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08005b90 	.word	0x08005b90
 80059e0:	08005b90 	.word	0x08005b90
 80059e4:	08005b90 	.word	0x08005b90
 80059e8:	08005b94 	.word	0x08005b94

080059ec <__retarget_lock_acquire_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_release_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	4291      	cmp	r1, r2
 8005a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <_free_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d040      	beq.n	8005a96 <_free_r+0x8a>
 8005a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a18:	1f0c      	subs	r4, r1, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfb8      	it	lt
 8005a1e:	18e4      	addlt	r4, r4, r3
 8005a20:	f000 f83c 	bl	8005a9c <__malloc_lock>
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <_free_r+0x8c>)
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	b933      	cbnz	r3, 8005a38 <_free_r+0x2c>
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	6014      	str	r4, [r2, #0]
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a34:	f000 b838 	b.w	8005aa8 <__malloc_unlock>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d908      	bls.n	8005a4e <_free_r+0x42>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	1821      	adds	r1, r4, r0
 8005a40:	428b      	cmp	r3, r1
 8005a42:	bf01      	itttt	eq
 8005a44:	6819      	ldreq	r1, [r3, #0]
 8005a46:	685b      	ldreq	r3, [r3, #4]
 8005a48:	1809      	addeq	r1, r1, r0
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	e7ed      	b.n	8005a2a <_free_r+0x1e>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b10b      	cbz	r3, 8005a58 <_free_r+0x4c>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d9fa      	bls.n	8005a4e <_free_r+0x42>
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	1850      	adds	r0, r2, r1
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d10b      	bne.n	8005a78 <_free_r+0x6c>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	4401      	add	r1, r0
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	4283      	cmp	r3, r0
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	d1e0      	bne.n	8005a2e <_free_r+0x22>
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4408      	add	r0, r1
 8005a72:	6010      	str	r0, [r2, #0]
 8005a74:	6053      	str	r3, [r2, #4]
 8005a76:	e7da      	b.n	8005a2e <_free_r+0x22>
 8005a78:	d902      	bls.n	8005a80 <_free_r+0x74>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	e7d6      	b.n	8005a2e <_free_r+0x22>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6054      	str	r4, [r2, #4]
 8005a94:	e7cb      	b.n	8005a2e <_free_r+0x22>
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	20001d98 	.word	0x20001d98

08005a9c <__malloc_lock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__malloc_lock+0x8>)
 8005a9e:	f7ff bfa5 	b.w	80059ec <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20001d94 	.word	0x20001d94

08005aa8 <__malloc_unlock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	@ (8005ab0 <__malloc_unlock+0x8>)
 8005aaa:	f7ff bfa0 	b.w	80059ee <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20001d94 	.word	0x20001d94

08005ab4 <_init>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr

08005ac0 <_fini>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr
